
c:/Users/Nick/Documents/Particle/calendar_irrigator/Calendar_Irrigator/target/3.3.0/photon/Calendar_Irrigator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00007aa4  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  080a7ac0  080a7ac0  00017ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  40024000  080a7ac8  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000d4  20000000  080a7acc  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000092c  200000d8  200000d8  000400d8  2**3
                  ALLOC
  7 .module_info_suffix 00000028  080a7ba0  080a7ba0  00037ba0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  080a7bc8  080a7bc8  00037bc8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0010a124  00000000  00000000  00037bcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000146e6  00000000  00000000  00141cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00020573  00000000  00000000  001563d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002380  00000000  00000000  00176949  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00005dc0  00000000  00000000  00178cc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002b700  00000000  00000000  0017ea89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00037109  00000000  00000000  001aa189  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000c0f8a  00000000  00000000  001e1292  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00006410  00000000  00000000  002a221c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f004 ff99 	bl	80a4f64 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f004 ffa1 	bl	80a4f80 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a7acc 	.word	0x080a7acc
 80a004c:	200000d4 	.word	0x200000d4
 80a0050:	200000d8 	.word	0x200000d8
 80a0054:	20000a04 	.word	0x20000a04
 80a0058:	20000a04 	.word	0x20000a04

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f002 ff47 	bl	80a2ef0 <module_user_init_hook>

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0062:	2500      	movs	r5, #0
 80a0064:	4e05      	ldr	r6, [pc, #20]	; (80a007c <module_user_init+0x20>)
 80a0066:	4c06      	ldr	r4, [pc, #24]	; (80a0080 <module_user_init+0x24>)
 80a0068:	1ba4      	subs	r4, r4, r6
 80a006a:	08a4      	lsrs	r4, r4, #2
 80a006c:	42ac      	cmp	r4, r5
 80a006e:	d100      	bne.n	80a0072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0072:	f856 3b04 	ldr.w	r3, [r6], #4
 80a0076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f7      	b.n	80a006c <module_user_init+0x10>
 80a007c:	080a7a90 	.word	0x080a7a90
 80a0080:	080a7abc 	.word	0x080a7abc

080a0084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0084:	f001 bcde 	b.w	80a1a44 <setup>

080a0088 <module_user_loop>:
}

void module_user_loop() {
 80a0088:	b508      	push	{r3, lr}
    loop();
 80a008a:	f001 fd7f 	bl	80a1b8c <loop>
    _post_loop();
}
 80a008e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0092:	f002 bee5 	b.w	80a2e60 <_post_loop>

080a0096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80a0096:	f002 ba17 	b.w	80a24c8 <malloc>

080a009a <_Znaj>:
 80a009a:	f002 ba15 	b.w	80a24c8 <malloc>

080a009e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 80a009e:	f002 ba1b 	b.w	80a24d8 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr

080a00b2 <_Z12split_stringR6StringcRsS1_>:
//!
//!	@return None.
//
//*****************************************************************************
String split_string(String &str, char delimiter, int16_t &index, int16_t &last_index)
{
 80a00b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a00b4:	460e      	mov	r6, r1
 80a00b6:	4605      	mov	r5, r0
 80a00b8:	4611      	mov	r1, r2
    //  Search for the delimiter position.
    index = str.indexOf(delimiter, index);
 80a00ba:	4630      	mov	r0, r6
 80a00bc:	f9b3 2000 	ldrsh.w	r2, [r3]
{
 80a00c0:	461c      	mov	r4, r3
 80a00c2:	9f06      	ldr	r7, [sp, #24]
    index = str.indexOf(delimiter, index);
 80a00c4:	f002 fbd8 	bl	80a2878 <_ZNK6String7indexOfEcj>
 80a00c8:	b203      	sxth	r3, r0
 80a00ca:	8023      	strh	r3, [r4, #0]
    //  Generate an string from the given indexs values.
    String result = str.substring(last_index, index);
 80a00cc:	4628      	mov	r0, r5
 80a00ce:	f9b7 2000 	ldrsh.w	r2, [r7]
 80a00d2:	4631      	mov	r1, r6
 80a00d4:	f002 fbf0 	bl	80a28b8 <_ZNK6String9substringEjj>
    last_index = ++index;
 80a00d8:	8822      	ldrh	r2, [r4, #0]
    return result;
}
 80a00da:	4628      	mov	r0, r5
    last_index = ++index;
 80a00dc:	3201      	adds	r2, #1
 80a00de:	b212      	sxth	r2, r2
 80a00e0:	8022      	strh	r2, [r4, #0]
 80a00e2:	803a      	strh	r2, [r7, #0]
}
 80a00e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a00e6 <_Z9unix_timeiiiiii>:
//!
//!	@return A unix timestamp corresponding to the parameters passed.
//
//*****************************************************************************
time_t unix_time(int year, int month, int day, int hour, int min, int sec)
{
 80a00e6:	b500      	push	{lr}
 80a00e8:	b08b      	sub	sp, #44	; 0x2c
  struct tm t;
  t.tm_year = year - 1900;
  t.tm_mon = month - 1;
  t.tm_mday = day;
  t.tm_hour = hour;
 80a00ea:	9303      	str	r3, [sp, #12]
  t.tm_min = min;
 80a00ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  t.tm_year = year - 1900;
 80a00ee:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
  t.tm_min = min;
 80a00f2:	9302      	str	r3, [sp, #8]
  t.tm_sec = sec;
 80a00f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  t.tm_year = year - 1900;
 80a00f6:	9006      	str	r0, [sp, #24]
  t.tm_sec = sec;
 80a00f8:	9301      	str	r3, [sp, #4]
  t.tm_isdst = 0;
 80a00fa:	2300      	movs	r3, #0
  t.tm_mon = month - 1;
 80a00fc:	3901      	subs	r1, #1
  return mktime(&t);
 80a00fe:	a801      	add	r0, sp, #4
  t.tm_mday = day;
 80a0100:	e9cd 2104 	strd	r2, r1, [sp, #16]
  t.tm_isdst = 0;
 80a0104:	9309      	str	r3, [sp, #36]	; 0x24
  return mktime(&t);
 80a0106:	f005 f81b 	bl	80a5140 <mktime>
 80a010a:	b00b      	add	sp, #44	; 0x2c
 80a010c:	f85d fb04 	ldr.w	pc, [sp], #4

080a0110 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM13Google_OAuth2FvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE9_M_invokeERKSt9_Any_dataOS1_SH_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a0110:	b470      	push	{r4, r5, r6}
	    return __source._M_access<_Functor*>();
 80a0112:	6803      	ldr	r3, [r0, #0]

      // Call unqualified
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_GLIBCXX20_CONSTEXPR
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
 80a0114:	6809      	ldr	r1, [r1, #0]
  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    {
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
 80a0116:	685c      	ldr	r4, [r3, #4]
 80a0118:	689d      	ldr	r5, [r3, #8]
 80a011a:	1066      	asrs	r6, r4, #1
 80a011c:	eb05 0064 	add.w	r0, r5, r4, asr #1
 80a0120:	07e4      	lsls	r4, r4, #31
 80a0122:	bf48      	it	mi
 80a0124:	59ac      	ldrmi	r4, [r5, r6]
 80a0126:	681b      	ldr	r3, [r3, #0]
 80a0128:	6812      	ldr	r2, [r2, #0]
 80a012a:	bf48      	it	mi
 80a012c:	58e3      	ldrmi	r3, [r4, r3]
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
 80a012e:	bc70      	pop	{r4, r5, r6}
 80a0130:	4718      	bx	r3

080a0132 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM13Google_OAuth2FvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
	switch (__op)
 80a0132:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80a0134:	b538      	push	{r3, r4, r5, lr}
 80a0136:	4604      	mov	r4, r0
	switch (__op)
 80a0138:	d102      	bne.n	80a0140 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM13Google_OAuth2FvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
 80a013a:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
 80a013c:	6023      	str	r3, [r4, #0]
	}
 80a013e:	e003      	b.n	80a0148 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM13Google_OAuth2FvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
	  switch (__op)
 80a0140:	2a02      	cmp	r2, #2
 80a0142:	d003      	beq.n	80a014c <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM13Google_OAuth2FvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1a>
 80a0144:	2a03      	cmp	r2, #3
 80a0146:	d00d      	beq.n	80a0164 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM13Google_OAuth2FvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x32>
      }
 80a0148:	2000      	movs	r0, #0
 80a014a:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80a014c:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
 80a014e:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a0150:	f7ff ffa1 	bl	80a0096 <_Znwj>
 80a0154:	4603      	mov	r3, r0
 80a0156:	2800      	cmp	r0, #0
 80a0158:	d0f0      	beq.n	80a013c <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM13Google_OAuth2FvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
 80a015a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80a015e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80a0162:	e7eb      	b.n	80a013c <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM13Google_OAuth2FvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
 80a0164:	6800      	ldr	r0, [r0, #0]
 80a0166:	2800      	cmp	r0, #0
 80a0168:	d0ee      	beq.n	80a0148 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM13Google_OAuth2FvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
 80a016a:	210c      	movs	r1, #12
 80a016c:	f7ff ff97 	bl	80a009e <_ZdlPvj>
 80a0170:	e7ea      	b.n	80a0148 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM13Google_OAuth2FvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
	...

080a0174 <_ZN10CloudClass7publishEPKcS1_.isra.0>:

inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
 80a0174:	b513      	push	{r0, r1, r4, lr}
 80a0176:	4604      	mov	r4, r0
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 80a0178:	4b04      	ldr	r3, [pc, #16]	; (80a018c <_ZN10CloudClass7publishEPKcS1_.isra.0+0x18>)
 80a017a:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a017c:	f88d 3000 	strb.w	r3, [sp]
 80a0180:	233c      	movs	r3, #60	; 0x3c
 80a0182:	f003 f847 	bl	80a3214 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    return publish(name, data, PUBLIC);
}
 80a0186:	4620      	mov	r0, r4
 80a0188:	b002      	add	sp, #8
 80a018a:	bd10      	pop	{r4, pc}
 80a018c:	200000d8 	.word	0x200000d8

080a0190 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 80a0190:	b510      	push	{r4, lr}
      if (_M_manager)
 80a0192:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 80a0194:	4604      	mov	r4, r0
      if (_M_manager)
 80a0196:	b113      	cbz	r3, 80a019e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0198:	2203      	movs	r2, #3
 80a019a:	4601      	mov	r1, r0
 80a019c:	4798      	blx	r3
    }
 80a019e:	4620      	mov	r0, r4
 80a01a0:	bd10      	pop	{r4, pc}

080a01a2 <_ZN13Google_OAuth29time_leftEv>:
//!
//! @return false if no time left, true if there is still time left.
//
//*****************************************************************************
bool Google_OAuth2::time_left(void)
{
 80a01a2:	b570      	push	{r4, r5, r6, lr}
 80a01a4:	4605      	mov	r5, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a01a6:	f001 ff89 	bl	80a20bc <HAL_Timer_Get_Milli_Seconds>
    uint32_t time_elapsed = millis() - time;
 80a01aa:	f8d5 42b0 	ldr.w	r4, [r5, #688]	; 0x2b0
 80a01ae:	4606      	mov	r6, r0
 80a01b0:	f001 ff84 	bl	80a20bc <HAL_Timer_Get_Milli_Seconds>
    time = millis();
    life_time -= time_elapsed;
 80a01b4:	f8d5 32b4 	ldr.w	r3, [r5, #692]	; 0x2b4
    time = millis();
 80a01b8:	f8c5 02b0 	str.w	r0, [r5, #688]	; 0x2b0
    life_time -= time_elapsed;
 80a01bc:	441c      	add	r4, r3
 80a01be:	1ba0      	subs	r0, r4, r6
    return (life_time > 0);
}
 80a01c0:	2800      	cmp	r0, #0
    life_time -= time_elapsed;
 80a01c2:	f8c5 02b4 	str.w	r0, [r5, #692]	; 0x2b4
}
 80a01c6:	bfd4      	ite	le
 80a01c8:	2000      	movle	r0, #0
 80a01ca:	2001      	movgt	r0, #1
 80a01cc:	bd70      	pop	{r4, r5, r6, pc}

080a01ce <_ZN13Google_OAuth213authenticatedEv>:
    }
    
    //char  statusText[64];
    //sprintf(statusText, "Time Remaining %ld", life_time);
    //DEBUG_PRINT(statusText);
    return state == OAuth2_State::REFRESH_TOKEN;
 80a01ce:	f890 02be 	ldrb.w	r0, [r0, #702]	; 0x2be
    
}
 80a01d2:	1e83      	subs	r3, r0, #2
 80a01d4:	4258      	negs	r0, r3
 80a01d6:	4158      	adcs	r0, r3
 80a01d8:	4770      	bx	lr

080a01da <_ZN13Google_OAuth210authorizedEv>:
//! @return false if not authorized, true if authorized.
//
//*****************************************************************************
bool Google_OAuth2::authorized(void)
{
    return state == OAuth2_State::AUTHORIZED;
 80a01da:	f890 02be 	ldrb.w	r0, [r0, #702]	; 0x2be
}
 80a01de:	1ec3      	subs	r3, r0, #3
 80a01e0:	4258      	negs	r0, r3
 80a01e2:	4158      	adcs	r0, r3
 80a01e4:	4770      	bx	lr

080a01e6 <_ZN13Google_OAuth26failedEv>:
//! @return false if did not fail, true if failed.
//
//*****************************************************************************
bool Google_OAuth2::failed(void)
{
    return state == OAuth2_State::FAILED;
 80a01e6:	f890 02be 	ldrb.w	r0, [r0, #702]	; 0x2be
    
}
 80a01ea:	1f43      	subs	r3, r0, #5
 80a01ec:	4258      	negs	r0, r3
 80a01ee:	4158      	adcs	r0, r3
 80a01f0:	4770      	bx	lr

080a01f2 <_ZN13Google_OAuth211write_tokenEv>:
//!
//! @return None.
//
//*****************************************************************************
void Google_OAuth2::write_token(void)
{
 80a01f2:	b598      	push	{r3, r4, r7, lr}
    
    
    int n = refresh_token.length();
 
    // declaring character array
    char token[n + 1];
 80a01f4:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
{
 80a01f8:	af00      	add	r7, sp, #0
    char token[n + 1];
 80a01fa:	3308      	adds	r3, #8
 80a01fc:	f023 0307 	bic.w	r3, r3, #7
 80a0200:	ebad 0d03 	sub.w	sp, sp, r3
{
 80a0204:	4604      	mov	r4, r0
 
    // copying the contents of the
    // string to char array
    strcpy(token, refresh_token.c_str());
 80a0206:	f8d0 129c 	ldr.w	r1, [r0, #668]	; 0x29c
 80a020a:	4668      	mov	r0, sp
 80a020c:	f005 f977 	bl	80a54fe <strcpy>
    //    cout << token[i];
    
    
    
    //  Write 0 to indicate "available".
    Refresh_Token.available = 0;
 80a0210:	2300      	movs	r3, #0
    //delay(1000);
    //DEBUG_PRINT("write token");

    //  Copy the token into the Refresh Token struct.
    strlcpy_P(Refresh_Token.data, token, sizeof(Refresh_Token.data));
 80a0212:	4669      	mov	r1, sp
    Refresh_Token.available = 0;
 80a0214:	7223      	strb	r3, [r4, #8]
    strlcpy_P(Refresh_Token.data, token, sizeof(Refresh_Token.data));
 80a0216:	f44f 7200 	mov.w	r2, #512	; 0x200
 80a021a:	f104 0009 	add.w	r0, r4, #9
 80a021e:	f005 fee5 	bl	80a5fec <strncpy>
    EEPROM.put(TOKEN_ADDRESS, Refresh_Token);
 80a0222:	f003 fcb5 	bl	80a3b90 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 80a0226:	f240 2201 	movw	r2, #513	; 0x201
 80a022a:	6820      	ldr	r0, [r4, #0]
 80a022c:	f104 0108 	add.w	r1, r4, #8
 80a0230:	f001 ff5c 	bl	80a20ec <HAL_EEPROM_Put>
    
    
}
 80a0234:	46bd      	mov	sp, r7
 80a0236:	bd98      	pop	{r3, r4, r7, pc}

080a0238 <_ZN13Google_OAuth210read_tokenEv>:
//!
//! @return false if token not available, true if token available.
//
//*****************************************************************************
bool Google_OAuth2::read_token(void)
{
 80a0238:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a023a:	4604      	mov	r4, r0
    EEPROM.get(TOKEN_ADDRESS, Refresh_Token);
 80a023c:	f003 fca8 	bl	80a3b90 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 80a0240:	f240 2201 	movw	r2, #513	; 0x201
 80a0244:	6820      	ldr	r0, [r4, #0]
 80a0246:	f104 0108 	add.w	r1, r4, #8
 80a024a:	f001 ff47 	bl	80a20dc <HAL_EEPROM_Get>
  
    //  If 1, token not available in memory.
    //  If 0, token available in memory.
    if (Refresh_Token.available == 1)
 80a024e:	7a23      	ldrb	r3, [r4, #8]
 80a0250:	2b01      	cmp	r3, #1
 80a0252:	d00f      	beq.n	80a0274 <_ZN13Google_OAuth210read_tokenEv+0x3c>
    {
        return false;
    }
    //  Access the raw token data from the Refresh Token struct
    //  and convert it into an string object.
    refresh_token = String(Refresh_Token.data);
 80a0254:	f104 0109 	add.w	r1, r4, #9
 80a0258:	4668      	mov	r0, sp
 80a025a:	f002 fa21 	bl	80a26a0 <_ZN6StringC1EPK19__FlashStringHelper>
 80a025e:	4669      	mov	r1, sp
 80a0260:	f504 7027 	add.w	r0, r4, #668	; 0x29c
 80a0264:	f002 fa66 	bl	80a2734 <_ZN6StringaSEOS_>
 80a0268:	4668      	mov	r0, sp
 80a026a:	f002 f9cf 	bl	80a260c <_ZN6StringD1Ev>
 80a026e:	2001      	movs	r0, #1
    //delay(1000);
    //DEBUG_PRINT("token read from struct next");
    //delay(1000);
    //DEBUG_PRINT(refresh_token);
    return true;
}
 80a0270:	b004      	add	sp, #16
 80a0272:	bd10      	pop	{r4, pc}
        return false;
 80a0274:	2000      	movs	r0, #0
 80a0276:	e7fb      	b.n	80a0270 <_ZN13Google_OAuth210read_tokenEv+0x38>

080a0278 <_ZN13Google_OAuth2C1ERK6StringS2_>:
Google_OAuth2::Google_OAuth2(const String &client_id, const String &client_secret)
 80a0278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    : CLIENT_ID(client_id), CLIENT_SECRET(client_secret)
 80a027a:	2500      	movs	r5, #0
 80a027c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80a0280:	e9c0 5300 	strd	r5, r3, [r0]
            //  if 1, token is not available.
            uint8_t available;
            //  Raw token data (max. 60 characters).
            char data[512];
            //  Default constructor.
            oauth2_token() : available(1), data("Empty") {};
 80a0284:	2301      	movs	r3, #1
Google_OAuth2::Google_OAuth2(const String &client_id, const String &client_secret)
 80a0286:	4604      	mov	r4, r0
 80a0288:	460f      	mov	r7, r1
 80a028a:	4616      	mov	r6, r2
 80a028c:	7203      	strb	r3, [r0, #8]
 80a028e:	4b29      	ldr	r3, [pc, #164]	; (80a0334 <_ZN13Google_OAuth2C1ERK6StringS2_+0xbc>)
 80a0290:	4629      	mov	r1, r5
 80a0292:	681a      	ldr	r2, [r3, #0]
 80a0294:	889b      	ldrh	r3, [r3, #4]
 80a0296:	f8c0 2009 	str.w	r2, [r0, #9]
 80a029a:	f8a0 300d 	strh.w	r3, [r0, #13]
 80a029e:	f44f 72fd 	mov.w	r2, #506	; 0x1fa
 80a02a2:	300f      	adds	r0, #15
 80a02a4:	f004 fe6c 	bl	80a4f80 <memset>
    : CLIENT_ID(client_id), CLIENT_SECRET(client_secret)
 80a02a8:	4923      	ldr	r1, [pc, #140]	; (80a0338 <_ZN13Google_OAuth2C1ERK6StringS2_+0xc0>)
 80a02aa:	f504 7003 	add.w	r0, r4, #524	; 0x20c
 80a02ae:	f002 f9f7 	bl	80a26a0 <_ZN6StringC1EPK19__FlashStringHelper>
 80a02b2:	4922      	ldr	r1, [pc, #136]	; (80a033c <_ZN13Google_OAuth2C1ERK6StringS2_+0xc4>)
 80a02b4:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 80a02b8:	f002 f9f2 	bl	80a26a0 <_ZN6StringC1EPK19__FlashStringHelper>
 80a02bc:	4920      	ldr	r1, [pc, #128]	; (80a0340 <_ZN13Google_OAuth2C1ERK6StringS2_+0xc8>)
 80a02be:	f504 700b 	add.w	r0, r4, #556	; 0x22c
 80a02c2:	f002 f9ed 	bl	80a26a0 <_ZN6StringC1EPK19__FlashStringHelper>
 80a02c6:	4639      	mov	r1, r7
 80a02c8:	f504 700f 	add.w	r0, r4, #572	; 0x23c
 80a02cc:	f002 fa27 	bl	80a271e <_ZN6StringC1ERKS_>
 80a02d0:	4631      	mov	r1, r6
 80a02d2:	f504 7013 	add.w	r0, r4, #588	; 0x24c
 80a02d6:	f002 fa22 	bl	80a271e <_ZN6StringC1ERKS_>
 80a02da:	491a      	ldr	r1, [pc, #104]	; (80a0344 <_ZN13Google_OAuth2C1ERK6StringS2_+0xcc>)
 80a02dc:	f504 7017 	add.w	r0, r4, #604	; 0x25c
 80a02e0:	f002 f9de 	bl	80a26a0 <_ZN6StringC1EPK19__FlashStringHelper>
 80a02e4:	4917      	ldr	r1, [pc, #92]	; (80a0344 <_ZN13Google_OAuth2C1ERK6StringS2_+0xcc>)
 80a02e6:	f504 701b 	add.w	r0, r4, #620	; 0x26c
 80a02ea:	f002 f9d9 	bl	80a26a0 <_ZN6StringC1EPK19__FlashStringHelper>
 80a02ee:	4915      	ldr	r1, [pc, #84]	; (80a0344 <_ZN13Google_OAuth2C1ERK6StringS2_+0xcc>)
 80a02f0:	f504 701f 	add.w	r0, r4, #636	; 0x27c
 80a02f4:	f002 f9d4 	bl	80a26a0 <_ZN6StringC1EPK19__FlashStringHelper>
 80a02f8:	4912      	ldr	r1, [pc, #72]	; (80a0344 <_ZN13Google_OAuth2C1ERK6StringS2_+0xcc>)
 80a02fa:	f504 7023 	add.w	r0, r4, #652	; 0x28c
 80a02fe:	f002 f9cf 	bl	80a26a0 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0302:	4910      	ldr	r1, [pc, #64]	; (80a0344 <_ZN13Google_OAuth2C1ERK6StringS2_+0xcc>)
 80a0304:	f504 7027 	add.w	r0, r4, #668	; 0x29c
 80a0308:	f002 f9ca 	bl	80a26a0 <_ZN6StringC1EPK19__FlashStringHelper>
 80a030c:	490d      	ldr	r1, [pc, #52]	; (80a0344 <_ZN13Google_OAuth2C1ERK6StringS2_+0xcc>)
 80a030e:	f504 7031 	add.w	r0, r4, #708	; 0x2c4
 80a0312:	f002 f9c5 	bl	80a26a0 <_ZN6StringC1EPK19__FlashStringHelper>
    if (read_token())
 80a0316:	4620      	mov	r0, r4
 80a0318:	f7ff ff8e 	bl	80a0238 <_ZN13Google_OAuth210read_tokenEv>
        state = OAuth2_State::REQ_USER_CODE;
 80a031c:	42a8      	cmp	r0, r5
 80a031e:	bf14      	ite	ne
 80a0320:	2302      	movne	r3, #2
 80a0322:	462b      	moveq	r3, r5
}
 80a0324:	4620      	mov	r0, r4
 80a0326:	f884 32be 	strb.w	r3, [r4, #702]	; 0x2be
    polling_time = 0;
 80a032a:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
    is_device_subscribed = false;
 80a032e:	f884 52c0 	strb.w	r5, [r4, #704]	; 0x2c0
}
 80a0332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a0334:	080a6ddb 	.word	0x080a6ddb
 80a0338:	080a6a74 	.word	0x080a6a74
 80a033c:	080a6a83 	.word	0x080a6a83
 80a0340:	080a6a93 	.word	0x080a6a93
 80a0344:	080a6b86 	.word	0x080a6b86

080a0348 <_ZN13Google_OAuth211erase_tokenEv>:
//!
//! @return None.
//
//*****************************************************************************
void Google_OAuth2::erase_token(void)
{
 80a0348:	b538      	push	{r3, r4, r5, lr}
    //  Write 1 to indicate "not available".
    Refresh_Token.available = 1;
 80a034a:	4605      	mov	r5, r0
 80a034c:	2301      	movs	r3, #1
{
 80a034e:	4604      	mov	r4, r0
    Refresh_Token.available = 1;
 80a0350:	f805 3f08 	strb.w	r3, [r5, #8]!
    EEPROM.put(TOKEN_ADDRESS, Refresh_Token);
 80a0354:	f003 fc1c 	bl	80a3b90 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 80a0358:	4629      	mov	r1, r5
 80a035a:	6820      	ldr	r0, [r4, #0]
 80a035c:	f240 2201 	movw	r2, #513	; 0x201
}
 80a0360:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a0364:	f001 bec2 	b.w	80a20ec <HAL_EEPROM_Put>

080a0368 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a0368:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a036a:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 80a036c:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 80a036e:	b17c      	cbz	r4, 80a0390 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 80a0370:	6863      	ldr	r3, [r4, #4]
 80a0372:	3b01      	subs	r3, #1
 80a0374:	6063      	str	r3, [r4, #4]
 80a0376:	b95b      	cbnz	r3, 80a0390 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 80a0378:	6823      	ldr	r3, [r4, #0]
 80a037a:	4620      	mov	r0, r4
 80a037c:	689b      	ldr	r3, [r3, #8]
 80a037e:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a0380:	68a3      	ldr	r3, [r4, #8]
 80a0382:	3b01      	subs	r3, #1
 80a0384:	60a3      	str	r3, [r4, #8]
 80a0386:	b91b      	cbnz	r3, 80a0390 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a0388:	6823      	ldr	r3, [r4, #0]
 80a038a:	4620      	mov	r0, r4
 80a038c:	68db      	ldr	r3, [r3, #12]
 80a038e:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 80a0390:	4628      	mov	r0, r5
 80a0392:	bd38      	pop	{r3, r4, r5, pc}

080a0394 <_ZN13Google_OAuth26parserEPKcS1_>:
{
 80a0394:	b5f0      	push	{r4, r5, r6, r7, lr}
    int16_t index = 0, last_index = 0;
 80a0396:	2600      	movs	r6, #0
{
 80a0398:	460d      	mov	r5, r1
 80a039a:	b09b      	sub	sp, #108	; 0x6c
    String str_data = String(data);
 80a039c:	4611      	mov	r1, r2
{
 80a039e:	4604      	mov	r4, r0
    String str_data = String(data);
 80a03a0:	a806      	add	r0, sp, #24
    int16_t index = 0, last_index = 0;
 80a03a2:	f8ad 600c 	strh.w	r6, [sp, #12]
 80a03a6:	f8ad 600e 	strh.w	r6, [sp, #14]
    String str_data = String(data);
 80a03aa:	f002 f979 	bl	80a26a0 <_ZN6StringC1EPK19__FlashStringHelper>
    String str_event = String(event);
 80a03ae:	4629      	mov	r1, r5
 80a03b0:	a80a      	add	r0, sp, #40	; 0x28
    split_string(str_event, '/', index, last_index); // skip deviceID.
 80a03b2:	f10d 050e 	add.w	r5, sp, #14
    String str_event = String(event);
 80a03b6:	f002 f973 	bl	80a26a0 <_ZN6StringC1EPK19__FlashStringHelper>
    split_string(str_event, '/', index, last_index); // skip deviceID.
 80a03ba:	222f      	movs	r2, #47	; 0x2f
 80a03bc:	ab03      	add	r3, sp, #12
 80a03be:	a90a      	add	r1, sp, #40	; 0x28
 80a03c0:	a816      	add	r0, sp, #88	; 0x58
 80a03c2:	9500      	str	r5, [sp, #0]
 80a03c4:	f7ff fe75 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
 80a03c8:	a816      	add	r0, sp, #88	; 0x58
 80a03ca:	f002 f91f 	bl	80a260c <_ZN6StringD1Ev>
    String hook = split_string(str_event, '/', index, last_index);
 80a03ce:	222f      	movs	r2, #47	; 0x2f
 80a03d0:	ab03      	add	r3, sp, #12
 80a03d2:	a90a      	add	r1, sp, #40	; 0x28
 80a03d4:	a80e      	add	r0, sp, #56	; 0x38
 80a03d6:	9500      	str	r5, [sp, #0]
 80a03d8:	f7ff fe6b 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
    String webhook_event_name = split_string(str_event, '/', index, last_index);
 80a03dc:	a90a      	add	r1, sp, #40	; 0x28
 80a03de:	a812      	add	r0, sp, #72	; 0x48
 80a03e0:	222f      	movs	r2, #47	; 0x2f
 80a03e2:	9500      	str	r5, [sp, #0]
 80a03e4:	ab03      	add	r3, sp, #12
 80a03e6:	f7ff fe64 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
    if (hook.equals("hook-response"))
 80a03ea:	4975      	ldr	r1, [pc, #468]	; (80a05c0 <_ZN13Google_OAuth26parserEPKcS1_+0x22c>)
 80a03ec:	a80e      	add	r0, sp, #56	; 0x38
    index = 0, last_index = 0;
 80a03ee:	f8ad 600c 	strh.w	r6, [sp, #12]
 80a03f2:	f8ad 600e 	strh.w	r6, [sp, #14]
    if (hook.equals("hook-response"))
 80a03f6:	f002 fa22 	bl	80a283e <_ZNK6String6equalsEPKc>
 80a03fa:	2800      	cmp	r0, #0
 80a03fc:	f000 80cd 	beq.w	80a059a <_ZN13Google_OAuth26parserEPKcS1_+0x206>
        if (webhook_event_name.equals(EVENT_REQ_USER_CODE))
 80a0400:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 80a0404:	a812      	add	r0, sp, #72	; 0x48
 80a0406:	f002 fa0d 	bl	80a2824 <_ZNK6String6equalsERKS_>
 80a040a:	4607      	mov	r7, r0
 80a040c:	2800      	cmp	r0, #0
 80a040e:	d060      	beq.n	80a04d2 <_ZN13Google_OAuth26parserEPKcS1_+0x13e>
            device_code = split_string(str_data, '~', index, last_index);
 80a0410:	227e      	movs	r2, #126	; 0x7e
 80a0412:	ab03      	add	r3, sp, #12
 80a0414:	a906      	add	r1, sp, #24
 80a0416:	a816      	add	r0, sp, #88	; 0x58
 80a0418:	9500      	str	r5, [sp, #0]
 80a041a:	f7ff fe4a 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
 80a041e:	a916      	add	r1, sp, #88	; 0x58
 80a0420:	f504 7017 	add.w	r0, r4, #604	; 0x25c
 80a0424:	f002 f986 	bl	80a2734 <_ZN6StringaSEOS_>
 80a0428:	a816      	add	r0, sp, #88	; 0x58
 80a042a:	f002 f8ef 	bl	80a260c <_ZN6StringD1Ev>
            user_code = split_string(str_data, '~', index, last_index);
 80a042e:	227e      	movs	r2, #126	; 0x7e
 80a0430:	ab03      	add	r3, sp, #12
 80a0432:	a906      	add	r1, sp, #24
 80a0434:	a816      	add	r0, sp, #88	; 0x58
 80a0436:	9500      	str	r5, [sp, #0]
 80a0438:	f7ff fe3b 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
 80a043c:	a916      	add	r1, sp, #88	; 0x58
 80a043e:	f504 701b 	add.w	r0, r4, #620	; 0x26c
 80a0442:	f002 f977 	bl	80a2734 <_ZN6StringaSEOS_>
 80a0446:	a816      	add	r0, sp, #88	; 0x58
 80a0448:	f002 f8e0 	bl	80a260c <_ZN6StringD1Ev>
            auth_url = split_string(str_data, '~', index, last_index);
 80a044c:	227e      	movs	r2, #126	; 0x7e
 80a044e:	ab03      	add	r3, sp, #12
 80a0450:	a906      	add	r1, sp, #24
 80a0452:	a816      	add	r0, sp, #88	; 0x58
 80a0454:	9500      	str	r5, [sp, #0]
 80a0456:	f7ff fe2c 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
 80a045a:	a916      	add	r1, sp, #88	; 0x58
 80a045c:	f504 701f 	add.w	r0, r4, #636	; 0x27c
 80a0460:	f002 f968 	bl	80a2734 <_ZN6StringaSEOS_>
 80a0464:	a816      	add	r0, sp, #88	; 0x58
 80a0466:	f002 f8d1 	bl	80a260c <_ZN6StringD1Ev>
            life_time = split_string(str_data, '~', index, last_index).toInt() * 1000;
 80a046a:	227e      	movs	r2, #126	; 0x7e
 80a046c:	a906      	add	r1, sp, #24
 80a046e:	ab03      	add	r3, sp, #12
 80a0470:	a816      	add	r0, sp, #88	; 0x58
 80a0472:	9500      	str	r5, [sp, #0]
 80a0474:	f7ff fe1d 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
 80a0478:	a816      	add	r0, sp, #88	; 0x58
 80a047a:	f002 fa3f 	bl	80a28fc <_ZNK6String5toIntEv>
 80a047e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0482:	4358      	muls	r0, r3
 80a0484:	f8c4 02b4 	str.w	r0, [r4, #692]	; 0x2b4
 80a0488:	a816      	add	r0, sp, #88	; 0x58
 80a048a:	f002 f8bf 	bl	80a260c <_ZN6StringD1Ev>
            polling_rate = split_string(str_data, '\0', index, last_index).toInt() * 1000;
 80a048e:	ab03      	add	r3, sp, #12
 80a0490:	4632      	mov	r2, r6
 80a0492:	a906      	add	r1, sp, #24
 80a0494:	a816      	add	r0, sp, #88	; 0x58
 80a0496:	9500      	str	r5, [sp, #0]
 80a0498:	f7ff fe0b 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
 80a049c:	a816      	add	r0, sp, #88	; 0x58
 80a049e:	f002 fa2d 	bl	80a28fc <_ZNK6String5toIntEv>
 80a04a2:	ebc0 1340 	rsb	r3, r0, r0, lsl #5
 80a04a6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80a04aa:	00c0      	lsls	r0, r0, #3
 80a04ac:	f8a4 02bc 	strh.w	r0, [r4, #700]	; 0x2bc
        http_status_code = str_data.substring(13, 16).toInt();
 80a04b0:	a816      	add	r0, sp, #88	; 0x58
 80a04b2:	f002 f8ab 	bl	80a260c <_ZN6StringD1Ev>
    String webhook_event_name = split_string(str_event, '/', index, last_index);
 80a04b6:	a812      	add	r0, sp, #72	; 0x48
 80a04b8:	f002 f8a8 	bl	80a260c <_ZN6StringD1Ev>
    String hook = split_string(str_event, '/', index, last_index);
 80a04bc:	a80e      	add	r0, sp, #56	; 0x38
 80a04be:	f002 f8a5 	bl	80a260c <_ZN6StringD1Ev>
    String str_event = String(event);
 80a04c2:	a80a      	add	r0, sp, #40	; 0x28
 80a04c4:	f002 f8a2 	bl	80a260c <_ZN6StringD1Ev>
    String str_data = String(data);
 80a04c8:	a806      	add	r0, sp, #24
 80a04ca:	f002 f89f 	bl	80a260c <_ZN6StringD1Ev>
}
 80a04ce:	b01b      	add	sp, #108	; 0x6c
 80a04d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if (webhook_event_name.equals(EVENT_POLL_AUTH))
 80a04d2:	f504 7107 	add.w	r1, r4, #540	; 0x21c
 80a04d6:	a812      	add	r0, sp, #72	; 0x48
 80a04d8:	f002 f9a4 	bl	80a2824 <_ZNK6String6equalsERKS_>
 80a04dc:	4606      	mov	r6, r0
 80a04de:	2800      	cmp	r0, #0
 80a04e0:	d041      	beq.n	80a0566 <_ZN13Google_OAuth26parserEPKcS1_+0x1d2>
            access_token = split_string(str_data, '~', index, last_index);
 80a04e2:	227e      	movs	r2, #126	; 0x7e
 80a04e4:	ab03      	add	r3, sp, #12
 80a04e6:	a906      	add	r1, sp, #24
 80a04e8:	a816      	add	r0, sp, #88	; 0x58
 80a04ea:	9500      	str	r5, [sp, #0]
 80a04ec:	f7ff fde1 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
 80a04f0:	a916      	add	r1, sp, #88	; 0x58
 80a04f2:	f504 7023 	add.w	r0, r4, #652	; 0x28c
 80a04f6:	f002 f91d 	bl	80a2734 <_ZN6StringaSEOS_>
 80a04fa:	a816      	add	r0, sp, #88	; 0x58
 80a04fc:	f002 f886 	bl	80a260c <_ZN6StringD1Ev>
            refresh_token = split_string(str_data, '~', index, last_index);
 80a0500:	ab03      	add	r3, sp, #12
 80a0502:	227e      	movs	r2, #126	; 0x7e
 80a0504:	a906      	add	r1, sp, #24
 80a0506:	a816      	add	r0, sp, #88	; 0x58
 80a0508:	9500      	str	r5, [sp, #0]
 80a050a:	f7ff fdd2 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
 80a050e:	a916      	add	r1, sp, #88	; 0x58
 80a0510:	f504 7027 	add.w	r0, r4, #668	; 0x29c
 80a0514:	f002 f90e 	bl	80a2734 <_ZN6StringaSEOS_>
 80a0518:	a816      	add	r0, sp, #88	; 0x58
 80a051a:	f002 f877 	bl	80a260c <_ZN6StringD1Ev>
            delay(1000);
 80a051e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a0522:	f002 fc4d 	bl	80a2dc0 <delay>
            DEBUG_PRINT(refresh_token);
 80a0526:	f8d4 129c 	ldr.w	r1, [r4, #668]	; 0x29c
 80a052a:	a816      	add	r0, sp, #88	; 0x58
 80a052c:	f002 f9ec 	bl	80a2908 <_ZN6String6formatEPKcz>
 80a0530:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80a0532:	4924      	ldr	r1, [pc, #144]	; (80a05c4 <_ZN13Google_OAuth26parserEPKcS1_+0x230>)
 80a0534:	a804      	add	r0, sp, #16
 80a0536:	f7ff fe1d 	bl	80a0174 <_ZN10CloudClass7publishEPKcS1_.isra.0>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a053a:	a805      	add	r0, sp, #20
 80a053c:	f7ff ff14 	bl	80a0368 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0540:	a816      	add	r0, sp, #88	; 0x58
 80a0542:	f002 f863 	bl	80a260c <_ZN6StringD1Ev>
            life_time = split_string(str_data, '\0', index, last_index).toInt() * 1000;
 80a0546:	463a      	mov	r2, r7
 80a0548:	9500      	str	r5, [sp, #0]
 80a054a:	ab03      	add	r3, sp, #12
            life_time = split_string(str_data, '\0', index, last_index).toInt() * 1000;
 80a054c:	a906      	add	r1, sp, #24
 80a054e:	a816      	add	r0, sp, #88	; 0x58
 80a0550:	f7ff fdaf 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
 80a0554:	a816      	add	r0, sp, #88	; 0x58
 80a0556:	f002 f9d1 	bl	80a28fc <_ZNK6String5toIntEv>
 80a055a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a055e:	4358      	muls	r0, r3
 80a0560:	f8c4 02b4 	str.w	r0, [r4, #692]	; 0x2b4
 80a0564:	e7a4      	b.n	80a04b0 <_ZN13Google_OAuth26parserEPKcS1_+0x11c>
        else if (webhook_event_name.equals(EVENT_REFRESH_TOKEN))
 80a0566:	f504 710b 	add.w	r1, r4, #556	; 0x22c
 80a056a:	a812      	add	r0, sp, #72	; 0x48
 80a056c:	f002 f95a 	bl	80a2824 <_ZNK6String6equalsERKS_>
 80a0570:	2800      	cmp	r0, #0
 80a0572:	d0a0      	beq.n	80a04b6 <_ZN13Google_OAuth26parserEPKcS1_+0x122>
            access_token = split_string(str_data, '~', index, last_index);
 80a0574:	227e      	movs	r2, #126	; 0x7e
 80a0576:	ab03      	add	r3, sp, #12
 80a0578:	a906      	add	r1, sp, #24
 80a057a:	a816      	add	r0, sp, #88	; 0x58
 80a057c:	9500      	str	r5, [sp, #0]
 80a057e:	f7ff fd98 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
 80a0582:	a916      	add	r1, sp, #88	; 0x58
 80a0584:	f504 7023 	add.w	r0, r4, #652	; 0x28c
 80a0588:	f002 f8d4 	bl	80a2734 <_ZN6StringaSEOS_>
 80a058c:	a816      	add	r0, sp, #88	; 0x58
 80a058e:	f002 f83d 	bl	80a260c <_ZN6StringD1Ev>
            life_time = split_string(str_data, '\0', index, last_index).toInt() * 1000;
 80a0592:	4632      	mov	r2, r6
 80a0594:	9500      	str	r5, [sp, #0]
 80a0596:	ab03      	add	r3, sp, #12
 80a0598:	e7d8      	b.n	80a054c <_ZN13Google_OAuth26parserEPKcS1_+0x1b8>
    else if (hook.equals("hook-error"))
 80a059a:	490b      	ldr	r1, [pc, #44]	; (80a05c8 <_ZN13Google_OAuth26parserEPKcS1_+0x234>)
 80a059c:	a80e      	add	r0, sp, #56	; 0x38
 80a059e:	f002 f94e 	bl	80a283e <_ZNK6String6equalsEPKc>
 80a05a2:	2800      	cmp	r0, #0
 80a05a4:	d087      	beq.n	80a04b6 <_ZN13Google_OAuth26parserEPKcS1_+0x122>
        http_status_code = str_data.substring(13, 16).toInt();
 80a05a6:	2310      	movs	r3, #16
 80a05a8:	220d      	movs	r2, #13
 80a05aa:	a906      	add	r1, sp, #24
 80a05ac:	a816      	add	r0, sp, #88	; 0x58
 80a05ae:	f002 f983 	bl	80a28b8 <_ZNK6String9substringEjj>
 80a05b2:	a816      	add	r0, sp, #88	; 0x58
 80a05b4:	f002 f9a2 	bl	80a28fc <_ZNK6String5toIntEv>
 80a05b8:	f8a4 02d4 	strh.w	r0, [r4, #724]	; 0x2d4
 80a05bc:	e778      	b.n	80a04b0 <_ZN13Google_OAuth26parserEPKcS1_+0x11c>
 80a05be:	bf00      	nop
 80a05c0:	080a6aa3 	.word	0x080a6aa3
 80a05c4:	080a6ab1 	.word	0x080a6ab1
 80a05c8:	080a6ab7 	.word	0x080a6ab7

080a05cc <_ZN13Google_OAuth216response_handlerEPKcS1_>:
{
 80a05cc:	b510      	push	{r4, lr}
 80a05ce:	4604      	mov	r4, r0
 80a05d0:	b08a      	sub	sp, #40	; 0x28
    parser(event, data);
 80a05d2:	f7ff fedf 	bl	80a0394 <_ZN13Google_OAuth26parserEPKcS1_>
    switch (last_state)
 80a05d6:	f894 32bf 	ldrb.w	r3, [r4, #703]	; 0x2bf
 80a05da:	2b01      	cmp	r3, #1
 80a05dc:	d077      	beq.n	80a06ce <_ZN13Google_OAuth216response_handlerEPKcS1_+0x102>
 80a05de:	2b02      	cmp	r3, #2
 80a05e0:	f000 809f 	beq.w	80a0722 <_ZN13Google_OAuth216response_handlerEPKcS1_+0x156>
 80a05e4:	2b00      	cmp	r3, #0
 80a05e6:	f040 80b8 	bne.w	80a075a <_ZN13Google_OAuth216response_handlerEPKcS1_+0x18e>
            String msg = "\r\nThis application requires your permission to access your Google Calendar.";
 80a05ea:	4963      	ldr	r1, [pc, #396]	; (80a0778 <_ZN13Google_OAuth216response_handlerEPKcS1_+0x1ac>)
 80a05ec:	a802      	add	r0, sp, #8
 80a05ee:	f002 f857 	bl	80a26a0 <_ZN6StringC1EPK19__FlashStringHelper>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a05f2:	4962      	ldr	r1, [pc, #392]	; (80a077c <_ZN13Google_OAuth216response_handlerEPKcS1_+0x1b0>)
 80a05f4:	a806      	add	r0, sp, #24
 80a05f6:	f002 f853 	bl	80a26a0 <_ZN6StringC1EPK19__FlashStringHelper>
            msg += "\r\nPlease, go to: " + auth_url;
 80a05fa:	f504 711f 	add.w	r1, r4, #636	; 0x27c
 80a05fe:	a806      	add	r0, sp, #24
 80a0600:	f002 f8db 	bl	80a27ba <_ZplRK15StringSumHelperRK6String>
 80a0604:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80a0606:	a802      	add	r0, sp, #8
 80a0608:	f002 f8c4 	bl	80a2794 <_ZN6String6concatERKS_>
class StringSumHelper : public String
 80a060c:	a806      	add	r0, sp, #24
 80a060e:	f001 fffd 	bl	80a260c <_ZN6StringD1Ev>
	StringSumHelper(const char *p) : String(p) {}
 80a0612:	495b      	ldr	r1, [pc, #364]	; (80a0780 <_ZN13Google_OAuth216response_handlerEPKcS1_+0x1b4>)
 80a0614:	a806      	add	r0, sp, #24
 80a0616:	f002 f843 	bl	80a26a0 <_ZN6StringC1EPK19__FlashStringHelper>
            msg += ", and enter the following code: " + user_code + "\r\n";
 80a061a:	f504 711b 	add.w	r1, r4, #620	; 0x26c
 80a061e:	a806      	add	r0, sp, #24
 80a0620:	f002 f8cb 	bl	80a27ba <_ZplRK15StringSumHelperRK6String>
 80a0624:	4957      	ldr	r1, [pc, #348]	; (80a0784 <_ZN13Google_OAuth216response_handlerEPKcS1_+0x1b8>)
 80a0626:	f002 f8d4 	bl	80a27d2 <_ZplRK15StringSumHelperPKc>
 80a062a:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80a062c:	a802      	add	r0, sp, #8
 80a062e:	f002 f8b1 	bl	80a2794 <_ZN6String6concatERKS_>
class StringSumHelper : public String
 80a0632:	a806      	add	r0, sp, #24
 80a0634:	f001 ffea 	bl	80a260c <_ZN6StringD1Ev>
            Serial.println(msg);
 80a0638:	f003 f828 	bl	80a368c <_Z16_fetch_usbserialv>
 80a063c:	9902      	ldr	r1, [sp, #8]
 80a063e:	f002 f9c0 	bl	80a29c2 <_ZN5Print7printlnEPKc>
            delay(1000);
 80a0642:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a0646:	f002 fbbb 	bl	80a2dc0 <delay>
            DEBUG_PRINT(auth_url);
 80a064a:	f8d4 127c 	ldr.w	r1, [r4, #636]	; 0x27c
 80a064e:	a806      	add	r0, sp, #24
 80a0650:	f002 f95a 	bl	80a2908 <_ZN6String6formatEPKcz>
 80a0654:	9a06      	ldr	r2, [sp, #24]
 80a0656:	494c      	ldr	r1, [pc, #304]	; (80a0788 <_ZN13Google_OAuth216response_handlerEPKcS1_+0x1bc>)
 80a0658:	4668      	mov	r0, sp
 80a065a:	f7ff fd8b 	bl	80a0174 <_ZN10CloudClass7publishEPKcS1_.isra.0>
 80a065e:	a801      	add	r0, sp, #4
 80a0660:	f7ff fe82 	bl	80a0368 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0664:	a806      	add	r0, sp, #24
 80a0666:	f001 ffd1 	bl	80a260c <_ZN6StringD1Ev>
            delay(1000);
 80a066a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a066e:	f002 fba7 	bl	80a2dc0 <delay>
            DEBUG_PRINT(user_code);
 80a0672:	f8d4 126c 	ldr.w	r1, [r4, #620]	; 0x26c
 80a0676:	a806      	add	r0, sp, #24
 80a0678:	f002 f946 	bl	80a2908 <_ZN6String6formatEPKcz>
 80a067c:	9a06      	ldr	r2, [sp, #24]
 80a067e:	4942      	ldr	r1, [pc, #264]	; (80a0788 <_ZN13Google_OAuth216response_handlerEPKcS1_+0x1bc>)
 80a0680:	4668      	mov	r0, sp
 80a0682:	f7ff fd77 	bl	80a0174 <_ZN10CloudClass7publishEPKcS1_.isra.0>
 80a0686:	a801      	add	r0, sp, #4
 80a0688:	f7ff fe6e 	bl	80a0368 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a068c:	a806      	add	r0, sp, #24
 80a068e:	f001 ffbd 	bl	80a260c <_ZN6StringD1Ev>
            delay(1000);
 80a0692:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a0696:	f002 fb93 	bl	80a2dc0 <delay>
            DEBUG_PRINT(msg);
 80a069a:	9902      	ldr	r1, [sp, #8]
 80a069c:	a806      	add	r0, sp, #24
 80a069e:	f002 f933 	bl	80a2908 <_ZN6String6formatEPKcz>
 80a06a2:	9a06      	ldr	r2, [sp, #24]
 80a06a4:	4938      	ldr	r1, [pc, #224]	; (80a0788 <_ZN13Google_OAuth216response_handlerEPKcS1_+0x1bc>)
 80a06a6:	4668      	mov	r0, sp
 80a06a8:	f7ff fd64 	bl	80a0174 <_ZN10CloudClass7publishEPKcS1_.isra.0>
 80a06ac:	a801      	add	r0, sp, #4
 80a06ae:	f7ff fe5b 	bl	80a0368 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a06b2:	a806      	add	r0, sp, #24
 80a06b4:	f001 ffaa 	bl	80a260c <_ZN6StringD1Ev>
    last_state = state;
 80a06b8:	f894 32be 	ldrb.w	r3, [r4, #702]	; 0x2be
            String msg = "\r\nThis application requires your permission to access your Google Calendar.";
 80a06bc:	a802      	add	r0, sp, #8
    last_state = state;
 80a06be:	f884 32bf 	strb.w	r3, [r4, #703]	; 0x2bf
    state = new_state;
 80a06c2:	2301      	movs	r3, #1
 80a06c4:	f884 32be 	strb.w	r3, [r4, #702]	; 0x2be
            DEBUG_PRINT("Resp: OAuth2_State Not Set!!!");
 80a06c8:	f001 ffa0 	bl	80a260c <_ZN6StringD1Ev>
            break;
 80a06cc:	e01d      	b.n	80a070a <_ZN13Google_OAuth216response_handlerEPKcS1_+0x13e>
            Serial.println("\r\nDevice authorized!\r\n");
 80a06ce:	f002 ffdd 	bl	80a368c <_Z16_fetch_usbserialv>
 80a06d2:	492e      	ldr	r1, [pc, #184]	; (80a078c <_ZN13Google_OAuth216response_handlerEPKcS1_+0x1c0>)
 80a06d4:	f002 f975 	bl	80a29c2 <_ZN5Print7printlnEPKc>
            DEBUG_PRINT("Device authorized!");
 80a06d8:	492d      	ldr	r1, [pc, #180]	; (80a0790 <_ZN13Google_OAuth216response_handlerEPKcS1_+0x1c4>)
 80a06da:	a806      	add	r0, sp, #24
 80a06dc:	f002 f914 	bl	80a2908 <_ZN6String6formatEPKcz>
 80a06e0:	9a06      	ldr	r2, [sp, #24]
 80a06e2:	4929      	ldr	r1, [pc, #164]	; (80a0788 <_ZN13Google_OAuth216response_handlerEPKcS1_+0x1bc>)
 80a06e4:	a802      	add	r0, sp, #8
 80a06e6:	f7ff fd45 	bl	80a0174 <_ZN10CloudClass7publishEPKcS1_.isra.0>
 80a06ea:	a803      	add	r0, sp, #12
 80a06ec:	f7ff fe3c 	bl	80a0368 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a06f0:	a806      	add	r0, sp, #24
 80a06f2:	f001 ff8b 	bl	80a260c <_ZN6StringD1Ev>
    last_state = state;
 80a06f6:	f894 32be 	ldrb.w	r3, [r4, #702]	; 0x2be
            write_token();
 80a06fa:	4620      	mov	r0, r4
    last_state = state;
 80a06fc:	f884 32bf 	strb.w	r3, [r4, #703]	; 0x2bf
    state = new_state;
 80a0700:	2303      	movs	r3, #3
 80a0702:	f884 32be 	strb.w	r3, [r4, #702]	; 0x2be
            write_token();
 80a0706:	f7ff fd74 	bl	80a01f2 <_ZN13Google_OAuth211write_tokenEv>
 80a070a:	f001 fcd7 	bl	80a20bc <HAL_Timer_Get_Milli_Seconds>
    time = millis();
 80a070e:	f8c4 02b0 	str.w	r0, [r4, #688]	; 0x2b0
     is_device_subscribed = false;
 80a0712:	2000      	movs	r0, #0
 80a0714:	f884 02c0 	strb.w	r0, [r4, #704]	; 0x2c0
}
 80a0718:	b00a      	add	sp, #40	; 0x28
 80a071a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        spark_unsubscribe(NULL);
 80a071e:	f001 bebb 	b.w	80a2498 <spark_unsubscribe>
            Serial.println("\r\nAccess token refreshed!\r\n");
 80a0722:	f002 ffb3 	bl	80a368c <_Z16_fetch_usbserialv>
 80a0726:	491b      	ldr	r1, [pc, #108]	; (80a0794 <_ZN13Google_OAuth216response_handlerEPKcS1_+0x1c8>)
 80a0728:	f002 f94b 	bl	80a29c2 <_ZN5Print7printlnEPKc>
            DEBUG_PRINT("Access token refreshed!");
 80a072c:	491a      	ldr	r1, [pc, #104]	; (80a0798 <_ZN13Google_OAuth216response_handlerEPKcS1_+0x1cc>)
 80a072e:	a806      	add	r0, sp, #24
 80a0730:	f002 f8ea 	bl	80a2908 <_ZN6String6formatEPKcz>
 80a0734:	9a06      	ldr	r2, [sp, #24]
 80a0736:	4914      	ldr	r1, [pc, #80]	; (80a0788 <_ZN13Google_OAuth216response_handlerEPKcS1_+0x1bc>)
 80a0738:	a802      	add	r0, sp, #8
 80a073a:	f7ff fd1b 	bl	80a0174 <_ZN10CloudClass7publishEPKcS1_.isra.0>
 80a073e:	a803      	add	r0, sp, #12
 80a0740:	f7ff fe12 	bl	80a0368 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0744:	a806      	add	r0, sp, #24
 80a0746:	f001 ff61 	bl	80a260c <_ZN6StringD1Ev>
    last_state = state;
 80a074a:	f894 32be 	ldrb.w	r3, [r4, #702]	; 0x2be
 80a074e:	f884 32bf 	strb.w	r3, [r4, #703]	; 0x2bf
    state = new_state;
 80a0752:	2303      	movs	r3, #3
 80a0754:	f884 32be 	strb.w	r3, [r4, #702]	; 0x2be
}
 80a0758:	e7d7      	b.n	80a070a <_ZN13Google_OAuth216response_handlerEPKcS1_+0x13e>
            DEBUG_PRINT("Resp: OAuth2_State Not Set!!!");
 80a075a:	4910      	ldr	r1, [pc, #64]	; (80a079c <_ZN13Google_OAuth216response_handlerEPKcS1_+0x1d0>)
 80a075c:	a806      	add	r0, sp, #24
 80a075e:	f002 f8d3 	bl	80a2908 <_ZN6String6formatEPKcz>
 80a0762:	9a06      	ldr	r2, [sp, #24]
 80a0764:	4908      	ldr	r1, [pc, #32]	; (80a0788 <_ZN13Google_OAuth216response_handlerEPKcS1_+0x1bc>)
 80a0766:	a802      	add	r0, sp, #8
 80a0768:	f7ff fd04 	bl	80a0174 <_ZN10CloudClass7publishEPKcS1_.isra.0>
 80a076c:	a803      	add	r0, sp, #12
 80a076e:	f7ff fdfb 	bl	80a0368 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0772:	a806      	add	r0, sp, #24
 80a0774:	e7a8      	b.n	80a06c8 <_ZN13Google_OAuth216response_handlerEPKcS1_+0xfc>
 80a0776:	bf00      	nop
 80a0778:	080a6ac2 	.word	0x080a6ac2
 80a077c:	080a6b0e 	.word	0x080a6b0e
 80a0780:	080a6b20 	.word	0x080a6b20
 80a0784:	080a6b84 	.word	0x080a6b84
 80a0788:	080a6ab1 	.word	0x080a6ab1
 80a078c:	080a6b41 	.word	0x080a6b41
 80a0790:	080a6b58 	.word	0x080a6b58
 80a0794:	080a6b6b 	.word	0x080a6b6b
 80a0798:	080a6b87 	.word	0x080a6b87
 80a079c:	080a6b9f 	.word	0x080a6b9f

080a07a0 <_ZN13Google_OAuth213error_handlerEPKcS1_>:
{
 80a07a0:	b530      	push	{r4, r5, lr}
 80a07a2:	4604      	mov	r4, r0
 80a07a4:	b087      	sub	sp, #28
    parser(event, data);
 80a07a6:	f7ff fdf5 	bl	80a0394 <_ZN13Google_OAuth26parserEPKcS1_>
    http_error = String::format("\r\nHTTP ERROR - %d", http_status_code);
 80a07aa:	f504 7531 	add.w	r5, r4, #708	; 0x2c4
 80a07ae:	f8b4 22d4 	ldrh.w	r2, [r4, #724]	; 0x2d4
 80a07b2:	4936      	ldr	r1, [pc, #216]	; (80a088c <_ZN13Google_OAuth213error_handlerEPKcS1_+0xec>)
 80a07b4:	a802      	add	r0, sp, #8
 80a07b6:	f002 f8a7 	bl	80a2908 <_ZN6String6formatEPKcz>
 80a07ba:	a902      	add	r1, sp, #8
 80a07bc:	4628      	mov	r0, r5
 80a07be:	f001 ffb9 	bl	80a2734 <_ZN6StringaSEOS_>
 80a07c2:	a802      	add	r0, sp, #8
 80a07c4:	f001 ff22 	bl	80a260c <_ZN6StringD1Ev>
    switch (last_state)
 80a07c8:	f894 32bf 	ldrb.w	r3, [r4, #703]	; 0x2bf
 80a07cc:	2b01      	cmp	r3, #1
 80a07ce:	d02b      	beq.n	80a0828 <_ZN13Google_OAuth213error_handlerEPKcS1_+0x88>
 80a07d0:	2b02      	cmp	r3, #2
 80a07d2:	d056      	beq.n	80a0882 <_ZN13Google_OAuth213error_handlerEPKcS1_+0xe2>
 80a07d4:	b91b      	cbnz	r3, 80a07de <_ZN13Google_OAuth213error_handlerEPKcS1_+0x3e>
            http_error = "\r\nError: Invalid client id.";
 80a07d6:	4628      	mov	r0, r5
 80a07d8:	492d      	ldr	r1, [pc, #180]	; (80a0890 <_ZN13Google_OAuth213error_handlerEPKcS1_+0xf0>)
 80a07da:	f001 ffb3 	bl	80a2744 <_ZN6StringaSEPKc>
    if (http_status_code > 0 && http_status_code != HTTP_PRECONDITION_REQUIRED)
 80a07de:	f8b4 32d4 	ldrh.w	r3, [r4, #724]	; 0x2d4
 80a07e2:	b1fb      	cbz	r3, 80a0824 <_ZN13Google_OAuth213error_handlerEPKcS1_+0x84>
 80a07e4:	f5b3 7fd6 	cmp.w	r3, #428	; 0x1ac
 80a07e8:	d01c      	beq.n	80a0824 <_ZN13Google_OAuth213error_handlerEPKcS1_+0x84>
        Serial.println(http_error);
 80a07ea:	f002 ff4f 	bl	80a368c <_Z16_fetch_usbserialv>
 80a07ee:	f8d4 12c4 	ldr.w	r1, [r4, #708]	; 0x2c4
 80a07f2:	f002 f8e6 	bl	80a29c2 <_ZN5Print7printlnEPKc>
        DEBUG_PRINT(http_error);
 80a07f6:	f8d4 12c4 	ldr.w	r1, [r4, #708]	; 0x2c4
 80a07fa:	a802      	add	r0, sp, #8
 80a07fc:	f002 f884 	bl	80a2908 <_ZN6String6formatEPKcz>
 80a0800:	9a02      	ldr	r2, [sp, #8]
 80a0802:	4924      	ldr	r1, [pc, #144]	; (80a0894 <_ZN13Google_OAuth213error_handlerEPKcS1_+0xf4>)
 80a0804:	4668      	mov	r0, sp
 80a0806:	f7ff fcb5 	bl	80a0174 <_ZN10CloudClass7publishEPKcS1_.isra.0>
 80a080a:	a801      	add	r0, sp, #4
 80a080c:	f7ff fdac 	bl	80a0368 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0810:	a802      	add	r0, sp, #8
 80a0812:	f001 fefb 	bl	80a260c <_ZN6StringD1Ev>
    last_state = state;
 80a0816:	f894 32be 	ldrb.w	r3, [r4, #702]	; 0x2be
 80a081a:	f884 32bf 	strb.w	r3, [r4, #703]	; 0x2bf
    state = new_state;
 80a081e:	2305      	movs	r3, #5
 80a0820:	f884 32be 	strb.w	r3, [r4, #702]	; 0x2be
}
 80a0824:	b007      	add	sp, #28
 80a0826:	bd30      	pop	{r4, r5, pc}
            if (http_status_code == HTTP_PRECONDITION_REQUIRED)
 80a0828:	f8b4 32d4 	ldrh.w	r3, [r4, #724]	; 0x2d4
 80a082c:	f5b3 7fd6 	cmp.w	r3, #428	; 0x1ac
 80a0830:	d114      	bne.n	80a085c <_ZN13Google_OAuth213error_handlerEPKcS1_+0xbc>
                Serial.println("Authorization pending...");
 80a0832:	f002 ff2b 	bl	80a368c <_Z16_fetch_usbserialv>
 80a0836:	4918      	ldr	r1, [pc, #96]	; (80a0898 <_ZN13Google_OAuth213error_handlerEPKcS1_+0xf8>)
 80a0838:	f002 f8c3 	bl	80a29c2 <_ZN5Print7printlnEPKc>
                DEBUG_PRINT("Authorization pending...");
 80a083c:	a802      	add	r0, sp, #8
 80a083e:	4916      	ldr	r1, [pc, #88]	; (80a0898 <_ZN13Google_OAuth213error_handlerEPKcS1_+0xf8>)
 80a0840:	f002 f862 	bl	80a2908 <_ZN6String6formatEPKcz>
 80a0844:	4668      	mov	r0, sp
 80a0846:	9a02      	ldr	r2, [sp, #8]
 80a0848:	4912      	ldr	r1, [pc, #72]	; (80a0894 <_ZN13Google_OAuth213error_handlerEPKcS1_+0xf4>)
 80a084a:	f7ff fc93 	bl	80a0174 <_ZN10CloudClass7publishEPKcS1_.isra.0>
 80a084e:	a801      	add	r0, sp, #4
 80a0850:	f7ff fd8a 	bl	80a0368 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0854:	a802      	add	r0, sp, #8
 80a0856:	f001 fed9 	bl	80a260c <_ZN6StringD1Ev>
 80a085a:	e7c0      	b.n	80a07de <_ZN13Google_OAuth213error_handlerEPKcS1_+0x3e>
            else if (http_status_code == HTTP_FORBIDDEN)
 80a085c:	f240 1293 	movw	r2, #403	; 0x193
 80a0860:	4293      	cmp	r3, r2
 80a0862:	d104      	bne.n	80a086e <_ZN13Google_OAuth213error_handlerEPKcS1_+0xce>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 80a0864:	490d      	ldr	r1, [pc, #52]	; (80a089c <_ZN13Google_OAuth213error_handlerEPKcS1_+0xfc>)
 80a0866:	4628      	mov	r0, r5
 80a0868:	f001 ff98 	bl	80a279c <_ZN6String6concatEPKc>
 80a086c:	e7b7      	b.n	80a07de <_ZN13Google_OAuth213error_handlerEPKcS1_+0x3e>
            else if (http_status_code == HTTP_UNAUTHORIZED)
 80a086e:	f240 1291 	movw	r2, #401	; 0x191
 80a0872:	4293      	cmp	r3, r2
 80a0874:	d101      	bne.n	80a087a <_ZN13Google_OAuth213error_handlerEPKcS1_+0xda>
 80a0876:	490a      	ldr	r1, [pc, #40]	; (80a08a0 <_ZN13Google_OAuth213error_handlerEPKcS1_+0x100>)
 80a0878:	e7f5      	b.n	80a0866 <_ZN13Google_OAuth213error_handlerEPKcS1_+0xc6>
            else if (http_status_code > 0)
 80a087a:	2b00      	cmp	r3, #0
 80a087c:	d0af      	beq.n	80a07de <_ZN13Google_OAuth213error_handlerEPKcS1_+0x3e>
 80a087e:	4909      	ldr	r1, [pc, #36]	; (80a08a4 <_ZN13Google_OAuth213error_handlerEPKcS1_+0x104>)
 80a0880:	e7f1      	b.n	80a0866 <_ZN13Google_OAuth213error_handlerEPKcS1_+0xc6>
            erase_token();
 80a0882:	4620      	mov	r0, r4
 80a0884:	f7ff fd60 	bl	80a0348 <_ZN13Google_OAuth211erase_tokenEv>
 80a0888:	e7f9      	b.n	80a087e <_ZN13Google_OAuth213error_handlerEPKcS1_+0xde>
 80a088a:	bf00      	nop
 80a088c:	080a6bbd 	.word	0x080a6bbd
 80a0890:	080a6bcf 	.word	0x080a6bcf
 80a0894:	080a6ab1 	.word	0x080a6ab1
 80a0898:	080a6beb 	.word	0x080a6beb
 80a089c:	080a6c04 	.word	0x080a6c04
 80a08a0:	080a6c1c 	.word	0x080a6c1c
 80a08a4:	080a6c3c 	.word	0x080a6c3c

080a08a8 <_ZN13Google_OAuth214is_token_validEv>:
{
 80a08a8:	b530      	push	{r4, r5, lr}
 80a08aa:	b087      	sub	sp, #28
 80a08ac:	4605      	mov	r5, r0
    if (time_left()) 
 80a08ae:	f7ff fc78 	bl	80a01a2 <_ZN13Google_OAuth29time_leftEv>
 80a08b2:	4604      	mov	r4, r0
 80a08b4:	b988      	cbnz	r0, 80a08da <_ZN13Google_OAuth214is_token_validEv+0x32>
        state = OAuth2_State::REFRESH_TOKEN;
 80a08b6:	2302      	movs	r3, #2
        DEBUG_PRINT("Token timeout: Refreshing...");
 80a08b8:	4909      	ldr	r1, [pc, #36]	; (80a08e0 <_ZN13Google_OAuth214is_token_validEv+0x38>)
        state = OAuth2_State::REFRESH_TOKEN;
 80a08ba:	f885 32be 	strb.w	r3, [r5, #702]	; 0x2be
        DEBUG_PRINT("Token timeout: Refreshing...");
 80a08be:	a802      	add	r0, sp, #8
 80a08c0:	f002 f822 	bl	80a2908 <_ZN6String6formatEPKcz>
 80a08c4:	4668      	mov	r0, sp
 80a08c6:	9a02      	ldr	r2, [sp, #8]
 80a08c8:	4906      	ldr	r1, [pc, #24]	; (80a08e4 <_ZN13Google_OAuth214is_token_validEv+0x3c>)
 80a08ca:	f7ff fc53 	bl	80a0174 <_ZN10CloudClass7publishEPKcS1_.isra.0>
 80a08ce:	a801      	add	r0, sp, #4
 80a08d0:	f7ff fd4a 	bl	80a0368 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a08d4:	a802      	add	r0, sp, #8
 80a08d6:	f001 fe99 	bl	80a260c <_ZN6StringD1Ev>
}
 80a08da:	4620      	mov	r0, r4
 80a08dc:	b007      	add	sp, #28
 80a08de:	bd30      	pop	{r4, r5, pc}
 80a08e0:	080a6c56 	.word	0x080a6c56
 80a08e4:	080a6ab1 	.word	0x080a6ab1

080a08e8 <_ZN13Google_OAuth211print_errorEv>:
{
 80a08e8:	b510      	push	{r4, lr}
 80a08ea:	4604      	mov	r4, r0
 80a08ec:	b086      	sub	sp, #24
    Serial.println(http_error);
 80a08ee:	f002 fecd 	bl	80a368c <_Z16_fetch_usbserialv>
 80a08f2:	f8d4 12c4 	ldr.w	r1, [r4, #708]	; 0x2c4
 80a08f6:	f002 f864 	bl	80a29c2 <_ZN5Print7printlnEPKc>
    DEBUG_PRINT(http_error);
 80a08fa:	f8d4 12c4 	ldr.w	r1, [r4, #708]	; 0x2c4
 80a08fe:	a802      	add	r0, sp, #8
 80a0900:	f002 f802 	bl	80a2908 <_ZN6String6formatEPKcz>
 80a0904:	9a02      	ldr	r2, [sp, #8]
 80a0906:	4906      	ldr	r1, [pc, #24]	; (80a0920 <_ZN13Google_OAuth211print_errorEv+0x38>)
 80a0908:	4668      	mov	r0, sp
 80a090a:	f7ff fc33 	bl	80a0174 <_ZN10CloudClass7publishEPKcS1_.isra.0>
 80a090e:	a801      	add	r0, sp, #4
 80a0910:	f7ff fd2a 	bl	80a0368 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0914:	a802      	add	r0, sp, #8
 80a0916:	f001 fe79 	bl	80a260c <_ZN6StringD1Ev>
}
 80a091a:	b006      	add	sp, #24
 80a091c:	bd10      	pop	{r4, pc}
 80a091e:	bf00      	nop
 80a0920:	080a6ab1 	.word	0x080a6ab1

080a0924 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>:
    function(_Functor) -> function<_Signature>;
#endif

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a0924:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a0926:	2300      	movs	r3, #0
 80a0928:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 80a092a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a092c:	4604      	mov	r4, r0
 80a092e:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a0930:	b12b      	cbz	r3, 80a093e <_ZNSt8functionIFvPKcS1_EEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a0932:	2202      	movs	r2, #2
 80a0934:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a0936:	68eb      	ldr	r3, [r5, #12]
 80a0938:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a093a:	68ab      	ldr	r3, [r5, #8]
 80a093c:	60a3      	str	r3, [r4, #8]
	}
    }
 80a093e:	4620      	mov	r0, r4
 80a0940:	bd38      	pop	{r3, r4, r5, pc}
	...

080a0944 <_ZN10CloudClass9subscribeI13Google_OAuth2EEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0>:
    bool subscribe(const char *eventName, void (T::*handler)(const char *, const char *), T *instance, Spark_Subscription_Scope_TypeDef scope)
 80a0944:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0946:	461f      	mov	r7, r3
    _Function_base() : _M_manager(nullptr) { }
 80a0948:	2300      	movs	r3, #0
 80a094a:	b091      	sub	sp, #68	; 0x44
 80a094c:	ad02      	add	r5, sp, #8
 80a094e:	e885 0006 	stmia.w	r5, {r1, r2}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a0952:	ac05      	add	r4, sp, #20
 80a0954:	4606      	mov	r6, r0
 80a0956:	e895 0003 	ldmia.w	r5, {r0, r1}
 80a095a:	e884 0005 	stmia.w	r4, {r0, r2}
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a095e:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
 80a0960:	930a      	str	r3, [sp, #40]	; 0x28
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0962:	f7ff fb98 	bl	80a0096 <_Znwj>
 80a0966:	4602      	mov	r2, r0
 80a0968:	b120      	cbz	r0, 80a0974 <_ZN10CloudClass9subscribeI13Google_OAuth2EEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0+0x30>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
 80a096a:	e894 0003 	ldmia.w	r4, {r0, r1}
 80a096e:	e882 0003 	stmia.w	r2, {r0, r1}
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a0972:	6097      	str	r7, [r2, #8]
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a0974:	4b12      	ldr	r3, [pc, #72]	; (80a09c0 <_ZN10CloudClass9subscribeI13Google_OAuth2EEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0+0x7c>)
        return subscribe_wiring(eventName, handler, scope);
 80a0976:	a908      	add	r1, sp, #32
 80a0978:	930b      	str	r3, [sp, #44]	; 0x2c
	    _M_manager = &_My_handler::_M_manager;
 80a097a:	4b12      	ldr	r3, [pc, #72]	; (80a09c4 <_ZN10CloudClass9subscribeI13Google_OAuth2EEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0+0x80>)
 80a097c:	a80c      	add	r0, sp, #48	; 0x30
 80a097e:	930a      	str	r3, [sp, #40]	; 0x28
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0980:	9208      	str	r2, [sp, #32]
 80a0982:	f7ff ffcf 	bl	80a0924 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
        if (handler) // if the call-wrapper has wrapped a callable object
 80a0986:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80a0988:	b18b      	cbz	r3, 80a09ae <_ZN10CloudClass9subscribeI13Google_OAuth2EEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0+0x6a>
            auto wrapper = new wiring_event_handler_t(handler);
 80a098a:	2010      	movs	r0, #16
 80a098c:	f7ff fb83 	bl	80a0096 <_Znwj>
 80a0990:	4604      	mov	r4, r0
 80a0992:	b160      	cbz	r0, 80a09ae <_ZN10CloudClass9subscribeI13Google_OAuth2EEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0+0x6a>
 80a0994:	a90c      	add	r1, sp, #48	; 0x30
 80a0996:	f7ff ffc5 	bl	80a0924 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
                success = spark_subscribe(eventName, (EventHandler)call_wiring_event_handler, wrapper, scope, deviceID, NULL);
 80a099a:	2300      	movs	r3, #0
 80a099c:	4622      	mov	r2, r4
 80a099e:	e9cd 3300 	strd	r3, r3, [sp]
 80a09a2:	4630      	mov	r0, r6
 80a09a4:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80a09a8:	4907      	ldr	r1, [pc, #28]	; (80a09c8 <_ZN10CloudClass9subscribeI13Google_OAuth2EEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0+0x84>)
 80a09aa:	f001 fd6d 	bl	80a2488 <spark_subscribe>
    class function<_Res(_ArgTypes...)>
 80a09ae:	a80c      	add	r0, sp, #48	; 0x30
 80a09b0:	f7ff fbee 	bl	80a0190 <_ZNSt14_Function_baseD1Ev>
 80a09b4:	a808      	add	r0, sp, #32
 80a09b6:	f7ff fbeb 	bl	80a0190 <_ZNSt14_Function_baseD1Ev>
    }
 80a09ba:	b011      	add	sp, #68	; 0x44
 80a09bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a09be:	bf00      	nop
 80a09c0:	080a0111 	.word	0x080a0111
 80a09c4:	080a0133 	.word	0x080a0133
 80a09c8:	080a300b 	.word	0x080a300b

080a09cc <_ZN13Google_OAuth219subscribe_device_toERK6String>:
{
 80a09cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (!is_device_subscribed)
 80a09d0:	f890 72c0 	ldrb.w	r7, [r0, #704]	; 0x2c0
{
 80a09d4:	4606      	mov	r6, r0
 80a09d6:	4688      	mov	r8, r1
 80a09d8:	b092      	sub	sp, #72	; 0x48
    if (!is_device_subscribed)
 80a09da:	2f00      	cmp	r7, #0
 80a09dc:	d151      	bne.n	80a0a82 <_ZN13Google_OAuth219subscribe_device_toERK6String+0xb6>
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
 80a09de:	ac0e      	add	r4, sp, #56	; 0x38
        spark_unsubscribe(NULL);
 80a09e0:	4638      	mov	r0, r7
	StringSumHelper(const String &s) : String(s) {}
 80a09e2:	ad0a      	add	r5, sp, #40	; 0x28
 80a09e4:	f001 fd58 	bl	80a2498 <spark_unsubscribe>
 80a09e8:	4620      	mov	r0, r4
 80a09ea:	f001 fd3d 	bl	80a2468 <spark_deviceID>
 80a09ee:	4621      	mov	r1, r4
 80a09f0:	4628      	mov	r0, r5
 80a09f2:	f001 fe94 	bl	80a271e <_ZN6StringC1ERKS_>
        String hook_reponse = System.deviceID() + "/hook-response/" + event;
 80a09f6:	4924      	ldr	r1, [pc, #144]	; (80a0a88 <_ZN13Google_OAuth219subscribe_device_toERK6String+0xbc>)
 80a09f8:	4628      	mov	r0, r5
 80a09fa:	f001 feea 	bl	80a27d2 <_ZplRK15StringSumHelperPKc>
 80a09fe:	4641      	mov	r1, r8
 80a0a00:	f001 fedb 	bl	80a27ba <_ZplRK15StringSumHelperRK6String>
 80a0a04:	4601      	mov	r1, r0
 80a0a06:	a802      	add	r0, sp, #8
 80a0a08:	f001 fe89 	bl	80a271e <_ZN6StringC1ERKS_>
class StringSumHelper : public String
 80a0a0c:	4628      	mov	r0, r5
 80a0a0e:	f001 fdfd 	bl	80a260c <_ZN6StringD1Ev>
 80a0a12:	4620      	mov	r0, r4
 80a0a14:	f001 fdfa 	bl	80a260c <_ZN6StringD1Ev>
 80a0a18:	4620      	mov	r0, r4
 80a0a1a:	f001 fd25 	bl	80a2468 <spark_deviceID>
	StringSumHelper(const String &s) : String(s) {}
 80a0a1e:	4621      	mov	r1, r4
 80a0a20:	4628      	mov	r0, r5
 80a0a22:	f001 fe7c 	bl	80a271e <_ZN6StringC1ERKS_>
        String hook_error = System.deviceID() + "/hook-error/" + event;
 80a0a26:	4919      	ldr	r1, [pc, #100]	; (80a0a8c <_ZN13Google_OAuth219subscribe_device_toERK6String+0xc0>)
 80a0a28:	4628      	mov	r0, r5
 80a0a2a:	f001 fed2 	bl	80a27d2 <_ZplRK15StringSumHelperPKc>
 80a0a2e:	4641      	mov	r1, r8
 80a0a30:	f001 fec3 	bl	80a27ba <_ZplRK15StringSumHelperRK6String>
 80a0a34:	4601      	mov	r1, r0
 80a0a36:	a806      	add	r0, sp, #24
 80a0a38:	f001 fe71 	bl	80a271e <_ZN6StringC1ERKS_>
class StringSumHelper : public String
 80a0a3c:	4628      	mov	r0, r5
 80a0a3e:	f001 fde5 	bl	80a260c <_ZN6StringD1Ev>
 80a0a42:	4620      	mov	r0, r4
 80a0a44:	f001 fde2 	bl	80a260c <_ZN6StringD1Ev>
        Particle.subscribe(hook_reponse, &Google_OAuth2::response_handler, this, MY_DEVICES);
 80a0a48:	4b11      	ldr	r3, [pc, #68]	; (80a0a90 <_ZN13Google_OAuth219subscribe_device_toERK6String+0xc4>)
 80a0a4a:	9700      	str	r7, [sp, #0]
 80a0a4c:	e9cd 370a 	strd	r3, r7, [sp, #40]	; 0x28
 80a0a50:	9802      	ldr	r0, [sp, #8]
 80a0a52:	4633      	mov	r3, r6
 80a0a54:	e895 0006 	ldmia.w	r5, {r1, r2}
 80a0a58:	f7ff ff74 	bl	80a0944 <_ZN10CloudClass9subscribeI13Google_OAuth2EEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0>
        Particle.subscribe(hook_error, &Google_OAuth2::error_handler, this, MY_DEVICES);
 80a0a5c:	4b0d      	ldr	r3, [pc, #52]	; (80a0a94 <_ZN13Google_OAuth219subscribe_device_toERK6String+0xc8>)
 80a0a5e:	9700      	str	r7, [sp, #0]
 80a0a60:	e9cd 370e 	strd	r3, r7, [sp, #56]	; 0x38
 80a0a64:	9806      	ldr	r0, [sp, #24]
 80a0a66:	4633      	mov	r3, r6
 80a0a68:	e894 0006 	ldmia.w	r4, {r1, r2}
 80a0a6c:	f7ff ff6a 	bl	80a0944 <_ZN10CloudClass9subscribeI13Google_OAuth2EEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0>
        is_device_subscribed = true;
 80a0a70:	2301      	movs	r3, #1
        String hook_error = System.deviceID() + "/hook-error/" + event;
 80a0a72:	a806      	add	r0, sp, #24
        is_device_subscribed = true;
 80a0a74:	f886 32c0 	strb.w	r3, [r6, #704]	; 0x2c0
        String hook_error = System.deviceID() + "/hook-error/" + event;
 80a0a78:	f001 fdc8 	bl	80a260c <_ZN6StringD1Ev>
        String hook_reponse = System.deviceID() + "/hook-response/" + event;
 80a0a7c:	a802      	add	r0, sp, #8
 80a0a7e:	f001 fdc5 	bl	80a260c <_ZN6StringD1Ev>
}
 80a0a82:	b012      	add	sp, #72	; 0x48
 80a0a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0a88:	080a6c73 	.word	0x080a6c73
 80a0a8c:	080a6c83 	.word	0x080a6c83
 80a0a90:	080a05cd 	.word	0x080a05cd
 80a0a94:	080a07a1 	.word	0x080a07a1

080a0a98 <_ZN13Google_OAuth24loopEv>:
{
 80a0a98:	b510      	push	{r4, lr}
 80a0a9a:	4604      	mov	r4, r0
 80a0a9c:	b08c      	sub	sp, #48	; 0x30
    String data;
 80a0a9e:	499a      	ldr	r1, [pc, #616]	; (80a0d08 <_ZN13Google_OAuth24loopEv+0x270>)
 80a0aa0:	a804      	add	r0, sp, #16
 80a0aa2:	f001 fdfd 	bl	80a26a0 <_ZN6StringC1EPK19__FlashStringHelper>
    switch (state)
 80a0aa6:	f894 32be 	ldrb.w	r3, [r4, #702]	; 0x2be
 80a0aaa:	2b04      	cmp	r3, #4
 80a0aac:	f200 811c 	bhi.w	80a0ce8 <_ZN13Google_OAuth24loopEv+0x250>
 80a0ab0:	e8df f013 	tbh	[pc, r3, lsl #1]
 80a0ab4:	00420005 	.word	0x00420005
 80a0ab8:	0103009f 	.word	0x0103009f
 80a0abc:	00cb      	.short	0x00cb
            subscribe_device_to(EVENT_REQ_USER_CODE);
 80a0abe:	4620      	mov	r0, r4
 80a0ac0:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 80a0ac4:	f7ff ff82 	bl	80a09cc <_ZN13Google_OAuth219subscribe_device_toERK6String>
            data = String::format("{\"client_id\":\"%s\"}", CLIENT_ID.c_str());
 80a0ac8:	f8d4 223c 	ldr.w	r2, [r4, #572]	; 0x23c
 80a0acc:	498f      	ldr	r1, [pc, #572]	; (80a0d0c <_ZN13Google_OAuth24loopEv+0x274>)
 80a0ace:	a808      	add	r0, sp, #32
 80a0ad0:	f001 ff1a 	bl	80a2908 <_ZN6String6formatEPKcz>
 80a0ad4:	a908      	add	r1, sp, #32
 80a0ad6:	a804      	add	r0, sp, #16
 80a0ad8:	f001 fe2c 	bl	80a2734 <_ZN6StringaSEOS_>
 80a0adc:	a808      	add	r0, sp, #32
 80a0ade:	f001 fd95 	bl	80a260c <_ZN6StringD1Ev>
 80a0ae2:	4b8b      	ldr	r3, [pc, #556]	; (80a0d10 <_ZN13Google_OAuth24loopEv+0x278>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a0ae4:	9a04      	ldr	r2, [sp, #16]
 80a0ae6:	781b      	ldrb	r3, [r3, #0]
 80a0ae8:	f8d4 120c 	ldr.w	r1, [r4, #524]	; 0x20c
 80a0aec:	f88d 3000 	strb.w	r3, [sp]
 80a0af0:	a808      	add	r0, sp, #32
 80a0af2:	233c      	movs	r3, #60	; 0x3c
 80a0af4:	f002 fb8e 	bl	80a3214 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a0af8:	a809      	add	r0, sp, #36	; 0x24
 80a0afa:	f7ff fc35 	bl	80a0368 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            Serial.println("User code request sent!");
 80a0afe:	f002 fdc5 	bl	80a368c <_Z16_fetch_usbserialv>
 80a0b02:	4984      	ldr	r1, [pc, #528]	; (80a0d14 <_ZN13Google_OAuth24loopEv+0x27c>)
 80a0b04:	f001 ff5d 	bl	80a29c2 <_ZN5Print7printlnEPKc>
            DEBUG_PRINT("User code request sent!");
 80a0b08:	4982      	ldr	r1, [pc, #520]	; (80a0d14 <_ZN13Google_OAuth24loopEv+0x27c>)
            DEBUG_PRINT("Refresh token request sent");
 80a0b0a:	a808      	add	r0, sp, #32
 80a0b0c:	f001 fefc 	bl	80a2908 <_ZN6String6formatEPKcz>
 80a0b10:	9a08      	ldr	r2, [sp, #32]
 80a0b12:	4981      	ldr	r1, [pc, #516]	; (80a0d18 <_ZN13Google_OAuth24loopEv+0x280>)
 80a0b14:	a802      	add	r0, sp, #8
 80a0b16:	f7ff fb2d 	bl	80a0174 <_ZN10CloudClass7publishEPKcS1_.isra.0>
 80a0b1a:	a803      	add	r0, sp, #12
 80a0b1c:	f7ff fc24 	bl	80a0368 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0b20:	a808      	add	r0, sp, #32
 80a0b22:	f001 fd73 	bl	80a260c <_ZN6StringD1Ev>
            oauth_timeout_count = 0;
 80a0b26:	2300      	movs	r3, #0
 80a0b28:	f8c4 32ac 	str.w	r3, [r4, #684]	; 0x2ac
    last_state = state;
 80a0b2c:	f894 32be 	ldrb.w	r3, [r4, #702]	; 0x2be
 80a0b30:	f884 32bf 	strb.w	r3, [r4, #703]	; 0x2bf
    state = new_state;
 80a0b34:	2304      	movs	r3, #4
 80a0b36:	e03b      	b.n	80a0bb0 <_ZN13Google_OAuth24loopEv+0x118>
 80a0b38:	f001 fac0 	bl	80a20bc <HAL_Timer_Get_Milli_Seconds>
            if (millis() > (polling_time + polling_rate * 2))
 80a0b3c:	f8b4 22bc 	ldrh.w	r2, [r4, #700]	; 0x2bc
 80a0b40:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 80a0b44:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80a0b48:	4283      	cmp	r3, r0
 80a0b4a:	d233      	bcs.n	80a0bb4 <_ZN13Google_OAuth24loopEv+0x11c>
 80a0b4c:	f001 fab6 	bl	80a20bc <HAL_Timer_Get_Milli_Seconds>
                polling_time = millis();
 80a0b50:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
                if (time_left())
 80a0b54:	4620      	mov	r0, r4
 80a0b56:	f7ff fb24 	bl	80a01a2 <_ZN13Google_OAuth29time_leftEv>
 80a0b5a:	b380      	cbz	r0, 80a0bbe <_ZN13Google_OAuth24loopEv+0x126>
                    subscribe_device_to(EVENT_POLL_AUTH);
 80a0b5c:	4620      	mov	r0, r4
 80a0b5e:	f504 7107 	add.w	r1, r4, #540	; 0x21c
 80a0b62:	f7ff ff33 	bl	80a09cc <_ZN13Google_OAuth219subscribe_device_toERK6String>
                                        CLIENT_ID.c_str(), CLIENT_SECRET.c_str(), device_code.c_str());
 80a0b66:	f8d4 325c 	ldr.w	r3, [r4, #604]	; 0x25c
 80a0b6a:	f8d4 223c 	ldr.w	r2, [r4, #572]	; 0x23c
 80a0b6e:	496b      	ldr	r1, [pc, #428]	; (80a0d1c <_ZN13Google_OAuth24loopEv+0x284>)
 80a0b70:	9300      	str	r3, [sp, #0]
 80a0b72:	a808      	add	r0, sp, #32
 80a0b74:	f8d4 324c 	ldr.w	r3, [r4, #588]	; 0x24c
 80a0b78:	f001 fec6 	bl	80a2908 <_ZN6String6formatEPKcz>
 80a0b7c:	a908      	add	r1, sp, #32
 80a0b7e:	a804      	add	r0, sp, #16
 80a0b80:	f001 fdd8 	bl	80a2734 <_ZN6StringaSEOS_>
                    data = String::format("{\"client_id\":\"%s\",\"client_secret\":\"%s\",\"code\":\"%s\"}",
 80a0b84:	a808      	add	r0, sp, #32
 80a0b86:	f001 fd41 	bl	80a260c <_ZN6StringD1Ev>
 80a0b8a:	4b61      	ldr	r3, [pc, #388]	; (80a0d10 <_ZN13Google_OAuth24loopEv+0x278>)
 80a0b8c:	9a04      	ldr	r2, [sp, #16]
 80a0b8e:	781b      	ldrb	r3, [r3, #0]
 80a0b90:	f8d4 121c 	ldr.w	r1, [r4, #540]	; 0x21c
 80a0b94:	f88d 3000 	strb.w	r3, [sp]
 80a0b98:	a808      	add	r0, sp, #32
 80a0b9a:	233c      	movs	r3, #60	; 0x3c
 80a0b9c:	f002 fb3a 	bl	80a3214 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a0ba0:	a809      	add	r0, sp, #36	; 0x24
 80a0ba2:	f7ff fbe1 	bl	80a0368 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    last_state = state;
 80a0ba6:	f894 32be 	ldrb.w	r3, [r4, #702]	; 0x2be
 80a0baa:	f884 32bf 	strb.w	r3, [r4, #703]	; 0x2bf
    state = new_state;
 80a0bae:	2301      	movs	r3, #1
 80a0bb0:	f884 32be 	strb.w	r3, [r4, #702]	; 0x2be
    String data;
 80a0bb4:	a804      	add	r0, sp, #16
 80a0bb6:	f001 fd29 	bl	80a260c <_ZN6StringD1Ev>
}
 80a0bba:	b00c      	add	sp, #48	; 0x30
 80a0bbc:	bd10      	pop	{r4, pc}
                    Serial.println("Error: User code has expired.");
 80a0bbe:	f002 fd65 	bl	80a368c <_Z16_fetch_usbserialv>
 80a0bc2:	4957      	ldr	r1, [pc, #348]	; (80a0d20 <_ZN13Google_OAuth24loopEv+0x288>)
 80a0bc4:	f001 fefd 	bl	80a29c2 <_ZN5Print7printlnEPKc>
                    DEBUG_PRINT("Error: User code has expired.");
 80a0bc8:	4955      	ldr	r1, [pc, #340]	; (80a0d20 <_ZN13Google_OAuth24loopEv+0x288>)
 80a0bca:	a808      	add	r0, sp, #32
 80a0bcc:	f001 fe9c 	bl	80a2908 <_ZN6String6formatEPKcz>
 80a0bd0:	9a08      	ldr	r2, [sp, #32]
 80a0bd2:	4951      	ldr	r1, [pc, #324]	; (80a0d18 <_ZN13Google_OAuth24loopEv+0x280>)
 80a0bd4:	a802      	add	r0, sp, #8
 80a0bd6:	f7ff facd 	bl	80a0174 <_ZN10CloudClass7publishEPKcS1_.isra.0>
 80a0bda:	a803      	add	r0, sp, #12
 80a0bdc:	f7ff fbc4 	bl	80a0368 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0be0:	a808      	add	r0, sp, #32
 80a0be2:	f001 fd13 	bl	80a260c <_ZN6StringD1Ev>
    last_state = state;
 80a0be6:	f894 32be 	ldrb.w	r3, [r4, #702]	; 0x2be
 80a0bea:	f884 32bf 	strb.w	r3, [r4, #703]	; 0x2bf
    state = new_state;
 80a0bee:	2305      	movs	r3, #5
 80a0bf0:	e7de      	b.n	80a0bb0 <_ZN13Google_OAuth24loopEv+0x118>
            subscribe_device_to(EVENT_REFRESH_TOKEN);
 80a0bf2:	4620      	mov	r0, r4
 80a0bf4:	f504 710b 	add.w	r1, r4, #556	; 0x22c
 80a0bf8:	f7ff fee8 	bl	80a09cc <_ZN13Google_OAuth219subscribe_device_toERK6String>
                                refresh_token.c_str(), CLIENT_ID.c_str(), CLIENT_SECRET.c_str());
 80a0bfc:	f8d4 324c 	ldr.w	r3, [r4, #588]	; 0x24c
 80a0c00:	f8d4 229c 	ldr.w	r2, [r4, #668]	; 0x29c
 80a0c04:	4947      	ldr	r1, [pc, #284]	; (80a0d24 <_ZN13Google_OAuth24loopEv+0x28c>)
 80a0c06:	9300      	str	r3, [sp, #0]
 80a0c08:	a808      	add	r0, sp, #32
 80a0c0a:	f8d4 323c 	ldr.w	r3, [r4, #572]	; 0x23c
 80a0c0e:	f001 fe7b 	bl	80a2908 <_ZN6String6formatEPKcz>
 80a0c12:	a908      	add	r1, sp, #32
 80a0c14:	a804      	add	r0, sp, #16
 80a0c16:	f001 fd8d 	bl	80a2734 <_ZN6StringaSEOS_>
            data = String::format("{\"refresh_token\":\"%s\",\"client_id\":\"%s\",\"client_secret\":\"%s\"}",
 80a0c1a:	a808      	add	r0, sp, #32
 80a0c1c:	f001 fcf6 	bl	80a260c <_ZN6StringD1Ev>
 80a0c20:	4b3b      	ldr	r3, [pc, #236]	; (80a0d10 <_ZN13Google_OAuth24loopEv+0x278>)
 80a0c22:	9a04      	ldr	r2, [sp, #16]
 80a0c24:	781b      	ldrb	r3, [r3, #0]
 80a0c26:	f8d4 122c 	ldr.w	r1, [r4, #556]	; 0x22c
 80a0c2a:	f88d 3000 	strb.w	r3, [sp]
 80a0c2e:	a808      	add	r0, sp, #32
 80a0c30:	233c      	movs	r3, #60	; 0x3c
 80a0c32:	f002 faef 	bl	80a3214 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a0c36:	a809      	add	r0, sp, #36	; 0x24
 80a0c38:	f7ff fb96 	bl	80a0368 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            Serial.println("Refresh token request sent");
 80a0c3c:	f002 fd26 	bl	80a368c <_Z16_fetch_usbserialv>
 80a0c40:	4939      	ldr	r1, [pc, #228]	; (80a0d28 <_ZN13Google_OAuth24loopEv+0x290>)
 80a0c42:	f001 febe 	bl	80a29c2 <_ZN5Print7printlnEPKc>
            DEBUG_PRINT("Refresh token request sent");
 80a0c46:	4938      	ldr	r1, [pc, #224]	; (80a0d28 <_ZN13Google_OAuth24loopEv+0x290>)
 80a0c48:	e75f      	b.n	80a0b0a <_ZN13Google_OAuth24loopEv+0x72>
            Serial.println("Waiting: OAuth2 response...");
 80a0c4a:	f002 fd1f 	bl	80a368c <_Z16_fetch_usbserialv>
 80a0c4e:	4937      	ldr	r1, [pc, #220]	; (80a0d2c <_ZN13Google_OAuth24loopEv+0x294>)
 80a0c50:	f001 feb7 	bl	80a29c2 <_ZN5Print7printlnEPKc>
            DEBUG_PRINT("Waiting: OAuth2 response...");            
 80a0c54:	4935      	ldr	r1, [pc, #212]	; (80a0d2c <_ZN13Google_OAuth24loopEv+0x294>)
 80a0c56:	a808      	add	r0, sp, #32
 80a0c58:	f001 fe56 	bl	80a2908 <_ZN6String6formatEPKcz>
 80a0c5c:	9a08      	ldr	r2, [sp, #32]
 80a0c5e:	492e      	ldr	r1, [pc, #184]	; (80a0d18 <_ZN13Google_OAuth24loopEv+0x280>)
 80a0c60:	a802      	add	r0, sp, #8
 80a0c62:	f7ff fa87 	bl	80a0174 <_ZN10CloudClass7publishEPKcS1_.isra.0>
 80a0c66:	a803      	add	r0, sp, #12
 80a0c68:	f7ff fb7e 	bl	80a0368 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0c6c:	a808      	add	r0, sp, #32
 80a0c6e:	f001 fccd 	bl	80a260c <_ZN6StringD1Ev>
            delay(5000);
 80a0c72:	f241 3088 	movw	r0, #5000	; 0x1388
 80a0c76:	f002 f8a3 	bl	80a2dc0 <delay>
            oauth_timeout_count++;
 80a0c7a:	f8d4 32ac 	ldr.w	r3, [r4, #684]	; 0x2ac
 80a0c7e:	3301      	adds	r3, #1
            if (oauth_timeout_count > 6) { //30 seconds
 80a0c80:	2b06      	cmp	r3, #6
            oauth_timeout_count++;
 80a0c82:	f8c4 32ac 	str.w	r3, [r4, #684]	; 0x2ac
            if (oauth_timeout_count > 6) { //30 seconds
 80a0c86:	dd95      	ble.n	80a0bb4 <_ZN13Google_OAuth24loopEv+0x11c>
                DEBUG_PRINT("TIMEOUT oauth2 waiting for a response..."); 
 80a0c88:	4929      	ldr	r1, [pc, #164]	; (80a0d30 <_ZN13Google_OAuth24loopEv+0x298>)
 80a0c8a:	a808      	add	r0, sp, #32
 80a0c8c:	f001 fe3c 	bl	80a2908 <_ZN6String6formatEPKcz>
 80a0c90:	9a08      	ldr	r2, [sp, #32]
 80a0c92:	4921      	ldr	r1, [pc, #132]	; (80a0d18 <_ZN13Google_OAuth24loopEv+0x280>)
 80a0c94:	a802      	add	r0, sp, #8
 80a0c96:	f7ff fa6d 	bl	80a0174 <_ZN10CloudClass7publishEPKcS1_.isra.0>
 80a0c9a:	a803      	add	r0, sp, #12
 80a0c9c:	f7ff fb64 	bl	80a0368 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0ca0:	a808      	add	r0, sp, #32
 80a0ca2:	f001 fcb3 	bl	80a260c <_ZN6StringD1Ev>
                if (last_state == OAuth2_State::REFRESH_TOKEN) {
 80a0ca6:	f894 32bf 	ldrb.w	r3, [r4, #703]	; 0x2bf
 80a0caa:	2b02      	cmp	r3, #2
 80a0cac:	f894 32be 	ldrb.w	r3, [r4, #702]	; 0x2be
    last_state = state;
 80a0cb0:	f884 32bf 	strb.w	r3, [r4, #703]	; 0x2bf
                if (last_state == OAuth2_State::REFRESH_TOKEN) {
 80a0cb4:	d19b      	bne.n	80a0bee <_ZN13Google_OAuth24loopEv+0x156>
    state = new_state;
 80a0cb6:	2300      	movs	r3, #0
 80a0cb8:	e77a      	b.n	80a0bb0 <_ZN13Google_OAuth24loopEv+0x118>
                delay(1000);
 80a0cba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a0cbe:	f002 f87f 	bl	80a2dc0 <delay>
                DEBUG_PRINT("Device Authorized!");
 80a0cc2:	a808      	add	r0, sp, #32
 80a0cc4:	491b      	ldr	r1, [pc, #108]	; (80a0d34 <_ZN13Google_OAuth24loopEv+0x29c>)
 80a0cc6:	f001 fe1f 	bl	80a2908 <_ZN6String6formatEPKcz>
 80a0cca:	9a08      	ldr	r2, [sp, #32]
 80a0ccc:	4912      	ldr	r1, [pc, #72]	; (80a0d18 <_ZN13Google_OAuth24loopEv+0x280>)
 80a0cce:	a802      	add	r0, sp, #8
 80a0cd0:	f7ff fa50 	bl	80a0174 <_ZN10CloudClass7publishEPKcS1_.isra.0>
 80a0cd4:	a803      	add	r0, sp, #12
 80a0cd6:	f7ff fb47 	bl	80a0368 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0cda:	a808      	add	r0, sp, #32
 80a0cdc:	f001 fc96 	bl	80a260c <_ZN6StringD1Ev>
                read_token();
 80a0ce0:	4620      	mov	r0, r4
 80a0ce2:	f7ff faa9 	bl	80a0238 <_ZN13Google_OAuth210read_tokenEv>
            break;
 80a0ce6:	e765      	b.n	80a0bb4 <_ZN13Google_OAuth24loopEv+0x11c>
            DEBUG_PRINT("Loop: OAuth2_State Not Set!!!");
 80a0ce8:	a808      	add	r0, sp, #32
 80a0cea:	4913      	ldr	r1, [pc, #76]	; (80a0d38 <_ZN13Google_OAuth24loopEv+0x2a0>)
 80a0cec:	f001 fe0c 	bl	80a2908 <_ZN6String6formatEPKcz>
 80a0cf0:	9a08      	ldr	r2, [sp, #32]
 80a0cf2:	4909      	ldr	r1, [pc, #36]	; (80a0d18 <_ZN13Google_OAuth24loopEv+0x280>)
 80a0cf4:	a802      	add	r0, sp, #8
 80a0cf6:	f7ff fa3d 	bl	80a0174 <_ZN10CloudClass7publishEPKcS1_.isra.0>
 80a0cfa:	a803      	add	r0, sp, #12
 80a0cfc:	f7ff fb34 	bl	80a0368 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0d00:	a808      	add	r0, sp, #32
 80a0d02:	f001 fc83 	bl	80a260c <_ZN6StringD1Ev>
            break;
 80a0d06:	e755      	b.n	80a0bb4 <_ZN13Google_OAuth24loopEv+0x11c>
 80a0d08:	080a6b86 	.word	0x080a6b86
 80a0d0c:	080a6c90 	.word	0x080a6c90
 80a0d10:	200000d9 	.word	0x200000d9
 80a0d14:	080a6ca3 	.word	0x080a6ca3
 80a0d18:	080a6ab1 	.word	0x080a6ab1
 80a0d1c:	080a6cbb 	.word	0x080a6cbb
 80a0d20:	080a6cef 	.word	0x080a6cef
 80a0d24:	080a6d0d 	.word	0x080a6d0d
 80a0d28:	080a6d4a 	.word	0x080a6d4a
 80a0d2c:	080a6d65 	.word	0x080a6d65
 80a0d30:	080a6d81 	.word	0x080a6d81
 80a0d34:	080a6daa 	.word	0x080a6daa
 80a0d38:	080a6dbd 	.word	0x080a6dbd

080a0d3c <_GLOBAL__sub_I__ZN13Google_OAuth2C2ERK6StringS2_>:
        val_(val) {
 80a0d3c:	2200      	movs	r2, #0
 80a0d3e:	4b03      	ldr	r3, [pc, #12]	; (80a0d4c <_GLOBAL__sub_I__ZN13Google_OAuth2C2ERK6StringS2_+0x10>)
 80a0d40:	701a      	strb	r2, [r3, #0]
 80a0d42:	2201      	movs	r2, #1
 80a0d44:	4b02      	ldr	r3, [pc, #8]	; (80a0d50 <_GLOBAL__sub_I__ZN13Google_OAuth2C2ERK6StringS2_+0x14>)
 80a0d46:	701a      	strb	r2, [r3, #0]
}
 80a0d48:	4770      	bx	lr
 80a0d4a:	bf00      	nop
 80a0d4c:	200000d8 	.word	0x200000d8
 80a0d50:	200000d9 	.word	0x200000d9

080a0d54 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM15Google_CalendarFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE9_M_invokeERKSt9_Any_dataOS1_SH_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a0d54:	b470      	push	{r4, r5, r6}
	    return __source._M_access<_Functor*>();
 80a0d56:	6803      	ldr	r3, [r0, #0]
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
 80a0d58:	6809      	ldr	r1, [r1, #0]
 80a0d5a:	685c      	ldr	r4, [r3, #4]
 80a0d5c:	689d      	ldr	r5, [r3, #8]
 80a0d5e:	1066      	asrs	r6, r4, #1
 80a0d60:	eb05 0064 	add.w	r0, r5, r4, asr #1
 80a0d64:	07e4      	lsls	r4, r4, #31
 80a0d66:	bf48      	it	mi
 80a0d68:	59ac      	ldrmi	r4, [r5, r6]
 80a0d6a:	681b      	ldr	r3, [r3, #0]
 80a0d6c:	6812      	ldr	r2, [r2, #0]
 80a0d6e:	bf48      	it	mi
 80a0d70:	58e3      	ldrmi	r3, [r4, r3]
      }
 80a0d72:	bc70      	pop	{r4, r5, r6}
 80a0d74:	4718      	bx	r3

080a0d76 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM15Google_CalendarFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
	switch (__op)
 80a0d76:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80a0d78:	b538      	push	{r3, r4, r5, lr}
 80a0d7a:	4604      	mov	r4, r0
	switch (__op)
 80a0d7c:	d102      	bne.n	80a0d84 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM15Google_CalendarFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
 80a0d7e:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
 80a0d80:	6023      	str	r3, [r4, #0]
	}
 80a0d82:	e003      	b.n	80a0d8c <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM15Google_CalendarFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
	  switch (__op)
 80a0d84:	2a02      	cmp	r2, #2
 80a0d86:	d003      	beq.n	80a0d90 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM15Google_CalendarFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1a>
 80a0d88:	2a03      	cmp	r2, #3
 80a0d8a:	d00d      	beq.n	80a0da8 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM15Google_CalendarFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x32>
      }
 80a0d8c:	2000      	movs	r0, #0
 80a0d8e:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80a0d90:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
 80a0d92:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a0d94:	f7ff f97f 	bl	80a0096 <_Znwj>
 80a0d98:	4603      	mov	r3, r0
 80a0d9a:	2800      	cmp	r0, #0
 80a0d9c:	d0f0      	beq.n	80a0d80 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM15Google_CalendarFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
 80a0d9e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80a0da2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80a0da6:	e7eb      	b.n	80a0d80 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM15Google_CalendarFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
 80a0da8:	6800      	ldr	r0, [r0, #0]
 80a0daa:	2800      	cmp	r0, #0
 80a0dac:	d0ee      	beq.n	80a0d8c <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM15Google_CalendarFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
 80a0dae:	210c      	movs	r1, #12
 80a0db0:	f7ff f975 	bl	80a009e <_ZdlPvj>
 80a0db4:	e7ea      	b.n	80a0d8c <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM15Google_CalendarFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
	...

080a0db8 <_ZN15Google_CalendarC1ERK6StringRKa>:
//!                        as ID.
//!	@param[in] time_zone User time zone. It should be the same as the one use
//!                      in the Google Calendar app.
//
//*****************************************************************************
Google_Calendar::Google_Calendar(const String &calendar_id, const int8_t &time_zone)
 80a0db8:	b538      	push	{r3, r4, r5, lr}
 80a0dba:	4615      	mov	r5, r2
 80a0dbc:	4604      	mov	r4, r0
    : CALENDAR_ID(calendar_id), TIME_ZONE(time_zone)
 80a0dbe:	3004      	adds	r0, #4
 80a0dc0:	f001 fcad 	bl	80a271e <_ZN6StringC1ERKS_>
 80a0dc4:	782b      	ldrb	r3, [r5, #0]
 80a0dc6:	4d0f      	ldr	r5, [pc, #60]	; (80a0e04 <_ZN15Google_CalendarC1ERK6StringRKa+0x4c>)
 80a0dc8:	7523      	strb	r3, [r4, #20]
 80a0dca:	4b0f      	ldr	r3, [pc, #60]	; (80a0e08 <_ZN15Google_CalendarC1ERK6StringRKa+0x50>)
 80a0dcc:	490f      	ldr	r1, [pc, #60]	; (80a0e0c <_ZN15Google_CalendarC1ERK6StringRKa+0x54>)
 80a0dce:	61a3      	str	r3, [r4, #24]
 80a0dd0:	f104 001c 	add.w	r0, r4, #28
 80a0dd4:	f001 fc64 	bl	80a26a0 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0dd8:	4629      	mov	r1, r5
 80a0dda:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80a0dde:	f001 fc5f 	bl	80a26a0 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0de2:	4629      	mov	r1, r5
 80a0de4:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80a0de8:	f001 fc5a 	bl	80a26a0 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0dec:	4629      	mov	r1, r5
 80a0dee:	f104 006c 	add.w	r0, r4, #108	; 0x6c
 80a0df2:	f001 fc55 	bl	80a26a0 <_ZN6StringC1EPK19__FlashStringHelper>
{
    callback = nullptr; 
 80a0df6:	2300      	movs	r3, #0
    event_pending = false;
}
 80a0df8:	4620      	mov	r0, r4
    callback = nullptr; 
 80a0dfa:	6023      	str	r3, [r4, #0]
    event_pending = false;
 80a0dfc:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
}
 80a0e00:	bd38      	pop	{r3, r4, r5, pc}
 80a0e02:	bf00      	nop
 80a0e04:	080a6b86 	.word	0x080a6b86
 80a0e08:	006ddd00 	.word	0x006ddd00
 80a0e0c:	080a6fdb 	.word	0x080a6fdb

080a0e10 <_ZN15Google_Calendar6failedEv>:
//! @return false if did not fail, true if failed.
//
//*****************************************************************************
bool Google_Calendar::failed(void)
{
    return http_status_code != HTTP_OK;
 80a0e10:	f8b0 007c 	ldrh.w	r0, [r0, #124]	; 0x7c
}
 80a0e14:	38c8      	subs	r0, #200	; 0xc8
 80a0e16:	bf18      	it	ne
 80a0e18:	2001      	movne	r0, #1
 80a0e1a:	4770      	bx	lr

080a0e1c <_ZN15Google_Calendar16is_event_pendingEv>:
//
//*****************************************************************************
bool Google_Calendar::is_event_pending(void)
{
    return event_pending;
}
 80a0e1c:	f890 0068 	ldrb.w	r0, [r0, #104]	; 0x68
 80a0e20:	4770      	bx	lr

080a0e22 <_ZN15Google_Calendar18get_time_remainingEv>:



int32_t Google_Calendar::get_time_remaining(void) {
 80a0e22:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80a0e26:	4604      	mov	r4, r0
    
    time_t current_time = unix_time(Time.year(), Time.month(), Time.day(),
 80a0e28:	f001 ffb4 	bl	80a2d94 <_ZN9TimeClass4yearEv>
 80a0e2c:	4605      	mov	r5, r0
 80a0e2e:	f001 ffa9 	bl	80a2d84 <_ZN9TimeClass5monthEv>
 80a0e32:	4606      	mov	r6, r0
 80a0e34:	f001 ff9a 	bl	80a2d6c <_ZN9TimeClass3dayEv>
 80a0e38:	4607      	mov	r7, r0
 80a0e3a:	f001 ff73 	bl	80a2d24 <_ZN9TimeClass4hourEv>
 80a0e3e:	4680      	mov	r8, r0
 80a0e40:	f001 ff7c 	bl	80a2d3c <_ZN9TimeClass6minuteEv>
 80a0e44:	4681      	mov	r9, r0
 80a0e46:	f001 ff85 	bl	80a2d54 <_ZN9TimeClass6secondEv>
 80a0e4a:	4643      	mov	r3, r8
 80a0e4c:	e9cd 9000 	strd	r9, r0, [sp]
 80a0e50:	463a      	mov	r2, r7
 80a0e52:	4631      	mov	r1, r6
 80a0e54:	4628      	mov	r0, r5
 80a0e56:	f7ff f946 	bl	80a00e6 <_Z9unix_timeiiiiii>
                                          Time.hour(), Time.minute(), Time.second());
                                         

    if (is_event_pending()) {
 80a0e5a:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 80a0e5e:	b1ab      	cbz	r3, 80a0e8c <_ZN15Google_Calendar18get_time_remainingEv+0x6a>
        if ((event_start_datetime <= current_time) && (event_end_datetime >= current_time)) {
 80a0e60:	e9d4 3214 	ldrd	r3, r2, [r4, #80]	; 0x50
 80a0e64:	4298      	cmp	r0, r3
 80a0e66:	eb71 0202 	sbcs.w	r2, r1, r2
 80a0e6a:	db0a      	blt.n	80a0e82 <_ZN15Google_Calendar18get_time_remainingEv+0x60>
 80a0e6c:	e9d4 3216 	ldrd	r3, r2, [r4, #88]	; 0x58
 80a0e70:	4283      	cmp	r3, r0
 80a0e72:	418a      	sbcs	r2, r1
 80a0e74:	db07      	blt.n	80a0e86 <_ZN15Google_Calendar18get_time_remainingEv+0x64>
            //event is active, return remainng time (it will be negative)
            time_left = current_time - event_end_datetime;
 80a0e76:	1ac0      	subs	r0, r0, r3
        } else if ( event_start_datetime > current_time ) {
            //event is pending
            time_left = event_start_datetime - current_time;
 80a0e78:	6620      	str	r0, [r4, #96]	; 0x60
    sprintf(statusText, "Time left: %d:%02d:%02d", hours , minutes, seconds);
    DEBUG_PRINT(statusText);
    */
    return time_left;
    
}
 80a0e7a:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80a0e7c:	b003      	add	sp, #12
 80a0e7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            time_left = event_start_datetime - current_time;
 80a0e82:	1a18      	subs	r0, r3, r0
 80a0e84:	e7f8      	b.n	80a0e78 <_ZN15Google_Calendar18get_time_remainingEv+0x56>
            time_left = 0;
 80a0e86:	2300      	movs	r3, #0
        time_left = SEARCH_TIME / 1000 ;
 80a0e88:	6623      	str	r3, [r4, #96]	; 0x60
 80a0e8a:	e7f6      	b.n	80a0e7a <_ZN15Google_Calendar18get_time_remainingEv+0x58>
 80a0e8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a0e90:	69a3      	ldr	r3, [r4, #24]
 80a0e92:	fb93 f3f2 	sdiv	r3, r3, r2
 80a0e96:	e7f7      	b.n	80a0e88 <_ZN15Google_Calendar18get_time_remainingEv+0x66>

080a0e98 <_ZN15Google_Calendar15get_event_titleEv>:
{
    return event_end_datetime;
}

String Google_Calendar::get_event_title(void)
{
 80a0e98:	b510      	push	{r4, lr}
 80a0e9a:	4604      	mov	r4, r0
    return event_title;
 80a0e9c:	313c      	adds	r1, #60	; 0x3c
 80a0e9e:	f001 fc3e 	bl	80a271e <_ZN6StringC1ERKS_>
}
 80a0ea2:	4620      	mov	r0, r4
 80a0ea4:	bd10      	pop	{r4, pc}
	...

080a0ea8 <_ZN15Google_Calendar7publishERK13Google_OAuth2>:
{
 80a0ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int16_t index = 0, last_index = 0;
 80a0eac:	2500      	movs	r5, #0
{
 80a0eae:	b0a3      	sub	sp, #140	; 0x8c
 80a0eb0:	4604      	mov	r4, r0
 80a0eb2:	9102      	str	r1, [sp, #8]
    int16_t index = 0, last_index = 0;
 80a0eb4:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a0eb8:	f8ad 501e 	strh.w	r5, [sp, #30]
         */
        String format(time_t t, const char* format_spec=NULL);

        inline String format(const char* format_spec=NULL)
        {
            return format(now(), format_spec);
 80a0ebc:	f001 ff21 	bl	80a2d02 <_ZN9TimeClass3nowEv>
 80a0ec0:	f8df b1d0 	ldr.w	fp, [pc, #464]	; 80a1094 <_ZN15Google_Calendar7publishERK13Google_OAuth2+0x1ec>
    String date = split_string(date_time, 'T', index, last_index);
 80a0ec4:	f10d 061e 	add.w	r6, sp, #30
 80a0ec8:	4602      	mov	r2, r0
 80a0eca:	4659      	mov	r1, fp
 80a0ecc:	17c3      	asrs	r3, r0, #31
 80a0ece:	9500      	str	r5, [sp, #0]
 80a0ed0:	a80a      	add	r0, sp, #40	; 0x28
 80a0ed2:	f001 feb7 	bl	80a2c44 <_ZN9TimeClass6formatExPKc>
 80a0ed6:	ab07      	add	r3, sp, #28
 80a0ed8:	2254      	movs	r2, #84	; 0x54
 80a0eda:	a90a      	add	r1, sp, #40	; 0x28
 80a0edc:	a80e      	add	r0, sp, #56	; 0x38
 80a0ede:	9600      	str	r6, [sp, #0]
 80a0ee0:	f7ff f8e7 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
    String time = split_string(date_time, date_time.charAt(19), index, last_index);
 80a0ee4:	2113      	movs	r1, #19
 80a0ee6:	a80a      	add	r0, sp, #40	; 0x28
 80a0ee8:	f001 fcc4 	bl	80a2874 <_ZNK6String6charAtEj>
    String time_min = date + "T";
 80a0eec:	f8df a1a8 	ldr.w	sl, [pc, #424]	; 80a1098 <_ZN15Google_Calendar7publishERK13Google_OAuth2+0x1f0>
    String time = split_string(date_time, date_time.charAt(19), index, last_index);
 80a0ef0:	4602      	mov	r2, r0
 80a0ef2:	ab07      	add	r3, sp, #28
 80a0ef4:	a90a      	add	r1, sp, #40	; 0x28
 80a0ef6:	a812      	add	r0, sp, #72	; 0x48
 80a0ef8:	9600      	str	r6, [sp, #0]
 80a0efa:	f7ff f8da 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
	StringSumHelper(const String &s) : String(s) {}
 80a0efe:	a90e      	add	r1, sp, #56	; 0x38
 80a0f00:	a81e      	add	r0, sp, #120	; 0x78
 80a0f02:	f001 fc0c 	bl	80a271e <_ZN6StringC1ERKS_>
    String time_min = date + "T";
 80a0f06:	4651      	mov	r1, sl
 80a0f08:	a81e      	add	r0, sp, #120	; 0x78
 80a0f0a:	f001 fc62 	bl	80a27d2 <_ZplRK15StringSumHelperPKc>
 80a0f0e:	4601      	mov	r1, r0
 80a0f10:	a816      	add	r0, sp, #88	; 0x58
 80a0f12:	f001 fc04 	bl	80a271e <_ZN6StringC1ERKS_>
    time_min += time + "-07:00";
 80a0f16:	f8df 9184 	ldr.w	r9, [pc, #388]	; 80a109c <_ZN15Google_Calendar7publishERK13Google_OAuth2+0x1f4>
class StringSumHelper : public String
 80a0f1a:	a81e      	add	r0, sp, #120	; 0x78
 80a0f1c:	f001 fb76 	bl	80a260c <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
 80a0f20:	a912      	add	r1, sp, #72	; 0x48
 80a0f22:	a81e      	add	r0, sp, #120	; 0x78
 80a0f24:	f001 fbfb 	bl	80a271e <_ZN6StringC1ERKS_>
 80a0f28:	4649      	mov	r1, r9
 80a0f2a:	a81e      	add	r0, sp, #120	; 0x78
 80a0f2c:	f001 fc51 	bl	80a27d2 <_ZplRK15StringSumHelperPKc>
 80a0f30:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80a0f32:	a816      	add	r0, sp, #88	; 0x58
 80a0f34:	f001 fc2e 	bl	80a2794 <_ZN6String6concatERKS_>
class StringSumHelper : public String
 80a0f38:	a81e      	add	r0, sp, #120	; 0x78
 80a0f3a:	f001 fb67 	bl	80a260c <_ZN6StringD1Ev>
    time_t raw_time = unix_time(Time.year(), Time.month(), Time.day(), 
 80a0f3e:	f001 ff29 	bl	80a2d94 <_ZN9TimeClass4yearEv>
 80a0f42:	4607      	mov	r7, r0
 80a0f44:	f001 ff1e 	bl	80a2d84 <_ZN9TimeClass5monthEv>
 80a0f48:	4680      	mov	r8, r0
 80a0f4a:	f001 ff0f 	bl	80a2d6c <_ZN9TimeClass3dayEv>
 80a0f4e:	9005      	str	r0, [sp, #20]
 80a0f50:	f001 fee8 	bl	80a2d24 <_ZN9TimeClass4hourEv>
 80a0f54:	9004      	str	r0, [sp, #16]
 80a0f56:	f001 fef1 	bl	80a2d3c <_ZN9TimeClass6minuteEv>
 80a0f5a:	9003      	str	r0, [sp, #12]
 80a0f5c:	f001 fefa 	bl	80a2d54 <_ZN9TimeClass6secondEv>
 80a0f60:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80a0f64:	9903      	ldr	r1, [sp, #12]
 80a0f66:	9001      	str	r0, [sp, #4]
 80a0f68:	9100      	str	r1, [sp, #0]
 80a0f6a:	4638      	mov	r0, r7
 80a0f6c:	4641      	mov	r1, r8
 80a0f6e:	f7ff f8ba 	bl	80a00e6 <_Z9unix_timeiiiiii>
 80a0f72:	4680      	mov	r8, r0
    Time.zone(+0);
 80a0f74:	2000      	movs	r0, #0
    time_t raw_time = unix_time(Time.year(), Time.month(), Time.day(), 
 80a0f76:	9103      	str	r1, [sp, #12]
    Time.zone(+0);
 80a0f78:	f001 fda0 	bl	80a2abc <_ZN9TimeClass4zoneEf>
    date_time = Time.format(raw_time + (SEARCH_TIME/1000));
 80a0f7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0f80:	69a7      	ldr	r7, [r4, #24]
 80a0f82:	9903      	ldr	r1, [sp, #12]
 80a0f84:	fb97 f3f3 	sdiv	r3, r7, r3
 80a0f88:	eb13 0208 	adds.w	r2, r3, r8
 80a0f8c:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
 80a0f90:	a81e      	add	r0, sp, #120	; 0x78
 80a0f92:	4659      	mov	r1, fp
 80a0f94:	9500      	str	r5, [sp, #0]
    index = 0, last_index = 0;
 80a0f96:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a0f9a:	f8ad 501e 	strh.w	r5, [sp, #30]
    date_time = Time.format(raw_time + (SEARCH_TIME/1000));
 80a0f9e:	f001 fe51 	bl	80a2c44 <_ZN9TimeClass6formatExPKc>
 80a0fa2:	a91e      	add	r1, sp, #120	; 0x78
 80a0fa4:	a80a      	add	r0, sp, #40	; 0x28
 80a0fa6:	f001 fbc5 	bl	80a2734 <_ZN6StringaSEOS_>
 80a0faa:	a81e      	add	r0, sp, #120	; 0x78
 80a0fac:	f001 fb2e 	bl	80a260c <_ZN6StringD1Ev>
    date = split_string(date_time, 'T', index, last_index);
 80a0fb0:	ab07      	add	r3, sp, #28
 80a0fb2:	2254      	movs	r2, #84	; 0x54
 80a0fb4:	a90a      	add	r1, sp, #40	; 0x28
 80a0fb6:	a81e      	add	r0, sp, #120	; 0x78
 80a0fb8:	9600      	str	r6, [sp, #0]
 80a0fba:	f7ff f87a 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
 80a0fbe:	a91e      	add	r1, sp, #120	; 0x78
 80a0fc0:	a80e      	add	r0, sp, #56	; 0x38
 80a0fc2:	f001 fbb7 	bl	80a2734 <_ZN6StringaSEOS_>
 80a0fc6:	a81e      	add	r0, sp, #120	; 0x78
 80a0fc8:	f001 fb20 	bl	80a260c <_ZN6StringD1Ev>
    time = split_string(date_time, date_time.charAt(19), index, last_index);
 80a0fcc:	2113      	movs	r1, #19
 80a0fce:	a80a      	add	r0, sp, #40	; 0x28
 80a0fd0:	f001 fc50 	bl	80a2874 <_ZNK6String6charAtEj>
 80a0fd4:	ab07      	add	r3, sp, #28
 80a0fd6:	4602      	mov	r2, r0
 80a0fd8:	a90a      	add	r1, sp, #40	; 0x28
 80a0fda:	a81e      	add	r0, sp, #120	; 0x78
 80a0fdc:	9600      	str	r6, [sp, #0]
 80a0fde:	f7ff f868 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
 80a0fe2:	a91e      	add	r1, sp, #120	; 0x78
 80a0fe4:	a812      	add	r0, sp, #72	; 0x48
 80a0fe6:	f001 fba5 	bl	80a2734 <_ZN6StringaSEOS_>
 80a0fea:	a81e      	add	r0, sp, #120	; 0x78
 80a0fec:	f001 fb0e 	bl	80a260c <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
 80a0ff0:	a90e      	add	r1, sp, #56	; 0x38
 80a0ff2:	a81e      	add	r0, sp, #120	; 0x78
 80a0ff4:	f001 fb93 	bl	80a271e <_ZN6StringC1ERKS_>
    String time_max = date + "T";
 80a0ff8:	4651      	mov	r1, sl
 80a0ffa:	a81e      	add	r0, sp, #120	; 0x78
 80a0ffc:	f001 fbe9 	bl	80a27d2 <_ZplRK15StringSumHelperPKc>
 80a1000:	4601      	mov	r1, r0
 80a1002:	a81a      	add	r0, sp, #104	; 0x68
 80a1004:	f001 fb8b 	bl	80a271e <_ZN6StringC1ERKS_>
class StringSumHelper : public String
 80a1008:	a81e      	add	r0, sp, #120	; 0x78
 80a100a:	f001 faff 	bl	80a260c <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
 80a100e:	a912      	add	r1, sp, #72	; 0x48
 80a1010:	a81e      	add	r0, sp, #120	; 0x78
 80a1012:	f001 fb84 	bl	80a271e <_ZN6StringC1ERKS_>
    time_max += time + "-07:00";
 80a1016:	4649      	mov	r1, r9
 80a1018:	a81e      	add	r0, sp, #120	; 0x78
 80a101a:	f001 fbda 	bl	80a27d2 <_ZplRK15StringSumHelperPKc>
 80a101e:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80a1020:	a81a      	add	r0, sp, #104	; 0x68
 80a1022:	f001 fbb7 	bl	80a2794 <_ZN6String6concatERKS_>
class StringSumHelper : public String
 80a1026:	a81e      	add	r0, sp, #120	; 0x78
 80a1028:	f001 faf0 	bl	80a260c <_ZN6StringD1Ev>
    Time.zone(TIME_ZONE);
 80a102c:	f994 0014 	ldrsb.w	r0, [r4, #20]
 80a1030:	f003 fabc 	bl	80a45ac <__aeabi_i2f>
 80a1034:	f001 fd42 	bl	80a2abc <_ZN9TimeClass4zoneEf>
                                 CALENDAR_ID.c_str(), oauth2.access_token.c_str(), time_min.c_str(), time_max.c_str());
 80a1038:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80a103a:	6862      	ldr	r2, [r4, #4]
 80a103c:	9301      	str	r3, [sp, #4]
 80a103e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80a1040:	a81e      	add	r0, sp, #120	; 0x78
 80a1042:	9300      	str	r3, [sp, #0]
 80a1044:	9b02      	ldr	r3, [sp, #8]
 80a1046:	4916      	ldr	r1, [pc, #88]	; (80a10a0 <_ZN15Google_Calendar7publishERK13Google_OAuth2+0x1f8>)
 80a1048:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80a104c:	f001 fc5c 	bl	80a2908 <_ZN6String6formatEPKcz>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 80a1050:	4b14      	ldr	r3, [pc, #80]	; (80a10a4 <_ZN15Google_Calendar7publishERK13Google_OAuth2+0x1fc>)
 80a1052:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80a1054:	781b      	ldrb	r3, [r3, #0]
 80a1056:	69e1      	ldr	r1, [r4, #28]
 80a1058:	f88d 3000 	strb.w	r3, [sp]
 80a105c:	a808      	add	r0, sp, #32
 80a105e:	233c      	movs	r3, #60	; 0x3c
 80a1060:	f002 f8d8 	bl	80a3214 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a1064:	a809      	add	r0, sp, #36	; 0x24
 80a1066:	f7ff f97f 	bl	80a0368 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a106a:	a81e      	add	r0, sp, #120	; 0x78
 80a106c:	f001 face 	bl	80a260c <_ZN6StringD1Ev>
    String time_max = date + "T";
 80a1070:	a81a      	add	r0, sp, #104	; 0x68
 80a1072:	f001 facb 	bl	80a260c <_ZN6StringD1Ev>
    String time_min = date + "T";
 80a1076:	a816      	add	r0, sp, #88	; 0x58
 80a1078:	f001 fac8 	bl	80a260c <_ZN6StringD1Ev>
    String time = split_string(date_time, date_time.charAt(19), index, last_index);
 80a107c:	a812      	add	r0, sp, #72	; 0x48
 80a107e:	f001 fac5 	bl	80a260c <_ZN6StringD1Ev>
    String date = split_string(date_time, 'T', index, last_index);
 80a1082:	a80e      	add	r0, sp, #56	; 0x38
 80a1084:	f001 fac2 	bl	80a260c <_ZN6StringD1Ev>
    String date_time = Time.format();
 80a1088:	a80a      	add	r0, sp, #40	; 0x28
 80a108a:	f001 fabf 	bl	80a260c <_ZN6StringD1Ev>
}
 80a108e:	b023      	add	sp, #140	; 0x8c
 80a1090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1094:	20000544 	.word	0x20000544
 80a1098:	080a7955 	.word	0x080a7955
 80a109c:	080a6fea 	.word	0x080a6fea
 80a10a0:	080a6ff1 	.word	0x080a6ff1
 80a10a4:	200000db 	.word	0x200000db

080a10a8 <_ZN15Google_Calendar11print_errorEv>:
{
 80a10a8:	b510      	push	{r4, lr}
 80a10aa:	4604      	mov	r4, r0
 80a10ac:	b088      	sub	sp, #32
    Serial.println(http_error);
 80a10ae:	f002 faed 	bl	80a368c <_Z16_fetch_usbserialv>
 80a10b2:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80a10b4:	f001 fc85 	bl	80a29c2 <_ZN5Print7printlnEPKc>
    DEBUG_PRINT(http_error);
 80a10b8:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80a10ba:	a804      	add	r0, sp, #16
 80a10bc:	f001 fc24 	bl	80a2908 <_ZN6String6formatEPKcz>
 80a10c0:	4b08      	ldr	r3, [pc, #32]	; (80a10e4 <_ZN15Google_Calendar11print_errorEv+0x3c>)
 80a10c2:	9a04      	ldr	r2, [sp, #16]
 80a10c4:	781b      	ldrb	r3, [r3, #0]
 80a10c6:	4908      	ldr	r1, [pc, #32]	; (80a10e8 <_ZN15Google_Calendar11print_errorEv+0x40>)
 80a10c8:	f88d 3000 	strb.w	r3, [sp]
 80a10cc:	a802      	add	r0, sp, #8
 80a10ce:	233c      	movs	r3, #60	; 0x3c
 80a10d0:	f002 f8a0 	bl	80a3214 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a10d4:	a803      	add	r0, sp, #12
 80a10d6:	f7ff f947 	bl	80a0368 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a10da:	a804      	add	r0, sp, #16
 80a10dc:	f001 fa96 	bl	80a260c <_ZN6StringD1Ev>
}
 80a10e0:	b008      	add	sp, #32
 80a10e2:	bd10      	pop	{r4, pc}
 80a10e4:	200000da 	.word	0x200000da
 80a10e8:	080a6ab1 	.word	0x080a6ab1

080a10ec <_ZN15Google_Calendar16convert_datetimeE6String>:

time_t Google_Calendar::convert_datetime(String event_date_time) {
    //  The event start date and time is a string RFC3339 timestamp.
    //  i.e. 2011-06-03T10:00:00-07:00.
    //  It is splited and converted into a unix timestamp.
    int16_t index = 0, last_index = 0;
 80a10ec:	2300      	movs	r3, #0
time_t Google_Calendar::convert_datetime(String event_date_time) {
 80a10ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a10f2:	b095      	sub	sp, #84	; 0x54
    int year = split_string(event_date_time, '-', index, last_index).toInt();
 80a10f4:	f10d 0516 	add.w	r5, sp, #22
 80a10f8:	222d      	movs	r2, #45	; 0x2d
    int16_t index = 0, last_index = 0;
 80a10fa:	f8ad 3014 	strh.w	r3, [sp, #20]
 80a10fe:	f8ad 3016 	strh.w	r3, [sp, #22]
    int year = split_string(event_date_time, '-', index, last_index).toInt();
 80a1102:	9500      	str	r5, [sp, #0]
 80a1104:	ab05      	add	r3, sp, #20
 80a1106:	a80c      	add	r0, sp, #48	; 0x30
time_t Google_Calendar::convert_datetime(String event_date_time) {
 80a1108:	460c      	mov	r4, r1
    int year = split_string(event_date_time, '-', index, last_index).toInt();
 80a110a:	f7fe ffd2 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
 80a110e:	a80c      	add	r0, sp, #48	; 0x30
 80a1110:	f001 fbf4 	bl	80a28fc <_ZNK6String5toIntEv>
 80a1114:	4606      	mov	r6, r0
 80a1116:	a80c      	add	r0, sp, #48	; 0x30
 80a1118:	f001 fa78 	bl	80a260c <_ZN6StringD1Ev>
    int month = split_string(event_date_time, '-', index, last_index).toInt();
 80a111c:	4621      	mov	r1, r4
 80a111e:	ab05      	add	r3, sp, #20
 80a1120:	222d      	movs	r2, #45	; 0x2d
 80a1122:	9500      	str	r5, [sp, #0]
 80a1124:	a80c      	add	r0, sp, #48	; 0x30
 80a1126:	f7fe ffc4 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
 80a112a:	a80c      	add	r0, sp, #48	; 0x30
 80a112c:	f001 fbe6 	bl	80a28fc <_ZNK6String5toIntEv>
 80a1130:	4607      	mov	r7, r0
 80a1132:	a80c      	add	r0, sp, #48	; 0x30
 80a1134:	f001 fa6a 	bl	80a260c <_ZN6StringD1Ev>
    int day = split_string(event_date_time, 'T', index, last_index).toInt();
 80a1138:	4621      	mov	r1, r4
 80a113a:	ab05      	add	r3, sp, #20
 80a113c:	2254      	movs	r2, #84	; 0x54
 80a113e:	9500      	str	r5, [sp, #0]
 80a1140:	a80c      	add	r0, sp, #48	; 0x30
 80a1142:	f7fe ffb6 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
 80a1146:	a80c      	add	r0, sp, #48	; 0x30
 80a1148:	f001 fbd8 	bl	80a28fc <_ZNK6String5toIntEv>
 80a114c:	4680      	mov	r8, r0
 80a114e:	a80c      	add	r0, sp, #48	; 0x30
 80a1150:	f001 fa5c 	bl	80a260c <_ZN6StringD1Ev>
    int hour = split_string(event_date_time, ':', index, last_index).toInt();
 80a1154:	4621      	mov	r1, r4
 80a1156:	ab05      	add	r3, sp, #20
 80a1158:	223a      	movs	r2, #58	; 0x3a
 80a115a:	9500      	str	r5, [sp, #0]
 80a115c:	a80c      	add	r0, sp, #48	; 0x30
 80a115e:	f7fe ffa8 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
 80a1162:	a80c      	add	r0, sp, #48	; 0x30
 80a1164:	f001 fbca 	bl	80a28fc <_ZNK6String5toIntEv>
 80a1168:	4681      	mov	r9, r0
 80a116a:	a80c      	add	r0, sp, #48	; 0x30
 80a116c:	f001 fa4e 	bl	80a260c <_ZN6StringD1Ev>
    int min = split_string(event_date_time, ':', index, last_index).toInt();
 80a1170:	ab05      	add	r3, sp, #20
 80a1172:	223a      	movs	r2, #58	; 0x3a
 80a1174:	4621      	mov	r1, r4
 80a1176:	9500      	str	r5, [sp, #0]
 80a1178:	a80c      	add	r0, sp, #48	; 0x30
 80a117a:	f7fe ff9a 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
 80a117e:	a80c      	add	r0, sp, #48	; 0x30
 80a1180:	f001 fbbc 	bl	80a28fc <_ZNK6String5toIntEv>
 80a1184:	4682      	mov	sl, r0
 80a1186:	a80c      	add	r0, sp, #48	; 0x30
 80a1188:	f001 fa40 	bl	80a260c <_ZN6StringD1Ev>
    int sec = split_string(event_date_time, event_date_time.charAt(19), index, last_index).toInt();
 80a118c:	2113      	movs	r1, #19
 80a118e:	4620      	mov	r0, r4
 80a1190:	f001 fb70 	bl	80a2874 <_ZNK6String6charAtEj>
 80a1194:	4621      	mov	r1, r4
 80a1196:	4602      	mov	r2, r0
 80a1198:	ab05      	add	r3, sp, #20
 80a119a:	9500      	str	r5, [sp, #0]
 80a119c:	a80c      	add	r0, sp, #48	; 0x30
 80a119e:	f7fe ff88 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
 80a11a2:	a80c      	add	r0, sp, #48	; 0x30
 80a11a4:	f001 fbaa 	bl	80a28fc <_ZNK6String5toIntEv>
 80a11a8:	4604      	mov	r4, r0
 80a11aa:	a80c      	add	r0, sp, #48	; 0x30
 80a11ac:	f001 fa2e 	bl	80a260c <_ZN6StringD1Ev>
    time_t event_time = unix_time(year, month, day, hour, min, sec);
 80a11b0:	464b      	mov	r3, r9
 80a11b2:	4642      	mov	r2, r8
 80a11b4:	4639      	mov	r1, r7
 80a11b6:	4630      	mov	r0, r6
 80a11b8:	e9cd a400 	strd	sl, r4, [sp]
 80a11bc:	f7fe ff93 	bl	80a00e6 <_Z9unix_timeiiiiii>
 80a11c0:	4683      	mov	fp, r0
 80a11c2:	460d      	mov	r5, r1
    //  Change to UTC+0:00 since the unix timestamp already considers the user time zone.
    char  statusText[32];
    sprintf(statusText, "%d-%d-%d %d:%02d:%02d", year,month,day,hour,min,sec);
 80a11c4:	463b      	mov	r3, r7
 80a11c6:	4632      	mov	r2, r6
 80a11c8:	4912      	ldr	r1, [pc, #72]	; (80a1214 <_ZN15Google_Calendar16convert_datetimeE6String+0x128>)
 80a11ca:	e9cd a402 	strd	sl, r4, [sp, #8]
 80a11ce:	e9cd 8900 	strd	r8, r9, [sp]
 80a11d2:	a80c      	add	r0, sp, #48	; 0x30
 80a11d4:	f001 f990 	bl	80a24f8 <sprintf>
    delay(1000);
 80a11d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a11dc:	f001 fdf0 	bl	80a2dc0 <delay>
    DEBUG_PRINT(statusText);
 80a11e0:	a90c      	add	r1, sp, #48	; 0x30
 80a11e2:	a808      	add	r0, sp, #32
 80a11e4:	f001 fb90 	bl	80a2908 <_ZN6String6formatEPKcz>
 80a11e8:	4b0b      	ldr	r3, [pc, #44]	; (80a1218 <_ZN15Google_Calendar16convert_datetimeE6String+0x12c>)
 80a11ea:	9a08      	ldr	r2, [sp, #32]
 80a11ec:	781b      	ldrb	r3, [r3, #0]
 80a11ee:	490b      	ldr	r1, [pc, #44]	; (80a121c <_ZN15Google_Calendar16convert_datetimeE6String+0x130>)
 80a11f0:	f88d 3000 	strb.w	r3, [sp]
 80a11f4:	a806      	add	r0, sp, #24
 80a11f6:	233c      	movs	r3, #60	; 0x3c
 80a11f8:	f002 f80c 	bl	80a3214 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a11fc:	a807      	add	r0, sp, #28
 80a11fe:	f7ff f8b3 	bl	80a0368 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1202:	a808      	add	r0, sp, #32
 80a1204:	f001 fa02 	bl	80a260c <_ZN6StringD1Ev>
    return event_time;
}
 80a1208:	4658      	mov	r0, fp
 80a120a:	4629      	mov	r1, r5
 80a120c:	b015      	add	sp, #84	; 0x54
 80a120e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1212:	bf00      	nop
 80a1214:	080a703a 	.word	0x080a703a
 80a1218:	200000da 	.word	0x200000da
 80a121c:	080a6ab1 	.word	0x080a6ab1

080a1220 <_ZN15Google_Calendar6parserEPKcS1_>:
{
 80a1220:	b5f0      	push	{r4, r5, r6, r7, lr}
    int16_t index = 0, last_index = 0;
 80a1222:	2600      	movs	r6, #0
{
 80a1224:	460d      	mov	r5, r1
 80a1226:	b09d      	sub	sp, #116	; 0x74
    String str_data = String(data);
 80a1228:	4611      	mov	r1, r2
{
 80a122a:	4604      	mov	r4, r0
    String str_data = String(data);
 80a122c:	a804      	add	r0, sp, #16
    int16_t index = 0, last_index = 0;
 80a122e:	f8ad 600c 	strh.w	r6, [sp, #12]
 80a1232:	f8ad 600e 	strh.w	r6, [sp, #14]
    String str_data = String(data);
 80a1236:	f001 fa33 	bl	80a26a0 <_ZN6StringC1EPK19__FlashStringHelper>
    String str_event = String(event);
 80a123a:	4629      	mov	r1, r5
 80a123c:	a808      	add	r0, sp, #32
 80a123e:	f001 fa2f 	bl	80a26a0 <_ZN6StringC1EPK19__FlashStringHelper>
    String event_start;
 80a1242:	4957      	ldr	r1, [pc, #348]	; (80a13a0 <_ZN15Google_Calendar6parserEPKcS1_+0x180>)
 80a1244:	a80c      	add	r0, sp, #48	; 0x30
 80a1246:	f001 fa2b 	bl	80a26a0 <_ZN6StringC1EPK19__FlashStringHelper>
    split_string(str_event, '/', index, last_index); // skip deviceID.
 80a124a:	f10d 050e 	add.w	r5, sp, #14
    String event_end; 
 80a124e:	4954      	ldr	r1, [pc, #336]	; (80a13a0 <_ZN15Google_Calendar6parserEPKcS1_+0x180>)
 80a1250:	a810      	add	r0, sp, #64	; 0x40
 80a1252:	f001 fa25 	bl	80a26a0 <_ZN6StringC1EPK19__FlashStringHelper>
    split_string(str_event, '/', index, last_index); // skip deviceID.
 80a1256:	222f      	movs	r2, #47	; 0x2f
 80a1258:	ab03      	add	r3, sp, #12
 80a125a:	a908      	add	r1, sp, #32
 80a125c:	a818      	add	r0, sp, #96	; 0x60
 80a125e:	9500      	str	r5, [sp, #0]
 80a1260:	f7fe ff27 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
 80a1264:	a818      	add	r0, sp, #96	; 0x60
 80a1266:	f001 f9d1 	bl	80a260c <_ZN6StringD1Ev>
    String hook = split_string(str_event, '/', index, last_index);
 80a126a:	a908      	add	r1, sp, #32
 80a126c:	a814      	add	r0, sp, #80	; 0x50
 80a126e:	222f      	movs	r2, #47	; 0x2f
 80a1270:	9500      	str	r5, [sp, #0]
 80a1272:	ab03      	add	r3, sp, #12
 80a1274:	f7fe ff1d 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
    if (hook.equals("hook-response"))
 80a1278:	494a      	ldr	r1, [pc, #296]	; (80a13a4 <_ZN15Google_Calendar6parserEPKcS1_+0x184>)
 80a127a:	a814      	add	r0, sp, #80	; 0x50
    index = 0, last_index = 0;
 80a127c:	f8ad 600c 	strh.w	r6, [sp, #12]
 80a1280:	f8ad 600e 	strh.w	r6, [sp, #14]
    if (hook.equals("hook-response"))
 80a1284:	f001 fadb 	bl	80a283e <_ZNK6String6equalsEPKc>
 80a1288:	2800      	cmp	r0, #0
 80a128a:	d073      	beq.n	80a1374 <_ZN15Google_Calendar6parserEPKcS1_+0x154>
        if (str_data.equals("~~~"))
 80a128c:	4946      	ldr	r1, [pc, #280]	; (80a13a8 <_ZN15Google_Calendar6parserEPKcS1_+0x188>)
 80a128e:	a804      	add	r0, sp, #16
 80a1290:	f001 fad5 	bl	80a283e <_ZNK6String6equalsEPKc>
 80a1294:	4607      	mov	r7, r0
 80a1296:	b1a8      	cbz	r0, 80a12c4 <_ZN15Google_Calendar6parserEPKcS1_+0xa4>
            event_pending = false;
 80a1298:	f884 6068 	strb.w	r6, [r4, #104]	; 0x68
        http_status_code = HTTP_OK;
 80a129c:	23c8      	movs	r3, #200	; 0xc8
 80a129e:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
    String hook = split_string(str_event, '/', index, last_index);
 80a12a2:	a814      	add	r0, sp, #80	; 0x50
 80a12a4:	f001 f9b2 	bl	80a260c <_ZN6StringD1Ev>
    String event_end; 
 80a12a8:	a810      	add	r0, sp, #64	; 0x40
 80a12aa:	f001 f9af 	bl	80a260c <_ZN6StringD1Ev>
    String event_start;
 80a12ae:	a80c      	add	r0, sp, #48	; 0x30
 80a12b0:	f001 f9ac 	bl	80a260c <_ZN6StringD1Ev>
    String str_event = String(event);
 80a12b4:	a808      	add	r0, sp, #32
 80a12b6:	f001 f9a9 	bl	80a260c <_ZN6StringD1Ev>
    String str_data = String(data);
 80a12ba:	a804      	add	r0, sp, #16
 80a12bc:	f001 f9a6 	bl	80a260c <_ZN6StringD1Ev>
}
 80a12c0:	b01d      	add	sp, #116	; 0x74
 80a12c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            event_title = split_string(str_data, '~', index, last_index);;
 80a12c4:	227e      	movs	r2, #126	; 0x7e
 80a12c6:	ab03      	add	r3, sp, #12
 80a12c8:	a904      	add	r1, sp, #16
 80a12ca:	a818      	add	r0, sp, #96	; 0x60
 80a12cc:	9500      	str	r5, [sp, #0]
 80a12ce:	f7fe fef0 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
 80a12d2:	a918      	add	r1, sp, #96	; 0x60
 80a12d4:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80a12d8:	f001 fa2c 	bl	80a2734 <_ZN6StringaSEOS_>
 80a12dc:	a818      	add	r0, sp, #96	; 0x60
 80a12de:	f001 f995 	bl	80a260c <_ZN6StringD1Ev>
            event_start = split_string(str_data, '~', index, last_index);;
 80a12e2:	227e      	movs	r2, #126	; 0x7e
 80a12e4:	ab03      	add	r3, sp, #12
 80a12e6:	a904      	add	r1, sp, #16
 80a12e8:	a818      	add	r0, sp, #96	; 0x60
 80a12ea:	9500      	str	r5, [sp, #0]
 80a12ec:	f7fe fee1 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
 80a12f0:	a918      	add	r1, sp, #96	; 0x60
 80a12f2:	a80c      	add	r0, sp, #48	; 0x30
 80a12f4:	f001 fa1e 	bl	80a2734 <_ZN6StringaSEOS_>
 80a12f8:	a818      	add	r0, sp, #96	; 0x60
 80a12fa:	f001 f987 	bl	80a260c <_ZN6StringD1Ev>
            event_end = split_string(str_data, '~', index, last_index);;
 80a12fe:	227e      	movs	r2, #126	; 0x7e
 80a1300:	ab03      	add	r3, sp, #12
 80a1302:	a904      	add	r1, sp, #16
 80a1304:	a818      	add	r0, sp, #96	; 0x60
 80a1306:	9500      	str	r5, [sp, #0]
 80a1308:	f7fe fed3 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
 80a130c:	a918      	add	r1, sp, #96	; 0x60
 80a130e:	a810      	add	r0, sp, #64	; 0x40
 80a1310:	f001 fa10 	bl	80a2734 <_ZN6StringaSEOS_>
 80a1314:	a818      	add	r0, sp, #96	; 0x60
 80a1316:	f001 f979 	bl	80a260c <_ZN6StringD1Ev>
            event_location = split_string(str_data, '\0', index, last_index);
 80a131a:	ab03      	add	r3, sp, #12
 80a131c:	463a      	mov	r2, r7
 80a131e:	a904      	add	r1, sp, #16
 80a1320:	a818      	add	r0, sp, #96	; 0x60
 80a1322:	9500      	str	r5, [sp, #0]
 80a1324:	f7fe fec5 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
 80a1328:	a918      	add	r1, sp, #96	; 0x60
 80a132a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80a132e:	f001 fa01 	bl	80a2734 <_ZN6StringaSEOS_>
 80a1332:	a818      	add	r0, sp, #96	; 0x60
 80a1334:	f001 f96a 	bl	80a260c <_ZN6StringD1Ev>
            event_start_datetime = convert_datetime(event_start);
 80a1338:	a90c      	add	r1, sp, #48	; 0x30
 80a133a:	a818      	add	r0, sp, #96	; 0x60
 80a133c:	f001 f9ef 	bl	80a271e <_ZN6StringC1ERKS_>
 80a1340:	4620      	mov	r0, r4
 80a1342:	a918      	add	r1, sp, #96	; 0x60
 80a1344:	f7ff fed2 	bl	80a10ec <_ZN15Google_Calendar16convert_datetimeE6String>
 80a1348:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
 80a134c:	a818      	add	r0, sp, #96	; 0x60
 80a134e:	f001 f95d 	bl	80a260c <_ZN6StringD1Ev>
            event_end_datetime = convert_datetime(event_end); 
 80a1352:	a910      	add	r1, sp, #64	; 0x40
 80a1354:	a818      	add	r0, sp, #96	; 0x60
 80a1356:	f001 f9e2 	bl	80a271e <_ZN6StringC1ERKS_>
 80a135a:	4620      	mov	r0, r4
 80a135c:	a918      	add	r1, sp, #96	; 0x60
 80a135e:	f7ff fec5 	bl	80a10ec <_ZN15Google_Calendar16convert_datetimeE6String>
 80a1362:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
 80a1366:	a818      	add	r0, sp, #96	; 0x60
 80a1368:	f001 f950 	bl	80a260c <_ZN6StringD1Ev>
            event_pending = true;
 80a136c:	2301      	movs	r3, #1
 80a136e:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 80a1372:	e793      	b.n	80a129c <_ZN15Google_Calendar6parserEPKcS1_+0x7c>
    else if (hook.equals("hook-error"))
 80a1374:	490d      	ldr	r1, [pc, #52]	; (80a13ac <_ZN15Google_Calendar6parserEPKcS1_+0x18c>)
 80a1376:	a814      	add	r0, sp, #80	; 0x50
 80a1378:	f001 fa61 	bl	80a283e <_ZNK6String6equalsEPKc>
 80a137c:	2800      	cmp	r0, #0
 80a137e:	d090      	beq.n	80a12a2 <_ZN15Google_Calendar6parserEPKcS1_+0x82>
        http_status_code = str_data.substring(13, 16).toInt();
 80a1380:	2310      	movs	r3, #16
 80a1382:	220d      	movs	r2, #13
 80a1384:	eb0d 0103 	add.w	r1, sp, r3
 80a1388:	a818      	add	r0, sp, #96	; 0x60
 80a138a:	f001 fa95 	bl	80a28b8 <_ZNK6String9substringEjj>
 80a138e:	a818      	add	r0, sp, #96	; 0x60
 80a1390:	f001 fab4 	bl	80a28fc <_ZNK6String5toIntEv>
 80a1394:	f8a4 007c 	strh.w	r0, [r4, #124]	; 0x7c
 80a1398:	a818      	add	r0, sp, #96	; 0x60
 80a139a:	f001 f937 	bl	80a260c <_ZN6StringD1Ev>
 80a139e:	e780      	b.n	80a12a2 <_ZN15Google_Calendar6parserEPKcS1_+0x82>
 80a13a0:	080a6b86 	.word	0x080a6b86
 80a13a4:	080a6aa3 	.word	0x080a6aa3
 80a13a8:	080a7050 	.word	0x080a7050
 80a13ac:	080a6ab7 	.word	0x080a6ab7

080a13b0 <_ZN15Google_Calendar16response_handlerEPKcS1_>:
{
 80a13b0:	b510      	push	{r4, lr}
 80a13b2:	4604      	mov	r4, r0
    parser(event, data);
 80a13b4:	f7ff ff34 	bl	80a1220 <_ZN15Google_Calendar6parserEPKcS1_>
    (*callback)();
 80a13b8:	6823      	ldr	r3, [r4, #0]
}
 80a13ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    (*callback)();
 80a13be:	4718      	bx	r3

080a13c0 <_ZN15Google_Calendar13error_handlerEPKcS1_>:
{
 80a13c0:	b530      	push	{r4, r5, lr}
 80a13c2:	4604      	mov	r4, r0
 80a13c4:	b085      	sub	sp, #20
    parser(event, data);
 80a13c6:	f7ff ff2b 	bl	80a1220 <_ZN15Google_Calendar6parserEPKcS1_>
    http_error = String::format("\r\nHTTP ERROR - %d", http_status_code);
 80a13ca:	f104 056c 	add.w	r5, r4, #108	; 0x6c
 80a13ce:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
 80a13d2:	4668      	mov	r0, sp
 80a13d4:	4911      	ldr	r1, [pc, #68]	; (80a141c <_ZN15Google_Calendar13error_handlerEPKcS1_+0x5c>)
 80a13d6:	f001 fa97 	bl	80a2908 <_ZN6String6formatEPKcz>
 80a13da:	4669      	mov	r1, sp
 80a13dc:	4628      	mov	r0, r5
 80a13de:	f001 f9a9 	bl	80a2734 <_ZN6StringaSEOS_>
 80a13e2:	4668      	mov	r0, sp
 80a13e4:	f001 f912 	bl	80a260c <_ZN6StringD1Ev>
    if (http_status_code == HTTP_BAD_REQUEST)
 80a13e8:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 80a13ec:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80a13f0:	d108      	bne.n	80a1404 <_ZN15Google_Calendar13error_handlerEPKcS1_+0x44>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 80a13f2:	490b      	ldr	r1, [pc, #44]	; (80a1420 <_ZN15Google_Calendar13error_handlerEPKcS1_+0x60>)
 80a13f4:	4628      	mov	r0, r5
 80a13f6:	f001 f9d1 	bl	80a279c <_ZN6String6concatEPKc>
    (*callback)();
 80a13fa:	6823      	ldr	r3, [r4, #0]
}
 80a13fc:	b005      	add	sp, #20
 80a13fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    (*callback)();
 80a1402:	4718      	bx	r3
    else if (http_status_code == HTTP_UNAUTHORIZED)
 80a1404:	f240 1291 	movw	r2, #401	; 0x191
 80a1408:	4293      	cmp	r3, r2
 80a140a:	d101      	bne.n	80a1410 <_ZN15Google_Calendar13error_handlerEPKcS1_+0x50>
 80a140c:	4905      	ldr	r1, [pc, #20]	; (80a1424 <_ZN15Google_Calendar13error_handlerEPKcS1_+0x64>)
 80a140e:	e7f1      	b.n	80a13f4 <_ZN15Google_Calendar13error_handlerEPKcS1_+0x34>
    else if (http_status_code == HTTP_NOT_FOUND)
 80a1410:	f5b3 7fca 	cmp.w	r3, #404	; 0x194
 80a1414:	d1f1      	bne.n	80a13fa <_ZN15Google_Calendar13error_handlerEPKcS1_+0x3a>
 80a1416:	4904      	ldr	r1, [pc, #16]	; (80a1428 <_ZN15Google_Calendar13error_handlerEPKcS1_+0x68>)
 80a1418:	e7ec      	b.n	80a13f4 <_ZN15Google_Calendar13error_handlerEPKcS1_+0x34>
 80a141a:	bf00      	nop
 80a141c:	080a6bbd 	.word	0x080a6bbd
 80a1420:	080a7054 	.word	0x080a7054
 80a1424:	080a709f 	.word	0x080a709f
 80a1428:	080a70bd 	.word	0x080a70bd

080a142c <_ZN10CloudClass9subscribeI15Google_CalendarEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0>:
    bool subscribe(const char *eventName, void (T::*handler)(const char *, const char *), T *instance, Spark_Subscription_Scope_TypeDef scope)
 80a142c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a142e:	461f      	mov	r7, r3
    _Function_base() : _M_manager(nullptr) { }
 80a1430:	2300      	movs	r3, #0
 80a1432:	b091      	sub	sp, #68	; 0x44
 80a1434:	ad02      	add	r5, sp, #8
 80a1436:	e885 0006 	stmia.w	r5, {r1, r2}
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a143a:	ac05      	add	r4, sp, #20
 80a143c:	4606      	mov	r6, r0
 80a143e:	e895 0003 	ldmia.w	r5, {r0, r1}
 80a1442:	e884 0005 	stmia.w	r4, {r0, r2}
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1446:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
 80a1448:	930a      	str	r3, [sp, #40]	; 0x28
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a144a:	f7fe fe24 	bl	80a0096 <_Znwj>
 80a144e:	4602      	mov	r2, r0
 80a1450:	b120      	cbz	r0, 80a145c <_ZN10CloudClass9subscribeI15Google_CalendarEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0+0x30>
      _Bind(_Bind&&) = default;
 80a1452:	e894 0003 	ldmia.w	r4, {r0, r1}
 80a1456:	e882 0003 	stmia.w	r2, {r0, r1}
 80a145a:	6097      	str	r7, [r2, #8]
	    _M_invoker = &_My_handler::_M_invoke;
 80a145c:	4b12      	ldr	r3, [pc, #72]	; (80a14a8 <_ZN10CloudClass9subscribeI15Google_CalendarEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0+0x7c>)
        return subscribe_wiring(eventName, handler, scope);
 80a145e:	a908      	add	r1, sp, #32
 80a1460:	930b      	str	r3, [sp, #44]	; 0x2c
	    _M_manager = &_My_handler::_M_manager;
 80a1462:	4b12      	ldr	r3, [pc, #72]	; (80a14ac <_ZN10CloudClass9subscribeI15Google_CalendarEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0+0x80>)
 80a1464:	a80c      	add	r0, sp, #48	; 0x30
 80a1466:	930a      	str	r3, [sp, #40]	; 0x28
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1468:	9208      	str	r2, [sp, #32]
 80a146a:	f7ff fa5b 	bl	80a0924 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
        if (handler) // if the call-wrapper has wrapped a callable object
 80a146e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80a1470:	b18b      	cbz	r3, 80a1496 <_ZN10CloudClass9subscribeI15Google_CalendarEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0+0x6a>
            auto wrapper = new wiring_event_handler_t(handler);
 80a1472:	2010      	movs	r0, #16
 80a1474:	f7fe fe0f 	bl	80a0096 <_Znwj>
 80a1478:	4604      	mov	r4, r0
 80a147a:	b160      	cbz	r0, 80a1496 <_ZN10CloudClass9subscribeI15Google_CalendarEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0+0x6a>
 80a147c:	a90c      	add	r1, sp, #48	; 0x30
 80a147e:	f7ff fa51 	bl	80a0924 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
                success = spark_subscribe(eventName, (EventHandler)call_wiring_event_handler, wrapper, scope, deviceID, NULL);
 80a1482:	2300      	movs	r3, #0
 80a1484:	4622      	mov	r2, r4
 80a1486:	e9cd 3300 	strd	r3, r3, [sp]
 80a148a:	4630      	mov	r0, r6
 80a148c:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80a1490:	4907      	ldr	r1, [pc, #28]	; (80a14b0 <_ZN10CloudClass9subscribeI15Google_CalendarEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0+0x84>)
 80a1492:	f000 fff9 	bl	80a2488 <spark_subscribe>
    class function<_Res(_ArgTypes...)>
 80a1496:	a80c      	add	r0, sp, #48	; 0x30
 80a1498:	f7fe fe7a 	bl	80a0190 <_ZNSt14_Function_baseD1Ev>
 80a149c:	a808      	add	r0, sp, #32
 80a149e:	f7fe fe77 	bl	80a0190 <_ZNSt14_Function_baseD1Ev>
    }
 80a14a2:	b011      	add	sp, #68	; 0x44
 80a14a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a14a6:	bf00      	nop
 80a14a8:	080a0d55 	.word	0x080a0d55
 80a14ac:	080a0d77 	.word	0x080a0d77
 80a14b0:	080a300b 	.word	0x080a300b

080a14b4 <_ZN15Google_Calendar9subscribeEPFvvE>:
{
 80a14b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    this->callback = callback;
 80a14b6:	4607      	mov	r7, r0
{
 80a14b8:	b093      	sub	sp, #76	; 0x4c
 80a14ba:	ad0a      	add	r5, sp, #40	; 0x28
	StringSumHelper(const String &s) : String(s) {}
 80a14bc:	ac0e      	add	r4, sp, #56	; 0x38
    this->callback = callback;
 80a14be:	f847 1b1c 	str.w	r1, [r7], #28
{
 80a14c2:	4606      	mov	r6, r0
 80a14c4:	4628      	mov	r0, r5
 80a14c6:	f000 ffcf 	bl	80a2468 <spark_deviceID>
 80a14ca:	4629      	mov	r1, r5
 80a14cc:	4620      	mov	r0, r4
 80a14ce:	f001 f926 	bl	80a271e <_ZN6StringC1ERKS_>
    String hook_reponse = System.deviceID() + "/hook-response/" + WEBHOOK_EVENT_NAME;
 80a14d2:	4620      	mov	r0, r4
 80a14d4:	4922      	ldr	r1, [pc, #136]	; (80a1560 <_ZN15Google_Calendar9subscribeEPFvvE+0xac>)
 80a14d6:	f001 f97c 	bl	80a27d2 <_ZplRK15StringSumHelperPKc>
 80a14da:	4639      	mov	r1, r7
 80a14dc:	f001 f96d 	bl	80a27ba <_ZplRK15StringSumHelperRK6String>
 80a14e0:	4601      	mov	r1, r0
 80a14e2:	a802      	add	r0, sp, #8
 80a14e4:	f001 f91b 	bl	80a271e <_ZN6StringC1ERKS_>
class StringSumHelper : public String
 80a14e8:	4620      	mov	r0, r4
 80a14ea:	f001 f88f 	bl	80a260c <_ZN6StringD1Ev>
 80a14ee:	4628      	mov	r0, r5
 80a14f0:	f001 f88c 	bl	80a260c <_ZN6StringD1Ev>
 80a14f4:	4628      	mov	r0, r5
 80a14f6:	f000 ffb7 	bl	80a2468 <spark_deviceID>
	StringSumHelper(const String &s) : String(s) {}
 80a14fa:	4629      	mov	r1, r5
 80a14fc:	4620      	mov	r0, r4
 80a14fe:	f001 f90e 	bl	80a271e <_ZN6StringC1ERKS_>
    String hook_error = System.deviceID() + "/hook-error/" + WEBHOOK_EVENT_NAME;
 80a1502:	4620      	mov	r0, r4
 80a1504:	4917      	ldr	r1, [pc, #92]	; (80a1564 <_ZN15Google_Calendar9subscribeEPFvvE+0xb0>)
 80a1506:	f001 f964 	bl	80a27d2 <_ZplRK15StringSumHelperPKc>
 80a150a:	4639      	mov	r1, r7
 80a150c:	f001 f955 	bl	80a27ba <_ZplRK15StringSumHelperRK6String>
    Particle.subscribe(hook_reponse, &Google_Calendar::response_handler, this, MY_DEVICES);
 80a1510:	2700      	movs	r7, #0
    String hook_error = System.deviceID() + "/hook-error/" + WEBHOOK_EVENT_NAME;
 80a1512:	4601      	mov	r1, r0
 80a1514:	a806      	add	r0, sp, #24
 80a1516:	f001 f902 	bl	80a271e <_ZN6StringC1ERKS_>
class StringSumHelper : public String
 80a151a:	4620      	mov	r0, r4
 80a151c:	f001 f876 	bl	80a260c <_ZN6StringD1Ev>
 80a1520:	4628      	mov	r0, r5
 80a1522:	f001 f873 	bl	80a260c <_ZN6StringD1Ev>
    Particle.subscribe(hook_reponse, &Google_Calendar::response_handler, this, MY_DEVICES);
 80a1526:	4b10      	ldr	r3, [pc, #64]	; (80a1568 <_ZN15Google_Calendar9subscribeEPFvvE+0xb4>)
 80a1528:	970b      	str	r7, [sp, #44]	; 0x2c
 80a152a:	930a      	str	r3, [sp, #40]	; 0x28
 80a152c:	9700      	str	r7, [sp, #0]
 80a152e:	4633      	mov	r3, r6
 80a1530:	e895 0006 	ldmia.w	r5, {r1, r2}
 80a1534:	9802      	ldr	r0, [sp, #8]
 80a1536:	f7ff ff79 	bl	80a142c <_ZN10CloudClass9subscribeI15Google_CalendarEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0>
    Particle.subscribe(hook_error, &Google_Calendar::error_handler, this, MY_DEVICES);
 80a153a:	4b0c      	ldr	r3, [pc, #48]	; (80a156c <_ZN15Google_Calendar9subscribeEPFvvE+0xb8>)
 80a153c:	9700      	str	r7, [sp, #0]
 80a153e:	e9cd 370e 	strd	r3, r7, [sp, #56]	; 0x38
 80a1542:	9806      	ldr	r0, [sp, #24]
 80a1544:	4633      	mov	r3, r6
 80a1546:	e894 0006 	ldmia.w	r4, {r1, r2}
 80a154a:	f7ff ff6f 	bl	80a142c <_ZN10CloudClass9subscribeI15Google_CalendarEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0>
    String hook_error = System.deviceID() + "/hook-error/" + WEBHOOK_EVENT_NAME;
 80a154e:	a806      	add	r0, sp, #24
 80a1550:	f001 f85c 	bl	80a260c <_ZN6StringD1Ev>
    String hook_reponse = System.deviceID() + "/hook-response/" + WEBHOOK_EVENT_NAME;
 80a1554:	a802      	add	r0, sp, #8
 80a1556:	f001 f859 	bl	80a260c <_ZN6StringD1Ev>
}
 80a155a:	b013      	add	sp, #76	; 0x4c
 80a155c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a155e:	bf00      	nop
 80a1560:	080a6c73 	.word	0x080a6c73
 80a1564:	080a6c83 	.word	0x080a6c83
 80a1568:	080a13b1 	.word	0x080a13b1
 80a156c:	080a13c1 	.word	0x080a13c1

080a1570 <_GLOBAL__sub_I__ZN15Google_CalendarC2ERK6StringRKa>:
        val_(val) {
 80a1570:	2200      	movs	r2, #0
 80a1572:	4b03      	ldr	r3, [pc, #12]	; (80a1580 <_GLOBAL__sub_I__ZN15Google_CalendarC2ERK6StringRKa+0x10>)
 80a1574:	701a      	strb	r2, [r3, #0]
 80a1576:	2201      	movs	r2, #1
 80a1578:	4b02      	ldr	r3, [pc, #8]	; (80a1584 <_GLOBAL__sub_I__ZN15Google_CalendarC2ERK6StringRKa+0x14>)
 80a157a:	701a      	strb	r2, [r3, #0]
}
 80a157c:	4770      	bx	lr
 80a157e:	bf00      	nop
 80a1580:	200000da 	.word	0x200000da
 80a1584:	200000db 	.word	0x200000db

080a1588 <_Z8relay_on6String>:
int read_calendar(String cmd) {
    if (cmd.toInt() > 0) change_app_stage_to(App_Stage::CALENDAR);
    return 0;
}

int relay_on(String cmd) {
 80a1588:	b508      	push	{r3, lr}
    Control.control_relay(cmd.toInt(), true);
 80a158a:	f001 f9b7 	bl	80a28fc <_ZNK6String5toIntEv>
 80a158e:	2201      	movs	r2, #1
 80a1590:	4601      	mov	r1, r0
 80a1592:	4802      	ldr	r0, [pc, #8]	; (80a159c <_Z8relay_on6String+0x14>)
 80a1594:	f000 fd38 	bl	80a2008 <_ZN13Relay_Control13control_relayEib>
    return 0;
}
 80a1598:	2000      	movs	r0, #0
 80a159a:	bd08      	pop	{r3, pc}
 80a159c:	20000160 	.word	0x20000160

080a15a0 <_Z9relay_off6String>:

int relay_off(String cmd) {
 80a15a0:	b508      	push	{r3, lr}
    Control.control_relay(cmd.toInt(), false);
 80a15a2:	f001 f9ab 	bl	80a28fc <_ZNK6String5toIntEv>
 80a15a6:	2200      	movs	r2, #0
 80a15a8:	4601      	mov	r1, r0
 80a15aa:	4802      	ldr	r0, [pc, #8]	; (80a15b4 <_Z9relay_off6String+0x14>)
 80a15ac:	f000 fd2c 	bl	80a2008 <_ZN13Relay_Control13control_relayEib>
    return 0;
}
 80a15b0:	2000      	movs	r0, #0
 80a15b2:	bd08      	pop	{r3, pc}
 80a15b4:	20000160 	.word	0x20000160

080a15b8 <_ZN10CloudClass7publishEPKcS1_.isra.0>:
inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
 80a15b8:	b513      	push	{r0, r1, r4, lr}
 80a15ba:	4604      	mov	r4, r0
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 80a15bc:	4b04      	ldr	r3, [pc, #16]	; (80a15d0 <_ZN10CloudClass7publishEPKcS1_.isra.0+0x18>)
 80a15be:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a15c0:	f88d 3000 	strb.w	r3, [sp]
 80a15c4:	233c      	movs	r3, #60	; 0x3c
 80a15c6:	f001 fe25 	bl	80a3214 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
}
 80a15ca:	4620      	mov	r0, r4
 80a15cc:	b002      	add	sp, #8
 80a15ce:	bd10      	pop	{r4, pc}
 80a15d0:	20000464 	.word	0x20000464

080a15d4 <_Z21update_time_remainingm>:
    polling_rate = (run_time *  60 * 1000);
    polling_time = millis();
    change_app_stage_to(App_Stage::MANUAL);
}

void update_time_remaining(unsigned long now) {
 80a15d4:	b507      	push	{r0, r1, r2, lr}
                                            
    unsigned long msecs_till_action = polling_rate - (now - polling_time) ;
 80a15d6:	4b0f      	ldr	r3, [pc, #60]	; (80a1614 <_Z21update_time_remainingm+0x40>)
 80a15d8:	4a0f      	ldr	r2, [pc, #60]	; (80a1618 <_Z21update_time_remainingm+0x44>)
 80a15da:	681b      	ldr	r3, [r3, #0]
 80a15dc:	6812      	ldr	r2, [r2, #0]
    int hours = msecs_till_action / 1000 / 3600;
    int minutes = (msecs_till_action / 1000 - (hours * 3600) )/ 60;
 80a15de:	213c      	movs	r1, #60	; 0x3c
    unsigned long msecs_till_action = polling_rate - (now - polling_time) ;
 80a15e0:	4413      	add	r3, r2
 80a15e2:	1a18      	subs	r0, r3, r0
    int minutes = (msecs_till_action / 1000 - (hours * 3600) )/ 60;
 80a15e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    int hours = msecs_till_action / 1000 / 3600;
 80a15e8:	4a0c      	ldr	r2, [pc, #48]	; (80a161c <_Z21update_time_remainingm+0x48>)
 80a15ea:	fbb0 f2f2 	udiv	r2, r0, r2
    int minutes = (msecs_till_action / 1000 - (hours * 3600) )/ 60;
 80a15ee:	fbb0 f0f3 	udiv	r0, r0, r3
 80a15f2:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80a15f6:	fb03 0012 	mls	r0, r3, r2, r0
 80a15fa:	fbb0 f3f1 	udiv	r3, r0, r1
    int seconds = (msecs_till_action / 1000 - (hours * 3600) - (minutes * 60));
 80a15fe:	fb01 0013 	mls	r0, r1, r3, r0
    sprintf(timeRemaining, "%d:%02d:%02d", hours , minutes, seconds);
 80a1602:	4907      	ldr	r1, [pc, #28]	; (80a1620 <_Z21update_time_remainingm+0x4c>)
 80a1604:	9000      	str	r0, [sp, #0]
 80a1606:	4807      	ldr	r0, [pc, #28]	; (80a1624 <_Z21update_time_remainingm+0x50>)
 80a1608:	f000 ff76 	bl	80a24f8 <sprintf>
}
 80a160c:	b003      	add	sp, #12
 80a160e:	f85d fb04 	ldr.w	pc, [sp], #4
 80a1612:	bf00      	nop
 80a1614:	200004a8 	.word	0x200004a8
 80a1618:	200004a4 	.word	0x200004a4
 80a161c:	0036ee80 	.word	0x0036ee80
 80a1620:	080a7043 	.word	0x080a7043
 80a1624:	200004ac 	.word	0x200004ac

080a1628 <_Z17print_event_statev>:
//!
//! @return None. 
//
//*****************************************************************************
void print_event_state(void)
{
 80a1628:	b510      	push	{r4, lr}
    if (event_state == Event_State::PUBLISHING)
 80a162a:	4c0d      	ldr	r4, [pc, #52]	; (80a1660 <_Z17print_event_statev+0x38>)
 80a162c:	7823      	ldrb	r3, [r4, #0]
 80a162e:	b95b      	cbnz	r3, 80a1648 <_Z17print_event_statev+0x20>
    {
        switch (app_stage)
 80a1630:	4b0c      	ldr	r3, [pc, #48]	; (80a1664 <_Z17print_event_statev+0x3c>)
 80a1632:	781b      	ldrb	r3, [r3, #0]
 80a1634:	2b01      	cmp	r3, #1
 80a1636:	d104      	bne.n	80a1642 <_Z17print_event_statev+0x1a>
        {

        case App_Stage::CALENDAR:
            Serial.println("Calendar event published!");
 80a1638:	f002 f828 	bl	80a368c <_Z16_fetch_usbserialv>
 80a163c:	490a      	ldr	r1, [pc, #40]	; (80a1668 <_Z17print_event_statev+0x40>)
 80a163e:	f001 f9c0 	bl	80a29c2 <_ZN5Print7printlnEPKc>
            break;

        default:
            break;
        }
        event_state = Event_State::WAIT_FOR_RESPONSE;
 80a1642:	2301      	movs	r3, #1
    }
    //  If event completed, switch to publishing 
    //  to enable a new event to be published. 
    else if (event_state == Event_State::COMPLETED)
    {
        event_state = Event_State::PUBLISHING;
 80a1644:	7023      	strb	r3, [r4, #0]
    }
}
 80a1646:	bd10      	pop	{r4, pc}
    else if (event_state == Event_State::WAIT_FOR_RESPONSE)
 80a1648:	2b01      	cmp	r3, #1
 80a164a:	d105      	bne.n	80a1658 <_Z17print_event_statev+0x30>
}
 80a164c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        delay(1000);
 80a1650:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a1654:	f001 bbb4 	b.w	80a2dc0 <delay>
    else if (event_state == Event_State::COMPLETED)
 80a1658:	2b02      	cmp	r3, #2
 80a165a:	d1f4      	bne.n	80a1646 <_Z17print_event_statev+0x1e>
        event_state = Event_State::PUBLISHING;
 80a165c:	2300      	movs	r3, #0
 80a165e:	e7f1      	b.n	80a1644 <_Z17print_event_statev+0x1c>
 80a1660:	20000499 	.word	0x20000499
 80a1664:	20000478 	.word	0x20000478
 80a1668:	080a70db 	.word	0x080a70db

080a166c <_Z15print_app_errorv>:
//!
//! @return None. 
//
//*****************************************************************************
void print_app_error(void)
{
 80a166c:	b508      	push	{r3, lr}
    switch (last_app_stage)
 80a166e:	4b09      	ldr	r3, [pc, #36]	; (80a1694 <_Z15print_app_errorv+0x28>)
 80a1670:	781b      	ldrb	r3, [r3, #0]
 80a1672:	b13b      	cbz	r3, 80a1684 <_Z15print_app_errorv+0x18>
 80a1674:	2b01      	cmp	r3, #1
 80a1676:	d009      	beq.n	80a168c <_Z15print_app_errorv+0x20>
            
        default:
            break;
    }
    delay(1000);
}
 80a1678:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(1000);
 80a167c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a1680:	f001 bb9e 	b.w	80a2dc0 <delay>
            OAuth2.print_error();
 80a1684:	4804      	ldr	r0, [pc, #16]	; (80a1698 <_Z15print_app_errorv+0x2c>)
 80a1686:	f7ff f92f 	bl	80a08e8 <_ZN13Google_OAuth211print_errorEv>
            break;
 80a168a:	e7f5      	b.n	80a1678 <_Z15print_app_errorv+0xc>
            Calendar.print_error();
 80a168c:	4803      	ldr	r0, [pc, #12]	; (80a169c <_Z15print_app_errorv+0x30>)
 80a168e:	f7ff fd0b 	bl	80a10a8 <_ZN15Google_Calendar11print_errorEv>
            break;
 80a1692:	e7f1      	b.n	80a1678 <_Z15print_app_errorv+0xc>
 80a1694:	200004a0 	.word	0x200004a0
 80a1698:	2000016c 	.word	0x2000016c
 80a169c:	200000e0 	.word	0x200000e0

080a16a0 <_Z19change_app_stage_to9App_Stage>:
{
 80a16a0:	b530      	push	{r4, r5, lr}
 80a16a2:	b089      	sub	sp, #36	; 0x24
 80a16a4:	4604      	mov	r4, r0
 80a16a6:	f000 fd09 	bl	80a20bc <HAL_Timer_Get_Milli_Seconds>
 80a16aa:	4605      	mov	r5, r0
    switch (new_stage)
 80a16ac:	2c07      	cmp	r4, #7
 80a16ae:	d820      	bhi.n	80a16f2 <_Z19change_app_stage_to9App_Stage+0x52>
 80a16b0:	e8df f014 	tbh	[pc, r4, lsl #1]
 80a16b4:	00340008 	.word	0x00340008
 80a16b8:	004f001f 	.word	0x004f001f
 80a16bc:	0099006d 	.word	0x0099006d
 80a16c0:	00d8009b 	.word	0x00d8009b
            DEBUG_PRINT("Stage changed to: OAUTH2");
 80a16c4:	497f      	ldr	r1, [pc, #508]	; (80a18c4 <_Z19change_app_stage_to9App_Stage+0x224>)
 80a16c6:	a804      	add	r0, sp, #16
 80a16c8:	f001 f91e 	bl	80a2908 <_ZN6String6formatEPKcz>
 80a16cc:	9a04      	ldr	r2, [sp, #16]
 80a16ce:	497e      	ldr	r1, [pc, #504]	; (80a18c8 <_Z19change_app_stage_to9App_Stage+0x228>)
 80a16d0:	4668      	mov	r0, sp
 80a16d2:	f7ff ff71 	bl	80a15b8 <_ZN10CloudClass7publishEPKcS1_.isra.0>
 80a16d6:	a801      	add	r0, sp, #4
 80a16d8:	f7fe fe46 	bl	80a0368 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a16dc:	a804      	add	r0, sp, #16
 80a16de:	f000 ff95 	bl	80a260c <_ZN6StringD1Ev>
            polling_rate = 1000;
 80a16e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a16e6:	4b79      	ldr	r3, [pc, #484]	; (80a18cc <_Z19change_app_stage_to9App_Stage+0x22c>)
 80a16e8:	601a      	str	r2, [r3, #0]
 80a16ea:	f000 fce7 	bl	80a20bc <HAL_Timer_Get_Milli_Seconds>
            polling_time = millis();
 80a16ee:	4b78      	ldr	r3, [pc, #480]	; (80a18d0 <_Z19change_app_stage_to9App_Stage+0x230>)
 80a16f0:	6018      	str	r0, [r3, #0]
    last_app_stage = app_stage;
 80a16f2:	4b78      	ldr	r3, [pc, #480]	; (80a18d4 <_Z19change_app_stage_to9App_Stage+0x234>)
 80a16f4:	4a78      	ldr	r2, [pc, #480]	; (80a18d8 <_Z19change_app_stage_to9App_Stage+0x238>)
 80a16f6:	7819      	ldrb	r1, [r3, #0]
    app_stage = new_stage;
 80a16f8:	701c      	strb	r4, [r3, #0]
    last_app_stage = app_stage;
 80a16fa:	7011      	strb	r1, [r2, #0]
    event_state = Event_State::COMPLETED;     
 80a16fc:	2202      	movs	r2, #2
 80a16fe:	4b77      	ldr	r3, [pc, #476]	; (80a18dc <_Z19change_app_stage_to9App_Stage+0x23c>)
        spark_unsubscribe(NULL);
 80a1700:	2000      	movs	r0, #0
 80a1702:	701a      	strb	r2, [r3, #0]
 80a1704:	f000 fec8 	bl	80a2498 <spark_unsubscribe>
    if (new_stage == App_Stage::CALENDAR)
 80a1708:	2c01      	cmp	r4, #1
 80a170a:	f040 80bb 	bne.w	80a1884 <_Z19change_app_stage_to9App_Stage+0x1e4>
        Calendar.subscribe(calendar_handler);
 80a170e:	4974      	ldr	r1, [pc, #464]	; (80a18e0 <_Z19change_app_stage_to9App_Stage+0x240>)
 80a1710:	4874      	ldr	r0, [pc, #464]	; (80a18e4 <_Z19change_app_stage_to9App_Stage+0x244>)
}
 80a1712:	b009      	add	sp, #36	; 0x24
 80a1714:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        Calendar.subscribe(calendar_handler);
 80a1718:	f7ff becc 	b.w	80a14b4 <_ZN15Google_Calendar9subscribeEPFvvE>
            DEBUG_PRINT("Stage: CALENDAR");
 80a171c:	a804      	add	r0, sp, #16
 80a171e:	4972      	ldr	r1, [pc, #456]	; (80a18e8 <_Z19change_app_stage_to9App_Stage+0x248>)
 80a1720:	f001 f8f2 	bl	80a2908 <_ZN6String6formatEPKcz>
 80a1724:	9a04      	ldr	r2, [sp, #16]
 80a1726:	4968      	ldr	r1, [pc, #416]	; (80a18c8 <_Z19change_app_stage_to9App_Stage+0x228>)
 80a1728:	4668      	mov	r0, sp
 80a172a:	f7ff ff45 	bl	80a15b8 <_ZN10CloudClass7publishEPKcS1_.isra.0>
 80a172e:	a801      	add	r0, sp, #4
 80a1730:	f7fe fe1a 	bl	80a0368 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1734:	a804      	add	r0, sp, #16
 80a1736:	f000 ff69 	bl	80a260c <_ZN6StringD1Ev>
            polling_rate = 1000;
 80a173a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a173e:	4b63      	ldr	r3, [pc, #396]	; (80a18cc <_Z19change_app_stage_to9App_Stage+0x22c>)
 80a1740:	601a      	str	r2, [r3, #0]
 80a1742:	f000 fcbb 	bl	80a20bc <HAL_Timer_Get_Milli_Seconds>
            polling_time = millis();
 80a1746:	4b62      	ldr	r3, [pc, #392]	; (80a18d0 <_Z19change_app_stage_to9App_Stage+0x230>)
 80a1748:	6018      	str	r0, [r3, #0]
            Calendar.print_error();
 80a174a:	4866      	ldr	r0, [pc, #408]	; (80a18e4 <_Z19change_app_stage_to9App_Stage+0x244>)
 80a174c:	f7ff fcac 	bl	80a10a8 <_ZN15Google_Calendar11print_errorEv>
            break;
 80a1750:	e7cf      	b.n	80a16f2 <_Z19change_app_stage_to9App_Stage+0x52>
            DEBUG_PRINT("Stage: WAITING");
 80a1752:	4966      	ldr	r1, [pc, #408]	; (80a18ec <_Z19change_app_stage_to9App_Stage+0x24c>)
            DEBUG_PRINT("Stage: PENDING");
 80a1754:	a804      	add	r0, sp, #16
 80a1756:	f001 f8d7 	bl	80a2908 <_ZN6String6formatEPKcz>
 80a175a:	9a04      	ldr	r2, [sp, #16]
 80a175c:	495a      	ldr	r1, [pc, #360]	; (80a18c8 <_Z19change_app_stage_to9App_Stage+0x228>)
 80a175e:	4668      	mov	r0, sp
 80a1760:	f7ff ff2a 	bl	80a15b8 <_ZN10CloudClass7publishEPKcS1_.isra.0>
 80a1764:	a801      	add	r0, sp, #4
 80a1766:	f7fe fdff 	bl	80a0368 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a176a:	a804      	add	r0, sp, #16
 80a176c:	f000 ff4e 	bl	80a260c <_ZN6StringD1Ev>
            Control.turn_off_relays();
 80a1770:	485f      	ldr	r0, [pc, #380]	; (80a18f0 <_Z19change_app_stage_to9App_Stage+0x250>)
 80a1772:	f000 fc59 	bl	80a2028 <_ZN13Relay_Control15turn_off_relaysEv>
            polling_rate = Calendar.get_time_remaining() * 1000 ;
 80a1776:	485b      	ldr	r0, [pc, #364]	; (80a18e4 <_Z19change_app_stage_to9App_Stage+0x244>)
 80a1778:	f7ff fb53 	bl	80a0e22 <_ZN15Google_Calendar18get_time_remainingEv>
 80a177c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1780:	4358      	muls	r0, r3
 80a1782:	4298      	cmp	r0, r3
 80a1784:	bf28      	it	cs
 80a1786:	4603      	movcs	r3, r0
            polling_rate = abs(Calendar.get_time_remaining() * 1000);
 80a1788:	4a50      	ldr	r2, [pc, #320]	; (80a18cc <_Z19change_app_stage_to9App_Stage+0x22c>)
 80a178a:	6013      	str	r3, [r2, #0]
 80a178c:	e014      	b.n	80a17b8 <_Z19change_app_stage_to9App_Stage+0x118>
            DEBUG_PRINT("Stage: EVENT_TOO_LONG");
 80a178e:	4959      	ldr	r1, [pc, #356]	; (80a18f4 <_Z19change_app_stage_to9App_Stage+0x254>)
 80a1790:	a804      	add	r0, sp, #16
 80a1792:	f001 f8b9 	bl	80a2908 <_ZN6String6formatEPKcz>
 80a1796:	9a04      	ldr	r2, [sp, #16]
 80a1798:	494b      	ldr	r1, [pc, #300]	; (80a18c8 <_Z19change_app_stage_to9App_Stage+0x228>)
 80a179a:	4668      	mov	r0, sp
 80a179c:	f7ff ff0c 	bl	80a15b8 <_ZN10CloudClass7publishEPKcS1_.isra.0>
 80a17a0:	a801      	add	r0, sp, #4
 80a17a2:	f7fe fde1 	bl	80a0368 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a17a6:	a804      	add	r0, sp, #16
 80a17a8:	f000 ff30 	bl	80a260c <_ZN6StringD1Ev>
            Control.turn_off_relays();
 80a17ac:	4850      	ldr	r0, [pc, #320]	; (80a18f0 <_Z19change_app_stage_to9App_Stage+0x250>)
 80a17ae:	f000 fc3b 	bl	80a2028 <_ZN13Relay_Control15turn_off_relaysEv>
            polling_rate = (1 * 60 * 60 * 1000) ;
 80a17b2:	4b46      	ldr	r3, [pc, #280]	; (80a18cc <_Z19change_app_stage_to9App_Stage+0x22c>)
 80a17b4:	4a50      	ldr	r2, [pc, #320]	; (80a18f8 <_Z19change_app_stage_to9App_Stage+0x258>)
 80a17b6:	601a      	str	r2, [r3, #0]
 80a17b8:	f000 fc80 	bl	80a20bc <HAL_Timer_Get_Milli_Seconds>
            polling_time = millis();
 80a17bc:	4b44      	ldr	r3, [pc, #272]	; (80a18d0 <_Z19change_app_stage_to9App_Stage+0x230>)
 80a17be:	6018      	str	r0, [r3, #0]
            update_time_remaining(now);
 80a17c0:	4628      	mov	r0, r5
 80a17c2:	f7ff ff07 	bl	80a15d4 <_Z21update_time_remainingm>
            DEBUG_PRINT(timeRemaining);
 80a17c6:	a804      	add	r0, sp, #16
 80a17c8:	494c      	ldr	r1, [pc, #304]	; (80a18fc <_Z19change_app_stage_to9App_Stage+0x25c>)
 80a17ca:	f001 f89d 	bl	80a2908 <_ZN6String6formatEPKcz>
 80a17ce:	4668      	mov	r0, sp
 80a17d0:	9a04      	ldr	r2, [sp, #16]
 80a17d2:	493d      	ldr	r1, [pc, #244]	; (80a18c8 <_Z19change_app_stage_to9App_Stage+0x228>)
 80a17d4:	f7ff fef0 	bl	80a15b8 <_ZN10CloudClass7publishEPKcS1_.isra.0>
 80a17d8:	a801      	add	r0, sp, #4
 80a17da:	f7fe fdc5 	bl	80a0368 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a17de:	a804      	add	r0, sp, #16
 80a17e0:	f000 ff14 	bl	80a260c <_ZN6StringD1Ev>
            break;
 80a17e4:	e785      	b.n	80a16f2 <_Z19change_app_stage_to9App_Stage+0x52>
            DEBUG_PRINT("Stage: PENDING");
 80a17e6:	4946      	ldr	r1, [pc, #280]	; (80a1900 <_Z19change_app_stage_to9App_Stage+0x260>)
 80a17e8:	e7b4      	b.n	80a1754 <_Z19change_app_stage_to9App_Stage+0xb4>
            DEBUG_PRINT("Stage: ACTIVE");
 80a17ea:	4946      	ldr	r1, [pc, #280]	; (80a1904 <_Z19change_app_stage_to9App_Stage+0x264>)
 80a17ec:	a804      	add	r0, sp, #16
 80a17ee:	f001 f88b 	bl	80a2908 <_ZN6String6formatEPKcz>
 80a17f2:	9a04      	ldr	r2, [sp, #16]
 80a17f4:	4934      	ldr	r1, [pc, #208]	; (80a18c8 <_Z19change_app_stage_to9App_Stage+0x228>)
 80a17f6:	4668      	mov	r0, sp
 80a17f8:	f7ff fede 	bl	80a15b8 <_ZN10CloudClass7publishEPKcS1_.isra.0>
 80a17fc:	a801      	add	r0, sp, #4
 80a17fe:	f7fe fdb3 	bl	80a0368 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1802:	a804      	add	r0, sp, #16
 80a1804:	f000 ff02 	bl	80a260c <_ZN6StringD1Ev>
            Control.process_event(Calendar.get_event_title());
 80a1808:	4936      	ldr	r1, [pc, #216]	; (80a18e4 <_Z19change_app_stage_to9App_Stage+0x244>)
 80a180a:	a804      	add	r0, sp, #16
 80a180c:	f7ff fb44 	bl	80a0e98 <_ZN15Google_Calendar15get_event_titleEv>
 80a1810:	a904      	add	r1, sp, #16
 80a1812:	4837      	ldr	r0, [pc, #220]	; (80a18f0 <_Z19change_app_stage_to9App_Stage+0x250>)
 80a1814:	f000 faf2 	bl	80a1dfc <_ZN13Relay_Control13process_eventE6String>
 80a1818:	a804      	add	r0, sp, #16
 80a181a:	f000 fef7 	bl	80a260c <_ZN6StringD1Ev>
	StringSumHelper(const char *p) : String(p) {}
 80a181e:	493a      	ldr	r1, [pc, #232]	; (80a1908 <_Z19change_app_stage_to9App_Stage+0x268>)
 80a1820:	a804      	add	r0, sp, #16
 80a1822:	f000 ff3d 	bl	80a26a0 <_ZN6StringC1EPK19__FlashStringHelper>
            sprintf(currentState, "Actve: " + Calendar.get_event_title());
 80a1826:	4668      	mov	r0, sp
 80a1828:	492e      	ldr	r1, [pc, #184]	; (80a18e4 <_Z19change_app_stage_to9App_Stage+0x244>)
 80a182a:	f7ff fb35 	bl	80a0e98 <_ZN15Google_Calendar15get_event_titleEv>
 80a182e:	4669      	mov	r1, sp
 80a1830:	a804      	add	r0, sp, #16
 80a1832:	f000 ffc2 	bl	80a27ba <_ZplRK15StringSumHelperRK6String>
 80a1836:	6801      	ldr	r1, [r0, #0]
 80a1838:	4834      	ldr	r0, [pc, #208]	; (80a190c <_Z19change_app_stage_to9App_Stage+0x26c>)
 80a183a:	f000 fe5d 	bl	80a24f8 <sprintf>
 80a183e:	4668      	mov	r0, sp
 80a1840:	f000 fee4 	bl	80a260c <_ZN6StringD1Ev>
class StringSumHelper : public String
 80a1844:	a804      	add	r0, sp, #16
 80a1846:	f000 fee1 	bl	80a260c <_ZN6StringD1Ev>
            polling_rate = abs(Calendar.get_time_remaining() * 1000);
 80a184a:	4826      	ldr	r0, [pc, #152]	; (80a18e4 <_Z19change_app_stage_to9App_Stage+0x244>)
 80a184c:	f7ff fae9 	bl	80a0e22 <_ZN15Google_Calendar18get_time_remainingEv>
 80a1850:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1854:	4358      	muls	r0, r3

  using ::abs;

#ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  inline long
  abs(long __i) { return __builtin_labs(__i); }
 80a1856:	2800      	cmp	r0, #0
 80a1858:	bfb8      	it	lt
 80a185a:	4240      	neglt	r0, r0
 80a185c:	4298      	cmp	r0, r3
 80a185e:	bfa8      	it	ge
 80a1860:	4603      	movge	r3, r0
 80a1862:	e791      	b.n	80a1788 <_Z19change_app_stage_to9App_Stage+0xe8>
            DEBUG_PRINT("Stage: MANUAL");
 80a1864:	a804      	add	r0, sp, #16
 80a1866:	492a      	ldr	r1, [pc, #168]	; (80a1910 <_Z19change_app_stage_to9App_Stage+0x270>)
 80a1868:	f001 f84e 	bl	80a2908 <_ZN6String6formatEPKcz>
 80a186c:	4668      	mov	r0, sp
 80a186e:	9a04      	ldr	r2, [sp, #16]
 80a1870:	4915      	ldr	r1, [pc, #84]	; (80a18c8 <_Z19change_app_stage_to9App_Stage+0x228>)
 80a1872:	f7ff fea1 	bl	80a15b8 <_ZN10CloudClass7publishEPKcS1_.isra.0>
 80a1876:	a801      	add	r0, sp, #4
 80a1878:	f7fe fd76 	bl	80a0368 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a187c:	a804      	add	r0, sp, #16
 80a187e:	f000 fec5 	bl	80a260c <_ZN6StringD1Ev>
 80a1882:	e79d      	b.n	80a17c0 <_Z19change_app_stage_to9App_Stage+0x120>
    else if (new_stage == App_Stage::FAILED)
 80a1884:	2c02      	cmp	r4, #2
 80a1886:	d11a      	bne.n	80a18be <_Z19change_app_stage_to9App_Stage+0x21e>
        Control.turn_off_relays();
 80a1888:	4819      	ldr	r0, [pc, #100]	; (80a18f0 <_Z19change_app_stage_to9App_Stage+0x250>)
 80a188a:	f000 fbcd 	bl	80a2028 <_ZN13Relay_Control15turn_off_relaysEv>
        Serial.println("App Stage Failure");
 80a188e:	f001 fefd 	bl	80a368c <_Z16_fetch_usbserialv>
 80a1892:	4920      	ldr	r1, [pc, #128]	; (80a1914 <_Z19change_app_stage_to9App_Stage+0x274>)
 80a1894:	f001 f895 	bl	80a29c2 <_ZN5Print7printlnEPKc>
        delay(1000);
 80a1898:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a189c:	f001 fa90 	bl	80a2dc0 <delay>
        DEBUG_PRINT("App Stage Failure");
 80a18a0:	491c      	ldr	r1, [pc, #112]	; (80a1914 <_Z19change_app_stage_to9App_Stage+0x274>)
 80a18a2:	a804      	add	r0, sp, #16
 80a18a4:	f001 f830 	bl	80a2908 <_ZN6String6formatEPKcz>
 80a18a8:	4668      	mov	r0, sp
 80a18aa:	9a04      	ldr	r2, [sp, #16]
 80a18ac:	4906      	ldr	r1, [pc, #24]	; (80a18c8 <_Z19change_app_stage_to9App_Stage+0x228>)
 80a18ae:	f7ff fe83 	bl	80a15b8 <_ZN10CloudClass7publishEPKcS1_.isra.0>
 80a18b2:	a801      	add	r0, sp, #4
 80a18b4:	f7fe fd58 	bl	80a0368 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a18b8:	a804      	add	r0, sp, #16
 80a18ba:	f000 fea7 	bl	80a260c <_ZN6StringD1Ev>
}
 80a18be:	b009      	add	sp, #36	; 0x24
 80a18c0:	bd30      	pop	{r4, r5, pc}
 80a18c2:	bf00      	nop
 80a18c4:	080a70f5 	.word	0x080a70f5
 80a18c8:	080a6ab1 	.word	0x080a6ab1
 80a18cc:	200004a4 	.word	0x200004a4
 80a18d0:	200004a8 	.word	0x200004a8
 80a18d4:	20000478 	.word	0x20000478
 80a18d8:	200004a0 	.word	0x200004a0
 80a18dc:	20000499 	.word	0x20000499
 80a18e0:	080a1ca1 	.word	0x080a1ca1
 80a18e4:	200000e0 	.word	0x200000e0
 80a18e8:	080a710e 	.word	0x080a710e
 80a18ec:	080a711e 	.word	0x080a711e
 80a18f0:	20000160 	.word	0x20000160
 80a18f4:	080a712d 	.word	0x080a712d
 80a18f8:	0036ee80 	.word	0x0036ee80
 80a18fc:	200004ac 	.word	0x200004ac
 80a1900:	080a7143 	.word	0x080a7143
 80a1904:	080a7152 	.word	0x080a7152
 80a1908:	080a7160 	.word	0x080a7160
 80a190c:	20000479 	.word	0x20000479
 80a1910:	080a7168 	.word	0x080a7168
 80a1914:	080a7176 	.word	0x080a7176

080a1918 <_Z13read_calendar6String>:
int read_calendar(String cmd) {
 80a1918:	b508      	push	{r3, lr}
    if (cmd.toInt() > 0) change_app_stage_to(App_Stage::CALENDAR);
 80a191a:	f000 ffef 	bl	80a28fc <_ZNK6String5toIntEv>
 80a191e:	2800      	cmp	r0, #0
 80a1920:	dd02      	ble.n	80a1928 <_Z13read_calendar6String+0x10>
 80a1922:	2001      	movs	r0, #1
 80a1924:	f7ff febc 	bl	80a16a0 <_Z19change_app_stage_to9App_Stage>
}
 80a1928:	2000      	movs	r0, #0
 80a192a:	bd08      	pop	{r3, pc}

080a192c <_Z17force_erase_token6String>:
int force_erase_token(String cmd) {
 80a192c:	b508      	push	{r3, lr}
    if (cmd.toInt() > 0) {
 80a192e:	f000 ffe5 	bl	80a28fc <_ZNK6String5toIntEv>
 80a1932:	2800      	cmp	r0, #0
 80a1934:	dd05      	ble.n	80a1942 <_Z17force_erase_token6String+0x16>
        OAuth2.erase_token();
 80a1936:	4804      	ldr	r0, [pc, #16]	; (80a1948 <_Z17force_erase_token6String+0x1c>)
 80a1938:	f7fe fd06 	bl	80a0348 <_ZN13Google_OAuth211erase_tokenEv>
        change_app_stage_to(App_Stage::OAUTH2);
 80a193c:	2000      	movs	r0, #0
 80a193e:	f7ff feaf 	bl	80a16a0 <_Z19change_app_stage_to9App_Stage>
}
 80a1942:	2000      	movs	r0, #0
 80a1944:	bd08      	pop	{r3, pc}
 80a1946:	bf00      	nop
 80a1948:	2000016c 	.word	0x2000016c

080a194c <_Z17manual_relay_modeii>:
void manual_relay_mode(int relay_num, int run_time){
 80a194c:	b570      	push	{r4, r5, r6, lr}
 80a194e:	4605      	mov	r5, r0
    Control.turn_off_relays();
 80a1950:	4e0e      	ldr	r6, [pc, #56]	; (80a198c <_Z17manual_relay_modeii+0x40>)
void manual_relay_mode(int relay_num, int run_time){
 80a1952:	460c      	mov	r4, r1
    Control.turn_off_relays();
 80a1954:	4630      	mov	r0, r6
 80a1956:	f000 fb67 	bl	80a2028 <_ZN13Relay_Control15turn_off_relaysEv>
    sprintf(currentState, "Manual: Relay %d", relay_num);
 80a195a:	462a      	mov	r2, r5
 80a195c:	490c      	ldr	r1, [pc, #48]	; (80a1990 <_Z17manual_relay_modeii+0x44>)
 80a195e:	480d      	ldr	r0, [pc, #52]	; (80a1994 <_Z17manual_relay_modeii+0x48>)
 80a1960:	f000 fdca 	bl	80a24f8 <sprintf>
    Control.control_relay(relay_num, true);
 80a1964:	4629      	mov	r1, r5
 80a1966:	4630      	mov	r0, r6
 80a1968:	2201      	movs	r2, #1
 80a196a:	f000 fb4d 	bl	80a2008 <_ZN13Relay_Control13control_relayEib>
    polling_rate = (run_time *  60 * 1000);
 80a196e:	f64e 2160 	movw	r1, #60000	; 0xea60
 80a1972:	434c      	muls	r4, r1
 80a1974:	4b08      	ldr	r3, [pc, #32]	; (80a1998 <_Z17manual_relay_modeii+0x4c>)
 80a1976:	601c      	str	r4, [r3, #0]
 80a1978:	f000 fba0 	bl	80a20bc <HAL_Timer_Get_Milli_Seconds>
    polling_time = millis();
 80a197c:	4b07      	ldr	r3, [pc, #28]	; (80a199c <_Z17manual_relay_modeii+0x50>)
 80a197e:	6018      	str	r0, [r3, #0]
}
 80a1980:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    change_app_stage_to(App_Stage::MANUAL);
 80a1984:	2007      	movs	r0, #7
 80a1986:	f7ff be8b 	b.w	80a16a0 <_Z19change_app_stage_to9App_Stage>
 80a198a:	bf00      	nop
 80a198c:	20000160 	.word	0x20000160
 80a1990:	080a7188 	.word	0x080a7188
 80a1994:	20000479 	.word	0x20000479
 80a1998:	200004a4 	.word	0x200004a4
 80a199c:	200004a8 	.word	0x200004a8

080a19a0 <_Z12relay_1_time6String>:
int relay_1_time(String cmd) {
 80a19a0:	b508      	push	{r3, lr}
    manual_relay_mode(1, cmd.toInt());
 80a19a2:	f000 ffab 	bl	80a28fc <_ZNK6String5toIntEv>
 80a19a6:	4601      	mov	r1, r0
 80a19a8:	2001      	movs	r0, #1
 80a19aa:	f7ff ffcf 	bl	80a194c <_Z17manual_relay_modeii>
}
 80a19ae:	2000      	movs	r0, #0
 80a19b0:	bd08      	pop	{r3, pc}

080a19b2 <_Z12relay_2_time6String>:
int relay_2_time(String cmd) {
 80a19b2:	b508      	push	{r3, lr}
    manual_relay_mode(2, cmd.toInt());
 80a19b4:	f000 ffa2 	bl	80a28fc <_ZNK6String5toIntEv>
 80a19b8:	4601      	mov	r1, r0
 80a19ba:	2002      	movs	r0, #2
 80a19bc:	f7ff ffc6 	bl	80a194c <_Z17manual_relay_modeii>
}
 80a19c0:	2000      	movs	r0, #0
 80a19c2:	bd08      	pop	{r3, pc}

080a19c4 <_Z12relay_3_time6String>:
int relay_3_time(String cmd) {
 80a19c4:	b508      	push	{r3, lr}
    manual_relay_mode(3, cmd.toInt());
 80a19c6:	f000 ff99 	bl	80a28fc <_ZNK6String5toIntEv>
 80a19ca:	4601      	mov	r1, r0
 80a19cc:	2003      	movs	r0, #3
 80a19ce:	f7ff ffbd 	bl	80a194c <_Z17manual_relay_modeii>
}
 80a19d2:	2000      	movs	r0, #0
 80a19d4:	bd08      	pop	{r3, pc}
	...

080a19d8 <_Z11oauth2_loopv>:
{
 80a19d8:	b508      	push	{r3, lr}
    OAuth2.loop();
 80a19da:	480b      	ldr	r0, [pc, #44]	; (80a1a08 <_Z11oauth2_loopv+0x30>)
 80a19dc:	f7ff f85c 	bl	80a0a98 <_ZN13Google_OAuth24loopEv>
    if (OAuth2.authorized())
 80a19e0:	4809      	ldr	r0, [pc, #36]	; (80a1a08 <_Z11oauth2_loopv+0x30>)
 80a19e2:	f7fe fbfa 	bl	80a01da <_ZN13Google_OAuth210authorizedEv>
 80a19e6:	b140      	cbz	r0, 80a19fa <_Z11oauth2_loopv+0x22>
        if (last_app_stage == App_Stage::CALENDAR)
 80a19e8:	4b08      	ldr	r3, [pc, #32]	; (80a1a0c <_Z11oauth2_loopv+0x34>)
 80a19ea:	7818      	ldrb	r0, [r3, #0]
 80a19ec:	2801      	cmp	r0, #1
            change_app_stage_to(App_Stage::WAITING);
 80a19ee:	bf18      	it	ne
 80a19f0:	2003      	movne	r0, #3
}
 80a19f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        change_app_stage_to(App_Stage::FAILED);
 80a19f6:	f7ff be53 	b.w	80a16a0 <_Z19change_app_stage_to9App_Stage>
    else if (OAuth2.failed())
 80a19fa:	4803      	ldr	r0, [pc, #12]	; (80a1a08 <_Z11oauth2_loopv+0x30>)
 80a19fc:	f7fe fbf3 	bl	80a01e6 <_ZN13Google_OAuth26failedEv>
 80a1a00:	b108      	cbz	r0, 80a1a06 <_Z11oauth2_loopv+0x2e>
        change_app_stage_to(App_Stage::FAILED);
 80a1a02:	2002      	movs	r0, #2
 80a1a04:	e7f5      	b.n	80a19f2 <_Z11oauth2_loopv+0x1a>
}
 80a1a06:	bd08      	pop	{r3, pc}
 80a1a08:	2000016c 	.word	0x2000016c
 80a1a0c:	200004a0 	.word	0x200004a0

080a1a10 <_Z13calendar_loopv>:
{
 80a1a10:	b508      	push	{r3, lr}
    if (event_state == Event_State::PUBLISHING)
 80a1a12:	4b09      	ldr	r3, [pc, #36]	; (80a1a38 <_Z13calendar_loopv+0x28>)
 80a1a14:	781b      	ldrb	r3, [r3, #0]
 80a1a16:	b93b      	cbnz	r3, 80a1a28 <_Z13calendar_loopv+0x18>
        if (OAuth2.is_token_valid())
 80a1a18:	4808      	ldr	r0, [pc, #32]	; (80a1a3c <_Z13calendar_loopv+0x2c>)
 80a1a1a:	f7fe ff45 	bl	80a08a8 <_ZN13Google_OAuth214is_token_validEv>
 80a1a1e:	b138      	cbz	r0, 80a1a30 <_Z13calendar_loopv+0x20>
            Calendar.publish(OAuth2);
 80a1a20:	4906      	ldr	r1, [pc, #24]	; (80a1a3c <_Z13calendar_loopv+0x2c>)
 80a1a22:	4807      	ldr	r0, [pc, #28]	; (80a1a40 <_Z13calendar_loopv+0x30>)
 80a1a24:	f7ff fa40 	bl	80a0ea8 <_ZN15Google_Calendar7publishERK13Google_OAuth2>
}
 80a1a28:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    print_event_state();
 80a1a2c:	f7ff bdfc 	b.w	80a1628 <_Z17print_event_statev>
            change_app_stage_to(App_Stage::OAUTH2);
 80a1a30:	f7ff fe36 	bl	80a16a0 <_Z19change_app_stage_to9App_Stage>
 80a1a34:	e7f8      	b.n	80a1a28 <_Z13calendar_loopv+0x18>
 80a1a36:	bf00      	nop
 80a1a38:	20000499 	.word	0x20000499
 80a1a3c:	2000016c 	.word	0x2000016c
 80a1a40:	200000e0 	.word	0x200000e0

080a1a44 <setup>:
{
 80a1a44:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
 80a1a46:	2300      	movs	r3, #0
 80a1a48:	2204      	movs	r2, #4
 80a1a4a:	4933      	ldr	r1, [pc, #204]	; (80a1b18 <setup+0xd4>)
 80a1a4c:	4833      	ldr	r0, [pc, #204]	; (80a1b1c <setup+0xd8>)
 80a1a4e:	f000 fceb 	bl	80a2428 <spark_variable>
 80a1a52:	2300      	movs	r3, #0
 80a1a54:	2204      	movs	r2, #4
 80a1a56:	4932      	ldr	r1, [pc, #200]	; (80a1b20 <setup+0xdc>)
 80a1a58:	4832      	ldr	r0, [pc, #200]	; (80a1b24 <setup+0xe0>)
 80a1a5a:	f000 fce5 	bl	80a2428 <spark_variable>
        return spark_variable(varKey, (const void*)userVar, CloudVariableTypeInt::TYPE_ID, NULL);
 80a1a5e:	2300      	movs	r3, #0
 80a1a60:	2202      	movs	r2, #2
 80a1a62:	4931      	ldr	r1, [pc, #196]	; (80a1b28 <setup+0xe4>)
 80a1a64:	4831      	ldr	r0, [pc, #196]	; (80a1b2c <setup+0xe8>)
 80a1a66:	f000 fcdf 	bl	80a2428 <spark_variable>
        return register_function(call_raw_user_function, (void*)func, funcKey);
 80a1a6a:	4a31      	ldr	r2, [pc, #196]	; (80a1b30 <setup+0xec>)
 80a1a6c:	4931      	ldr	r1, [pc, #196]	; (80a1b34 <setup+0xf0>)
 80a1a6e:	4832      	ldr	r0, [pc, #200]	; (80a1b38 <setup+0xf4>)
 80a1a70:	f001 fad9 	bl	80a3026 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80a1a74:	4a31      	ldr	r2, [pc, #196]	; (80a1b3c <setup+0xf8>)
 80a1a76:	4932      	ldr	r1, [pc, #200]	; (80a1b40 <setup+0xfc>)
 80a1a78:	482f      	ldr	r0, [pc, #188]	; (80a1b38 <setup+0xf4>)
 80a1a7a:	f001 fad4 	bl	80a3026 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80a1a7e:	4a31      	ldr	r2, [pc, #196]	; (80a1b44 <setup+0x100>)
 80a1a80:	4931      	ldr	r1, [pc, #196]	; (80a1b48 <setup+0x104>)
 80a1a82:	482d      	ldr	r0, [pc, #180]	; (80a1b38 <setup+0xf4>)
 80a1a84:	f001 facf 	bl	80a3026 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80a1a88:	4a30      	ldr	r2, [pc, #192]	; (80a1b4c <setup+0x108>)
 80a1a8a:	4931      	ldr	r1, [pc, #196]	; (80a1b50 <setup+0x10c>)
 80a1a8c:	482a      	ldr	r0, [pc, #168]	; (80a1b38 <setup+0xf4>)
 80a1a8e:	f001 faca 	bl	80a3026 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80a1a92:	4a30      	ldr	r2, [pc, #192]	; (80a1b54 <setup+0x110>)
 80a1a94:	4930      	ldr	r1, [pc, #192]	; (80a1b58 <setup+0x114>)
 80a1a96:	4828      	ldr	r0, [pc, #160]	; (80a1b38 <setup+0xf4>)
 80a1a98:	f001 fac5 	bl	80a3026 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80a1a9c:	4a2f      	ldr	r2, [pc, #188]	; (80a1b5c <setup+0x118>)
 80a1a9e:	4930      	ldr	r1, [pc, #192]	; (80a1b60 <setup+0x11c>)
 80a1aa0:	4825      	ldr	r0, [pc, #148]	; (80a1b38 <setup+0xf4>)
 80a1aa2:	f001 fac0 	bl	80a3026 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80a1aa6:	4a2f      	ldr	r2, [pc, #188]	; (80a1b64 <setup+0x120>)
 80a1aa8:	492f      	ldr	r1, [pc, #188]	; (80a1b68 <setup+0x124>)
 80a1aaa:	4823      	ldr	r0, [pc, #140]	; (80a1b38 <setup+0xf4>)
 80a1aac:	f001 fabb 	bl	80a3026 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
    Time.zone(TIME_ZONE);
 80a1ab0:	482e      	ldr	r0, [pc, #184]	; (80a1b6c <setup+0x128>)
 80a1ab2:	f001 f803 	bl	80a2abc <_ZN9TimeClass4zoneEf>
    Time.setFormat(TIME_FORMAT_ISO8601_FULL);
 80a1ab6:	4b2e      	ldr	r3, [pc, #184]	; (80a1b70 <setup+0x12c>)
    DEBUG_PRINT("Erase Token");
 80a1ab8:	492e      	ldr	r1, [pc, #184]	; (80a1b74 <setup+0x130>)
        }

        void setFormat(const char* format)
        {
            this->format_spec = format;
 80a1aba:	681a      	ldr	r2, [r3, #0]
 80a1abc:	4b2e      	ldr	r3, [pc, #184]	; (80a1b78 <setup+0x134>)
 80a1abe:	a802      	add	r0, sp, #8
 80a1ac0:	601a      	str	r2, [r3, #0]
 80a1ac2:	f000 ff21 	bl	80a2908 <_ZN6String6formatEPKcz>
 80a1ac6:	9a02      	ldr	r2, [sp, #8]
 80a1ac8:	492c      	ldr	r1, [pc, #176]	; (80a1b7c <setup+0x138>)
 80a1aca:	4668      	mov	r0, sp
 80a1acc:	f7ff fd74 	bl	80a15b8 <_ZN10CloudClass7publishEPKcS1_.isra.0>
 80a1ad0:	a801      	add	r0, sp, #4
 80a1ad2:	f7fe fc49 	bl	80a0368 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1ad6:	a802      	add	r0, sp, #8
 80a1ad8:	f000 fd98 	bl	80a260c <_ZN6StringD1Ev>
    if (OAuth2.authenticated()) 
 80a1adc:	4828      	ldr	r0, [pc, #160]	; (80a1b80 <setup+0x13c>)
 80a1ade:	f7fe fb76 	bl	80a01ce <_ZN13Google_OAuth213authenticatedEv>
 80a1ae2:	b178      	cbz	r0, 80a1b04 <setup+0xc0>
        DEBUG_PRINT("Oauth2 already authenicated");
 80a1ae4:	4927      	ldr	r1, [pc, #156]	; (80a1b84 <setup+0x140>)
 80a1ae6:	a802      	add	r0, sp, #8
 80a1ae8:	f000 ff0e 	bl	80a2908 <_ZN6String6formatEPKcz>
 80a1aec:	9a02      	ldr	r2, [sp, #8]
 80a1aee:	4923      	ldr	r1, [pc, #140]	; (80a1b7c <setup+0x138>)
 80a1af0:	4668      	mov	r0, sp
 80a1af2:	f7ff fd61 	bl	80a15b8 <_ZN10CloudClass7publishEPKcS1_.isra.0>
 80a1af6:	a801      	add	r0, sp, #4
 80a1af8:	f7fe fc36 	bl	80a0368 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1afc:	a802      	add	r0, sp, #8
 80a1afe:	f000 fd85 	bl	80a260c <_ZN6StringD1Ev>
        change_app_stage_to(App_Stage::CALENDAR);
 80a1b02:	2001      	movs	r0, #1
       change_app_stage_to(App_Stage::OAUTH2);
 80a1b04:	f7ff fdcc 	bl	80a16a0 <_Z19change_app_stage_to9App_Stage>
 80a1b08:	f000 fad8 	bl	80a20bc <HAL_Timer_Get_Milli_Seconds>
    polling_time = millis();
 80a1b0c:	4b1e      	ldr	r3, [pc, #120]	; (80a1b88 <setup+0x144>)
 80a1b0e:	6018      	str	r0, [r3, #0]
}
 80a1b10:	b007      	add	sp, #28
 80a1b12:	f85d fb04 	ldr.w	pc, [sp], #4
 80a1b16:	bf00      	nop
 80a1b18:	200004ac 	.word	0x200004ac
 80a1b1c:	080a7199 	.word	0x080a7199
 80a1b20:	20000479 	.word	0x20000479
 80a1b24:	080a71a8 	.word	0x080a71a8
 80a1b28:	2000049c 	.word	0x2000049c
 80a1b2c:	080a71b6 	.word	0x080a71b6
 80a1b30:	080a71bd 	.word	0x080a71bd
 80a1b34:	080a1919 	.word	0x080a1919
 80a1b38:	080a2fdf 	.word	0x080a2fdf
 80a1b3c:	080a71d4 	.word	0x080a71d4
 80a1b40:	080a192d 	.word	0x080a192d
 80a1b44:	080a71ea 	.word	0x080a71ea
 80a1b48:	080a1589 	.word	0x080a1589
 80a1b4c:	080a71fb 	.word	0x080a71fb
 80a1b50:	080a15a1 	.word	0x080a15a1
 80a1b54:	080a720d 	.word	0x080a720d
 80a1b58:	080a19a1 	.word	0x080a19a1
 80a1b5c:	080a7219 	.word	0x080a7219
 80a1b60:	080a19b3 	.word	0x080a19b3
 80a1b64:	080a7225 	.word	0x080a7225
 80a1b68:	080a19c5 	.word	0x080a19c5
 80a1b6c:	c0e00000 	.word	0xc0e00000
 80a1b70:	20000004 	.word	0x20000004
 80a1b74:	080a7231 	.word	0x080a7231
 80a1b78:	20000548 	.word	0x20000548
 80a1b7c:	080a6ab1 	.word	0x080a6ab1
 80a1b80:	2000016c 	.word	0x2000016c
 80a1b84:	080a723d 	.word	0x080a723d
 80a1b88:	200004a8 	.word	0x200004a8

080a1b8c <loop>:
{
 80a1b8c:	b570      	push	{r4, r5, r6, lr}
 80a1b8e:	b086      	sub	sp, #24
    freemem = System.freeMemory();
 80a1b90:	f000 fd19 	bl	80a25c6 <_ZN11SystemClass10freeMemoryEv>
 80a1b94:	4b38      	ldr	r3, [pc, #224]	; (80a1c78 <loop+0xec>)
    if ((polling_rate > (60 * 60 * 1000)) && (app_stage == App_Stage::ACTIVE) ) {
 80a1b96:	4e39      	ldr	r6, [pc, #228]	; (80a1c7c <loop+0xf0>)
    freemem = System.freeMemory();
 80a1b98:	6018      	str	r0, [r3, #0]
 80a1b9a:	f000 fa8f 	bl	80a20bc <HAL_Timer_Get_Milli_Seconds>
 80a1b9e:	4604      	mov	r4, r0
    update_time_remaining(now);
 80a1ba0:	f7ff fd18 	bl	80a15d4 <_Z21update_time_remainingm>
    if ((polling_rate > (60 * 60 * 1000)) && (app_stage == App_Stage::ACTIVE) ) {
 80a1ba4:	6832      	ldr	r2, [r6, #0]
 80a1ba6:	4b36      	ldr	r3, [pc, #216]	; (80a1c80 <loop+0xf4>)
 80a1ba8:	4d36      	ldr	r5, [pc, #216]	; (80a1c84 <loop+0xf8>)
 80a1baa:	429a      	cmp	r2, r3
 80a1bac:	d914      	bls.n	80a1bd8 <loop+0x4c>
 80a1bae:	782b      	ldrb	r3, [r5, #0]
 80a1bb0:	2b06      	cmp	r3, #6
 80a1bb2:	d111      	bne.n	80a1bd8 <loop+0x4c>
        DEBUG_PRINT("Max Event Time Exceeded");
 80a1bb4:	4934      	ldr	r1, [pc, #208]	; (80a1c88 <loop+0xfc>)
 80a1bb6:	a802      	add	r0, sp, #8
 80a1bb8:	f000 fea6 	bl	80a2908 <_ZN6String6formatEPKcz>
 80a1bbc:	9a02      	ldr	r2, [sp, #8]
 80a1bbe:	4933      	ldr	r1, [pc, #204]	; (80a1c8c <loop+0x100>)
 80a1bc0:	4668      	mov	r0, sp
 80a1bc2:	f7ff fcf9 	bl	80a15b8 <_ZN10CloudClass7publishEPKcS1_.isra.0>
 80a1bc6:	a801      	add	r0, sp, #4
 80a1bc8:	f7fe fbce 	bl	80a0368 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1bcc:	a802      	add	r0, sp, #8
 80a1bce:	f000 fd1d 	bl	80a260c <_ZN6StringD1Ev>
        change_app_stage_to(App_Stage::EVENT_TOO_LONG);
 80a1bd2:	2004      	movs	r0, #4
 80a1bd4:	f7ff fd64 	bl	80a16a0 <_Z19change_app_stage_to9App_Stage>
        switch (app_stage)
 80a1bd8:	782b      	ldrb	r3, [r5, #0]
    unsigned long elapsed = now - polling_time; //will always be positive
 80a1bda:	4d2d      	ldr	r5, [pc, #180]	; (80a1c90 <loop+0x104>)
    if (elapsed <= polling_rate) {
 80a1bdc:	6832      	ldr	r2, [r6, #0]
    unsigned long elapsed = now - polling_time; //will always be positive
 80a1bde:	6828      	ldr	r0, [r5, #0]
 80a1be0:	1a24      	subs	r4, r4, r0
    if (elapsed <= polling_rate) {
 80a1be2:	42a2      	cmp	r2, r4
 80a1be4:	d32d      	bcc.n	80a1c42 <loop+0xb6>
        switch (app_stage)
 80a1be6:	2b02      	cmp	r3, #2
 80a1be8:	d00c      	beq.n	80a1c04 <loop+0x78>
 80a1bea:	3b03      	subs	r3, #3
 80a1bec:	2b04      	cmp	r3, #4
 80a1bee:	d802      	bhi.n	80a1bf6 <loop+0x6a>
                Control.relay_loop();
 80a1bf0:	4828      	ldr	r0, [pc, #160]	; (80a1c94 <loop+0x108>)
 80a1bf2:	f000 f981 	bl	80a1ef8 <_ZN13Relay_Control10relay_loopEv>
        delay(1000);
 80a1bf6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
 80a1bfa:	b006      	add	sp, #24
 80a1bfc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        delay(1000);
 80a1c00:	f001 b8de 	b.w	80a2dc0 <delay>
                Control.turn_off_relays();
 80a1c04:	4823      	ldr	r0, [pc, #140]	; (80a1c94 <loop+0x108>)
 80a1c06:	f000 fa0f 	bl	80a2028 <_ZN13Relay_Control15turn_off_relaysEv>
                delay(1000);
 80a1c0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a1c0e:	f001 f8d7 	bl	80a2dc0 <delay>
                DEBUG_PRINT("Press Reset Button");
 80a1c12:	a802      	add	r0, sp, #8
 80a1c14:	4920      	ldr	r1, [pc, #128]	; (80a1c98 <loop+0x10c>)
 80a1c16:	f000 fe77 	bl	80a2908 <_ZN6String6formatEPKcz>
 80a1c1a:	9a02      	ldr	r2, [sp, #8]
 80a1c1c:	491b      	ldr	r1, [pc, #108]	; (80a1c8c <loop+0x100>)
 80a1c1e:	4668      	mov	r0, sp
 80a1c20:	f7ff fcca 	bl	80a15b8 <_ZN10CloudClass7publishEPKcS1_.isra.0>
 80a1c24:	a801      	add	r0, sp, #4
 80a1c26:	f7fe fb9f 	bl	80a0368 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1c2a:	a802      	add	r0, sp, #8
 80a1c2c:	f000 fcee 	bl	80a260c <_ZN6StringD1Ev>
                delay(15 * 60 * 1000);
 80a1c30:	481a      	ldr	r0, [pc, #104]	; (80a1c9c <loop+0x110>)
 80a1c32:	f001 f8c5 	bl	80a2dc0 <delay>
                print_app_error();
 80a1c36:	f7ff fd19 	bl	80a166c <_Z15print_app_errorv>
                Control.turn_off_relays();
 80a1c3a:	4816      	ldr	r0, [pc, #88]	; (80a1c94 <loop+0x108>)
 80a1c3c:	f000 f9f4 	bl	80a2028 <_ZN13Relay_Control15turn_off_relaysEv>
 80a1c40:	e7d6      	b.n	80a1bf0 <loop+0x64>
        switch (app_stage)
 80a1c42:	2b07      	cmp	r3, #7
 80a1c44:	d807      	bhi.n	80a1c56 <loop+0xca>
 80a1c46:	e8df f003 	tbb	[pc, r3]
 80a1c4a:	0b04      	.short	0x0b04
 80a1c4c:	0e151506 	.word	0x0e151506
 80a1c50:	1215      	.short	0x1215
                oauth2_loop();
 80a1c52:	f7ff fec1 	bl	80a19d8 <_Z11oauth2_loopv>
 80a1c56:	f000 fa31 	bl	80a20bc <HAL_Timer_Get_Milli_Seconds>
        polling_time = millis();
 80a1c5a:	6028      	str	r0, [r5, #0]
}
 80a1c5c:	b006      	add	sp, #24
 80a1c5e:	bd70      	pop	{r4, r5, r6, pc}
                calendar_loop();
 80a1c60:	f7ff fed6 	bl	80a1a10 <_Z13calendar_loopv>
                break;
 80a1c64:	e7f7      	b.n	80a1c56 <loop+0xca>
                change_app_stage_to(App_Stage::ACTIVE); 
 80a1c66:	2006      	movs	r0, #6
                change_app_stage_to(App_Stage::CALENDAR); 
 80a1c68:	f7ff fd1a 	bl	80a16a0 <_Z19change_app_stage_to9App_Stage>
                break;
 80a1c6c:	e7f3      	b.n	80a1c56 <loop+0xca>
                Control.turn_off_relays();
 80a1c6e:	4809      	ldr	r0, [pc, #36]	; (80a1c94 <loop+0x108>)
 80a1c70:	f000 f9da 	bl	80a2028 <_ZN13Relay_Control15turn_off_relaysEv>
                change_app_stage_to(App_Stage::CALENDAR); 
 80a1c74:	2001      	movs	r0, #1
 80a1c76:	e7f7      	b.n	80a1c68 <loop+0xdc>
 80a1c78:	2000049c 	.word	0x2000049c
 80a1c7c:	200004a4 	.word	0x200004a4
 80a1c80:	0036ee80 	.word	0x0036ee80
 80a1c84:	20000478 	.word	0x20000478
 80a1c88:	080a7259 	.word	0x080a7259
 80a1c8c:	080a6ab1 	.word	0x080a6ab1
 80a1c90:	200004a8 	.word	0x200004a8
 80a1c94:	20000160 	.word	0x20000160
 80a1c98:	080a7271 	.word	0x080a7271
 80a1c9c:	000dbba0 	.word	0x000dbba0

080a1ca0 <_Z16calendar_handlerv>:
{
 80a1ca0:	b500      	push	{lr}
    if (!Calendar.failed())
 80a1ca2:	4829      	ldr	r0, [pc, #164]	; (80a1d48 <_Z16calendar_handlerv+0xa8>)
{
 80a1ca4:	b089      	sub	sp, #36	; 0x24
    if (!Calendar.failed())
 80a1ca6:	f7ff f8b3 	bl	80a0e10 <_ZN15Google_Calendar6failedEv>
 80a1caa:	2800      	cmp	r0, #0
 80a1cac:	d146      	bne.n	80a1d3c <_Z16calendar_handlerv+0x9c>
        if (Calendar.is_event_pending())
 80a1cae:	4826      	ldr	r0, [pc, #152]	; (80a1d48 <_Z16calendar_handlerv+0xa8>)
 80a1cb0:	f7ff f8b4 	bl	80a0e1c <_ZN15Google_Calendar16is_event_pendingEv>
 80a1cb4:	b328      	cbz	r0, 80a1d02 <_Z16calendar_handlerv+0x62>
            if ((Calendar.get_time_remaining() * 1000) < 0) {
 80a1cb6:	4824      	ldr	r0, [pc, #144]	; (80a1d48 <_Z16calendar_handlerv+0xa8>)
 80a1cb8:	f7ff f8b3 	bl	80a0e22 <_ZN15Google_Calendar18get_time_remainingEv>
 80a1cbc:	2800      	cmp	r0, #0
 80a1cbe:	da1b      	bge.n	80a1cf8 <_Z16calendar_handlerv+0x58>
                change_app_stage_to(App_Stage::ACTIVE);
 80a1cc0:	2006      	movs	r0, #6
 80a1cc2:	f7ff fced 	bl	80a16a0 <_Z19change_app_stage_to9App_Stage>
	StringSumHelper(const char *p) : String(p) {}
 80a1cc6:	4921      	ldr	r1, [pc, #132]	; (80a1d4c <_Z16calendar_handlerv+0xac>)
 80a1cc8:	4668      	mov	r0, sp
 80a1cca:	f000 fce9 	bl	80a26a0 <_ZN6StringC1EPK19__FlashStringHelper>
                sprintf(currentState, "Pending: " + Calendar.get_event_title());
 80a1cce:	a804      	add	r0, sp, #16
 80a1cd0:	491d      	ldr	r1, [pc, #116]	; (80a1d48 <_Z16calendar_handlerv+0xa8>)
 80a1cd2:	f7ff f8e1 	bl	80a0e98 <_ZN15Google_Calendar15get_event_titleEv>
 80a1cd6:	a904      	add	r1, sp, #16
 80a1cd8:	4668      	mov	r0, sp
 80a1cda:	f000 fd6e 	bl	80a27ba <_ZplRK15StringSumHelperRK6String>
 80a1cde:	6801      	ldr	r1, [r0, #0]
 80a1ce0:	481b      	ldr	r0, [pc, #108]	; (80a1d50 <_Z16calendar_handlerv+0xb0>)
 80a1ce2:	f000 fc09 	bl	80a24f8 <sprintf>
 80a1ce6:	a804      	add	r0, sp, #16
 80a1ce8:	f000 fc90 	bl	80a260c <_ZN6StringD1Ev>
class StringSumHelper : public String
 80a1cec:	4668      	mov	r0, sp
 80a1cee:	f000 fc8d 	bl	80a260c <_ZN6StringD1Ev>
}
 80a1cf2:	b009      	add	sp, #36	; 0x24
 80a1cf4:	f85d fb04 	ldr.w	pc, [sp], #4
                change_app_stage_to(App_Stage::PENDING);
 80a1cf8:	2005      	movs	r0, #5
 80a1cfa:	f7ff fcd1 	bl	80a16a0 <_Z19change_app_stage_to9App_Stage>
	StringSumHelper(const char *p) : String(p) {}
 80a1cfe:	4915      	ldr	r1, [pc, #84]	; (80a1d54 <_Z16calendar_handlerv+0xb4>)
 80a1d00:	e7e2      	b.n	80a1cc8 <_Z16calendar_handlerv+0x28>
            delay(1000);
 80a1d02:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a1d06:	f001 f85b 	bl	80a2dc0 <delay>
            DEBUG_PRINT("No pending events!");
 80a1d0a:	a804      	add	r0, sp, #16
 80a1d0c:	4912      	ldr	r1, [pc, #72]	; (80a1d58 <_Z16calendar_handlerv+0xb8>)
 80a1d0e:	f000 fdfb 	bl	80a2908 <_ZN6String6formatEPKcz>
 80a1d12:	9a04      	ldr	r2, [sp, #16]
 80a1d14:	4911      	ldr	r1, [pc, #68]	; (80a1d5c <_Z16calendar_handlerv+0xbc>)
 80a1d16:	4668      	mov	r0, sp
 80a1d18:	f7ff fc4e 	bl	80a15b8 <_ZN10CloudClass7publishEPKcS1_.isra.0>
 80a1d1c:	a801      	add	r0, sp, #4
 80a1d1e:	f7fe fb23 	bl	80a0368 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1d22:	a804      	add	r0, sp, #16
 80a1d24:	f000 fc72 	bl	80a260c <_ZN6StringD1Ev>
            change_app_stage_to(App_Stage::WAITING);
 80a1d28:	2003      	movs	r0, #3
 80a1d2a:	f7ff fcb9 	bl	80a16a0 <_Z19change_app_stage_to9App_Stage>
            sprintf(currentState, "Waiting");
 80a1d2e:	490c      	ldr	r1, [pc, #48]	; (80a1d60 <_Z16calendar_handlerv+0xc0>)
 80a1d30:	4807      	ldr	r0, [pc, #28]	; (80a1d50 <_Z16calendar_handlerv+0xb0>)
}
 80a1d32:	b009      	add	sp, #36	; 0x24
 80a1d34:	f85d eb04 	ldr.w	lr, [sp], #4
            sprintf(currentState, "Waiting");
 80a1d38:	f003 bbe1 	b.w	80a54fe <strcpy>
        change_app_stage_to(App_Stage::FAILED);
 80a1d3c:	2002      	movs	r0, #2
}
 80a1d3e:	b009      	add	sp, #36	; 0x24
 80a1d40:	f85d eb04 	ldr.w	lr, [sp], #4
        change_app_stage_to(App_Stage::FAILED);
 80a1d44:	f7ff bcac 	b.w	80a16a0 <_Z19change_app_stage_to9App_Stage>
 80a1d48:	200000e0 	.word	0x200000e0
 80a1d4c:	080a7160 	.word	0x080a7160
 80a1d50:	20000479 	.word	0x20000479
 80a1d54:	080a7284 	.word	0x080a7284
 80a1d58:	080a728e 	.word	0x080a728e
 80a1d5c:	080a6ab1 	.word	0x080a6ab1
 80a1d60:	080a72a1 	.word	0x080a72a1

080a1d64 <_GLOBAL__sub_I_app_stage>:
        val_(val) {
 80a1d64:	2200      	movs	r2, #0
}
 80a1d66:	b570      	push	{r4, r5, r6, lr}
 80a1d68:	4b12      	ldr	r3, [pc, #72]	; (80a1db4 <_GLOBAL__sub_I_app_stage+0x50>)

const int8_t TIME_ZONE = -7;

//Don't forget to update the webhook device ID's if you change devices

const String CLIENT_ID = "355382188119-102htvfiinqdc0pse0e09uqkv68l3j67.apps.googleusercontent.com";  
 80a1d6a:	4c13      	ldr	r4, [pc, #76]	; (80a1db8 <_GLOBAL__sub_I_app_stage+0x54>)
const String CLIENT_SECRET = "VQOm4nCJJzXuC37ybY3jiWl8";  
 80a1d6c:	4e13      	ldr	r6, [pc, #76]	; (80a1dbc <_GLOBAL__sub_I_app_stage+0x58>)
 80a1d6e:	701a      	strb	r2, [r3, #0]

const String CALENDAR_ID = "1g30g95aegj1fpo3t4p7nehhsk@group.calendar.google.com"; 
 80a1d70:	4d13      	ldr	r5, [pc, #76]	; (80a1dc0 <_GLOBAL__sub_I_app_stage+0x5c>)
const String CLIENT_ID = "355382188119-102htvfiinqdc0pse0e09uqkv68l3j67.apps.googleusercontent.com";  
 80a1d72:	4620      	mov	r0, r4
 80a1d74:	4913      	ldr	r1, [pc, #76]	; (80a1dc4 <_GLOBAL__sub_I_app_stage+0x60>)
 80a1d76:	f000 fc93 	bl	80a26a0 <_ZN6StringC1EPK19__FlashStringHelper>
const String CLIENT_SECRET = "VQOm4nCJJzXuC37ybY3jiWl8";  
 80a1d7a:	4630      	mov	r0, r6
 80a1d7c:	4912      	ldr	r1, [pc, #72]	; (80a1dc8 <_GLOBAL__sub_I_app_stage+0x64>)
 80a1d7e:	f000 fc8f 	bl	80a26a0 <_ZN6StringC1EPK19__FlashStringHelper>
const String CALENDAR_ID = "1g30g95aegj1fpo3t4p7nehhsk@group.calendar.google.com"; 
 80a1d82:	4628      	mov	r0, r5
 80a1d84:	4911      	ldr	r1, [pc, #68]	; (80a1dcc <_GLOBAL__sub_I_app_stage+0x68>)
 80a1d86:	f000 fc8b 	bl	80a26a0 <_ZN6StringC1EPK19__FlashStringHelper>
//
//	The following are global objects for the DFPlayer and Google classes.
//
//*****************************************************************************

Google_OAuth2 OAuth2(CLIENT_ID, CLIENT_SECRET);
 80a1d8a:	4621      	mov	r1, r4
Google_Calendar Calendar(CALENDAR_ID, TIME_ZONE);
 80a1d8c:	4c10      	ldr	r4, [pc, #64]	; (80a1dd0 <_GLOBAL__sub_I_app_stage+0x6c>)
Google_OAuth2 OAuth2(CLIENT_ID, CLIENT_SECRET);
 80a1d8e:	4632      	mov	r2, r6
 80a1d90:	4810      	ldr	r0, [pc, #64]	; (80a1dd4 <_GLOBAL__sub_I_app_stage+0x70>)
 80a1d92:	f7fe fa71 	bl	80a0278 <_ZN13Google_OAuth2C1ERK6StringS2_>
Google_Calendar Calendar(CALENDAR_ID, TIME_ZONE);
 80a1d96:	4622      	mov	r2, r4
 80a1d98:	4629      	mov	r1, r5
 80a1d9a:	480f      	ldr	r0, [pc, #60]	; (80a1dd8 <_GLOBAL__sub_I_app_stage+0x74>)
 80a1d9c:	f7ff f80c 	bl	80a0db8 <_ZN15Google_CalendarC1ERK6StringRKa>
Relay_Control Control(TIME_ZONE);
 80a1da0:	4621      	mov	r1, r4
 80a1da2:	480e      	ldr	r0, [pc, #56]	; (80a1ddc <_GLOBAL__sub_I_app_stage+0x78>)
 80a1da4:	f000 f89a 	bl	80a1edc <_ZN13Relay_ControlC1ERKa>
 80a1da8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    int scan(void (*handler)(WiFiAccessPoint* ap, T* instance), T* instance) {
        return scan((wlan_scan_result_t)handler, (void*)instance);
    }

    int selectAntenna(WLanSelectAntenna_TypeDef antenna) {
        return wlan_select_antenna(antenna);
 80a1dac:	2001      	movs	r0, #1
 80a1dae:	f000 ba8f 	b.w	80a22d0 <wlan_select_antenna>
 80a1db2:	bf00      	nop
 80a1db4:	20000464 	.word	0x20000464
 80a1db8:	20000468 	.word	0x20000468
 80a1dbc:	20000454 	.word	0x20000454
 80a1dc0:	20000444 	.word	0x20000444
 80a1dc4:	080a72a9 	.word	0x080a72a9
 80a1dc8:	080a72f2 	.word	0x080a72f2
 80a1dcc:	080a730b 	.word	0x080a730b
 80a1dd0:	080a7340 	.word	0x080a7340
 80a1dd4:	2000016c 	.word	0x2000016c
 80a1dd8:	200000e0 	.word	0x200000e0
 80a1ddc:	20000160 	.word	0x20000160

080a1de0 <_ZN10CloudClass7publishEPKcS1_.isra.0>:
inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
 80a1de0:	b513      	push	{r0, r1, r4, lr}
 80a1de2:	4604      	mov	r4, r0
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 80a1de4:	4b04      	ldr	r3, [pc, #16]	; (80a1df8 <_ZN10CloudClass7publishEPKcS1_.isra.0+0x18>)
 80a1de6:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a1de8:	f88d 3000 	strb.w	r3, [sp]
 80a1dec:	233c      	movs	r3, #60	; 0x3c
 80a1dee:	f001 fa11 	bl	80a3214 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
}
 80a1df2:	4620      	mov	r0, r4
 80a1df4:	b002      	add	sp, #8
 80a1df6:	bd10      	pop	{r4, pc}
 80a1df8:	2000052c 	.word	0x2000052c

080a1dfc <_ZN13Relay_Control13process_eventE6String>:
   
    DEBUG_PRINT("Relay Setup Complete")

}
void Relay_Control::process_event(String event_title)
{
 80a1dfc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a1dfe:	460d      	mov	r5, r1
 80a1e00:	4604      	mov	r4, r0



    if (event_title.indexOf("Veg") > -1) {
 80a1e02:	4917      	ldr	r1, [pc, #92]	; (80a1e60 <_ZN13Relay_Control13process_eventE6String+0x64>)
 80a1e04:	4668      	mov	r0, sp
 80a1e06:	f000 fc4b 	bl	80a26a0 <_ZN6StringC1EPK19__FlashStringHelper>
 80a1e0a:	4669      	mov	r1, sp
 80a1e0c:	4628      	mov	r0, r5
 80a1e0e:	f000 fd50 	bl	80a28b2 <_ZNK6String7indexOfERKS_>
 80a1e12:	4606      	mov	r6, r0
 80a1e14:	43f6      	mvns	r6, r6
 80a1e16:	4668      	mov	r0, sp
 80a1e18:	0ff6      	lsrs	r6, r6, #31
 80a1e1a:	f000 fbf7 	bl	80a260c <_ZN6StringD1Ev>
 80a1e1e:	7126      	strb	r6, [r4, #4]
        relay1 = true;
    } else {
        relay1 = false;
    }
    
    if (event_title.indexOf("Tom") > -1) {
 80a1e20:	4668      	mov	r0, sp
 80a1e22:	4910      	ldr	r1, [pc, #64]	; (80a1e64 <_ZN13Relay_Control13process_eventE6String+0x68>)
 80a1e24:	f000 fc3c 	bl	80a26a0 <_ZN6StringC1EPK19__FlashStringHelper>
 80a1e28:	4669      	mov	r1, sp
 80a1e2a:	4628      	mov	r0, r5
 80a1e2c:	f000 fd41 	bl	80a28b2 <_ZNK6String7indexOfERKS_>
 80a1e30:	4606      	mov	r6, r0
 80a1e32:	43f6      	mvns	r6, r6
 80a1e34:	4668      	mov	r0, sp
 80a1e36:	0ff6      	lsrs	r6, r6, #31
 80a1e38:	f000 fbe8 	bl	80a260c <_ZN6StringD1Ev>
        relay2 = true;
    } else {
        relay2 = false;
    }
    
    if (event_title.indexOf("Fro") > -1) {
 80a1e3c:	4668      	mov	r0, sp
 80a1e3e:	490a      	ldr	r1, [pc, #40]	; (80a1e68 <_ZN13Relay_Control13process_eventE6String+0x6c>)
 80a1e40:	7166      	strb	r6, [r4, #5]
 80a1e42:	f000 fc2d 	bl	80a26a0 <_ZN6StringC1EPK19__FlashStringHelper>
 80a1e46:	4669      	mov	r1, sp
 80a1e48:	4628      	mov	r0, r5
 80a1e4a:	f000 fd32 	bl	80a28b2 <_ZNK6String7indexOfERKS_>
 80a1e4e:	4605      	mov	r5, r0
 80a1e50:	4668      	mov	r0, sp
 80a1e52:	43ed      	mvns	r5, r5
 80a1e54:	f000 fbda 	bl	80a260c <_ZN6StringD1Ev>
 80a1e58:	0fed      	lsrs	r5, r5, #31
 80a1e5a:	71a5      	strb	r5, [r4, #6]
        relay3 = true;
    } else {
        relay3 = false;
    }
    
}
 80a1e5c:	b004      	add	sp, #16
 80a1e5e:	bd70      	pop	{r4, r5, r6, pc}
 80a1e60:	080a7341 	.word	0x080a7341
 80a1e64:	080a7345 	.word	0x080a7345
 80a1e68:	080a7349 	.word	0x080a7349

080a1e6c <_ZN13Relay_Control12setup_relaysEv>:
void Relay_Control::setup_relays()  {
 80a1e6c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    pinMode(RELAY1PIN, OUTPUT);
 80a1e6e:	2101      	movs	r1, #1
 80a1e70:	2004      	movs	r0, #4
 80a1e72:	f001 fe23 	bl	80a3abc <pinMode>
    pinMode(RELAY2PIN, OUTPUT);
 80a1e76:	2101      	movs	r1, #1
 80a1e78:	2005      	movs	r0, #5
 80a1e7a:	f001 fe1f 	bl	80a3abc <pinMode>
    pinMode(RELAY3PIN, OUTPUT);
 80a1e7e:	2101      	movs	r1, #1
 80a1e80:	2006      	movs	r0, #6
 80a1e82:	f001 fe1b 	bl	80a3abc <pinMode>
    pinMode(RELAY4PIN, OUTPUT);
 80a1e86:	2101      	movs	r1, #1
 80a1e88:	2007      	movs	r0, #7
 80a1e8a:	f001 fe17 	bl	80a3abc <pinMode>
    digitalWrite(RELAY1PIN, HIGH);
 80a1e8e:	2101      	movs	r1, #1
 80a1e90:	2004      	movs	r0, #4
 80a1e92:	f001 fe24 	bl	80a3ade <digitalWrite>
    digitalWrite(RELAY2PIN, HIGH);
 80a1e96:	2101      	movs	r1, #1
 80a1e98:	2005      	movs	r0, #5
 80a1e9a:	f001 fe20 	bl	80a3ade <digitalWrite>
    digitalWrite(RELAY3PIN, HIGH); 
 80a1e9e:	2101      	movs	r1, #1
 80a1ea0:	2006      	movs	r0, #6
 80a1ea2:	f001 fe1c 	bl	80a3ade <digitalWrite>
    digitalWrite(RELAY4PIN, HIGH);
 80a1ea6:	2101      	movs	r1, #1
 80a1ea8:	2007      	movs	r0, #7
 80a1eaa:	f001 fe18 	bl	80a3ade <digitalWrite>
    DEBUG_PRINT("Relay Setup Complete")
 80a1eae:	a802      	add	r0, sp, #8
 80a1eb0:	4908      	ldr	r1, [pc, #32]	; (80a1ed4 <_ZN13Relay_Control12setup_relaysEv+0x68>)
 80a1eb2:	f000 fd29 	bl	80a2908 <_ZN6String6formatEPKcz>
 80a1eb6:	9a02      	ldr	r2, [sp, #8]
 80a1eb8:	4907      	ldr	r1, [pc, #28]	; (80a1ed8 <_ZN13Relay_Control12setup_relaysEv+0x6c>)
 80a1eba:	4668      	mov	r0, sp
 80a1ebc:	f7ff ff90 	bl	80a1de0 <_ZN10CloudClass7publishEPKcS1_.isra.0>
 80a1ec0:	a801      	add	r0, sp, #4
 80a1ec2:	f7fe fa51 	bl	80a0368 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1ec6:	a802      	add	r0, sp, #8
 80a1ec8:	f000 fba0 	bl	80a260c <_ZN6StringD1Ev>
}
 80a1ecc:	b007      	add	sp, #28
 80a1ece:	f85d fb04 	ldr.w	pc, [sp], #4
 80a1ed2:	bf00      	nop
 80a1ed4:	080a734d 	.word	0x080a734d
 80a1ed8:	080a6ab1 	.word	0x080a6ab1

080a1edc <_ZN13Relay_ControlC1ERKa>:
    : TIME_ZONE(time_zone)
 80a1edc:	780b      	ldrb	r3, [r1, #0]
Relay_Control::Relay_Control(const int8_t &time_zone)
 80a1ede:	b510      	push	{r4, lr}
    : TIME_ZONE(time_zone)
 80a1ee0:	7003      	strb	r3, [r0, #0]
Relay_Control::Relay_Control(const int8_t &time_zone)
 80a1ee2:	4604      	mov	r4, r0
    setup_relays();
 80a1ee4:	f7ff ffc2 	bl	80a1e6c <_ZN13Relay_Control12setup_relaysEv>
    relay1_LastState = false;
 80a1ee8:	2300      	movs	r3, #0
}
 80a1eea:	4620      	mov	r0, r4
    lastUpdateTime = 0;
 80a1eec:	e9c4 3301 	strd	r3, r3, [r4, #4]
    relay1_LastState = false;
 80a1ef0:	7063      	strb	r3, [r4, #1]
    relay2_LastState = false;
 80a1ef2:	8063      	strh	r3, [r4, #2]
}
 80a1ef4:	bd10      	pop	{r4, pc}
	...

080a1ef8 <_ZN13Relay_Control10relay_loopEv>:
}



void Relay_Control::relay_loop()
{
 80a1ef8:	b510      	push	{r4, lr}
        relay1
 80a1efa:	7903      	ldrb	r3, [r0, #4]


    timerState = relay1TimerActive();  //State Change method this block
    if(timerState != relay1_LastState)  {
 80a1efc:	7842      	ldrb	r2, [r0, #1]
{
 80a1efe:	4604      	mov	r4, r0
    if(timerState != relay1_LastState)  {
 80a1f00:	429a      	cmp	r2, r3
{
 80a1f02:	b086      	sub	sp, #24
    timerState = relay1TimerActive();  //State Change method this block
 80a1f04:	71c3      	strb	r3, [r0, #7]
    if(timerState != relay1_LastState)  {
 80a1f06:	d01b      	beq.n	80a1f40 <_ZN13Relay_Control10relay_loopEv+0x48>
        delay(1000);
 80a1f08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a1f0c:	f000 ff58 	bl	80a2dc0 <delay>
        if(timerState)  {
 80a1f10:	79e3      	ldrb	r3, [r4, #7]
 80a1f12:	2b00      	cmp	r3, #0
 80a1f14:	d057      	beq.n	80a1fc6 <_ZN13Relay_Control10relay_loopEv+0xce>
            digitalWrite(RELAY1PIN, LOW);
 80a1f16:	2100      	movs	r1, #0
 80a1f18:	2004      	movs	r0, #4
 80a1f1a:	f001 fde0 	bl	80a3ade <digitalWrite>
            DEBUG_PRINT("relay1 = ON");
 80a1f1e:	4933      	ldr	r1, [pc, #204]	; (80a1fec <_ZN13Relay_Control10relay_loopEv+0xf4>)
        } else  {
            digitalWrite(RELAY1PIN, HIGH);
            DEBUG_PRINT("relay1 = OFF");
 80a1f20:	a802      	add	r0, sp, #8
 80a1f22:	f000 fcf1 	bl	80a2908 <_ZN6String6formatEPKcz>
 80a1f26:	9a02      	ldr	r2, [sp, #8]
 80a1f28:	4931      	ldr	r1, [pc, #196]	; (80a1ff0 <_ZN13Relay_Control10relay_loopEv+0xf8>)
 80a1f2a:	4668      	mov	r0, sp
 80a1f2c:	f7ff ff58 	bl	80a1de0 <_ZN10CloudClass7publishEPKcS1_.isra.0>
 80a1f30:	a801      	add	r0, sp, #4
 80a1f32:	f7fe fa19 	bl	80a0368 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1f36:	a802      	add	r0, sp, #8
 80a1f38:	f000 fb68 	bl	80a260c <_ZN6StringD1Ev>
        }
        relay1_LastState = timerState;
 80a1f3c:	79e3      	ldrb	r3, [r4, #7]
 80a1f3e:	7063      	strb	r3, [r4, #1]
        relay2 
 80a1f40:	7963      	ldrb	r3, [r4, #5]
    }
    
    timerState = relay2TimerActive();  //State Change method this block
    if(timerState != relay2_LastState) {
 80a1f42:	78a2      	ldrb	r2, [r4, #2]
    timerState = relay2TimerActive();  //State Change method this block
 80a1f44:	71e3      	strb	r3, [r4, #7]
    if(timerState != relay2_LastState) {
 80a1f46:	429a      	cmp	r2, r3
 80a1f48:	d01b      	beq.n	80a1f82 <_ZN13Relay_Control10relay_loopEv+0x8a>
        delay(1000);
 80a1f4a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a1f4e:	f000 ff37 	bl	80a2dc0 <delay>
        if(timerState) {
 80a1f52:	79e3      	ldrb	r3, [r4, #7]
 80a1f54:	2b00      	cmp	r3, #0
 80a1f56:	d03c      	beq.n	80a1fd2 <_ZN13Relay_Control10relay_loopEv+0xda>
            digitalWrite(RELAY2PIN, LOW);
 80a1f58:	2100      	movs	r1, #0
 80a1f5a:	2005      	movs	r0, #5
 80a1f5c:	f001 fdbf 	bl	80a3ade <digitalWrite>
            DEBUG_PRINT("relay2 = ON");
 80a1f60:	4924      	ldr	r1, [pc, #144]	; (80a1ff4 <_ZN13Relay_Control10relay_loopEv+0xfc>)
        } else {
            digitalWrite(RELAY2PIN, HIGH);
            DEBUG_PRINT("relay2 = OFF");
 80a1f62:	a802      	add	r0, sp, #8
 80a1f64:	f000 fcd0 	bl	80a2908 <_ZN6String6formatEPKcz>
 80a1f68:	9a02      	ldr	r2, [sp, #8]
 80a1f6a:	4921      	ldr	r1, [pc, #132]	; (80a1ff0 <_ZN13Relay_Control10relay_loopEv+0xf8>)
 80a1f6c:	4668      	mov	r0, sp
 80a1f6e:	f7ff ff37 	bl	80a1de0 <_ZN10CloudClass7publishEPKcS1_.isra.0>
 80a1f72:	a801      	add	r0, sp, #4
 80a1f74:	f7fe f9f8 	bl	80a0368 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1f78:	a802      	add	r0, sp, #8
 80a1f7a:	f000 fb47 	bl	80a260c <_ZN6StringD1Ev>
        }
        relay2_LastState = timerState;
 80a1f7e:	79e3      	ldrb	r3, [r4, #7]
 80a1f80:	70a3      	strb	r3, [r4, #2]
        relay3
 80a1f82:	79a3      	ldrb	r3, [r4, #6]
    }
    
    timerState = relay3TimerActive();  //State Change method this block
    if(timerState != relay3_LastState) {
 80a1f84:	78e2      	ldrb	r2, [r4, #3]
    timerState = relay3TimerActive();  //State Change method this block
 80a1f86:	71e3      	strb	r3, [r4, #7]
    if(timerState != relay3_LastState) {
 80a1f88:	429a      	cmp	r2, r3
 80a1f8a:	d01a      	beq.n	80a1fc2 <_ZN13Relay_Control10relay_loopEv+0xca>
        delay(1000);
 80a1f8c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a1f90:	f000 ff16 	bl	80a2dc0 <delay>
        if(timerState) {
 80a1f94:	79e3      	ldrb	r3, [r4, #7]
 80a1f96:	b313      	cbz	r3, 80a1fde <_ZN13Relay_Control10relay_loopEv+0xe6>
            digitalWrite(RELAY3PIN, LOW);
 80a1f98:	2100      	movs	r1, #0
 80a1f9a:	2006      	movs	r0, #6
 80a1f9c:	f001 fd9f 	bl	80a3ade <digitalWrite>
            DEBUG_PRINT("relay3 = ON");
 80a1fa0:	4915      	ldr	r1, [pc, #84]	; (80a1ff8 <_ZN13Relay_Control10relay_loopEv+0x100>)
        } else {
            digitalWrite(RELAY3PIN, HIGH);
            DEBUG_PRINT("relay3 = OFF");
 80a1fa2:	a802      	add	r0, sp, #8
 80a1fa4:	f000 fcb0 	bl	80a2908 <_ZN6String6formatEPKcz>
 80a1fa8:	9a02      	ldr	r2, [sp, #8]
 80a1faa:	4911      	ldr	r1, [pc, #68]	; (80a1ff0 <_ZN13Relay_Control10relay_loopEv+0xf8>)
 80a1fac:	4668      	mov	r0, sp
 80a1fae:	f7ff ff17 	bl	80a1de0 <_ZN10CloudClass7publishEPKcS1_.isra.0>
 80a1fb2:	a801      	add	r0, sp, #4
 80a1fb4:	f7fe f9d8 	bl	80a0368 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1fb8:	a802      	add	r0, sp, #8
 80a1fba:	f000 fb27 	bl	80a260c <_ZN6StringD1Ev>
        }
        relay3_LastState = timerState;
 80a1fbe:	79e3      	ldrb	r3, [r4, #7]
 80a1fc0:	70e3      	strb	r3, [r4, #3]
    } 

}
 80a1fc2:	b006      	add	sp, #24
 80a1fc4:	bd10      	pop	{r4, pc}
            digitalWrite(RELAY1PIN, HIGH);
 80a1fc6:	2101      	movs	r1, #1
 80a1fc8:	2004      	movs	r0, #4
 80a1fca:	f001 fd88 	bl	80a3ade <digitalWrite>
            DEBUG_PRINT("relay1 = OFF");
 80a1fce:	490b      	ldr	r1, [pc, #44]	; (80a1ffc <_ZN13Relay_Control10relay_loopEv+0x104>)
 80a1fd0:	e7a6      	b.n	80a1f20 <_ZN13Relay_Control10relay_loopEv+0x28>
            digitalWrite(RELAY2PIN, HIGH);
 80a1fd2:	2101      	movs	r1, #1
 80a1fd4:	2005      	movs	r0, #5
 80a1fd6:	f001 fd82 	bl	80a3ade <digitalWrite>
            DEBUG_PRINT("relay2 = OFF");
 80a1fda:	4909      	ldr	r1, [pc, #36]	; (80a2000 <_ZN13Relay_Control10relay_loopEv+0x108>)
 80a1fdc:	e7c1      	b.n	80a1f62 <_ZN13Relay_Control10relay_loopEv+0x6a>
            digitalWrite(RELAY3PIN, HIGH);
 80a1fde:	2101      	movs	r1, #1
 80a1fe0:	2006      	movs	r0, #6
 80a1fe2:	f001 fd7c 	bl	80a3ade <digitalWrite>
            DEBUG_PRINT("relay3 = OFF");
 80a1fe6:	4907      	ldr	r1, [pc, #28]	; (80a2004 <_ZN13Relay_Control10relay_loopEv+0x10c>)
 80a1fe8:	e7db      	b.n	80a1fa2 <_ZN13Relay_Control10relay_loopEv+0xaa>
 80a1fea:	bf00      	nop
 80a1fec:	080a7362 	.word	0x080a7362
 80a1ff0:	080a6ab1 	.word	0x080a6ab1
 80a1ff4:	080a737b 	.word	0x080a737b
 80a1ff8:	080a7394 	.word	0x080a7394
 80a1ffc:	080a736e 	.word	0x080a736e
 80a2000:	080a7387 	.word	0x080a7387
 80a2004:	080a73a0 	.word	0x080a73a0

080a2008 <_ZN13Relay_Control13control_relayEib>:
    switch (relay_num)
 80a2008:	2903      	cmp	r1, #3
 80a200a:	d806      	bhi.n	80a201a <_ZN13Relay_Control13control_relayEib+0x12>
 80a200c:	e8df f001 	tbb	[pc, r1]
 80a2010:	09070402 	.word	0x09070402
            relay2 = state;
 80a2014:	7142      	strb	r2, [r0, #5]
            relay3 = state;
 80a2016:	7182      	strb	r2, [r0, #6]
            relay1 = state;
 80a2018:	7102      	strb	r2, [r0, #4]
    relay_loop();
 80a201a:	f7ff bf6d 	b.w	80a1ef8 <_ZN13Relay_Control10relay_loopEv>
            relay2 = state;
 80a201e:	7142      	strb	r2, [r0, #5]
            break;
 80a2020:	e7fb      	b.n	80a201a <_ZN13Relay_Control13control_relayEib+0x12>
            relay3 = state;
 80a2022:	7182      	strb	r2, [r0, #6]
            break;
 80a2024:	e7f9      	b.n	80a201a <_ZN13Relay_Control13control_relayEib+0x12>
	...

080a2028 <_ZN13Relay_Control15turn_off_relaysEv>:
void Relay_Control::turn_off_relays() {
 80a2028:	b510      	push	{r4, lr}
 80a202a:	4604      	mov	r4, r0
 80a202c:	b086      	sub	sp, #24
    delay(1000);
 80a202e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a2032:	f000 fec5 	bl	80a2dc0 <delay>
    DEBUG_PRINT("Turning off relays");
 80a2036:	a802      	add	r0, sp, #8
 80a2038:	490b      	ldr	r1, [pc, #44]	; (80a2068 <_ZN13Relay_Control15turn_off_relaysEv+0x40>)
 80a203a:	f000 fc65 	bl	80a2908 <_ZN6String6formatEPKcz>
 80a203e:	9a02      	ldr	r2, [sp, #8]
 80a2040:	490a      	ldr	r1, [pc, #40]	; (80a206c <_ZN13Relay_Control15turn_off_relaysEv+0x44>)
 80a2042:	4668      	mov	r0, sp
 80a2044:	f7ff fecc 	bl	80a1de0 <_ZN10CloudClass7publishEPKcS1_.isra.0>
 80a2048:	a801      	add	r0, sp, #4
 80a204a:	f7fe f98d 	bl	80a0368 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a204e:	a802      	add	r0, sp, #8
 80a2050:	f000 fadc 	bl	80a260c <_ZN6StringD1Ev>
            relay1 = state;
 80a2054:	2300      	movs	r3, #0
    relay_loop();
 80a2056:	4620      	mov	r0, r4
            relay1 = state;
 80a2058:	80a3      	strh	r3, [r4, #4]
            relay3 = state;
 80a205a:	71a3      	strb	r3, [r4, #6]
}
 80a205c:	b006      	add	sp, #24
 80a205e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    relay_loop();
 80a2062:	f7ff bf49 	b.w	80a1ef8 <_ZN13Relay_Control10relay_loopEv>
 80a2066:	bf00      	nop
 80a2068:	080a73ad 	.word	0x080a73ad
 80a206c:	080a6ab1 	.word	0x080a6ab1

080a2070 <_GLOBAL__sub_I__ZN13Relay_ControlC2ERKa>:
        val_(val) {
 80a2070:	2200      	movs	r2, #0
 80a2072:	4b01      	ldr	r3, [pc, #4]	; (80a2078 <_GLOBAL__sub_I__ZN13Relay_ControlC2ERKa+0x8>)
 80a2074:	701a      	strb	r2, [r3, #0]
}
 80a2076:	4770      	bx	lr
 80a2078:	2000052c 	.word	0x2000052c

080a207c <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a207c:	b508      	push	{r3, lr}
 80a207e:	4b02      	ldr	r3, [pc, #8]	; (80a2088 <HAL_Pin_Mode+0xc>)
 80a2080:	681b      	ldr	r3, [r3, #0]
 80a2082:	689b      	ldr	r3, [r3, #8]
 80a2084:	9301      	str	r3, [sp, #4]
 80a2086:	bd08      	pop	{r3, pc}
 80a2088:	080601b0 	.word	0x080601b0

080a208c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a208c:	b508      	push	{r3, lr}
 80a208e:	4b02      	ldr	r3, [pc, #8]	; (80a2098 <HAL_Get_Pin_Mode+0xc>)
 80a2090:	681b      	ldr	r3, [r3, #0]
 80a2092:	68db      	ldr	r3, [r3, #12]
 80a2094:	9301      	str	r3, [sp, #4]
 80a2096:	bd08      	pop	{r3, pc}
 80a2098:	080601b0 	.word	0x080601b0

080a209c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a209c:	b508      	push	{r3, lr}
 80a209e:	4b02      	ldr	r3, [pc, #8]	; (80a20a8 <HAL_GPIO_Write+0xc>)
 80a20a0:	681b      	ldr	r3, [r3, #0]
 80a20a2:	691b      	ldr	r3, [r3, #16]
 80a20a4:	9301      	str	r3, [sp, #4]
 80a20a6:	bd08      	pop	{r3, pc}
 80a20a8:	080601b0 	.word	0x080601b0

080a20ac <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a20ac:	b508      	push	{r3, lr}
 80a20ae:	4b02      	ldr	r3, [pc, #8]	; (80a20b8 <HAL_RNG_GetRandomNumber+0xc>)
 80a20b0:	681b      	ldr	r3, [r3, #0]
 80a20b2:	685b      	ldr	r3, [r3, #4]
 80a20b4:	9301      	str	r3, [sp, #4]
 80a20b6:	bd08      	pop	{r3, pc}
 80a20b8:	0806019c 	.word	0x0806019c

080a20bc <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a20bc:	b508      	push	{r3, lr}
 80a20be:	4b02      	ldr	r3, [pc, #8]	; (80a20c8 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a20c0:	681b      	ldr	r3, [r3, #0]
 80a20c2:	695b      	ldr	r3, [r3, #20]
 80a20c4:	9301      	str	r3, [sp, #4]
 80a20c6:	bd08      	pop	{r3, pc}
 80a20c8:	0806019c 	.word	0x0806019c

080a20cc <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
 80a20cc:	b508      	push	{r3, lr}
 80a20ce:	4b02      	ldr	r3, [pc, #8]	; (80a20d8 <HAL_EEPROM_Init+0xc>)
 80a20d0:	681b      	ldr	r3, [r3, #0]
 80a20d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a20d4:	9301      	str	r3, [sp, #4]
 80a20d6:	bd08      	pop	{r3, pc}
 80a20d8:	0806019c 	.word	0x0806019c

080a20dc <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
 80a20dc:	b508      	push	{r3, lr}
 80a20de:	4b02      	ldr	r3, [pc, #8]	; (80a20e8 <HAL_EEPROM_Get+0xc>)
 80a20e0:	681b      	ldr	r3, [r3, #0]
 80a20e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a20e4:	9301      	str	r3, [sp, #4]
 80a20e6:	bd08      	pop	{r3, pc}
 80a20e8:	0806019c 	.word	0x0806019c

080a20ec <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
 80a20ec:	b508      	push	{r3, lr}
 80a20ee:	4b02      	ldr	r3, [pc, #8]	; (80a20f8 <HAL_EEPROM_Put+0xc>)
 80a20f0:	681b      	ldr	r3, [r3, #0]
 80a20f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a20f4:	9301      	str	r3, [sp, #4]
 80a20f6:	bd08      	pop	{r3, pc}
 80a20f8:	0806019c 	.word	0x0806019c

080a20fc <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
 80a20fc:	b508      	push	{r3, lr}
 80a20fe:	4b02      	ldr	r3, [pc, #8]	; (80a2108 <hal_rtc_time_is_valid+0xc>)
 80a2100:	681b      	ldr	r3, [r3, #0]
 80a2102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a2104:	9301      	str	r3, [sp, #4]
 80a2106:	bd08      	pop	{r3, pc}
 80a2108:	0806019c 	.word	0x0806019c

080a210c <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
 80a210c:	b508      	push	{r3, lr}
 80a210e:	4b02      	ldr	r3, [pc, #8]	; (80a2118 <hal_rtc_get_time+0xc>)
 80a2110:	681b      	ldr	r3, [r3, #0]
 80a2112:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a2114:	9301      	str	r3, [sp, #4]
 80a2116:	bd08      	pop	{r3, pc}
 80a2118:	0806019c 	.word	0x0806019c

080a211c <HAL_Core_Runtime_Info>:
DYNALIB_FN(16, hal_core, HAL_watchdog_reset_flagged, bool(void))
DYNALIB_FN(17, hal_core, HAL_Notify_WDT, void(void))
DYNALIB_FN(18, hal_core, HAL_Bootloader_Get_Flag, uint16_t(BootloaderFlag))
DYNALIB_FN(19, hal_core, HAL_Bootloader_Lock, void(bool))
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
 80a211c:	b508      	push	{r3, lr}
 80a211e:	4b02      	ldr	r3, [pc, #8]	; (80a2128 <HAL_Core_Runtime_Info+0xc>)
 80a2120:	681b      	ldr	r3, [r3, #0]
 80a2122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a2124:	9301      	str	r3, [sp, #4]
 80a2126:	bd08      	pop	{r3, pc}
 80a2128:	080601b8 	.word	0x080601b8

080a212c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a212c:	b508      	push	{r3, lr}
 80a212e:	4b02      	ldr	r3, [pc, #8]	; (80a2138 <os_mutex_recursive_create+0xc>)
 80a2130:	681b      	ldr	r3, [r3, #0]
 80a2132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a2134:	9301      	str	r3, [sp, #4]
 80a2136:	bd08      	pop	{r3, pc}
 80a2138:	080601d0 	.word	0x080601d0

080a213c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a213c:	b508      	push	{r3, lr}
 80a213e:	4b02      	ldr	r3, [pc, #8]	; (80a2148 <os_mutex_recursive_destroy+0xc>)
 80a2140:	681b      	ldr	r3, [r3, #0]
 80a2142:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a2144:	9301      	str	r3, [sp, #4]
 80a2146:	bd08      	pop	{r3, pc}
 80a2148:	080601d0 	.word	0x080601d0

080a214c <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a214c:	b508      	push	{r3, lr}
 80a214e:	4b02      	ldr	r3, [pc, #8]	; (80a2158 <hal_usart_write+0xc>)
 80a2150:	681b      	ldr	r3, [r3, #0]
 80a2152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a2154:	9301      	str	r3, [sp, #4]
 80a2156:	bd08      	pop	{r3, pc}
 80a2158:	080601c4 	.word	0x080601c4

080a215c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a215c:	b508      	push	{r3, lr}
 80a215e:	4b02      	ldr	r3, [pc, #8]	; (80a2168 <hal_usart_available+0xc>)
 80a2160:	681b      	ldr	r3, [r3, #0]
 80a2162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a2164:	9301      	str	r3, [sp, #4]
 80a2166:	bd08      	pop	{r3, pc}
 80a2168:	080601c4 	.word	0x080601c4

080a216c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a216c:	b508      	push	{r3, lr}
 80a216e:	4b02      	ldr	r3, [pc, #8]	; (80a2178 <hal_usart_read+0xc>)
 80a2170:	681b      	ldr	r3, [r3, #0]
 80a2172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a2174:	9301      	str	r3, [sp, #4]
 80a2176:	bd08      	pop	{r3, pc}
 80a2178:	080601c4 	.word	0x080601c4

080a217c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a217c:	b508      	push	{r3, lr}
 80a217e:	4b02      	ldr	r3, [pc, #8]	; (80a2188 <hal_usart_peek+0xc>)
 80a2180:	681b      	ldr	r3, [r3, #0]
 80a2182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2184:	9301      	str	r3, [sp, #4]
 80a2186:	bd08      	pop	{r3, pc}
 80a2188:	080601c4 	.word	0x080601c4

080a218c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a218c:	b508      	push	{r3, lr}
 80a218e:	4b02      	ldr	r3, [pc, #8]	; (80a2198 <hal_usart_flush+0xc>)
 80a2190:	681b      	ldr	r3, [r3, #0]
 80a2192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a2194:	9301      	str	r3, [sp, #4]
 80a2196:	bd08      	pop	{r3, pc}
 80a2198:	080601c4 	.word	0x080601c4

080a219c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a219c:	b508      	push	{r3, lr}
 80a219e:	4b02      	ldr	r3, [pc, #8]	; (80a21a8 <hal_usart_is_enabled+0xc>)
 80a21a0:	681b      	ldr	r3, [r3, #0]
 80a21a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a21a4:	9301      	str	r3, [sp, #4]
 80a21a6:	bd08      	pop	{r3, pc}
 80a21a8:	080601c4 	.word	0x080601c4

080a21ac <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a21ac:	b508      	push	{r3, lr}
 80a21ae:	4b02      	ldr	r3, [pc, #8]	; (80a21b8 <hal_usart_available_data_for_write+0xc>)
 80a21b0:	681b      	ldr	r3, [r3, #0]
 80a21b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a21b4:	9301      	str	r3, [sp, #4]
 80a21b6:	bd08      	pop	{r3, pc}
 80a21b8:	080601c4 	.word	0x080601c4

080a21bc <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 80a21bc:	b508      	push	{r3, lr}
 80a21be:	4b02      	ldr	r3, [pc, #8]	; (80a21c8 <hal_usart_init_ex+0xc>)
 80a21c0:	681b      	ldr	r3, [r3, #0]
 80a21c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a21c4:	9301      	str	r3, [sp, #4]
 80a21c6:	bd08      	pop	{r3, pc}
 80a21c8:	080601c4 	.word	0x080601c4

080a21cc <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a21cc:	b508      	push	{r3, lr}
 80a21ce:	4b02      	ldr	r3, [pc, #8]	; (80a21d8 <hal_i2c_write+0xc>)
 80a21d0:	681b      	ldr	r3, [r3, #0]
 80a21d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a21d4:	9301      	str	r3, [sp, #4]
 80a21d6:	bd08      	pop	{r3, pc}
 80a21d8:	080601ac 	.word	0x080601ac

080a21dc <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a21dc:	b508      	push	{r3, lr}
 80a21de:	4b02      	ldr	r3, [pc, #8]	; (80a21e8 <hal_i2c_available+0xc>)
 80a21e0:	681b      	ldr	r3, [r3, #0]
 80a21e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a21e4:	9301      	str	r3, [sp, #4]
 80a21e6:	bd08      	pop	{r3, pc}
 80a21e8:	080601ac 	.word	0x080601ac

080a21ec <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a21ec:	b508      	push	{r3, lr}
 80a21ee:	4b02      	ldr	r3, [pc, #8]	; (80a21f8 <hal_i2c_read+0xc>)
 80a21f0:	681b      	ldr	r3, [r3, #0]
 80a21f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a21f4:	9301      	str	r3, [sp, #4]
 80a21f6:	bd08      	pop	{r3, pc}
 80a21f8:	080601ac 	.word	0x080601ac

080a21fc <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a21fc:	b508      	push	{r3, lr}
 80a21fe:	4b02      	ldr	r3, [pc, #8]	; (80a2208 <hal_i2c_peek+0xc>)
 80a2200:	681b      	ldr	r3, [r3, #0]
 80a2202:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a2204:	9301      	str	r3, [sp, #4]
 80a2206:	bd08      	pop	{r3, pc}
 80a2208:	080601ac 	.word	0x080601ac

080a220c <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a220c:	b508      	push	{r3, lr}
 80a220e:	4b02      	ldr	r3, [pc, #8]	; (80a2218 <hal_i2c_flush+0xc>)
 80a2210:	681b      	ldr	r3, [r3, #0]
 80a2212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a2214:	9301      	str	r3, [sp, #4]
 80a2216:	bd08      	pop	{r3, pc}
 80a2218:	080601ac 	.word	0x080601ac

080a221c <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a221c:	b508      	push	{r3, lr}
 80a221e:	4b02      	ldr	r3, [pc, #8]	; (80a2228 <hal_i2c_is_enabled+0xc>)
 80a2220:	681b      	ldr	r3, [r3, #0]
 80a2222:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a2224:	9301      	str	r3, [sp, #4]
 80a2226:	bd08      	pop	{r3, pc}
 80a2228:	080601ac 	.word	0x080601ac

080a222c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a222c:	b508      	push	{r3, lr}
 80a222e:	4b03      	ldr	r3, [pc, #12]	; (80a223c <hal_i2c_init+0x10>)
 80a2230:	681b      	ldr	r3, [r3, #0]
 80a2232:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a2236:	9301      	str	r3, [sp, #4]
 80a2238:	bd08      	pop	{r3, pc}
 80a223a:	0000      	.short	0x0000
 80a223c:	080601ac 	.word	0x080601ac

080a2240 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a2240:	b508      	push	{r3, lr}
 80a2242:	4b02      	ldr	r3, [pc, #8]	; (80a224c <hal_spi_init+0xc>)
 80a2244:	681b      	ldr	r3, [r3, #0]
 80a2246:	69db      	ldr	r3, [r3, #28]
 80a2248:	9301      	str	r3, [sp, #4]
 80a224a:	bd08      	pop	{r3, pc}
 80a224c:	080601b4 	.word	0x080601b4

080a2250 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a2250:	b508      	push	{r3, lr}
 80a2252:	4b02      	ldr	r3, [pc, #8]	; (80a225c <hal_spi_is_enabled+0xc>)
 80a2254:	681b      	ldr	r3, [r3, #0]
 80a2256:	6a1b      	ldr	r3, [r3, #32]
 80a2258:	9301      	str	r3, [sp, #4]
 80a225a:	bd08      	pop	{r3, pc}
 80a225c:	080601b4 	.word	0x080601b4

080a2260 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a2260:	b508      	push	{r3, lr}
 80a2262:	4b02      	ldr	r3, [pc, #8]	; (80a226c <HAL_USB_USART_Init+0xc>)
 80a2264:	681b      	ldr	r3, [r3, #0]
 80a2266:	681b      	ldr	r3, [r3, #0]
 80a2268:	9301      	str	r3, [sp, #4]
 80a226a:	bd08      	pop	{r3, pc}
 80a226c:	080601d8 	.word	0x080601d8

080a2270 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a2270:	b508      	push	{r3, lr}
 80a2272:	4b02      	ldr	r3, [pc, #8]	; (80a227c <HAL_USB_USART_Available_Data+0xc>)
 80a2274:	681b      	ldr	r3, [r3, #0]
 80a2276:	691b      	ldr	r3, [r3, #16]
 80a2278:	9301      	str	r3, [sp, #4]
 80a227a:	bd08      	pop	{r3, pc}
 80a227c:	080601d8 	.word	0x080601d8

080a2280 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a2280:	b508      	push	{r3, lr}
 80a2282:	4b02      	ldr	r3, [pc, #8]	; (80a228c <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a2284:	681b      	ldr	r3, [r3, #0]
 80a2286:	695b      	ldr	r3, [r3, #20]
 80a2288:	9301      	str	r3, [sp, #4]
 80a228a:	bd08      	pop	{r3, pc}
 80a228c:	080601d8 	.word	0x080601d8

080a2290 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a2290:	b508      	push	{r3, lr}
 80a2292:	4b02      	ldr	r3, [pc, #8]	; (80a229c <HAL_USB_USART_Receive_Data+0xc>)
 80a2294:	681b      	ldr	r3, [r3, #0]
 80a2296:	699b      	ldr	r3, [r3, #24]
 80a2298:	9301      	str	r3, [sp, #4]
 80a229a:	bd08      	pop	{r3, pc}
 80a229c:	080601d8 	.word	0x080601d8

080a22a0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a22a0:	b508      	push	{r3, lr}
 80a22a2:	4b02      	ldr	r3, [pc, #8]	; (80a22ac <HAL_USB_USART_Send_Data+0xc>)
 80a22a4:	681b      	ldr	r3, [r3, #0]
 80a22a6:	69db      	ldr	r3, [r3, #28]
 80a22a8:	9301      	str	r3, [sp, #4]
 80a22aa:	bd08      	pop	{r3, pc}
 80a22ac:	080601d8 	.word	0x080601d8

080a22b0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a22b0:	b508      	push	{r3, lr}
 80a22b2:	4b02      	ldr	r3, [pc, #8]	; (80a22bc <HAL_USB_USART_Flush_Data+0xc>)
 80a22b4:	681b      	ldr	r3, [r3, #0]
 80a22b6:	6a1b      	ldr	r3, [r3, #32]
 80a22b8:	9301      	str	r3, [sp, #4]
 80a22ba:	bd08      	pop	{r3, pc}
 80a22bc:	080601d8 	.word	0x080601d8

080a22c0 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a22c0:	b508      	push	{r3, lr}
 80a22c2:	4b02      	ldr	r3, [pc, #8]	; (80a22cc <inet_gethostbyname+0xc>)
 80a22c4:	681b      	ldr	r3, [r3, #0]
 80a22c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a22c8:	9301      	str	r3, [sp, #4]
 80a22ca:	bd08      	pop	{r3, pc}
 80a22cc:	080601c0 	.word	0x080601c0

080a22d0 <wlan_select_antenna>:
DYNALIB_FN(19, hal_wlan, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(20, hal_wlan, wlan_select_antenna, int(WLanSelectAntenna_TypeDef))
 80a22d0:	b508      	push	{r3, lr}
 80a22d2:	4b02      	ldr	r3, [pc, #8]	; (80a22dc <wlan_select_antenna+0xc>)
 80a22d4:	681b      	ldr	r3, [r3, #0]
 80a22d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80a22d8:	9301      	str	r3, [sp, #4]
 80a22da:	bd08      	pop	{r3, pc}
 80a22dc:	080601c0 	.word	0x080601c0

080a22e0 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80a22e0:	b508      	push	{r3, lr}
 80a22e2:	4b02      	ldr	r3, [pc, #8]	; (80a22ec <system_mode+0xc>)
 80a22e4:	681b      	ldr	r3, [r3, #0]
 80a22e6:	681b      	ldr	r3, [r3, #0]
 80a22e8:	9301      	str	r3, [sp, #4]
 80a22ea:	bd08      	pop	{r3, pc}
 80a22ec:	080601a4 	.word	0x080601a4

080a22f0 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a22f0:	b508      	push	{r3, lr}
 80a22f2:	4b02      	ldr	r3, [pc, #8]	; (80a22fc <set_system_mode+0xc>)
 80a22f4:	681b      	ldr	r3, [r3, #0]
 80a22f6:	685b      	ldr	r3, [r3, #4]
 80a22f8:	9301      	str	r3, [sp, #4]
 80a22fa:	bd08      	pop	{r3, pc}
 80a22fc:	080601a4 	.word	0x080601a4

080a2300 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a2300:	b508      	push	{r3, lr}
 80a2302:	4b02      	ldr	r3, [pc, #8]	; (80a230c <system_delay_ms+0xc>)
 80a2304:	681b      	ldr	r3, [r3, #0]
 80a2306:	695b      	ldr	r3, [r3, #20]
 80a2308:	9301      	str	r3, [sp, #4]
 80a230a:	bd08      	pop	{r3, pc}
 80a230c:	080601a4 	.word	0x080601a4

080a2310 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a2310:	b508      	push	{r3, lr}
 80a2312:	4b02      	ldr	r3, [pc, #8]	; (80a231c <application_thread_current+0xc>)
 80a2314:	681b      	ldr	r3, [r3, #0]
 80a2316:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a2318:	9301      	str	r3, [sp, #4]
 80a231a:	bd08      	pop	{r3, pc}
 80a231c:	080601a4 	.word	0x080601a4

080a2320 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a2320:	b508      	push	{r3, lr}
 80a2322:	4b02      	ldr	r3, [pc, #8]	; (80a232c <application_thread_invoke+0xc>)
 80a2324:	681b      	ldr	r3, [r3, #0]
 80a2326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a2328:	9301      	str	r3, [sp, #4]
 80a232a:	bd08      	pop	{r3, pc}
 80a232c:	080601a4 	.word	0x080601a4

080a2330 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80a2330:	b508      	push	{r3, lr}
 80a2332:	4b02      	ldr	r3, [pc, #8]	; (80a233c <system_thread_get_state+0xc>)
 80a2334:	681b      	ldr	r3, [r3, #0]
 80a2336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a2338:	9301      	str	r3, [sp, #4]
 80a233a:	bd08      	pop	{r3, pc}
 80a233c:	080601a4 	.word	0x080601a4

080a2340 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a2340:	b508      	push	{r3, lr}
 80a2342:	4b03      	ldr	r3, [pc, #12]	; (80a2350 <system_ctrl_set_app_request_handler+0x10>)
 80a2344:	681b      	ldr	r3, [r3, #0]
 80a2346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a234a:	9301      	str	r3, [sp, #4]
 80a234c:	bd08      	pop	{r3, pc}
 80a234e:	0000      	.short	0x0000
 80a2350:	080601a4 	.word	0x080601a4

080a2354 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a2354:	b508      	push	{r3, lr}
 80a2356:	4b03      	ldr	r3, [pc, #12]	; (80a2364 <system_ctrl_set_result+0x10>)
 80a2358:	681b      	ldr	r3, [r3, #0]
 80a235a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a235e:	9301      	str	r3, [sp, #4]
 80a2360:	bd08      	pop	{r3, pc}
 80a2362:	0000      	.short	0x0000
 80a2364:	080601a4 	.word	0x080601a4

080a2368 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a2368:	b508      	push	{r3, lr}
 80a236a:	4b02      	ldr	r3, [pc, #8]	; (80a2374 <network_connect+0xc>)
 80a236c:	681b      	ldr	r3, [r3, #0]
 80a236e:	685b      	ldr	r3, [r3, #4]
 80a2370:	9301      	str	r3, [sp, #4]
 80a2372:	bd08      	pop	{r3, pc}
 80a2374:	080601c8 	.word	0x080601c8

080a2378 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a2378:	b508      	push	{r3, lr}
 80a237a:	4b02      	ldr	r3, [pc, #8]	; (80a2384 <network_connecting+0xc>)
 80a237c:	681b      	ldr	r3, [r3, #0]
 80a237e:	689b      	ldr	r3, [r3, #8]
 80a2380:	9301      	str	r3, [sp, #4]
 80a2382:	bd08      	pop	{r3, pc}
 80a2384:	080601c8 	.word	0x080601c8

080a2388 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a2388:	b508      	push	{r3, lr}
 80a238a:	4b02      	ldr	r3, [pc, #8]	; (80a2394 <network_disconnect+0xc>)
 80a238c:	681b      	ldr	r3, [r3, #0]
 80a238e:	68db      	ldr	r3, [r3, #12]
 80a2390:	9301      	str	r3, [sp, #4]
 80a2392:	bd08      	pop	{r3, pc}
 80a2394:	080601c8 	.word	0x080601c8

080a2398 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a2398:	b508      	push	{r3, lr}
 80a239a:	4b02      	ldr	r3, [pc, #8]	; (80a23a4 <network_ready+0xc>)
 80a239c:	681b      	ldr	r3, [r3, #0]
 80a239e:	691b      	ldr	r3, [r3, #16]
 80a23a0:	9301      	str	r3, [sp, #4]
 80a23a2:	bd08      	pop	{r3, pc}
 80a23a4:	080601c8 	.word	0x080601c8

080a23a8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a23a8:	b508      	push	{r3, lr}
 80a23aa:	4b02      	ldr	r3, [pc, #8]	; (80a23b4 <network_on+0xc>)
 80a23ac:	681b      	ldr	r3, [r3, #0]
 80a23ae:	695b      	ldr	r3, [r3, #20]
 80a23b0:	9301      	str	r3, [sp, #4]
 80a23b2:	bd08      	pop	{r3, pc}
 80a23b4:	080601c8 	.word	0x080601c8

080a23b8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a23b8:	b508      	push	{r3, lr}
 80a23ba:	4b02      	ldr	r3, [pc, #8]	; (80a23c4 <network_off+0xc>)
 80a23bc:	681b      	ldr	r3, [r3, #0]
 80a23be:	699b      	ldr	r3, [r3, #24]
 80a23c0:	9301      	str	r3, [sp, #4]
 80a23c2:	bd08      	pop	{r3, pc}
 80a23c4:	080601c8 	.word	0x080601c8

080a23c8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a23c8:	b508      	push	{r3, lr}
 80a23ca:	4b02      	ldr	r3, [pc, #8]	; (80a23d4 <network_listen+0xc>)
 80a23cc:	681b      	ldr	r3, [r3, #0]
 80a23ce:	69db      	ldr	r3, [r3, #28]
 80a23d0:	9301      	str	r3, [sp, #4]
 80a23d2:	bd08      	pop	{r3, pc}
 80a23d4:	080601c8 	.word	0x080601c8

080a23d8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a23d8:	b508      	push	{r3, lr}
 80a23da:	4b02      	ldr	r3, [pc, #8]	; (80a23e4 <network_listening+0xc>)
 80a23dc:	681b      	ldr	r3, [r3, #0]
 80a23de:	6a1b      	ldr	r3, [r3, #32]
 80a23e0:	9301      	str	r3, [sp, #4]
 80a23e2:	bd08      	pop	{r3, pc}
 80a23e4:	080601c8 	.word	0x080601c8

080a23e8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a23e8:	b508      	push	{r3, lr}
 80a23ea:	4b02      	ldr	r3, [pc, #8]	; (80a23f4 <network_set_listen_timeout+0xc>)
 80a23ec:	681b      	ldr	r3, [r3, #0]
 80a23ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a23f0:	9301      	str	r3, [sp, #4]
 80a23f2:	bd08      	pop	{r3, pc}
 80a23f4:	080601c8 	.word	0x080601c8

080a23f8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a23f8:	b508      	push	{r3, lr}
 80a23fa:	4b02      	ldr	r3, [pc, #8]	; (80a2404 <network_get_listen_timeout+0xc>)
 80a23fc:	681b      	ldr	r3, [r3, #0]
 80a23fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a2400:	9301      	str	r3, [sp, #4]
 80a2402:	bd08      	pop	{r3, pc}
 80a2404:	080601c8 	.word	0x080601c8

080a2408 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a2408:	b508      	push	{r3, lr}
 80a240a:	4b02      	ldr	r3, [pc, #8]	; (80a2414 <network_is_on+0xc>)
 80a240c:	681b      	ldr	r3, [r3, #0]
 80a240e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a2410:	9301      	str	r3, [sp, #4]
 80a2412:	bd08      	pop	{r3, pc}
 80a2414:	080601c8 	.word	0x080601c8

080a2418 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a2418:	b508      	push	{r3, lr}
 80a241a:	4b02      	ldr	r3, [pc, #8]	; (80a2424 <network_is_off+0xc>)
 80a241c:	681b      	ldr	r3, [r3, #0]
 80a241e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a2420:	9301      	str	r3, [sp, #4]
 80a2422:	bd08      	pop	{r3, pc}
 80a2424:	080601c8 	.word	0x080601c8

080a2428 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 80a2428:	b508      	push	{r3, lr}
 80a242a:	4b02      	ldr	r3, [pc, #8]	; (80a2434 <spark_variable+0xc>)
 80a242c:	681b      	ldr	r3, [r3, #0]
 80a242e:	681b      	ldr	r3, [r3, #0]
 80a2430:	9301      	str	r3, [sp, #4]
 80a2432:	bd08      	pop	{r3, pc}
 80a2434:	080601cc 	.word	0x080601cc

080a2438 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 80a2438:	b508      	push	{r3, lr}
 80a243a:	4b02      	ldr	r3, [pc, #8]	; (80a2444 <spark_function+0xc>)
 80a243c:	681b      	ldr	r3, [r3, #0]
 80a243e:	685b      	ldr	r3, [r3, #4]
 80a2440:	9301      	str	r3, [sp, #4]
 80a2442:	bd08      	pop	{r3, pc}
 80a2444:	080601cc 	.word	0x080601cc

080a2448 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a2448:	b508      	push	{r3, lr}
 80a244a:	4b02      	ldr	r3, [pc, #8]	; (80a2454 <spark_process+0xc>)
 80a244c:	681b      	ldr	r3, [r3, #0]
 80a244e:	689b      	ldr	r3, [r3, #8]
 80a2450:	9301      	str	r3, [sp, #4]
 80a2452:	bd08      	pop	{r3, pc}
 80a2454:	080601cc 	.word	0x080601cc

080a2458 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a2458:	b508      	push	{r3, lr}
 80a245a:	4b02      	ldr	r3, [pc, #8]	; (80a2464 <spark_cloud_flag_connected+0xc>)
 80a245c:	681b      	ldr	r3, [r3, #0]
 80a245e:	695b      	ldr	r3, [r3, #20]
 80a2460:	9301      	str	r3, [sp, #4]
 80a2462:	bd08      	pop	{r3, pc}
 80a2464:	080601cc 	.word	0x080601cc

080a2468 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
 80a2468:	b508      	push	{r3, lr}
 80a246a:	4b02      	ldr	r3, [pc, #8]	; (80a2474 <spark_deviceID+0xc>)
 80a246c:	681b      	ldr	r3, [r3, #0]
 80a246e:	69db      	ldr	r3, [r3, #28]
 80a2470:	9301      	str	r3, [sp, #4]
 80a2472:	bd08      	pop	{r3, pc}
 80a2474:	080601cc 	.word	0x080601cc

080a2478 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a2478:	b508      	push	{r3, lr}
 80a247a:	4b02      	ldr	r3, [pc, #8]	; (80a2484 <spark_send_event+0xc>)
 80a247c:	681b      	ldr	r3, [r3, #0]
 80a247e:	6a1b      	ldr	r3, [r3, #32]
 80a2480:	9301      	str	r3, [sp, #4]
 80a2482:	bd08      	pop	{r3, pc}
 80a2484:	080601cc 	.word	0x080601cc

080a2488 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
 80a2488:	b508      	push	{r3, lr}
 80a248a:	4b02      	ldr	r3, [pc, #8]	; (80a2494 <spark_subscribe+0xc>)
 80a248c:	681b      	ldr	r3, [r3, #0]
 80a248e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a2490:	9301      	str	r3, [sp, #4]
 80a2492:	bd08      	pop	{r3, pc}
 80a2494:	080601cc 	.word	0x080601cc

080a2498 <spark_unsubscribe>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
 80a2498:	b508      	push	{r3, lr}
 80a249a:	4b02      	ldr	r3, [pc, #8]	; (80a24a4 <spark_unsubscribe+0xc>)
 80a249c:	681b      	ldr	r3, [r3, #0]
 80a249e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a24a0:	9301      	str	r3, [sp, #4]
 80a24a2:	bd08      	pop	{r3, pc}
 80a24a4:	080601cc 	.word	0x080601cc

080a24a8 <spark_sync_time_pending>:
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 80a24a8:	b508      	push	{r3, lr}
 80a24aa:	4b02      	ldr	r3, [pc, #8]	; (80a24b4 <spark_sync_time_pending+0xc>)
 80a24ac:	681b      	ldr	r3, [r3, #0]
 80a24ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a24b0:	9301      	str	r3, [sp, #4]
 80a24b2:	bd08      	pop	{r3, pc}
 80a24b4:	080601cc 	.word	0x080601cc

080a24b8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a24b8:	b508      	push	{r3, lr}
 80a24ba:	4b02      	ldr	r3, [pc, #8]	; (80a24c4 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a24bc:	681b      	ldr	r3, [r3, #0]
 80a24be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a24c0:	9301      	str	r3, [sp, #4]
 80a24c2:	bd08      	pop	{r3, pc}
 80a24c4:	080601cc 	.word	0x080601cc

080a24c8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a24c8:	b508      	push	{r3, lr}
 80a24ca:	4b02      	ldr	r3, [pc, #8]	; (80a24d4 <malloc+0xc>)
 80a24cc:	681b      	ldr	r3, [r3, #0]
 80a24ce:	681b      	ldr	r3, [r3, #0]
 80a24d0:	9301      	str	r3, [sp, #4]
 80a24d2:	bd08      	pop	{r3, pc}
 80a24d4:	080601a0 	.word	0x080601a0

080a24d8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a24d8:	b508      	push	{r3, lr}
 80a24da:	4b02      	ldr	r3, [pc, #8]	; (80a24e4 <free+0xc>)
 80a24dc:	681b      	ldr	r3, [r3, #0]
 80a24de:	685b      	ldr	r3, [r3, #4]
 80a24e0:	9301      	str	r3, [sp, #4]
 80a24e2:	bd08      	pop	{r3, pc}
 80a24e4:	080601a0 	.word	0x080601a0

080a24e8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a24e8:	b508      	push	{r3, lr}
 80a24ea:	4b02      	ldr	r3, [pc, #8]	; (80a24f4 <realloc+0xc>)
 80a24ec:	681b      	ldr	r3, [r3, #0]
 80a24ee:	689b      	ldr	r3, [r3, #8]
 80a24f0:	9301      	str	r3, [sp, #4]
 80a24f2:	bd08      	pop	{r3, pc}
 80a24f4:	080601a0 	.word	0x080601a0

080a24f8 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
 80a24f8:	b508      	push	{r3, lr}
 80a24fa:	4b02      	ldr	r3, [pc, #8]	; (80a2504 <sprintf+0xc>)
 80a24fc:	681b      	ldr	r3, [r3, #0]
 80a24fe:	68db      	ldr	r3, [r3, #12]
 80a2500:	9301      	str	r3, [sp, #4]
 80a2502:	bd08      	pop	{r3, pc}
 80a2504:	080601a0 	.word	0x080601a0

080a2508 <siprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 80a2508:	b508      	push	{r3, lr}
 80a250a:	4b02      	ldr	r3, [pc, #8]	; (80a2514 <siprintf+0xc>)
 80a250c:	681b      	ldr	r3, [r3, #0]
 80a250e:	691b      	ldr	r3, [r3, #16]
 80a2510:	9301      	str	r3, [sp, #4]
 80a2512:	bd08      	pop	{r3, pc}
 80a2514:	080601a0 	.word	0x080601a0

080a2518 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 80a2518:	b508      	push	{r3, lr}
 80a251a:	4b02      	ldr	r3, [pc, #8]	; (80a2524 <siscanf+0xc>)
 80a251c:	681b      	ldr	r3, [r3, #0]
 80a251e:	699b      	ldr	r3, [r3, #24]
 80a2520:	9301      	str	r3, [sp, #4]
 80a2522:	bd08      	pop	{r3, pc}
 80a2524:	080601a0 	.word	0x080601a0

080a2528 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 80a2528:	b508      	push	{r3, lr}
 80a252a:	4b02      	ldr	r3, [pc, #8]	; (80a2534 <snprintf+0xc>)
 80a252c:	681b      	ldr	r3, [r3, #0]
 80a252e:	69db      	ldr	r3, [r3, #28]
 80a2530:	9301      	str	r3, [sp, #4]
 80a2532:	bd08      	pop	{r3, pc}
 80a2534:	080601a0 	.word	0x080601a0

080a2538 <sniprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
 80a2538:	b508      	push	{r3, lr}
 80a253a:	4b02      	ldr	r3, [pc, #8]	; (80a2544 <sniprintf+0xc>)
 80a253c:	681b      	ldr	r3, [r3, #0]
 80a253e:	6a1b      	ldr	r3, [r3, #32]
 80a2540:	9301      	str	r3, [sp, #4]
 80a2542:	bd08      	pop	{r3, pc}
 80a2544:	080601a0 	.word	0x080601a0

080a2548 <vsnprintf>:
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a2548:	b508      	push	{r3, lr}
 80a254a:	4b02      	ldr	r3, [pc, #8]	; (80a2554 <vsnprintf+0xc>)
 80a254c:	681b      	ldr	r3, [r3, #0]
 80a254e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a2550:	9301      	str	r3, [sp, #4]
 80a2552:	bd08      	pop	{r3, pc}
 80a2554:	080601a0 	.word	0x080601a0

080a2558 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a2558:	b508      	push	{r3, lr}
 80a255a:	4b02      	ldr	r3, [pc, #8]	; (80a2564 <abort+0xc>)
 80a255c:	681b      	ldr	r3, [r3, #0]
 80a255e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a2560:	9301      	str	r3, [sp, #4]
 80a2562:	bd08      	pop	{r3, pc}
 80a2564:	080601a0 	.word	0x080601a0

080a2568 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a2568:	b508      	push	{r3, lr}
 80a256a:	4b02      	ldr	r3, [pc, #8]	; (80a2574 <_malloc_r+0xc>)
 80a256c:	681b      	ldr	r3, [r3, #0]
 80a256e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2570:	9301      	str	r3, [sp, #4]
 80a2572:	bd08      	pop	{r3, pc}
 80a2574:	080601a0 	.word	0x080601a0

080a2578 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 80a2578:	b508      	push	{r3, lr}
 80a257a:	4b02      	ldr	r3, [pc, #8]	; (80a2584 <__errno+0xc>)
 80a257c:	681b      	ldr	r3, [r3, #0]
 80a257e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a2580:	9301      	str	r3, [sp, #4]
 80a2582:	bd08      	pop	{r3, pc}
 80a2584:	080601a0 	.word	0x080601a0

080a2588 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 80a2588:	b508      	push	{r3, lr}
 80a258a:	4b02      	ldr	r3, [pc, #8]	; (80a2594 <__assert_func+0xc>)
 80a258c:	681b      	ldr	r3, [r3, #0]
 80a258e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a2590:	9301      	str	r3, [sp, #4]
 80a2592:	bd08      	pop	{r3, pc}
 80a2594:	080601a0 	.word	0x080601a0

080a2598 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a2598:	b508      	push	{r3, lr}
 80a259a:	4b02      	ldr	r3, [pc, #8]	; (80a25a4 <newlib_impure_ptr_callback+0xc>)
 80a259c:	681b      	ldr	r3, [r3, #0]
 80a259e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a25a0:	9301      	str	r3, [sp, #4]
 80a25a2:	bd08      	pop	{r3, pc}
 80a25a4:	080601a0 	.word	0x080601a0

080a25a8 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a25a8:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a25aa:	2600      	movs	r6, #0
 80a25ac:	4604      	mov	r4, r0
 80a25ae:	460d      	mov	r5, r1
 80a25b0:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a25b4:	f7ff fdba 	bl	80a212c <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a25b8:	4628      	mov	r0, r5
    _spi = spi;
 80a25ba:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a25bc:	f7ff fe40 	bl	80a2240 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a25c0:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a25c2:	6066      	str	r6, [r4, #4]
}
 80a25c4:	bd70      	pop	{r4, r5, r6, pc}

080a25c6 <_ZN11SystemClass10freeMemoryEv>:
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
    return System.systemSleepResult_;
}

uint32_t SystemClass::freeMemory()
{
 80a25c6:	b510      	push	{r4, lr}
    runtime_info_t info;
    memset(&info, 0, sizeof(info));
 80a25c8:	2420      	movs	r4, #32
{
 80a25ca:	b088      	sub	sp, #32
    memset(&info, 0, sizeof(info));
 80a25cc:	4622      	mov	r2, r4
 80a25ce:	2100      	movs	r1, #0
 80a25d0:	4668      	mov	r0, sp
 80a25d2:	f002 fcd5 	bl	80a4f80 <memset>
    info.size = sizeof(info);
    HAL_Core_Runtime_Info(&info, NULL);
 80a25d6:	2100      	movs	r1, #0
 80a25d8:	4668      	mov	r0, sp
    info.size = sizeof(info);
 80a25da:	f8ad 4000 	strh.w	r4, [sp]
    HAL_Core_Runtime_Info(&info, NULL);
 80a25de:	f7ff fd9d 	bl	80a211c <HAL_Core_Runtime_Info>
    return info.freeheap;
}
 80a25e2:	9801      	ldr	r0, [sp, #4]
 80a25e4:	b008      	add	sp, #32
 80a25e6:	bd10      	pop	{r4, pc}

080a25e8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a25e8:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a25ea:	2000      	movs	r0, #0
 80a25ec:	4b04      	ldr	r3, [pc, #16]	; (80a2600 <_GLOBAL__sub_I_System+0x18>)
 80a25ee:	601a      	str	r2, [r3, #0]
 80a25f0:	4b04      	ldr	r3, [pc, #16]	; (80a2604 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 80a25f2:	4a05      	ldr	r2, [pc, #20]	; (80a2608 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 80a25f4:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 80a25f8:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a25fa:	f7ff be79 	b.w	80a22f0 <set_system_mode>
 80a25fe:	bf00      	nop
 80a2600:	2000053c 	.word	0x2000053c
 80a2604:	20000530 	.word	0x20000530
 80a2608:	ffff0000 	.word	0xffff0000

080a260c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a260c:	b510      	push	{r4, lr}
 80a260e:	4604      	mov	r4, r0
{
	free(buffer);
 80a2610:	6800      	ldr	r0, [r0, #0]
 80a2612:	f7ff ff61 	bl	80a24d8 <free>
}
 80a2616:	4620      	mov	r0, r4
 80a2618:	bd10      	pop	{r4, pc}

080a261a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a261a:	b510      	push	{r4, lr}
 80a261c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a261e:	6800      	ldr	r0, [r0, #0]
 80a2620:	b108      	cbz	r0, 80a2626 <_ZN6String10invalidateEv+0xc>
 80a2622:	f7ff ff59 	bl	80a24d8 <free>
	buffer = NULL;
 80a2626:	2300      	movs	r3, #0
	capacity = len = 0;
 80a2628:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 80a262c:	6023      	str	r3, [r4, #0]
}
 80a262e:	bd10      	pop	{r4, pc}

080a2630 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a2630:	b538      	push	{r3, r4, r5, lr}
 80a2632:	4604      	mov	r4, r0
 80a2634:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a2636:	6800      	ldr	r0, [r0, #0]
 80a2638:	3101      	adds	r1, #1
 80a263a:	f7ff ff55 	bl	80a24e8 <realloc>
	if (newbuffer) {
 80a263e:	b110      	cbz	r0, 80a2646 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a2640:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80a2644:	2001      	movs	r0, #1
	}
	return 0;
}
 80a2646:	bd38      	pop	{r3, r4, r5, pc}

080a2648 <_ZN6String7reserveEj>:
{
 80a2648:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a264a:	6803      	ldr	r3, [r0, #0]
{
 80a264c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a264e:	b123      	cbz	r3, 80a265a <_ZN6String7reserveEj+0x12>
 80a2650:	6843      	ldr	r3, [r0, #4]
 80a2652:	428b      	cmp	r3, r1
 80a2654:	d301      	bcc.n	80a265a <_ZN6String7reserveEj+0x12>
 80a2656:	2001      	movs	r0, #1
}
 80a2658:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80a265a:	4620      	mov	r0, r4
 80a265c:	f7ff ffe8 	bl	80a2630 <_ZN6String12changeBufferEj>
 80a2660:	2800      	cmp	r0, #0
 80a2662:	d0f9      	beq.n	80a2658 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80a2664:	68a3      	ldr	r3, [r4, #8]
 80a2666:	2b00      	cmp	r3, #0
 80a2668:	d1f5      	bne.n	80a2656 <_ZN6String7reserveEj+0xe>
 80a266a:	6822      	ldr	r2, [r4, #0]
 80a266c:	7013      	strb	r3, [r2, #0]
 80a266e:	e7f2      	b.n	80a2656 <_ZN6String7reserveEj+0xe>

080a2670 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a2670:	b570      	push	{r4, r5, r6, lr}
 80a2672:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a2674:	4611      	mov	r1, r2
{
 80a2676:	4604      	mov	r4, r0
 80a2678:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a267a:	f7ff ffe5 	bl	80a2648 <_ZN6String7reserveEj>
 80a267e:	b920      	cbnz	r0, 80a268a <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 80a2680:	4620      	mov	r0, r4
 80a2682:	f7ff ffca 	bl	80a261a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 80a2686:	4620      	mov	r0, r4
 80a2688:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 80a268a:	462a      	mov	r2, r5
 80a268c:	4631      	mov	r1, r6
 80a268e:	6820      	ldr	r0, [r4, #0]
	len = length;
 80a2690:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a2692:	f002 fc67 	bl	80a4f64 <memcpy>
	buffer[len] = 0;
 80a2696:	2100      	movs	r1, #0
 80a2698:	6822      	ldr	r2, [r4, #0]
 80a269a:	68a3      	ldr	r3, [r4, #8]
 80a269c:	54d1      	strb	r1, [r2, r3]
	return *this;
 80a269e:	e7f2      	b.n	80a2686 <_ZN6String4copyEPKcj+0x16>

080a26a0 <_ZN6StringC1EPK19__FlashStringHelper>:
String::String(const __FlashStringHelper *pstr)
 80a26a0:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 80a26a2:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
 80a26a4:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a26a6:	460d      	mov	r5, r1
	capacity = 0;
 80a26a8:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a26ac:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a26ae:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 80a26b0:	b139      	cbz	r1, 80a26c2 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
 80a26b2:	4608      	mov	r0, r1
 80a26b4:	f003 fc7e 	bl	80a5fb4 <strlen>
 80a26b8:	4629      	mov	r1, r5
 80a26ba:	4602      	mov	r2, r0
 80a26bc:	4620      	mov	r0, r4
 80a26be:	f7ff ffd7 	bl	80a2670 <_ZN6String4copyEPKcj>
}
 80a26c2:	4620      	mov	r0, r4
 80a26c4:	bd38      	pop	{r3, r4, r5, pc}

080a26c6 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 80a26c6:	b538      	push	{r3, r4, r5, lr}
 80a26c8:	4605      	mov	r5, r0
	if (buffer) {
 80a26ca:	6800      	ldr	r0, [r0, #0]
{
 80a26cc:	460c      	mov	r4, r1
	if (buffer) {
 80a26ce:	b168      	cbz	r0, 80a26ec <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
 80a26d0:	686a      	ldr	r2, [r5, #4]
 80a26d2:	688b      	ldr	r3, [r1, #8]
 80a26d4:	429a      	cmp	r2, r3
 80a26d6:	d307      	bcc.n	80a26e8 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
 80a26d8:	6809      	ldr	r1, [r1, #0]
 80a26da:	f002 ff10 	bl	80a54fe <strcpy>
			len = rhs.len;
 80a26de:	68a3      	ldr	r3, [r4, #8]
 80a26e0:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 80a26e2:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 80a26e4:	60a3      	str	r3, [r4, #8]
}
 80a26e6:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 80a26e8:	f7ff fef6 	bl	80a24d8 <free>
	buffer = rhs.buffer;
 80a26ec:	6823      	ldr	r3, [r4, #0]
 80a26ee:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 80a26f0:	6863      	ldr	r3, [r4, #4]
 80a26f2:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 80a26f4:	68a3      	ldr	r3, [r4, #8]
 80a26f6:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 80a26f8:	2300      	movs	r3, #0
	rhs.capacity = 0;
 80a26fa:	e9c4 3300 	strd	r3, r3, [r4]
 80a26fe:	e7f1      	b.n	80a26e4 <_ZN6String4moveERS_+0x1e>

080a2700 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a2700:	4288      	cmp	r0, r1
{
 80a2702:	b510      	push	{r4, lr}
 80a2704:	460b      	mov	r3, r1
 80a2706:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a2708:	d004      	beq.n	80a2714 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a270a:	6809      	ldr	r1, [r1, #0]
 80a270c:	b121      	cbz	r1, 80a2718 <_ZN6StringaSERKS_+0x18>
 80a270e:	689a      	ldr	r2, [r3, #8]
 80a2710:	f7ff ffae 	bl	80a2670 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a2714:	4620      	mov	r0, r4
 80a2716:	bd10      	pop	{r4, pc}
	else invalidate();
 80a2718:	f7ff ff7f 	bl	80a261a <_ZN6String10invalidateEv>
 80a271c:	e7fa      	b.n	80a2714 <_ZN6StringaSERKS_+0x14>

080a271e <_ZN6StringC1ERKS_>:
	buffer = NULL;
 80a271e:	2300      	movs	r3, #0
String::String(const String &value)
 80a2720:	b510      	push	{r4, lr}
 80a2722:	4604      	mov	r4, r0
	capacity = 0;
 80a2724:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a2728:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a272a:	7303      	strb	r3, [r0, #12]
	*this = value;
 80a272c:	f7ff ffe8 	bl	80a2700 <_ZN6StringaSERKS_>
}
 80a2730:	4620      	mov	r0, r4
 80a2732:	bd10      	pop	{r4, pc}

080a2734 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
 80a2734:	4288      	cmp	r0, r1
{
 80a2736:	b510      	push	{r4, lr}
 80a2738:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
 80a273a:	d001      	beq.n	80a2740 <_ZN6StringaSEOS_+0xc>
 80a273c:	f7ff ffc3 	bl	80a26c6 <_ZN6String4moveERS_>
	return *this;
}
 80a2740:	4620      	mov	r0, r4
 80a2742:	bd10      	pop	{r4, pc}

080a2744 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a2744:	b538      	push	{r3, r4, r5, lr}
 80a2746:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a2748:	460c      	mov	r4, r1
 80a274a:	b149      	cbz	r1, 80a2760 <_ZN6StringaSEPKc+0x1c>
 80a274c:	4608      	mov	r0, r1
 80a274e:	f003 fc31 	bl	80a5fb4 <strlen>
 80a2752:	4621      	mov	r1, r4
 80a2754:	4602      	mov	r2, r0
 80a2756:	4628      	mov	r0, r5
 80a2758:	f7ff ff8a 	bl	80a2670 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a275c:	4628      	mov	r0, r5
 80a275e:	bd38      	pop	{r3, r4, r5, pc}
	else invalidate();
 80a2760:	f7ff ff5b 	bl	80a261a <_ZN6String10invalidateEv>
 80a2764:	e7fa      	b.n	80a275c <_ZN6StringaSEPKc+0x18>

080a2766 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 80a2766:	b570      	push	{r4, r5, r6, lr}
 80a2768:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 80a276a:	460e      	mov	r6, r1
 80a276c:	b909      	cbnz	r1, 80a2772 <_ZN6String6concatEPKcj+0xc>
 80a276e:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 80a2770:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 80a2772:	b16a      	cbz	r2, 80a2790 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
 80a2774:	6884      	ldr	r4, [r0, #8]
 80a2776:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
 80a2778:	4621      	mov	r1, r4
 80a277a:	f7ff ff65 	bl	80a2648 <_ZN6String7reserveEj>
 80a277e:	2800      	cmp	r0, #0
 80a2780:	d0f5      	beq.n	80a276e <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 80a2782:	6828      	ldr	r0, [r5, #0]
 80a2784:	68ab      	ldr	r3, [r5, #8]
 80a2786:	4631      	mov	r1, r6
 80a2788:	4418      	add	r0, r3
 80a278a:	f002 feb8 	bl	80a54fe <strcpy>
	len = newlen;
 80a278e:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
 80a2790:	2001      	movs	r0, #1
 80a2792:	e7ed      	b.n	80a2770 <_ZN6String6concatEPKcj+0xa>

080a2794 <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
 80a2794:	688a      	ldr	r2, [r1, #8]
 80a2796:	6809      	ldr	r1, [r1, #0]
 80a2798:	f7ff bfe5 	b.w	80a2766 <_ZN6String6concatEPKcj>

080a279c <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
 80a279c:	b538      	push	{r3, r4, r5, lr}
 80a279e:	4605      	mov	r5, r0
	if (!cstr) return 0;
 80a27a0:	460c      	mov	r4, r1
	return concat(cstr, strlen(cstr));
}
 80a27a2:	4608      	mov	r0, r1
	if (!cstr) return 0;
 80a27a4:	b141      	cbz	r1, 80a27b8 <_ZN6String6concatEPKc+0x1c>
	return concat(cstr, strlen(cstr));
 80a27a6:	f003 fc05 	bl	80a5fb4 <strlen>
 80a27aa:	4621      	mov	r1, r4
 80a27ac:	4602      	mov	r2, r0
 80a27ae:	4628      	mov	r0, r5
}
 80a27b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return concat(cstr, strlen(cstr));
 80a27b4:	f7ff bfd7 	b.w	80a2766 <_ZN6String6concatEPKcj>
}
 80a27b8:	bd38      	pop	{r3, r4, r5, pc}

080a27ba <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80a27ba:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a27bc:	688a      	ldr	r2, [r1, #8]
 80a27be:	6809      	ldr	r1, [r1, #0]
{
 80a27c0:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a27c2:	f7ff ffd0 	bl	80a2766 <_ZN6String6concatEPKcj>
 80a27c6:	b910      	cbnz	r0, 80a27ce <_ZplRK15StringSumHelperRK6String+0x14>
 80a27c8:	4620      	mov	r0, r4
 80a27ca:	f7ff ff26 	bl	80a261a <_ZN6String10invalidateEv>
	return a;
}
 80a27ce:	4620      	mov	r0, r4
 80a27d0:	bd10      	pop	{r4, pc}

080a27d2 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 80a27d2:	b538      	push	{r3, r4, r5, lr}
 80a27d4:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 80a27d6:	460d      	mov	r5, r1
 80a27d8:	b921      	cbnz	r1, 80a27e4 <_ZplRK15StringSumHelperPKc+0x12>
 80a27da:	4620      	mov	r0, r4
 80a27dc:	f7ff ff1d 	bl	80a261a <_ZN6String10invalidateEv>
	return a;
}
 80a27e0:	4620      	mov	r0, r4
 80a27e2:	bd38      	pop	{r3, r4, r5, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 80a27e4:	4608      	mov	r0, r1
 80a27e6:	f003 fbe5 	bl	80a5fb4 <strlen>
 80a27ea:	4629      	mov	r1, r5
 80a27ec:	4602      	mov	r2, r0
 80a27ee:	4620      	mov	r0, r4
 80a27f0:	f7ff ffb9 	bl	80a2766 <_ZN6String6concatEPKcj>
 80a27f4:	2800      	cmp	r0, #0
 80a27f6:	d0f0      	beq.n	80a27da <_ZplRK15StringSumHelperPKc+0x8>
 80a27f8:	e7f2      	b.n	80a27e0 <_ZplRK15StringSumHelperPKc+0xe>

080a27fa <_ZNK6String9compareToERKS_>:
/*********************************************/
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
 80a27fa:	4602      	mov	r2, r0
	if (!buffer || !s.buffer) {
 80a27fc:	6800      	ldr	r0, [r0, #0]
{
 80a27fe:	460b      	mov	r3, r1
	if (!buffer || !s.buffer) {
 80a2800:	6809      	ldr	r1, [r1, #0]
 80a2802:	b158      	cbz	r0, 80a281c <_ZNK6String9compareToERKS_+0x22>
 80a2804:	b941      	cbnz	r1, 80a2818 <_ZNK6String9compareToERKS_+0x1e>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
 80a2806:	6891      	ldr	r1, [r2, #8]
 80a2808:	b151      	cbz	r1, 80a2820 <_ZNK6String9compareToERKS_+0x26>
 80a280a:	7800      	ldrb	r0, [r0, #0]
 80a280c:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
 80a280e:	6898      	ldr	r0, [r3, #8]
 80a2810:	b138      	cbz	r0, 80a2822 <_ZNK6String9compareToERKS_+0x28>
 80a2812:	7809      	ldrb	r1, [r1, #0]
 80a2814:	4248      	negs	r0, r1
 80a2816:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
 80a2818:	f002 be67 	b.w	80a54ea <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
 80a281c:	2900      	cmp	r1, #0
 80a281e:	d1f6      	bne.n	80a280e <_ZNK6String9compareToERKS_+0x14>
		return 0;
 80a2820:	4608      	mov	r0, r1
}
 80a2822:	4770      	bx	lr

080a2824 <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
 80a2824:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
 80a2826:	6882      	ldr	r2, [r0, #8]
 80a2828:	688b      	ldr	r3, [r1, #8]
 80a282a:	429a      	cmp	r2, r3
 80a282c:	d105      	bne.n	80a283a <_ZNK6String6equalsERKS_+0x16>
 80a282e:	f7ff ffe4 	bl	80a27fa <_ZNK6String9compareToERKS_>
 80a2832:	fab0 f080 	clz	r0, r0
 80a2836:	0940      	lsrs	r0, r0, #5
}
 80a2838:	bd08      	pop	{r3, pc}
	return (len == s2.len && compareTo(s2) == 0);
 80a283a:	2000      	movs	r0, #0
 80a283c:	e7fc      	b.n	80a2838 <_ZNK6String6equalsERKS_+0x14>

080a283e <_ZNK6String6equalsEPKc>:

unsigned char String::equals(const char *cstr) const
{
 80a283e:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a2840:	6882      	ldr	r2, [r0, #8]
 80a2842:	b93a      	cbnz	r2, 80a2854 <_ZNK6String6equalsEPKc+0x16>
 80a2844:	b121      	cbz	r1, 80a2850 <_ZNK6String6equalsEPKc+0x12>
 80a2846:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
 80a2848:	fab0 f080 	clz	r0, r0
 80a284c:	0940      	lsrs	r0, r0, #5
 80a284e:	e000      	b.n	80a2852 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a2850:	2001      	movs	r0, #1
}
 80a2852:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 80a2854:	6800      	ldr	r0, [r0, #0]
 80a2856:	b909      	cbnz	r1, 80a285c <_ZNK6String6equalsEPKc+0x1e>
 80a2858:	7800      	ldrb	r0, [r0, #0]
 80a285a:	e7f5      	b.n	80a2848 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
 80a285c:	f002 fe45 	bl	80a54ea <strcmp>
 80a2860:	e7f2      	b.n	80a2848 <_ZNK6String6equalsEPKc+0xa>

080a2862 <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
 80a2862:	6883      	ldr	r3, [r0, #8]
 80a2864:	428b      	cmp	r3, r1
 80a2866:	d903      	bls.n	80a2870 <_ZNK6StringixEj+0xe>
 80a2868:	6800      	ldr	r0, [r0, #0]
 80a286a:	b110      	cbz	r0, 80a2872 <_ZNK6StringixEj+0x10>
	return buffer[index];
 80a286c:	5c40      	ldrb	r0, [r0, r1]
 80a286e:	4770      	bx	lr
	if (index >= len || !buffer) return 0;
 80a2870:	2000      	movs	r0, #0
}
 80a2872:	4770      	bx	lr

080a2874 <_ZNK6String6charAtEj>:
	return operator[](loc);
 80a2874:	f7ff bff5 	b.w	80a2862 <_ZNK6StringixEj>

080a2878 <_ZNK6String7indexOfEcj>:
{
	return indexOf(c, 0);
}

int String::indexOf( char ch, unsigned int fromIndex ) const
{
 80a2878:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
 80a287a:	6883      	ldr	r3, [r0, #8]
 80a287c:	4293      	cmp	r3, r2
 80a287e:	d906      	bls.n	80a288e <_ZNK6String7indexOfEcj+0x16>
	const char* temp = strchr(buffer + fromIndex, ch);
 80a2880:	6804      	ldr	r4, [r0, #0]
 80a2882:	18a0      	adds	r0, r4, r2
 80a2884:	f002 fe24 	bl	80a54d0 <strchr>
	if (temp == NULL) return -1;
 80a2888:	b108      	cbz	r0, 80a288e <_ZNK6String7indexOfEcj+0x16>
	return temp - buffer;
 80a288a:	1b00      	subs	r0, r0, r4
}
 80a288c:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
 80a288e:	f04f 30ff 	mov.w	r0, #4294967295
 80a2892:	e7fb      	b.n	80a288c <_ZNK6String7indexOfEcj+0x14>

080a2894 <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
 80a2894:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
 80a2896:	6883      	ldr	r3, [r0, #8]
 80a2898:	4293      	cmp	r3, r2
 80a289a:	d907      	bls.n	80a28ac <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
 80a289c:	6804      	ldr	r4, [r0, #0]
 80a289e:	6809      	ldr	r1, [r1, #0]
 80a28a0:	18a0      	adds	r0, r4, r2
 80a28a2:	f003 fbb6 	bl	80a6012 <strstr>
	if (found == NULL) return -1;
 80a28a6:	b108      	cbz	r0, 80a28ac <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
 80a28a8:	1b00      	subs	r0, r0, r4
}
 80a28aa:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
 80a28ac:	f04f 30ff 	mov.w	r0, #4294967295
 80a28b0:	e7fb      	b.n	80a28aa <_ZNK6String7indexOfERKS_j+0x16>

080a28b2 <_ZNK6String7indexOfERKS_>:
	return indexOf(s2, 0);
 80a28b2:	2200      	movs	r2, #0
 80a28b4:	f7ff bfee 	b.w	80a2894 <_ZNK6String7indexOfERKS_j>

080a28b8 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 80a28b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a28ba:	461d      	mov	r5, r3
	if (left > right) {
 80a28bc:	429a      	cmp	r2, r3
 80a28be:	bf88      	it	hi
 80a28c0:	4613      	movhi	r3, r2
{
 80a28c2:	460f      	mov	r7, r1
 80a28c4:	4614      	mov	r4, r2
	if (left > right) {
 80a28c6:	bf88      	it	hi
 80a28c8:	462c      	movhi	r4, r5
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 80a28ca:	490b      	ldr	r1, [pc, #44]	; (80a28f8 <_ZNK6String9substringEjj+0x40>)
	if (left > right) {
 80a28cc:	bf88      	it	hi
 80a28ce:	461d      	movhi	r5, r3
{
 80a28d0:	4606      	mov	r6, r0
	String out;
 80a28d2:	f7ff fee5 	bl	80a26a0 <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
 80a28d6:	68bb      	ldr	r3, [r7, #8]
 80a28d8:	42a3      	cmp	r3, r4
 80a28da:	d30a      	bcc.n	80a28f2 <_ZNK6String9substringEjj+0x3a>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
 80a28dc:	6839      	ldr	r1, [r7, #0]
 80a28de:	42ab      	cmp	r3, r5
 80a28e0:	bf94      	ite	ls
 80a28e2:	ebc4 0203 	rsbls	r2, r4, r3
 80a28e6:	ebc4 0205 	rsbhi	r2, r4, r5
 80a28ea:	4630      	mov	r0, r6
 80a28ec:	4421      	add	r1, r4
 80a28ee:	f7ff febf 	bl	80a2670 <_ZN6String4copyEPKcj>
	return out;
}
 80a28f2:	4630      	mov	r0, r6
 80a28f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a28f6:	bf00      	nop
 80a28f8:	080a6b86 	.word	0x080a6b86

080a28fc <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
 80a28fc:	6800      	ldr	r0, [r0, #0]
 80a28fe:	b108      	cbz	r0, 80a2904 <_ZNK6String5toIntEv+0x8>
 80a2900:	f002 ba3a 	b.w	80a4d78 <atol>
	return 0;
}
 80a2904:	4770      	bx	lr
	...

080a2908 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
 80a2908:	b40e      	push	{r1, r2, r3}
 80a290a:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
 80a290c:	ad09      	add	r5, sp, #36	; 0x24
 80a290e:	f855 7b04 	ldr.w	r7, [r5], #4
 80a2912:	4604      	mov	r4, r0
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 80a2914:	462b      	mov	r3, r5
 80a2916:	463a      	mov	r2, r7
 80a2918:	2105      	movs	r1, #5
 80a291a:	a802      	add	r0, sp, #8
    va_start(marker, fmt);
 80a291c:	9501      	str	r5, [sp, #4]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 80a291e:	f7ff fe13 	bl	80a2548 <vsnprintf>
 80a2922:	4606      	mov	r6, r0
    va_end(marker);

    String result;
 80a2924:	490b      	ldr	r1, [pc, #44]	; (80a2954 <_ZN6String6formatEPKcz+0x4c>)
 80a2926:	4620      	mov	r0, r4
 80a2928:	f7ff feba 	bl	80a26a0 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
 80a292c:	4631      	mov	r1, r6
 80a292e:	4620      	mov	r0, r4
 80a2930:	f7ff fe8a 	bl	80a2648 <_ZN6String7reserveEj>
    if (result.buffer) {
 80a2934:	6820      	ldr	r0, [r4, #0]
 80a2936:	b130      	cbz	r0, 80a2946 <_ZN6String6formatEPKcz+0x3e>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 80a2938:	462b      	mov	r3, r5
 80a293a:	463a      	mov	r2, r7
 80a293c:	1c71      	adds	r1, r6, #1
        va_start(marker, fmt);
 80a293e:	9501      	str	r5, [sp, #4]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 80a2940:	f7ff fe02 	bl	80a2548 <vsnprintf>
        va_end(marker);
        result.len = n;
 80a2944:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
 80a2946:	4620      	mov	r0, r4
 80a2948:	b004      	add	sp, #16
 80a294a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80a294e:	b003      	add	sp, #12
 80a2950:	4770      	bx	lr
 80a2952:	bf00      	nop
 80a2954:	080a6b86 	.word	0x080a6b86

080a2958 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a2958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a295a:	4606      	mov	r6, r0
 80a295c:	460d      	mov	r5, r1
  size_t n = 0;
 80a295e:	2400      	movs	r4, #0
 80a2960:	188f      	adds	r7, r1, r2
  while (size--) {
 80a2962:	42bd      	cmp	r5, r7
 80a2964:	d00c      	beq.n	80a2980 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a2966:	6833      	ldr	r3, [r6, #0]
 80a2968:	4630      	mov	r0, r6
 80a296a:	689b      	ldr	r3, [r3, #8]
 80a296c:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a2970:	4798      	blx	r3
     if (chunk>=0)
 80a2972:	1e03      	subs	r3, r0, #0
 80a2974:	db01      	blt.n	80a297a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a2976:	441c      	add	r4, r3
  while (size--) {
 80a2978:	e7f3      	b.n	80a2962 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a297a:	2c00      	cmp	r4, #0
 80a297c:	bf08      	it	eq
 80a297e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a2980:	4620      	mov	r0, r4
 80a2982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2984 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a2984:	b570      	push	{r4, r5, r6, lr}
 80a2986:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a2988:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a298a:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a298c:	b149      	cbz	r1, 80a29a2 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a298e:	f003 fb11 	bl	80a5fb4 <strlen>
 80a2992:	682b      	ldr	r3, [r5, #0]
 80a2994:	4602      	mov	r2, r0
 80a2996:	4621      	mov	r1, r4
 80a2998:	4628      	mov	r0, r5
    }
 80a299a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a299e:	68db      	ldr	r3, [r3, #12]
 80a29a0:	4718      	bx	r3
    }
 80a29a2:	bd70      	pop	{r4, r5, r6, pc}

080a29a4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a29a4:	6803      	ldr	r3, [r0, #0]
 80a29a6:	689b      	ldr	r3, [r3, #8]
 80a29a8:	4718      	bx	r3

080a29aa <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a29aa:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a29ac:	210d      	movs	r1, #13
{
 80a29ae:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a29b0:	f7ff fff8 	bl	80a29a4 <_ZN5Print5printEc>
  n += print('\n');
 80a29b4:	210a      	movs	r1, #10
  size_t n = print('\r');
 80a29b6:	4604      	mov	r4, r0
  n += print('\n');
 80a29b8:	4628      	mov	r0, r5
 80a29ba:	f7ff fff3 	bl	80a29a4 <_ZN5Print5printEc>
  return n;
}
 80a29be:	4420      	add	r0, r4
 80a29c0:	bd38      	pop	{r3, r4, r5, pc}

080a29c2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a29c2:	b538      	push	{r3, r4, r5, lr}
 80a29c4:	4605      	mov	r5, r0
  return write(str);
 80a29c6:	f7ff ffdd 	bl	80a2984 <_ZN5Print5writeEPKc>
 80a29ca:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 80a29cc:	4628      	mov	r0, r5
 80a29ce:	f7ff ffec 	bl	80a29aa <_ZN5Print7printlnEv>
  return n;
}
 80a29d2:	4420      	add	r0, r4
 80a29d4:	bd38      	pop	{r3, r4, r5, pc}

080a29d6 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a29d6:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a29d8:	2a01      	cmp	r2, #1
 80a29da:	bf98      	it	ls
 80a29dc:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a29de:	b530      	push	{r4, r5, lr}
 80a29e0:	b08b      	sub	sp, #44	; 0x2c
 80a29e2:	460c      	mov	r4, r1
  *str = '\0';
 80a29e4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a29e8:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a29ea:	4625      	mov	r5, r4
 80a29ec:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a29f0:	fb04 5312 	mls	r3, r4, r2, r5
 80a29f4:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a29f6:	2b09      	cmp	r3, #9
 80a29f8:	bf94      	ite	ls
 80a29fa:	3330      	addls	r3, #48	; 0x30
 80a29fc:	3337      	addhi	r3, #55	; 0x37
 80a29fe:	b2db      	uxtb	r3, r3
  } while(n);
 80a2a00:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a2a02:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a2a06:	d9f0      	bls.n	80a29ea <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a2a08:	f7ff ffbc 	bl	80a2984 <_ZN5Print5writeEPKc>
}
 80a2a0c:	b00b      	add	sp, #44	; 0x2c
 80a2a0e:	bd30      	pop	{r4, r5, pc}

080a2a10 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a2a10:	4b01      	ldr	r3, [pc, #4]	; (80a2a18 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a2a12:	4a02      	ldr	r2, [pc, #8]	; (80a2a1c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a2a14:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a2a16:	4770      	bx	lr
 80a2a18:	20000540 	.word	0x20000540
 80a2a1c:	080a73c0 	.word	0x080a73c0

080a2a20 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 80a2a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
 80a2a24:	4b15      	ldr	r3, [pc, #84]	; (80a2a7c <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 80a2a26:	f8df 8058 	ldr.w	r8, [pc, #88]	; 80a2a80 <_ZL22Refresh_UnixTime_Cachex+0x60>
    unix_time += time_zone_cache;
 80a2a2a:	e9d3 6700 	ldrd	r6, r7, [r3]
    unix_time += dst_current_cache;
 80a2a2e:	4b15      	ldr	r3, [pc, #84]	; (80a2a84 <_ZL22Refresh_UnixTime_Cachex+0x64>)
    unix_time += time_zone_cache;
 80a2a30:	1980      	adds	r0, r0, r6
 80a2a32:	eb47 0701 	adc.w	r7, r7, r1
    unix_time += dst_current_cache;
 80a2a36:	e9d3 6100 	ldrd	r6, r1, [r3]
 80a2a3a:	1986      	adds	r6, r0, r6
 80a2a3c:	eb47 0701 	adc.w	r7, r7, r1
    if(unix_time != unix_time_cache)
 80a2a40:	e9d8 2300 	ldrd	r2, r3, [r8]
 80a2a44:	42bb      	cmp	r3, r7
 80a2a46:	bf08      	it	eq
 80a2a48:	42b2      	cmpeq	r2, r6
{
 80a2a4a:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
 80a2a4c:	d013      	beq.n	80a2a76 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
 80a2a4e:	a903      	add	r1, sp, #12
 80a2a50:	4668      	mov	r0, sp
 80a2a52:	e9cd 6700 	strd	r6, r7, [sp]
 80a2a56:	f002 f993 	bl	80a4d80 <localtime_r>
	calendar_time.tm_year += 1900;
 80a2a5a:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a2a5c:	4d0a      	ldr	r5, [pc, #40]	; (80a2a88 <_ZL22Refresh_UnixTime_Cachex+0x68>)
	calendar_time.tm_year += 1900;
 80a2a5e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a2a62:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
 80a2a64:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a2a66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a2a68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a2a6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a2a6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 80a2a6e:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a2a72:	6823      	ldr	r3, [r4, #0]
 80a2a74:	602b      	str	r3, [r5, #0]
    }
}
 80a2a76:	b00c      	add	sp, #48	; 0x30
 80a2a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a2a7c:	20000578 	.word	0x20000578
 80a2a80:	20000580 	.word	0x20000580
 80a2a84:	20000570 	.word	0x20000570
 80a2a88:	2000054c 	.word	0x2000054c

080a2a8c <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
 80a2a8c:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a2a8e:	2000      	movs	r0, #0
 80a2a90:	f7ff fd0a 	bl	80a24a8 <spark_sync_time_pending>
 80a2a94:	b128      	cbz	r0, 80a2aa2 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a2a96:	f7ff fcdf 	bl	80a2458 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a2a9a:	f080 0001 	eor.w	r0, r0, #1
 80a2a9e:	b2c0      	uxtb	r0, r0
    }
 80a2aa0:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a2aa2:	2001      	movs	r0, #1
 80a2aa4:	e7fc      	b.n	80a2aa0 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

080a2aa8 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
 80a2aa8:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 80a2aaa:	f7ff ffb9 	bl	80a2a20 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
 80a2aae:	4b02      	ldr	r3, [pc, #8]	; (80a2ab8 <_ZN9TimeClass5monthEx+0x10>)
 80a2ab0:	6918      	ldr	r0, [r3, #16]
}
 80a2ab2:	3001      	adds	r0, #1
 80a2ab4:	bd08      	pop	{r3, pc}
 80a2ab6:	bf00      	nop
 80a2ab8:	2000054c 	.word	0x2000054c

080a2abc <_ZN9TimeClass4zoneEf>:
	return now() + time_zone_cache + dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 80a2abc:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 80a2abe:	490a      	ldr	r1, [pc, #40]	; (80a2ae8 <_ZN9TimeClass4zoneEf+0x2c>)
{
 80a2ac0:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 80a2ac2:	f001 ff65 	bl	80a4990 <__aeabi_fcmplt>
 80a2ac6:	b968      	cbnz	r0, 80a2ae4 <_ZN9TimeClass4zoneEf+0x28>
 80a2ac8:	4620      	mov	r0, r4
 80a2aca:	4908      	ldr	r1, [pc, #32]	; (80a2aec <_ZN9TimeClass4zoneEf+0x30>)
 80a2acc:	f001 ff7e 	bl	80a49cc <__aeabi_fcmpgt>
 80a2ad0:	b940      	cbnz	r0, 80a2ae4 <_ZN9TimeClass4zoneEf+0x28>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 80a2ad2:	4907      	ldr	r1, [pc, #28]	; (80a2af0 <_ZN9TimeClass4zoneEf+0x34>)
 80a2ad4:	4620      	mov	r0, r4
 80a2ad6:	f001 fdbd 	bl	80a4654 <__aeabi_fmul>
 80a2ada:	f001 ff81 	bl	80a49e0 <__aeabi_f2lz>
 80a2ade:	4b05      	ldr	r3, [pc, #20]	; (80a2af4 <_ZN9TimeClass4zoneEf+0x38>)
 80a2ae0:	e9c3 0100 	strd	r0, r1, [r3]
}
 80a2ae4:	bd10      	pop	{r4, pc}
 80a2ae6:	bf00      	nop
 80a2ae8:	c1400000 	.word	0xc1400000
 80a2aec:	41600000 	.word	0x41600000
 80a2af0:	45610000 	.word	0x45610000
 80a2af4:	20000578 	.word	0x20000578

080a2af8 <_ZN9TimeClass7timeStrEx>:
    }
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 80a2af8:	b530      	push	{r4, r5, lr}
 80a2afa:	b093      	sub	sp, #76	; 0x4c
 80a2afc:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
 80a2b00:	4b19      	ldr	r3, [pc, #100]	; (80a2b68 <_ZN9TimeClass7timeStrEx+0x70>)
{
 80a2b02:	4604      	mov	r4, r0
    t += time_zone_cache;
 80a2b04:	e9d3 1000 	ldrd	r1, r0, [r3]
 80a2b08:	9b01      	ldr	r3, [sp, #4]
 80a2b0a:	1852      	adds	r2, r2, r1
 80a2b0c:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
 80a2b10:	4816      	ldr	r0, [pc, #88]	; (80a2b6c <_ZN9TimeClass7timeStrEx+0x74>)
    struct tm calendar_time = {};
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
 80a2b12:	2500      	movs	r5, #0
    t += dst_current_cache;
 80a2b14:	e9d0 1000 	ldrd	r1, r0, [r0]
 80a2b18:	1852      	adds	r2, r2, r1
 80a2b1a:	eb43 0300 	adc.w	r3, r3, r0
 80a2b1e:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
 80a2b22:	2224      	movs	r2, #36	; 0x24
 80a2b24:	2100      	movs	r1, #0
 80a2b26:	eb0d 0002 	add.w	r0, sp, r2
 80a2b2a:	f002 fa29 	bl	80a4f80 <memset>
    localtime_r(&t, &calendar_time);
 80a2b2e:	a909      	add	r1, sp, #36	; 0x24
 80a2b30:	4668      	mov	r0, sp
 80a2b32:	f002 f925 	bl	80a4d80 <localtime_r>
    char ascstr[26] = {};
 80a2b36:	2216      	movs	r2, #22
 80a2b38:	4629      	mov	r1, r5
 80a2b3a:	a803      	add	r0, sp, #12
 80a2b3c:	9502      	str	r5, [sp, #8]
 80a2b3e:	f002 fa1f 	bl	80a4f80 <memset>
    asctime_r(&calendar_time, ascstr);
 80a2b42:	a902      	add	r1, sp, #8
 80a2b44:	a809      	add	r0, sp, #36	; 0x24
 80a2b46:	f002 f8eb 	bl	80a4d20 <asctime_r>
    int len = strlen(ascstr);
 80a2b4a:	a802      	add	r0, sp, #8
 80a2b4c:	f003 fa32 	bl	80a5fb4 <strlen>
    ascstr[len-1] = 0; // remove final newline
 80a2b50:	ab12      	add	r3, sp, #72	; 0x48
 80a2b52:	4418      	add	r0, r3
 80a2b54:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
 80a2b58:	a902      	add	r1, sp, #8
 80a2b5a:	4620      	mov	r0, r4
 80a2b5c:	f7ff fda0 	bl	80a26a0 <_ZN6StringC1EPK19__FlashStringHelper>
}
 80a2b60:	4620      	mov	r0, r4
 80a2b62:	b013      	add	sp, #76	; 0x4c
 80a2b64:	bd30      	pop	{r4, r5, pc}
 80a2b66:	bf00      	nop
 80a2b68:	20000578 	.word	0x20000578
 80a2b6c:	20000570 	.word	0x20000570

080a2b70 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 80a2b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a2b74:	b0a4      	sub	sp, #144	; 0x90
 80a2b76:	4607      	mov	r7, r0
 80a2b78:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 80a2b7a:	a814      	add	r0, sp, #80	; 0x50
{
 80a2b7c:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 80a2b7e:	223f      	movs	r2, #63	; 0x3f
{
 80a2b80:	461c      	mov	r4, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 80a2b82:	f003 fa33 	bl	80a5fec <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 80a2b86:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 80a2b88:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 80a2b8a:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 80a2b8e:	f003 fa11 	bl	80a5fb4 <strlen>
 80a2b92:	4605      	mov	r5, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
 80a2b94:	bb4c      	cbnz	r4, 80a2bea <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7a>
        strcpy(time_zone_str, "Z");
 80a2b96:	4929      	ldr	r1, [pc, #164]	; (80a2c3c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xcc>)
 80a2b98:	a803      	add	r0, sp, #12
 80a2b9a:	f002 fcb0 	bl	80a54fe <strcpy>
{
 80a2b9e:	2600      	movs	r6, #0
 80a2ba0:	ac14      	add	r4, sp, #80	; 0x50
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 80a2ba2:	f105 39ff 	add.w	r9, r5, #4294967295
 80a2ba6:	45b1      	cmp	r9, r6
 80a2ba8:	d934      	bls.n	80a2c14 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa4>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
 80a2baa:	7823      	ldrb	r3, [r4, #0]
 80a2bac:	f106 0a01 	add.w	sl, r6, #1
 80a2bb0:	2b25      	cmp	r3, #37	; 0x25
 80a2bb2:	d117      	bne.n	80a2be4 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
 80a2bb4:	7863      	ldrb	r3, [r4, #1]
 80a2bb6:	2b7a      	cmp	r3, #122	; 0x7a
 80a2bb8:	d114      	bne.n	80a2be4 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
        {
            size_t tzlen = strlen(time_zone_str);
 80a2bba:	a803      	add	r0, sp, #12
 80a2bbc:	f003 f9fa 	bl	80a5fb4 <strlen>
 80a2bc0:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
 80a2bc2:	ab14      	add	r3, sp, #80	; 0x50
 80a2bc4:	1830      	adds	r0, r6, r0
 80a2bc6:	4418      	add	r0, r3
 80a2bc8:	eba9 0206 	sub.w	r2, r9, r6
 80a2bcc:	1ca1      	adds	r1, r4, #2
 80a2bce:	f002 f9c9 	bl	80a4f64 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
 80a2bd2:	462a      	mov	r2, r5
 80a2bd4:	a903      	add	r1, sp, #12
 80a2bd6:	4620      	mov	r0, r4
 80a2bd8:	f002 f9c4 	bl	80a4f64 <memcpy>
            len = strlen(format_str);
 80a2bdc:	a814      	add	r0, sp, #80	; 0x50
 80a2bde:	f003 f9e9 	bl	80a5fb4 <strlen>
 80a2be2:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
 80a2be4:	4656      	mov	r6, sl
 80a2be6:	3401      	adds	r4, #1
 80a2be8:	e7db      	b.n	80a2ba2 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
 80a2bea:	233c      	movs	r3, #60	; 0x3c
 80a2bec:	fb94 f2f3 	sdiv	r2, r4, r3
 80a2bf0:	2a00      	cmp	r2, #0
 80a2bf2:	bfb8      	it	lt
 80a2bf4:	4252      	neglt	r2, r2
 80a2bf6:	fbb2 f1f3 	udiv	r1, r2, r3
 80a2bfa:	fb03 2211 	mls	r2, r3, r1, r2
 80a2bfe:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80a2c02:	9200      	str	r2, [sp, #0]
 80a2c04:	fb94 f3f3 	sdiv	r3, r4, r3
 80a2c08:	2110      	movs	r1, #16
 80a2c0a:	4a0d      	ldr	r2, [pc, #52]	; (80a2c40 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
 80a2c0c:	a803      	add	r0, sp, #12
 80a2c0e:	f7ff fc8b 	bl	80a2528 <snprintf>
 80a2c12:	e7c4      	b.n	80a2b9e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
 80a2c14:	2100      	movs	r1, #0
 80a2c16:	222e      	movs	r2, #46	; 0x2e
 80a2c18:	a808      	add	r0, sp, #32
 80a2c1a:	9107      	str	r1, [sp, #28]
 80a2c1c:	f002 f9b0 	bl	80a4f80 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
 80a2c20:	4643      	mov	r3, r8
 80a2c22:	aa14      	add	r2, sp, #80	; 0x50
 80a2c24:	2132      	movs	r1, #50	; 0x32
 80a2c26:	a807      	add	r0, sp, #28
 80a2c28:	f003 f9c2 	bl	80a5fb0 <strftime>
    return String(buf);
 80a2c2c:	4638      	mov	r0, r7
 80a2c2e:	a907      	add	r1, sp, #28
 80a2c30:	f7ff fd36 	bl	80a26a0 <_ZN6StringC1EPK19__FlashStringHelper>
}
 80a2c34:	4638      	mov	r0, r7
 80a2c36:	b024      	add	sp, #144	; 0x90
 80a2c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a2c3c:	080a7951 	.word	0x080a7951
 80a2c40:	080a73c4 	.word	0x080a73c4

080a2c44 <_ZN9TimeClass6formatExPKc>:
{
 80a2c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2c46:	b08d      	sub	sp, #52	; 0x34
 80a2c48:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80a2c4a:	4604      	mov	r4, r0
 80a2c4c:	e9cd 2300 	strd	r2, r3, [sp]
    if (format_spec == nullptr)
 80a2c50:	b915      	cbnz	r5, 80a2c58 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
 80a2c52:	4b19      	ldr	r3, [pc, #100]	; (80a2cb8 <_ZN9TimeClass6formatExPKc+0x74>)
 80a2c54:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
 80a2c56:	b12d      	cbz	r5, 80a2c64 <_ZN9TimeClass6formatExPKc+0x20>
 80a2c58:	4b18      	ldr	r3, [pc, #96]	; (80a2cbc <_ZN9TimeClass6formatExPKc+0x78>)
 80a2c5a:	4628      	mov	r0, r5
 80a2c5c:	6819      	ldr	r1, [r3, #0]
 80a2c5e:	f002 fc44 	bl	80a54ea <strcmp>
 80a2c62:	b938      	cbnz	r0, 80a2c74 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
 80a2c64:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a2c68:	4620      	mov	r0, r4
 80a2c6a:	f7ff ff45 	bl	80a2af8 <_ZN9TimeClass7timeStrEx>
}
 80a2c6e:	4620      	mov	r0, r4
 80a2c70:	b00d      	add	sp, #52	; 0x34
 80a2c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
 80a2c74:	9900      	ldr	r1, [sp, #0]
 80a2c76:	4e12      	ldr	r6, [pc, #72]	; (80a2cc0 <_ZN9TimeClass6formatExPKc+0x7c>)
    t += dst_current_cache;
 80a2c78:	4f12      	ldr	r7, [pc, #72]	; (80a2cc4 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
 80a2c7a:	e9d6 3200 	ldrd	r3, r2, [r6]
 80a2c7e:	185b      	adds	r3, r3, r1
 80a2c80:	9901      	ldr	r1, [sp, #4]
 80a2c82:	eb42 0201 	adc.w	r2, r2, r1
    t += dst_current_cache;
 80a2c86:	e9d7 0100 	ldrd	r0, r1, [r7]
 80a2c8a:	181b      	adds	r3, r3, r0
 80a2c8c:	eb42 0201 	adc.w	r2, r2, r1
 80a2c90:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
 80a2c94:	2100      	movs	r1, #0
 80a2c96:	2224      	movs	r2, #36	; 0x24
 80a2c98:	a803      	add	r0, sp, #12
 80a2c9a:	f002 f971 	bl	80a4f80 <memset>
    localtime_r(&t, &calendar_time);
 80a2c9e:	a903      	add	r1, sp, #12
 80a2ca0:	4668      	mov	r0, sp
 80a2ca2:	f002 f86d 	bl	80a4d80 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
 80a2ca6:	6832      	ldr	r2, [r6, #0]
 80a2ca8:	683b      	ldr	r3, [r7, #0]
 80a2caa:	4620      	mov	r0, r4
 80a2cac:	4413      	add	r3, r2
 80a2cae:	a903      	add	r1, sp, #12
 80a2cb0:	462a      	mov	r2, r5
 80a2cb2:	f7ff ff5d 	bl	80a2b70 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
 80a2cb6:	e7da      	b.n	80a2c6e <_ZN9TimeClass6formatExPKc+0x2a>
 80a2cb8:	20000548 	.word	0x20000548
 80a2cbc:	20000000 	.word	0x20000000
 80a2cc0:	20000578 	.word	0x20000578
 80a2cc4:	20000570 	.word	0x20000570

080a2cc8 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
 80a2cc8:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
 80a2cca:	2000      	movs	r0, #0
 80a2ccc:	f7ff fa16 	bl	80a20fc <hal_rtc_time_is_valid>
    if (rtcstate)
 80a2cd0:	4604      	mov	r4, r0
 80a2cd2:	b9a0      	cbnz	r0, 80a2cfe <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80a2cd4:	f7ff fb04 	bl	80a22e0 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80a2cd8:	2801      	cmp	r0, #1
 80a2cda:	d110      	bne.n	80a2cfe <_ZN9TimeClass7isValidEv+0x36>
 80a2cdc:	4620      	mov	r0, r4
 80a2cde:	f7ff fb27 	bl	80a2330 <system_thread_get_state>
 80a2ce2:	b960      	cbnz	r0, 80a2cfe <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
 80a2ce4:	f7ff fed2 	bl	80a2a8c <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a2ce8:	b910      	cbnz	r0, 80a2cf0 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
 80a2cea:	f7ff fbad 	bl	80a2448 <spark_process>
        while (_while() && !_condition()) {
 80a2cee:	e7f9      	b.n	80a2ce4 <_ZN9TimeClass7isValidEv+0x1c>
 80a2cf0:	f7ff fecc 	bl	80a2a8c <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
 80a2cf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
 80a2cf8:	2000      	movs	r0, #0
 80a2cfa:	f7ff b9ff 	b.w	80a20fc <hal_rtc_time_is_valid>
}
 80a2cfe:	4620      	mov	r0, r4
 80a2d00:	bd10      	pop	{r4, pc}

080a2d02 <_ZN9TimeClass3nowEv>:
{
 80a2d02:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
 80a2d04:	f7ff ffe0 	bl	80a2cc8 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
 80a2d08:	2210      	movs	r2, #16
 80a2d0a:	2100      	movs	r1, #0
 80a2d0c:	4668      	mov	r0, sp
 80a2d0e:	f002 f937 	bl	80a4f80 <memset>
    hal_rtc_get_time(&tv, nullptr);
 80a2d12:	2100      	movs	r1, #0
 80a2d14:	4668      	mov	r0, sp
 80a2d16:	f7ff f9f9 	bl	80a210c <hal_rtc_get_time>
}
 80a2d1a:	9800      	ldr	r0, [sp, #0]
 80a2d1c:	b005      	add	sp, #20
 80a2d1e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a2d24 <_ZN9TimeClass4hourEv>:
{
 80a2d24:	b508      	push	{r3, lr}
	return hour(now());
 80a2d26:	f7ff ffec 	bl	80a2d02 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 80a2d2a:	17c1      	asrs	r1, r0, #31
 80a2d2c:	f7ff fe78 	bl	80a2a20 <_ZL22Refresh_UnixTime_Cachex>
}
 80a2d30:	4b01      	ldr	r3, [pc, #4]	; (80a2d38 <_ZN9TimeClass4hourEv+0x14>)
 80a2d32:	6898      	ldr	r0, [r3, #8]
 80a2d34:	bd08      	pop	{r3, pc}
 80a2d36:	bf00      	nop
 80a2d38:	2000054c 	.word	0x2000054c

080a2d3c <_ZN9TimeClass6minuteEv>:
{
 80a2d3c:	b508      	push	{r3, lr}
	return minute(now());
 80a2d3e:	f7ff ffe0 	bl	80a2d02 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 80a2d42:	17c1      	asrs	r1, r0, #31
 80a2d44:	f7ff fe6c 	bl	80a2a20 <_ZL22Refresh_UnixTime_Cachex>
}
 80a2d48:	4b01      	ldr	r3, [pc, #4]	; (80a2d50 <_ZN9TimeClass6minuteEv+0x14>)
 80a2d4a:	6858      	ldr	r0, [r3, #4]
 80a2d4c:	bd08      	pop	{r3, pc}
 80a2d4e:	bf00      	nop
 80a2d50:	2000054c 	.word	0x2000054c

080a2d54 <_ZN9TimeClass6secondEv>:
{
 80a2d54:	b508      	push	{r3, lr}
	return second(now());
 80a2d56:	f7ff ffd4 	bl	80a2d02 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 80a2d5a:	17c1      	asrs	r1, r0, #31
 80a2d5c:	f7ff fe60 	bl	80a2a20 <_ZL22Refresh_UnixTime_Cachex>
}
 80a2d60:	4b01      	ldr	r3, [pc, #4]	; (80a2d68 <_ZN9TimeClass6secondEv+0x14>)
 80a2d62:	6818      	ldr	r0, [r3, #0]
 80a2d64:	bd08      	pop	{r3, pc}
 80a2d66:	bf00      	nop
 80a2d68:	2000054c 	.word	0x2000054c

080a2d6c <_ZN9TimeClass3dayEv>:
{
 80a2d6c:	b508      	push	{r3, lr}
	return day(now());
 80a2d6e:	f7ff ffc8 	bl	80a2d02 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 80a2d72:	17c1      	asrs	r1, r0, #31
 80a2d74:	f7ff fe54 	bl	80a2a20 <_ZL22Refresh_UnixTime_Cachex>
}
 80a2d78:	4b01      	ldr	r3, [pc, #4]	; (80a2d80 <_ZN9TimeClass3dayEv+0x14>)
 80a2d7a:	68d8      	ldr	r0, [r3, #12]
 80a2d7c:	bd08      	pop	{r3, pc}
 80a2d7e:	bf00      	nop
 80a2d80:	2000054c 	.word	0x2000054c

080a2d84 <_ZN9TimeClass5monthEv>:
{
 80a2d84:	b508      	push	{r3, lr}
	return month(now());
 80a2d86:	f7ff ffbc 	bl	80a2d02 <_ZN9TimeClass3nowEv>
}
 80a2d8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
 80a2d8e:	17c1      	asrs	r1, r0, #31
 80a2d90:	f7ff be8a 	b.w	80a2aa8 <_ZN9TimeClass5monthEx>

080a2d94 <_ZN9TimeClass4yearEv>:
{
 80a2d94:	b508      	push	{r3, lr}
	return year(now());
 80a2d96:	f7ff ffb4 	bl	80a2d02 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 80a2d9a:	17c1      	asrs	r1, r0, #31
 80a2d9c:	f7ff fe40 	bl	80a2a20 <_ZL22Refresh_UnixTime_Cachex>
}
 80a2da0:	4b01      	ldr	r3, [pc, #4]	; (80a2da8 <_ZN9TimeClass4yearEv+0x14>)
 80a2da2:	6958      	ldr	r0, [r3, #20]
 80a2da4:	bd08      	pop	{r3, pc}
 80a2da6:	bf00      	nop
 80a2da8:	2000054c 	.word	0x2000054c

080a2dac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a2dac:	4b02      	ldr	r3, [pc, #8]	; (80a2db8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a2dae:	681a      	ldr	r2, [r3, #0]
 80a2db0:	4b02      	ldr	r3, [pc, #8]	; (80a2dbc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a2db2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a2db4:	4770      	bx	lr
 80a2db6:	bf00      	nop
 80a2db8:	20000000 	.word	0x20000000
 80a2dbc:	20000548 	.word	0x20000548

080a2dc0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a2dc0:	2100      	movs	r1, #0
 80a2dc2:	f7ff ba9d 	b.w	80a2300 <system_delay_ms>

080a2dc6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 80a2dc6:	b513      	push	{r0, r1, r4, lr}
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2dc8:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 80a2dca:	460b      	mov	r3, r1
 80a2dcc:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2dce:	c803      	ldmia	r0, {r0, r1}
 80a2dd0:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a2dd4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a2dd8:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a2ddc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80a2de0:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a2de4:	b002      	add	sp, #8
 80a2de6:	bd10      	pop	{r4, pc}

080a2de8 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 80a2de8:	2200      	movs	r2, #0
 80a2dea:	4b01      	ldr	r3, [pc, #4]	; (80a2df0 <_GLOBAL__sub_I_RGB+0x8>)
 80a2dec:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 80a2dee:	4770      	bx	lr
 80a2df0:	20000588 	.word	0x20000588

080a2df4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a2df4:	4b01      	ldr	r3, [pc, #4]	; (80a2dfc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a2df6:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a2df8:	4770      	bx	lr
 80a2dfa:	bf00      	nop
 80a2dfc:	20000008 	.word	0x20000008

080a2e00 <serialEventRun>:
{
 80a2e00:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a2e02:	4b13      	ldr	r3, [pc, #76]	; (80a2e50 <serialEventRun+0x50>)
 80a2e04:	b143      	cbz	r3, 80a2e18 <serialEventRun+0x18>
 80a2e06:	f000 fc41 	bl	80a368c <_Z16_fetch_usbserialv>
 80a2e0a:	6803      	ldr	r3, [r0, #0]
 80a2e0c:	691b      	ldr	r3, [r3, #16]
 80a2e0e:	4798      	blx	r3
 80a2e10:	2800      	cmp	r0, #0
 80a2e12:	dd01      	ble.n	80a2e18 <serialEventRun+0x18>
        serialEvent();
 80a2e14:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a2e18:	4b0e      	ldr	r3, [pc, #56]	; (80a2e54 <serialEventRun+0x54>)
 80a2e1a:	b143      	cbz	r3, 80a2e2e <serialEventRun+0x2e>
 80a2e1c:	f000 fe94 	bl	80a3b48 <_Z22__fetch_global_Serial1v>
 80a2e20:	6803      	ldr	r3, [r0, #0]
 80a2e22:	691b      	ldr	r3, [r3, #16]
 80a2e24:	4798      	blx	r3
 80a2e26:	2800      	cmp	r0, #0
 80a2e28:	dd01      	ble.n	80a2e2e <serialEventRun+0x2e>
        serialEvent1();
 80a2e2a:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a2e2e:	4b0a      	ldr	r3, [pc, #40]	; (80a2e58 <serialEventRun+0x58>)
 80a2e30:	b10b      	cbz	r3, 80a2e36 <serialEventRun+0x36>
 80a2e32:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a2e36:	4b09      	ldr	r3, [pc, #36]	; (80a2e5c <serialEventRun+0x5c>)
 80a2e38:	b143      	cbz	r3, 80a2e4c <serialEventRun+0x4c>
 80a2e3a:	f000 fc61 	bl	80a3700 <_Z17_fetch_usbserial1v>
 80a2e3e:	6803      	ldr	r3, [r0, #0]
 80a2e40:	691b      	ldr	r3, [r3, #16]
 80a2e42:	4798      	blx	r3
 80a2e44:	2800      	cmp	r0, #0
 80a2e46:	dd01      	ble.n	80a2e4c <serialEventRun+0x4c>
        usbSerialEvent1();
 80a2e48:	f3af 8000 	nop.w
}
 80a2e4c:	bd08      	pop	{r3, pc}
 80a2e4e:	bf00      	nop
	...

080a2e60 <_post_loop>:
{
 80a2e60:	b508      	push	{r3, lr}
	serialEventRun();
 80a2e62:	f7ff ffcd 	bl	80a2e00 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a2e66:	f7ff f929 	bl	80a20bc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a2e6a:	4b01      	ldr	r3, [pc, #4]	; (80a2e70 <_post_loop+0x10>)
 80a2e6c:	6018      	str	r0, [r3, #0]
}
 80a2e6e:	bd08      	pop	{r3, pc}
 80a2e70:	2000090c 	.word	0x2000090c

080a2e74 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a2e74:	4805      	ldr	r0, [pc, #20]	; (80a2e8c <_Z33system_initialize_user_backup_ramv+0x18>)
 80a2e76:	4a06      	ldr	r2, [pc, #24]	; (80a2e90 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 80a2e78:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a2e7a:	1a12      	subs	r2, r2, r0
 80a2e7c:	4905      	ldr	r1, [pc, #20]	; (80a2e94 <_Z33system_initialize_user_backup_ramv+0x20>)
 80a2e7e:	f002 f871 	bl	80a4f64 <memcpy>
    __backup_sram_signature = signature;
 80a2e82:	4b05      	ldr	r3, [pc, #20]	; (80a2e98 <_Z33system_initialize_user_backup_ramv+0x24>)
 80a2e84:	4a05      	ldr	r2, [pc, #20]	; (80a2e9c <_Z33system_initialize_user_backup_ramv+0x28>)
 80a2e86:	601a      	str	r2, [r3, #0]
}
 80a2e88:	bd08      	pop	{r3, pc}
 80a2e8a:	bf00      	nop
 80a2e8c:	40024000 	.word	0x40024000
 80a2e90:	40024004 	.word	0x40024004
 80a2e94:	080a7ac8 	.word	0x080a7ac8
 80a2e98:	40024000 	.word	0x40024000
 80a2e9c:	9a271c1e 	.word	0x9a271c1e

080a2ea0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2ea0:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a2ea2:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2ea4:	461a      	mov	r2, r3
 80a2ea6:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2eaa:	9300      	str	r3, [sp, #0]
 80a2eac:	f7ff fa52 	bl	80a2354 <system_ctrl_set_result>
}
 80a2eb0:	b003      	add	sp, #12
 80a2eb2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a2eb8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a2eb8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a2eba:	8843      	ldrh	r3, [r0, #2]
 80a2ebc:	2b0a      	cmp	r3, #10
 80a2ebe:	d008      	beq.n	80a2ed2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a2ec0:	2b50      	cmp	r3, #80	; 0x50
 80a2ec2:	d10b      	bne.n	80a2edc <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a2ec4:	4b09      	ldr	r3, [pc, #36]	; (80a2eec <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a2ec6:	681b      	ldr	r3, [r3, #0]
 80a2ec8:	b14b      	cbz	r3, 80a2ede <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a2eca:	b003      	add	sp, #12
 80a2ecc:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a2ed0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a2ed2:	f7ff ffe5 	bl	80a2ea0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a2ed6:	b003      	add	sp, #12
 80a2ed8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2edc:	2300      	movs	r3, #0
 80a2ede:	461a      	mov	r2, r3
 80a2ee0:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2ee4:	9300      	str	r3, [sp, #0]
 80a2ee6:	f7ff fa35 	bl	80a2354 <system_ctrl_set_result>
}
 80a2eea:	e7f4      	b.n	80a2ed6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a2eec:	2000059c 	.word	0x2000059c

080a2ef0 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a2ef0:	2100      	movs	r1, #0
{
 80a2ef2:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a2ef4:	4811      	ldr	r0, [pc, #68]	; (80a2f3c <module_user_init_hook+0x4c>)
 80a2ef6:	f7ff fb4f 	bl	80a2598 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 80a2efa:	4b11      	ldr	r3, [pc, #68]	; (80a2f40 <module_user_init_hook+0x50>)
 80a2efc:	681a      	ldr	r2, [r3, #0]
 80a2efe:	4b11      	ldr	r3, [pc, #68]	; (80a2f44 <module_user_init_hook+0x54>)
 80a2f00:	429a      	cmp	r2, r3
 80a2f02:	bf0c      	ite	eq
 80a2f04:	2201      	moveq	r2, #1
 80a2f06:	2200      	movne	r2, #0
 80a2f08:	4b0f      	ldr	r3, [pc, #60]	; (80a2f48 <module_user_init_hook+0x58>)
 80a2f0a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a2f0c:	d001      	beq.n	80a2f12 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 80a2f0e:	f7ff ffb1 	bl	80a2e74 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a2f12:	f7ff f8cb 	bl	80a20ac <HAL_RNG_GetRandomNumber>
 80a2f16:	4604      	mov	r4, r0
    srand(seed);
 80a2f18:	f002 faac 	bl	80a5474 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a2f1c:	4b0b      	ldr	r3, [pc, #44]	; (80a2f4c <module_user_init_hook+0x5c>)
 80a2f1e:	b113      	cbz	r3, 80a2f26 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 80a2f20:	4620      	mov	r0, r4
 80a2f22:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a2f26:	2100      	movs	r1, #0
 80a2f28:	4808      	ldr	r0, [pc, #32]	; (80a2f4c <module_user_init_hook+0x5c>)
 80a2f2a:	f7ff fac5 	bl	80a24b8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a2f2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a2f32:	2100      	movs	r1, #0
 80a2f34:	4806      	ldr	r0, [pc, #24]	; (80a2f50 <module_user_init_hook+0x60>)
 80a2f36:	f7ff ba03 	b.w	80a2340 <system_ctrl_set_app_request_handler>
 80a2f3a:	bf00      	nop
 80a2f3c:	080a2df5 	.word	0x080a2df5
 80a2f40:	40024000 	.word	0x40024000
 80a2f44:	9a271c1e 	.word	0x9a271c1e
 80a2f48:	20000598 	.word	0x20000598
 80a2f4c:	00000000 	.word	0x00000000
 80a2f50:	080a2eb9 	.word	0x080a2eb9

080a2f54 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a2f54:	4770      	bx	lr

080a2f56 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 80a2f56:	2000      	movs	r0, #0
 80a2f58:	4770      	bx	lr

080a2f5a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a2f5a:	b510      	push	{r4, lr}
 80a2f5c:	4604      	mov	r4, r0
 80a2f5e:	2110      	movs	r1, #16
 80a2f60:	f7fd f89d 	bl	80a009e <_ZdlPvj>
 80a2f64:	4620      	mov	r0, r4
 80a2f66:	bd10      	pop	{r4, pc}

080a2f68 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80a2f68:	b508      	push	{r3, lr}
      { delete this; }
 80a2f6a:	f7ff fff6 	bl	80a2f5a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a2f6e:	bd08      	pop	{r3, pc}

080a2f70 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a2f70:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a2f72:	b530      	push	{r4, r5, lr}
        type_(type) {
 80a2f74:	f64f 749c 	movw	r4, #65436	; 0xff9c
 80a2f78:	6002      	str	r2, [r0, #0]
 80a2f7a:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a2f7c:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2f7e:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a2f80:	680c      	ldr	r4, [r1, #0]
 80a2f82:	8085      	strh	r5, [r0, #4]
 80a2f84:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2f86:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a2f88:	bd30      	pop	{r4, r5, pc}

080a2f8a <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a2f8a:	b510      	push	{r4, lr}
 80a2f8c:	4604      	mov	r4, r0
    free((void*)msg_);
 80a2f8e:	6800      	ldr	r0, [r0, #0]
 80a2f90:	f7ff faa2 	bl	80a24d8 <free>
}
 80a2f94:	4620      	mov	r0, r4
 80a2f96:	bd10      	pop	{r4, pc}

080a2f98 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 80a2f98:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a2f9a:	68c4      	ldr	r4, [r0, #12]
 80a2f9c:	b1f4      	cbz	r4, 80a2fdc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 80a2f9e:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a2fa0:	2b02      	cmp	r3, #2
 80a2fa2:	d103      	bne.n	80a2fac <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a2fa4:	f104 000c 	add.w	r0, r4, #12
 80a2fa8:	f7ff ffef 	bl	80a2f8a <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 80a2fac:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
 80a2fae:	b135      	cbz	r5, 80a2fbe <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
 80a2fb0:	4628      	mov	r0, r5
 80a2fb2:	f7fd f8ed 	bl	80a0190 <_ZNSt14_Function_baseD1Ev>
 80a2fb6:	2110      	movs	r1, #16
 80a2fb8:	4628      	mov	r0, r5
 80a2fba:	f7fd f870 	bl	80a009e <_ZdlPvj>
 80a2fbe:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a2fc0:	b135      	cbz	r5, 80a2fd0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a2fc2:	4628      	mov	r0, r5
 80a2fc4:	f7fd f8e4 	bl	80a0190 <_ZNSt14_Function_baseD1Ev>
 80a2fc8:	2110      	movs	r1, #16
 80a2fca:	4628      	mov	r0, r5
 80a2fcc:	f7fd f867 	bl	80a009e <_ZdlPvj>
 80a2fd0:	4620      	mov	r0, r4
 80a2fd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a2fd6:	2114      	movs	r1, #20
 80a2fd8:	f7fd b861 	b.w	80a009e <_ZdlPvj>
 80a2fdc:	bd38      	pop	{r3, r4, r5, pc}

080a2fde <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 80a2fde:	b510      	push	{r4, lr}
 80a2fe0:	b088      	sub	sp, #32
 80a2fe2:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a2fe4:	4668      	mov	r0, sp
 80a2fe6:	f7ff fb5b 	bl	80a26a0 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 80a2fea:	4669      	mov	r1, sp
 80a2fec:	a804      	add	r0, sp, #16
 80a2fee:	f7ff fb96 	bl	80a271e <_ZN6StringC1ERKS_>
 80a2ff2:	a804      	add	r0, sp, #16
 80a2ff4:	47a0      	blx	r4
 80a2ff6:	4604      	mov	r4, r0
 80a2ff8:	a804      	add	r0, sp, #16
 80a2ffa:	f7ff fb07 	bl	80a260c <_ZN6StringD1Ev>
    String p(param);
 80a2ffe:	4668      	mov	r0, sp
 80a3000:	f7ff fb04 	bl	80a260c <_ZN6StringD1Ev>
}
 80a3004:	4620      	mov	r0, r4
 80a3006:	b008      	add	sp, #32
 80a3008:	bd10      	pop	{r4, pc}

080a300a <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_>:
    user_std_function_int_str_t* fn = (user_std_function_int_str_t*)(data);
    return (*fn)(String(param));
}

void CloudClass::call_wiring_event_handler(const void* handler_data, const char *event_name, const char *data)
{
 80a300a:	b507      	push	{r0, r1, r2, lr}
 80a300c:	e9cd 1200 	strd	r1, r2, [sp]
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a3010:	6882      	ldr	r2, [r0, #8]
 80a3012:	b90a      	cbnz	r2, 80a3018 <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_+0xe>
	__throw_bad_function_call();
 80a3014:	f000 fe1e 	bl	80a3c54 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a3018:	4669      	mov	r1, sp
 80a301a:	68c3      	ldr	r3, [r0, #12]
 80a301c:	aa01      	add	r2, sp, #4
 80a301e:	4798      	blx	r3
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}
 80a3020:	b003      	add	sp, #12
 80a3022:	f85d fb04 	ldr.w	pc, [sp], #4

080a3026 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 80a3026:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 80a3028:	2300      	movs	r3, #0
         size = sizeof(*this);
 80a302a:	2410      	movs	r4, #16
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
 80a302c:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
 80a3030:	9201      	str	r2, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a3032:	4669      	mov	r1, sp
 80a3034:	461a      	mov	r2, r3
 80a3036:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
 80a3038:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
 80a303c:	f8ad 4000 	strh.w	r4, [sp]
 80a3040:	f7ff f9fa 	bl	80a2438 <spark_function>
}
 80a3044:	b004      	add	sp, #16
 80a3046:	bd10      	pop	{r4, pc}

080a3048 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a3048:	680b      	ldr	r3, [r1, #0]
 80a304a:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 80a304c:	684b      	ldr	r3, [r1, #4]
 80a304e:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 80a3050:	b113      	cbz	r3, 80a3058 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
 80a3052:	685a      	ldr	r2, [r3, #4]
 80a3054:	3201      	adds	r2, #1
 80a3056:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a3058:	4770      	bx	lr

080a305a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a305a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a305c:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 80a305e:	4668      	mov	r0, sp
 80a3060:	460d      	mov	r5, r1
 80a3062:	f7ff fff1 	bl	80a3048 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a3066:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a3068:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a306a:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 80a306c:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a306e:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 80a3070:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 80a3072:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a3074:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 80a3076:	f7fd f977 	bl	80a0368 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 80a307a:	b135      	cbz	r5, 80a308a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
 80a307c:	1d28      	adds	r0, r5, #4
 80a307e:	f7fd f973 	bl	80a0368 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a3082:	2108      	movs	r1, #8
 80a3084:	4628      	mov	r0, r5
 80a3086:	f7fd f80a 	bl	80a009e <_ZdlPvj>
        return p;
    }
 80a308a:	4620      	mov	r0, r4
 80a308c:	b003      	add	sp, #12
 80a308e:	bd30      	pop	{r4, r5, pc}

080a3090 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
 80a3090:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a3092:	b510      	push	{r4, lr}
      if (_M_empty())
 80a3094:	b90a      	cbnz	r2, 80a309a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a3096:	f000 fddd 	bl	80a3c54 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a309a:	68c3      	ldr	r3, [r0, #12]
    }
 80a309c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a30a0:	4718      	bx	r3

080a30a2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a30a2:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a30a4:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80a30a6:	f100 0110 	add.w	r1, r0, #16
 80a30aa:	f7ff fff1 	bl	80a3090 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 80a30ae:	bd08      	pop	{r3, pc}

080a30b0 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 80a30b0:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a30b2:	b510      	push	{r4, lr}
      if (_M_empty())
 80a30b4:	b90a      	cbnz	r2, 80a30ba <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a30b6:	f000 fdcd 	bl	80a3c54 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a30ba:	68c3      	ldr	r3, [r0, #12]
    }
 80a30bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a30c0:	4718      	bx	r3

080a30c2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a30c2:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a30c4:	6800      	ldr	r0, [r0, #0]
 80a30c6:	f100 0110 	add.w	r1, r0, #16
 80a30ca:	f7ff fff1 	bl	80a30b0 <_ZNKSt8functionIFvRKbEEclES1_>
      }
 80a30ce:	bd08      	pop	{r3, pc}

080a30d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 80a30d0:	b538      	push	{r3, r4, r5, lr}
 80a30d2:	2300      	movs	r3, #0
 80a30d4:	4604      	mov	r4, r0
 80a30d6:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a30d8:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 80a30da:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a30dc:	f7fc ffdb 	bl	80a0096 <_Znwj>
 80a30e0:	b128      	cbz	r0, 80a30ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 80a30e2:	2301      	movs	r3, #1
 80a30e4:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 80a30e8:	4b02      	ldr	r3, [pc, #8]	; (80a30f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a30ea:	60c5      	str	r5, [r0, #12]
 80a30ec:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a30ee:	6020      	str	r0, [r4, #0]
	}
 80a30f0:	4620      	mov	r0, r4
 80a30f2:	bd38      	pop	{r3, r4, r5, pc}
 80a30f4:	080a73f4 	.word	0x080a73f4

080a30f8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 80a30f8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a30fa:	2300      	movs	r3, #0
 80a30fc:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 80a30fe:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a3100:	4604      	mov	r4, r0
 80a3102:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a3104:	b12b      	cbz	r3, 80a3112 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a3106:	2202      	movs	r2, #2
 80a3108:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a310a:	68eb      	ldr	r3, [r5, #12]
 80a310c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a310e:	68ab      	ldr	r3, [r5, #8]
 80a3110:	60a3      	str	r3, [r4, #8]
    }
 80a3112:	4620      	mov	r0, r4
 80a3114:	bd38      	pop	{r3, r4, r5, pc}
	...

080a3118 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 80a3118:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a311a:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
 80a311c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a311e:	4668      	mov	r0, sp
 80a3120:	f7ff ff26 	bl	80a2f70 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a3124:	f04f 0302 	mov.w	r3, #2
 80a3128:	e8d4 2f4f 	ldrexb	r2, [r4]
 80a312c:	2a00      	cmp	r2, #0
 80a312e:	d103      	bne.n	80a3138 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 80a3130:	e8c4 3f41 	strexb	r1, r3, [r4]
 80a3134:	2900      	cmp	r1, #0
 80a3136:	d1f7      	bne.n	80a3128 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 80a3138:	d125      	bne.n	80a3186 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
 80a313a:	f104 050c 	add.w	r5, r4, #12
 80a313e:	4669      	mov	r1, sp
 80a3140:	4628      	mov	r0, r5
 80a3142:	f7ff ff15 	bl	80a2f70 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 80a3146:	2301      	movs	r3, #1
 80a3148:	f3bf 8f5b 	dmb	ish
 80a314c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a314e:	2000      	movs	r0, #0
 80a3150:	f3bf 8f5b 	dmb	ish
 80a3154:	f104 0308 	add.w	r3, r4, #8
 80a3158:	e853 6f00 	ldrex	r6, [r3]
 80a315c:	e843 0200 	strex	r2, r0, [r3]
 80a3160:	2a00      	cmp	r2, #0
 80a3162:	d1f9      	bne.n	80a3158 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
 80a3164:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a3168:	b16e      	cbz	r6, 80a3186 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
 80a316a:	f7ff f8d1 	bl	80a2310 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a316e:	b178      	cbz	r0, 80a3190 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a3170:	4629      	mov	r1, r5
 80a3172:	4630      	mov	r0, r6
 80a3174:	f7ff ff8c 	bl	80a3090 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 80a3178:	4630      	mov	r0, r6
 80a317a:	f7fd f809 	bl	80a0190 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a317e:	2110      	movs	r1, #16
 80a3180:	4630      	mov	r0, r6
 80a3182:	f7fc ff8c 	bl	80a009e <_ZdlPvj>
        p_->setError(std::move(error));
 80a3186:	4668      	mov	r0, sp
 80a3188:	f7ff feff 	bl	80a2f8a <_ZN8particle5ErrorD1Ev>
    }
 80a318c:	b009      	add	sp, #36	; 0x24
 80a318e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a3190:	4631      	mov	r1, r6
 80a3192:	a802      	add	r0, sp, #8
 80a3194:	f7ff ffb0 	bl	80a30f8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a3198:	68e0      	ldr	r0, [r4, #12]
 80a319a:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a319e:	b108      	cbz	r0, 80a31a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
 80a31a0:	f002 f9b6 	bl	80a5510 <strdup>
        type_(type) {
 80a31a4:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a31a6:	2010      	movs	r0, #16
 80a31a8:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a31ac:	f7fc ff73 	bl	80a0096 <_Znwj>
 80a31b0:	4605      	mov	r5, r0
 80a31b2:	b1e8      	cbz	r0, 80a31f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
 80a31b4:	2700      	movs	r7, #0
 80a31b6:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a31b8:	2018      	movs	r0, #24
 80a31ba:	f7fc ff6c 	bl	80a0096 <_Znwj>
 80a31be:	4604      	mov	r4, r0
 80a31c0:	b188      	cbz	r0, 80a31e6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
 80a31c2:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a31c4:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a31c6:	a802      	add	r0, sp, #8
 80a31c8:	f7ff fdfd 	bl	80a2dc6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a31cc:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a31ce:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a31d0:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a31d2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a31d4:	9204      	str	r2, [sp, #16]
 80a31d6:	68e2      	ldr	r2, [r4, #12]
 80a31d8:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a31da:	60e3      	str	r3, [r4, #12]
 80a31dc:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 80a31e0:	9205      	str	r2, [sp, #20]
 80a31e2:	f7ff fec5 	bl	80a2f70 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 80a31e6:	4b08      	ldr	r3, [pc, #32]	; (80a3208 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a31e8:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a31ea:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a31ec:	4b07      	ldr	r3, [pc, #28]	; (80a320c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
 80a31ee:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 80a31f0:	a806      	add	r0, sp, #24
 80a31f2:	f7ff feca 	bl	80a2f8a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a31f6:	a802      	add	r0, sp, #8
 80a31f8:	f7fc ffca 	bl	80a0190 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a31fc:	2200      	movs	r2, #0
 80a31fe:	4629      	mov	r1, r5
 80a3200:	4803      	ldr	r0, [pc, #12]	; (80a3210 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
 80a3202:	f7ff f88d 	bl	80a2320 <application_thread_invoke>
 80a3206:	e7b7      	b.n	80a3178 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
 80a3208:	080a30a3 	.word	0x080a30a3
 80a320c:	080a332d 	.word	0x080a332d
 80a3210:	080a37e9 	.word	0x080a37e9

080a3214 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a3214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a3218:	b08a      	sub	sp, #40	; 0x28
 80a321a:	4605      	mov	r5, r0
 80a321c:	460c      	mov	r4, r1
 80a321e:	4617      	mov	r7, r2
 80a3220:	4698      	mov	r8, r3
 80a3222:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a3226:	f7ff f917 	bl	80a2458 <spark_cloud_flag_connected>
 80a322a:	ae07      	add	r6, sp, #28
    if (!connected()) {
 80a322c:	4682      	mov	sl, r0
 80a322e:	bb38      	cbnz	r0, 80a3280 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 80a3230:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a3234:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a3236:	a905      	add	r1, sp, #20
 80a3238:	4630      	mov	r0, r6
 80a323a:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a323e:	f7ff fe97 	bl	80a2f70 <_ZN8particle5ErrorC1EOS0_>
 80a3242:	2014      	movs	r0, #20
 80a3244:	f7fc ff27 	bl	80a0096 <_Znwj>
 80a3248:	4604      	mov	r4, r0
 80a324a:	b148      	cbz	r0, 80a3260 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a324c:	2302      	movs	r3, #2
 80a324e:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a3250:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a3252:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a3256:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 80a3258:	4631      	mov	r1, r6
 80a325a:	300c      	adds	r0, #12
 80a325c:	f7ff fe88 	bl	80a2f70 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a3260:	4628      	mov	r0, r5
	: __shared_count(__p)
 80a3262:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a3264:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 80a3268:	f7ff ff32 	bl	80a30d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a326c:	4630      	mov	r0, r6
 80a326e:	f7ff fe8c 	bl	80a2f8a <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a3272:	a805      	add	r0, sp, #20
 80a3274:	f7ff fe89 	bl	80a2f8a <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
 80a3278:	4628      	mov	r0, r5
 80a327a:	b00a      	add	sp, #40	; 0x28
 80a327c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d.size = sizeof(spark_send_event_data);
 80a3280:	230c      	movs	r3, #12
    spark_send_event_data d = {};
 80a3282:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a3286:	2014      	movs	r0, #20
 80a3288:	e9cd aa08 	strd	sl, sl, [sp, #32]
    d.size = sizeof(spark_send_event_data);
 80a328c:	9307      	str	r3, [sp, #28]
 80a328e:	f7fc ff02 	bl	80a0096 <_Znwj>
 80a3292:	4601      	mov	r1, r0
 80a3294:	b128      	cbz	r0, 80a32a2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a3296:	e9c0 aa01 	strd	sl, sl, [r0, #4]
 80a329a:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a329e:	f880 a001 	strb.w	sl, [r0, #1]
 80a32a2:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a32a4:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 80a32a6:	f7ff ff13 	bl	80a30d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 80a32aa:	4b1f      	ldr	r3, [pc, #124]	; (80a3328 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x114>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a32ac:	2008      	movs	r0, #8
 80a32ae:	9308      	str	r3, [sp, #32]
 80a32b0:	f7fc fef1 	bl	80a0096 <_Znwj>
 80a32b4:	4682      	mov	sl, r0
 80a32b6:	b110      	cbz	r0, 80a32be <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xaa>
 80a32b8:	a903      	add	r1, sp, #12
 80a32ba:	f7ff fec5 	bl	80a3048 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a32be:	4642      	mov	r2, r8
 80a32c0:	4639      	mov	r1, r7
 80a32c2:	4620      	mov	r0, r4
 80a32c4:	9600      	str	r6, [sp, #0]
 80a32c6:	fa5f f389 	uxtb.w	r3, r9
    d.handler_data = p.dataPtr();
 80a32ca:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a32ce:	f7ff f8d3 	bl	80a2478 <spark_send_event>
 80a32d2:	b9b8      	cbnz	r0, 80a3304 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf0>
	return __atomic_load_n(&_M_i, int(__m));
 80a32d4:	9b03      	ldr	r3, [sp, #12]
 80a32d6:	785b      	ldrb	r3, [r3, #1]
 80a32d8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a32dc:	b993      	cbnz	r3, 80a3304 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf0>
 80a32de:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 80a32e2:	a905      	add	r1, sp, #20
 80a32e4:	a803      	add	r0, sp, #12
 80a32e6:	9205      	str	r2, [sp, #20]
 80a32e8:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a32ec:	f7ff ff14 	bl	80a3118 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a32f0:	a805      	add	r0, sp, #20
 80a32f2:	f7ff fe4a 	bl	80a2f8a <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a32f6:	a805      	add	r0, sp, #20
 80a32f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a32fa:	f7ff feae 	bl	80a305a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 80a32fe:	a806      	add	r0, sp, #24
 80a3300:	f7fd f832 	bl	80a0368 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a3304:	a903      	add	r1, sp, #12
 80a3306:	a805      	add	r0, sp, #20
 80a3308:	f7ff fe9e 	bl	80a3048 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a330c:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a330e:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a3310:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 80a3312:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a3314:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 80a3316:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 80a3318:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 80a331a:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 80a331c:	f7fd f824 	bl	80a0368 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a3320:	a804      	add	r0, sp, #16
 80a3322:	f7fd f821 	bl	80a0368 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 80a3326:	e7a7      	b.n	80a3278 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 80a3328:	080a33a9 	.word	0x080a33a9

080a332c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
 80a332c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80a332e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3330:	4605      	mov	r5, r0
	switch (__op)
 80a3332:	d103      	bne.n	80a333c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 80a3334:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80a3336:	6003      	str	r3, [r0, #0]
      }
 80a3338:	2000      	movs	r0, #0
 80a333a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
 80a333c:	2a02      	cmp	r2, #2
 80a333e:	d010      	beq.n	80a3362 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 80a3340:	2a03      	cmp	r2, #3
 80a3342:	d1f9      	bne.n	80a3338 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 80a3344:	6804      	ldr	r4, [r0, #0]
 80a3346:	2c00      	cmp	r4, #0
 80a3348:	d0f6      	beq.n	80a3338 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
 80a334a:	f104 0010 	add.w	r0, r4, #16
 80a334e:	f7ff fe1c 	bl	80a2f8a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a3352:	4620      	mov	r0, r4
 80a3354:	f7fc ff1c 	bl	80a0190 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a3358:	2118      	movs	r1, #24
 80a335a:	4620      	mov	r0, r4
 80a335c:	f7fc fe9f 	bl	80a009e <_ZdlPvj>
 80a3360:	e7ea      	b.n	80a3338 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 80a3362:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 80a3364:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a3366:	f7fc fe96 	bl	80a0096 <_Znwj>
 80a336a:	4604      	mov	r4, r0
 80a336c:	b150      	cbz	r0, 80a3384 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
      _Bind(const _Bind&) = default;
 80a336e:	4631      	mov	r1, r6
 80a3370:	f7ff fec2 	bl	80a30f8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a3374:	6930      	ldr	r0, [r6, #16]
 80a3376:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a337a:	b108      	cbz	r0, 80a3380 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
 80a337c:	f002 f8c8 	bl	80a5510 <strdup>
        type_(type) {
 80a3380:	6120      	str	r0, [r4, #16]
 80a3382:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 80a3384:	602c      	str	r4, [r5, #0]
	}
 80a3386:	e7d7      	b.n	80a3338 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

080a3388 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 80a3388:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a338a:	2300      	movs	r3, #0
 80a338c:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 80a338e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a3390:	4604      	mov	r4, r0
 80a3392:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a3394:	b12b      	cbz	r3, 80a33a2 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a3396:	2202      	movs	r2, #2
 80a3398:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a339a:	68eb      	ldr	r3, [r5, #12]
 80a339c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a339e:	68ab      	ldr	r3, [r5, #8]
 80a33a0:	60a3      	str	r3, [r4, #8]
    }
 80a33a2:	4620      	mov	r0, r4
 80a33a4:	bd38      	pop	{r3, r4, r5, pc}
	...

080a33a8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a33a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a33aa:	4604      	mov	r4, r0
 80a33ac:	b089      	sub	sp, #36	; 0x24
 80a33ae:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a33b0:	a801      	add	r0, sp, #4
 80a33b2:	4611      	mov	r1, r2
 80a33b4:	f7ff fe51 	bl	80a305a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a33b8:	b1a4      	cbz	r4, 80a33e4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a33ba:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a33bc:	b11d      	cbz	r5, 80a33c6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 80a33be:	4628      	mov	r0, r5
 80a33c0:	f002 f8a6 	bl	80a5510 <strdup>
 80a33c4:	4605      	mov	r5, r0
 80a33c6:	a801      	add	r0, sp, #4
 80a33c8:	a903      	add	r1, sp, #12
        type_(type) {
 80a33ca:	9503      	str	r5, [sp, #12]
 80a33cc:	f8ad 4010 	strh.w	r4, [sp, #16]
 80a33d0:	f7ff fea2 	bl	80a3118 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a33d4:	a803      	add	r0, sp, #12
 80a33d6:	f7ff fdd8 	bl	80a2f8a <_ZN8particle5ErrorD1Ev>
 80a33da:	a802      	add	r0, sp, #8
 80a33dc:	f7fc ffc4 	bl	80a0368 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a33e0:	b009      	add	sp, #36	; 0x24
 80a33e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a33e4:	2301      	movs	r3, #1
      { return _M_ptr; }
 80a33e6:	9d01      	ldr	r5, [sp, #4]
 80a33e8:	e8d5 2f4f 	ldrexb	r2, [r5]
 80a33ec:	2a00      	cmp	r2, #0
 80a33ee:	d103      	bne.n	80a33f8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 80a33f0:	e8c5 3f41 	strexb	r1, r3, [r5]
 80a33f4:	2900      	cmp	r1, #0
 80a33f6:	d1f7      	bne.n	80a33e8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 80a33f8:	d1ef      	bne.n	80a33da <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 80a33fa:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 80a33fc:	f3bf 8f5b 	dmb	ish
 80a3400:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a3402:	f3bf 8f5b 	dmb	ish
 80a3406:	1d2b      	adds	r3, r5, #4
 80a3408:	e853 6f00 	ldrex	r6, [r3]
 80a340c:	e843 4200 	strex	r2, r4, [r3]
 80a3410:	2a00      	cmp	r2, #0
 80a3412:	d1f9      	bne.n	80a3408 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
 80a3414:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a3418:	2e00      	cmp	r6, #0
 80a341a:	d0de      	beq.n	80a33da <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 80a341c:	4620      	mov	r0, r4
 80a341e:	f7fe ff77 	bl	80a2310 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a3422:	4607      	mov	r7, r0
 80a3424:	b160      	cbz	r0, 80a3440 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a3426:	4630      	mov	r0, r6
 80a3428:	f105 010c 	add.w	r1, r5, #12
 80a342c:	f7ff fe40 	bl	80a30b0 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 80a3430:	4630      	mov	r0, r6
 80a3432:	f7fc fead 	bl	80a0190 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a3436:	2110      	movs	r1, #16
 80a3438:	4630      	mov	r0, r6
 80a343a:	f7fc fe30 	bl	80a009e <_ZdlPvj>
 80a343e:	e7cc      	b.n	80a33da <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a3440:	4631      	mov	r1, r6
 80a3442:	a803      	add	r0, sp, #12
 80a3444:	f7ff ffa0 	bl	80a3388 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a3448:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a344a:	2010      	movs	r0, #16
 80a344c:	f88d 301c 	strb.w	r3, [sp, #28]
 80a3450:	f7fc fe21 	bl	80a0096 <_Znwj>
 80a3454:	4605      	mov	r5, r0
 80a3456:	b1d0      	cbz	r0, 80a348e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
 80a3458:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a345a:	2014      	movs	r0, #20
 80a345c:	f7fc fe1b 	bl	80a0096 <_Znwj>
 80a3460:	4604      	mov	r4, r0
 80a3462:	b178      	cbz	r0, 80a3484 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
	std::swap(_M_functor, __x._M_functor);
 80a3464:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a3466:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a3468:	a803      	add	r0, sp, #12
 80a346a:	f7ff fcac 	bl	80a2dc6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a346e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a3470:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a3472:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a3474:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 80a3476:	9205      	str	r2, [sp, #20]
 80a3478:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a347a:	60e3      	str	r3, [r4, #12]
 80a347c:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 80a3480:	9206      	str	r2, [sp, #24]
 80a3482:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 80a3484:	4b06      	ldr	r3, [pc, #24]	; (80a34a0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a3486:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a3488:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a348a:	4b06      	ldr	r3, [pc, #24]	; (80a34a4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 80a348c:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 80a348e:	a803      	add	r0, sp, #12
 80a3490:	f7fc fe7e 	bl	80a0190 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a3494:	2200      	movs	r2, #0
 80a3496:	4629      	mov	r1, r5
 80a3498:	4803      	ldr	r0, [pc, #12]	; (80a34a8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
 80a349a:	f7fe ff41 	bl	80a2320 <application_thread_invoke>
 80a349e:	e7c7      	b.n	80a3430 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
 80a34a0:	080a30c3 	.word	0x080a30c3
 80a34a4:	080a34ad 	.word	0x080a34ad
 80a34a8:	080a37e9 	.word	0x080a37e9

080a34ac <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
 80a34ac:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80a34ae:	b570      	push	{r4, r5, r6, lr}
 80a34b0:	4604      	mov	r4, r0
	switch (__op)
 80a34b2:	d103      	bne.n	80a34bc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 80a34b4:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80a34b6:	6003      	str	r3, [r0, #0]
      }
 80a34b8:	2000      	movs	r0, #0
 80a34ba:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
 80a34bc:	2a02      	cmp	r2, #2
 80a34be:	d00c      	beq.n	80a34da <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 80a34c0:	2a03      	cmp	r2, #3
 80a34c2:	d1f9      	bne.n	80a34b8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 80a34c4:	6804      	ldr	r4, [r0, #0]
 80a34c6:	2c00      	cmp	r4, #0
 80a34c8:	d0f6      	beq.n	80a34b8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
 80a34ca:	4620      	mov	r0, r4
 80a34cc:	f7fc fe60 	bl	80a0190 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a34d0:	2114      	movs	r1, #20
 80a34d2:	4620      	mov	r0, r4
 80a34d4:	f7fc fde3 	bl	80a009e <_ZdlPvj>
 80a34d8:	e7ee      	b.n	80a34b8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 80a34da:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 80a34dc:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a34de:	f7fc fdda 	bl	80a0096 <_Znwj>
 80a34e2:	4605      	mov	r5, r0
 80a34e4:	b120      	cbz	r0, 80a34f0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
 80a34e6:	4631      	mov	r1, r6
 80a34e8:	f7ff ff4e 	bl	80a3388 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a34ec:	7c33      	ldrb	r3, [r6, #16]
 80a34ee:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 80a34f0:	6025      	str	r5, [r4, #0]
	}
 80a34f2:	e7e1      	b.n	80a34b8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

080a34f4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a34f4:	4770      	bx	lr

080a34f6 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a34f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a34f8:	460e      	mov	r6, r1
 80a34fa:	2400      	movs	r4, #0
 80a34fc:	f100 0708 	add.w	r7, r0, #8
 80a3500:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a3502:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a3506:	220a      	movs	r2, #10
 80a3508:	4630      	mov	r0, r6
 80a350a:	f7ff fa64 	bl	80a29d6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a350e:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a3510:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a3512:	d101      	bne.n	80a3518 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a3514:	4620      	mov	r0, r4
 80a3516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a3518:	2c00      	cmp	r4, #0
 80a351a:	d0f2      	beq.n	80a3502 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a351c:	212e      	movs	r1, #46	; 0x2e
 80a351e:	4630      	mov	r0, r6
 80a3520:	f7ff fa40 	bl	80a29a4 <_ZN5Print5printEc>
 80a3524:	4404      	add	r4, r0
 80a3526:	e7ec      	b.n	80a3502 <_ZNK9IPAddress7printToER5Print+0xc>

080a3528 <_ZN9IPAddressD0Ev>:
 80a3528:	b510      	push	{r4, lr}
 80a352a:	4604      	mov	r4, r0
 80a352c:	2118      	movs	r1, #24
 80a352e:	f7fc fdb6 	bl	80a009e <_ZdlPvj>
 80a3532:	4620      	mov	r0, r4
 80a3534:	bd10      	pop	{r4, pc}
	...

080a3538 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a3538:	b510      	push	{r4, lr}
 80a353a:	4604      	mov	r4, r0
 80a353c:	4b04      	ldr	r3, [pc, #16]	; (80a3550 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a353e:	2211      	movs	r2, #17
 80a3540:	2100      	movs	r1, #0
 80a3542:	f840 3b04 	str.w	r3, [r0], #4
 80a3546:	f001 fd1b 	bl	80a4f80 <memset>
}
 80a354a:	4620      	mov	r0, r4
 80a354c:	bd10      	pop	{r4, pc}
 80a354e:	bf00      	nop
 80a3550:	080a7410 	.word	0x080a7410

080a3554 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a3554:	4603      	mov	r3, r0
 80a3556:	4a07      	ldr	r2, [pc, #28]	; (80a3574 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a3558:	b510      	push	{r4, lr}
 80a355a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a355e:	f101 0210 	add.w	r2, r1, #16
 80a3562:	f851 4b04 	ldr.w	r4, [r1], #4
 80a3566:	4291      	cmp	r1, r2
 80a3568:	f843 4b04 	str.w	r4, [r3], #4
 80a356c:	d1f9      	bne.n	80a3562 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a356e:	780a      	ldrb	r2, [r1, #0]
 80a3570:	701a      	strb	r2, [r3, #0]
}
 80a3572:	bd10      	pop	{r4, pc}
 80a3574:	080a7410 	.word	0x080a7410

080a3578 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t addr)
 80a3578:	4a02      	ldr	r2, [pc, #8]	; (80a3584 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = addr;
 80a357a:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a357e:	2204      	movs	r2, #4
 80a3580:	7502      	strb	r2, [r0, #20]
}
 80a3582:	4770      	bx	lr
 80a3584:	080a7410 	.word	0x080a7410

080a3588 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a3588:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a358a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a358e:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a3592:	2304      	movs	r3, #4
 80a3594:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a3598:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a359c:	6044      	str	r4, [r0, #4]
 80a359e:	7503      	strb	r3, [r0, #20]
}
 80a35a0:	bd10      	pop	{r4, pc}
	...

080a35a4 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a35a4:	b513      	push	{r0, r1, r4, lr}
 80a35a6:	4c04      	ldr	r4, [pc, #16]	; (80a35b8 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a35a8:	6004      	str	r4, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a35aa:	f89d 4010 	ldrb.w	r4, [sp, #16]
 80a35ae:	9400      	str	r4, [sp, #0]
 80a35b0:	f7ff ffea 	bl	80a3588 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a35b4:	b002      	add	sp, #8
 80a35b6:	bd10      	pop	{r4, pc}
 80a35b8:	080a7410 	.word	0x080a7410

080a35bc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a35bc:	7441      	strb	r1, [r0, #17]
}
 80a35be:	4770      	bx	lr

080a35c0 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a35c0:	4770      	bx	lr

080a35c2 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a35c2:	4770      	bx	lr

080a35c4 <_ZN9USBSerial4readEv>:
{
 80a35c4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a35c6:	2100      	movs	r1, #0
 80a35c8:	7c00      	ldrb	r0, [r0, #16]
 80a35ca:	f7fe fe61 	bl	80a2290 <HAL_USB_USART_Receive_Data>
}
 80a35ce:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a35d2:	bd08      	pop	{r3, pc}

080a35d4 <_ZN9USBSerial4peekEv>:
{
 80a35d4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a35d6:	2101      	movs	r1, #1
 80a35d8:	7c00      	ldrb	r0, [r0, #16]
 80a35da:	f7fe fe59 	bl	80a2290 <HAL_USB_USART_Receive_Data>
}
 80a35de:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a35e2:	bd08      	pop	{r3, pc}

080a35e4 <_ZN9USBSerial17availableForWriteEv>:
{
 80a35e4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a35e6:	7c00      	ldrb	r0, [r0, #16]
 80a35e8:	f7fe fe4a 	bl	80a2280 <HAL_USB_USART_Available_Data_For_Write>
}
 80a35ec:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a35f0:	bd08      	pop	{r3, pc}

080a35f2 <_ZN9USBSerial9availableEv>:
{
 80a35f2:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a35f4:	7c00      	ldrb	r0, [r0, #16]
 80a35f6:	f7fe fe3b 	bl	80a2270 <HAL_USB_USART_Available_Data>
}
 80a35fa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a35fe:	bd08      	pop	{r3, pc}

080a3600 <_ZN9USBSerial5writeEh>:
{
 80a3600:	b538      	push	{r3, r4, r5, lr}
 80a3602:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a3604:	7c00      	ldrb	r0, [r0, #16]
{
 80a3606:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a3608:	f7fe fe3a 	bl	80a2280 <HAL_USB_USART_Available_Data_For_Write>
 80a360c:	2800      	cmp	r0, #0
 80a360e:	dc01      	bgt.n	80a3614 <_ZN9USBSerial5writeEh+0x14>
 80a3610:	7c60      	ldrb	r0, [r4, #17]
 80a3612:	b128      	cbz	r0, 80a3620 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a3614:	4629      	mov	r1, r5
 80a3616:	7c20      	ldrb	r0, [r4, #16]
 80a3618:	f7fe fe42 	bl	80a22a0 <HAL_USB_USART_Send_Data>
 80a361c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a3620:	bd38      	pop	{r3, r4, r5, pc}

080a3622 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a3622:	7c00      	ldrb	r0, [r0, #16]
 80a3624:	f7fe be44 	b.w	80a22b0 <HAL_USB_USART_Flush_Data>

080a3628 <_ZN9USBSerialD0Ev>:
 80a3628:	b510      	push	{r4, lr}
 80a362a:	4604      	mov	r4, r0
 80a362c:	2114      	movs	r1, #20
 80a362e:	f7fc fd36 	bl	80a009e <_ZdlPvj>
 80a3632:	4620      	mov	r0, r4
 80a3634:	bd10      	pop	{r4, pc}

080a3636 <__tcf_1>:
 80a3636:	4770      	bx	lr

080a3638 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a3638:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a363a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a363e:	4604      	mov	r4, r0
 80a3640:	4608      	mov	r0, r1
 80a3642:	2100      	movs	r1, #0
 80a3644:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a3648:	4b04      	ldr	r3, [pc, #16]	; (80a365c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a364a:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a364c:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a364e:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a3650:	4611      	mov	r1, r2
  _blocking = true;
 80a3652:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a3654:	f7fe fe04 	bl	80a2260 <HAL_USB_USART_Init>
}
 80a3658:	4620      	mov	r0, r4
 80a365a:	bd10      	pop	{r4, pc}
 80a365c:	080a7424 	.word	0x080a7424

080a3660 <_Z19acquireSerialBufferv>:
{
 80a3660:	b510      	push	{r4, lr}
 80a3662:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 80a3664:	2214      	movs	r2, #20
 80a3666:	2100      	movs	r1, #0
 80a3668:	f001 fc8a 	bl	80a4f80 <memset>
  conf.rx_buffer = serial_rx_buffer;
 80a366c:	4b05      	ldr	r3, [pc, #20]	; (80a3684 <_Z19acquireSerialBufferv+0x24>)
}
 80a366e:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a3670:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a3672:	4b05      	ldr	r3, [pc, #20]	; (80a3688 <_Z19acquireSerialBufferv+0x28>)
 80a3674:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a3676:	f240 1301 	movw	r3, #257	; 0x101
 80a367a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a367c:	2381      	movs	r3, #129	; 0x81
 80a367e:	8223      	strh	r3, [r4, #16]
}
 80a3680:	bd10      	pop	{r4, pc}
 80a3682:	bf00      	nop
 80a3684:	200005d0 	.word	0x200005d0
 80a3688:	200006d1 	.word	0x200006d1

080a368c <_Z16_fetch_usbserialv>:
{
 80a368c:	b530      	push	{r4, r5, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a368e:	4d0e      	ldr	r5, [pc, #56]	; (80a36c8 <_Z16_fetch_usbserialv+0x3c>)
{
 80a3690:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a3692:	a801      	add	r0, sp, #4
 80a3694:	f7ff ffe4 	bl	80a3660 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a3698:	7829      	ldrb	r1, [r5, #0]
 80a369a:	f3bf 8f5b 	dmb	ish
 80a369e:	f011 0401 	ands.w	r4, r1, #1
 80a36a2:	d10e      	bne.n	80a36c2 <_Z16_fetch_usbserialv+0x36>
 80a36a4:	4628      	mov	r0, r5
 80a36a6:	f7fc fcfc 	bl	80a00a2 <__cxa_guard_acquire>
 80a36aa:	b150      	cbz	r0, 80a36c2 <_Z16_fetch_usbserialv+0x36>
 80a36ac:	4621      	mov	r1, r4
 80a36ae:	aa01      	add	r2, sp, #4
 80a36b0:	4806      	ldr	r0, [pc, #24]	; (80a36cc <_Z16_fetch_usbserialv+0x40>)
 80a36b2:	f7ff ffc1 	bl	80a3638 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a36b6:	4628      	mov	r0, r5
 80a36b8:	f7fc fcf8 	bl	80a00ac <__cxa_guard_release>
 80a36bc:	4804      	ldr	r0, [pc, #16]	; (80a36d0 <_Z16_fetch_usbserialv+0x44>)
 80a36be:	f001 fb55 	bl	80a4d6c <atexit>
	return _usbserial;
}
 80a36c2:	4802      	ldr	r0, [pc, #8]	; (80a36cc <_Z16_fetch_usbserialv+0x40>)
 80a36c4:	b007      	add	sp, #28
 80a36c6:	bd30      	pop	{r4, r5, pc}
 80a36c8:	200005a0 	.word	0x200005a0
 80a36cc:	200005a8 	.word	0x200005a8
 80a36d0:	080a35c1 	.word	0x080a35c1

080a36d4 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a36d4:	b510      	push	{r4, lr}
 80a36d6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 80a36d8:	2214      	movs	r2, #20
 80a36da:	2100      	movs	r1, #0
 80a36dc:	f001 fc50 	bl	80a4f80 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a36e0:	4b05      	ldr	r3, [pc, #20]	; (80a36f8 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a36e2:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a36e4:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a36e6:	4b05      	ldr	r3, [pc, #20]	; (80a36fc <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a36e8:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a36ea:	f240 1301 	movw	r3, #257	; 0x101
 80a36ee:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a36f0:	2381      	movs	r3, #129	; 0x81
 80a36f2:	8223      	strh	r3, [r4, #16]
}
 80a36f4:	bd10      	pop	{r4, pc}
 80a36f6:	bf00      	nop
 80a36f8:	20000752 	.word	0x20000752
 80a36fc:	20000853 	.word	0x20000853

080a3700 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a3700:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a3702:	4c0e      	ldr	r4, [pc, #56]	; (80a373c <_Z17_fetch_usbserial1v+0x3c>)
{
 80a3704:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a3706:	a801      	add	r0, sp, #4
 80a3708:	f7ff ffe4 	bl	80a36d4 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a370c:	7823      	ldrb	r3, [r4, #0]
 80a370e:	f3bf 8f5b 	dmb	ish
 80a3712:	07db      	lsls	r3, r3, #31
 80a3714:	d40e      	bmi.n	80a3734 <_Z17_fetch_usbserial1v+0x34>
 80a3716:	4620      	mov	r0, r4
 80a3718:	f7fc fcc3 	bl	80a00a2 <__cxa_guard_acquire>
 80a371c:	b150      	cbz	r0, 80a3734 <_Z17_fetch_usbserial1v+0x34>
 80a371e:	2101      	movs	r1, #1
 80a3720:	aa01      	add	r2, sp, #4
 80a3722:	4807      	ldr	r0, [pc, #28]	; (80a3740 <_Z17_fetch_usbserial1v+0x40>)
 80a3724:	f7ff ff88 	bl	80a3638 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a3728:	4620      	mov	r0, r4
 80a372a:	f7fc fcbf 	bl	80a00ac <__cxa_guard_release>
 80a372e:	4805      	ldr	r0, [pc, #20]	; (80a3744 <_Z17_fetch_usbserial1v+0x44>)
 80a3730:	f001 fb1c 	bl	80a4d6c <atexit>
  return _usbserial1;
}
 80a3734:	4802      	ldr	r0, [pc, #8]	; (80a3740 <_Z17_fetch_usbserial1v+0x40>)
 80a3736:	b006      	add	sp, #24
 80a3738:	bd10      	pop	{r4, pc}
 80a373a:	bf00      	nop
 80a373c:	200005a4 	.word	0x200005a4
 80a3740:	200005bc 	.word	0x200005bc
 80a3744:	080a3637 	.word	0x080a3637

080a3748 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 80a3748:	4770      	bx	lr

080a374a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a374a:	7441      	strb	r1, [r0, #17]
}
 80a374c:	4770      	bx	lr

080a374e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80a374e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a3750:	7c00      	ldrb	r0, [r0, #16]
 80a3752:	f7fe fd2b 	bl	80a21ac <hal_usart_available_data_for_write>
}
 80a3756:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a375a:	bd08      	pop	{r3, pc}

080a375c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a375c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a375e:	7c00      	ldrb	r0, [r0, #16]
 80a3760:	f7fe fcfc 	bl	80a215c <hal_usart_available>
}
 80a3764:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a3768:	bd08      	pop	{r3, pc}

080a376a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a376a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a376c:	7c00      	ldrb	r0, [r0, #16]
 80a376e:	f7fe fd05 	bl	80a217c <hal_usart_peek>
}
 80a3772:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a3776:	bd08      	pop	{r3, pc}

080a3778 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a3778:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a377a:	7c00      	ldrb	r0, [r0, #16]
 80a377c:	f7fe fcf6 	bl	80a216c <hal_usart_read>
}
 80a3780:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a3784:	bd08      	pop	{r3, pc}

080a3786 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80a3786:	7c00      	ldrb	r0, [r0, #16]
 80a3788:	f7fe bd00 	b.w	80a218c <hal_usart_flush>

080a378c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a378c:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a378e:	7c46      	ldrb	r6, [r0, #17]
{
 80a3790:	4604      	mov	r4, r0
 80a3792:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a3794:	b12e      	cbz	r6, 80a37a2 <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80a3796:	4629      	mov	r1, r5
 80a3798:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a379a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a379e:	f7fe bcd5 	b.w	80a214c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a37a2:	7c00      	ldrb	r0, [r0, #16]
 80a37a4:	f7fe fd02 	bl	80a21ac <hal_usart_available_data_for_write>
 80a37a8:	2800      	cmp	r0, #0
 80a37aa:	dcf4      	bgt.n	80a3796 <_ZN11USARTSerial5writeEh+0xa>
}
 80a37ac:	4630      	mov	r0, r6
 80a37ae:	bd70      	pop	{r4, r5, r6, pc}

080a37b0 <_ZN11USARTSerialD0Ev>:
 80a37b0:	b510      	push	{r4, lr}
 80a37b2:	4604      	mov	r4, r0
 80a37b4:	2114      	movs	r1, #20
 80a37b6:	f7fc fc72 	bl	80a009e <_ZdlPvj>
 80a37ba:	4620      	mov	r0, r4
 80a37bc:	bd10      	pop	{r4, pc}
	...

080a37c0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 80a37c0:	b510      	push	{r4, lr}
 80a37c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a37c6:	4604      	mov	r4, r0
 80a37c8:	4608      	mov	r0, r1
 80a37ca:	4611      	mov	r1, r2
 80a37cc:	2200      	movs	r2, #0
 80a37ce:	e9c4 2301 	strd	r2, r3, [r4, #4]
 80a37d2:	4b04      	ldr	r3, [pc, #16]	; (80a37e4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 80a37d4:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 80a37d6:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a37d8:	2301      	movs	r3, #1
 80a37da:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 80a37dc:	f7fe fcee 	bl	80a21bc <hal_usart_init_ex>
}
 80a37e0:	4620      	mov	r0, r4
 80a37e2:	bd10      	pop	{r4, pc}
 80a37e4:	080a7454 	.word	0x080a7454

080a37e8 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a37e8:	b510      	push	{r4, lr}
      if (_M_empty())
 80a37ea:	6883      	ldr	r3, [r0, #8]
 80a37ec:	4604      	mov	r4, r0
 80a37ee:	b90b      	cbnz	r3, 80a37f4 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a37f0:	f000 fa30 	bl	80a3c54 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a37f4:	68c3      	ldr	r3, [r0, #12]
 80a37f6:	4798      	blx	r3
      if (_M_manager)
 80a37f8:	68a3      	ldr	r3, [r4, #8]
 80a37fa:	b11b      	cbz	r3, 80a3804 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a37fc:	2203      	movs	r2, #3
 80a37fe:	4621      	mov	r1, r4
 80a3800:	4620      	mov	r0, r4
 80a3802:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a3804:	4620      	mov	r0, r4
}
 80a3806:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 80a380a:	2110      	movs	r1, #16
 80a380c:	f7fc bc47 	b.w	80a009e <_ZdlPvj>

080a3810 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a3810:	4770      	bx	lr

080a3812 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a3812:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3814:	4606      	mov	r6, r0
 80a3816:	4615      	mov	r5, r2
 80a3818:	460c      	mov	r4, r1
 80a381a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a381c:	42bc      	cmp	r4, r7
 80a381e:	d006      	beq.n	80a382e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a3820:	6833      	ldr	r3, [r6, #0]
 80a3822:	4630      	mov	r0, r6
 80a3824:	689b      	ldr	r3, [r3, #8]
 80a3826:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a382a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a382c:	e7f6      	b.n	80a381c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a382e:	4628      	mov	r0, r5
 80a3830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a3832 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a3832:	2200      	movs	r2, #0
 80a3834:	7c00      	ldrb	r0, [r0, #16]
 80a3836:	f7fe bcc9 	b.w	80a21cc <hal_i2c_write>

080a383a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a383a:	2100      	movs	r1, #0
 80a383c:	7c00      	ldrb	r0, [r0, #16]
 80a383e:	f7fe bccd 	b.w	80a21dc <hal_i2c_available>

080a3842 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a3842:	2100      	movs	r1, #0
 80a3844:	7c00      	ldrb	r0, [r0, #16]
 80a3846:	f7fe bcd1 	b.w	80a21ec <hal_i2c_read>

080a384a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a384a:	2100      	movs	r1, #0
 80a384c:	7c00      	ldrb	r0, [r0, #16]
 80a384e:	f7fe bcd5 	b.w	80a21fc <hal_i2c_peek>

080a3852 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a3852:	2100      	movs	r1, #0
 80a3854:	7c00      	ldrb	r0, [r0, #16]
 80a3856:	f7fe bcd9 	b.w	80a220c <hal_i2c_flush>

080a385a <_ZN7TwoWireD0Ev>:
 80a385a:	b510      	push	{r4, lr}
 80a385c:	4604      	mov	r4, r0
 80a385e:	2114      	movs	r1, #20
 80a3860:	f7fc fc1d 	bl	80a009e <_ZdlPvj>
 80a3864:	4620      	mov	r0, r4
 80a3866:	bd10      	pop	{r4, pc}

080a3868 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a3868:	b510      	push	{r4, lr}
 80a386a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a386e:	4604      	mov	r4, r0
 80a3870:	4608      	mov	r0, r1
 80a3872:	2100      	movs	r1, #0
 80a3874:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a3878:	4b03      	ldr	r3, [pc, #12]	; (80a3888 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a387a:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a387c:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a387e:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a3880:	f7fe fcd4 	bl	80a222c <hal_i2c_init>
}
 80a3884:	4620      	mov	r0, r4
 80a3886:	bd10      	pop	{r4, pc}
 80a3888:	080a7484 	.word	0x080a7484

080a388c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a388c:	2200      	movs	r2, #0
 80a388e:	6840      	ldr	r0, [r0, #4]
 80a3890:	4611      	mov	r1, r2
 80a3892:	f7fe bd81 	b.w	80a2398 <network_ready>

080a3896 <_ZN5spark9WiFiClass7resolveEPKc>:
    bool clearCredentials(void) {
        return network_clear_credentials(*this, 0, NULL, NULL);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a3896:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a3898:	4615      	mov	r5, r2
 80a389a:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a389c:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a389e:	460e      	mov	r6, r1
 80a38a0:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a38a2:	2100      	movs	r1, #0
 80a38a4:	a803      	add	r0, sp, #12
 80a38a6:	f001 fb6b 	bl	80a4f80 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a38aa:	4628      	mov	r0, r5
 80a38ac:	f002 fb82 	bl	80a5fb4 <strlen>
 80a38b0:	2700      	movs	r7, #0
 80a38b2:	b281      	uxth	r1, r0
 80a38b4:	6873      	ldr	r3, [r6, #4]
 80a38b6:	4628      	mov	r0, r5
 80a38b8:	9700      	str	r7, [sp, #0]
 80a38ba:	aa03      	add	r2, sp, #12
 80a38bc:	f7fe fd00 	bl	80a22c0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a38c0:	b130      	cbz	r0, 80a38d0 <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a38c2:	4639      	mov	r1, r7
 80a38c4:	4620      	mov	r0, r4
 80a38c6:	f7ff fe57 	bl	80a3578 <_ZN9IPAddressC1Em>
    }
 80a38ca:	4620      	mov	r0, r4
 80a38cc:	b009      	add	sp, #36	; 0x24
 80a38ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a38d0:	4620      	mov	r0, r4
 80a38d2:	a903      	add	r1, sp, #12
 80a38d4:	f7ff fe3e 	bl	80a3554 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a38d8:	e7f7      	b.n	80a38ca <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a38da <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a38da:	2200      	movs	r2, #0
 80a38dc:	6840      	ldr	r0, [r0, #4]
 80a38de:	4611      	mov	r1, r2
 80a38e0:	f7fe bd7a 	b.w	80a23d8 <network_listening>

080a38e4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a38e4:	2200      	movs	r2, #0
 80a38e6:	6840      	ldr	r0, [r0, #4]
 80a38e8:	4611      	mov	r1, r2
 80a38ea:	f7fe bd85 	b.w	80a23f8 <network_get_listen_timeout>

080a38ee <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a38ee:	2200      	movs	r2, #0
 80a38f0:	6840      	ldr	r0, [r0, #4]
 80a38f2:	f7fe bd79 	b.w	80a23e8 <network_set_listen_timeout>

080a38f6 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a38f6:	2200      	movs	r2, #0
 80a38f8:	6840      	ldr	r0, [r0, #4]
 80a38fa:	f081 0101 	eor.w	r1, r1, #1
 80a38fe:	f7fe bd63 	b.w	80a23c8 <network_listen>

080a3902 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a3902:	2300      	movs	r3, #0
 80a3904:	6840      	ldr	r0, [r0, #4]
 80a3906:	461a      	mov	r2, r3
 80a3908:	4619      	mov	r1, r3
 80a390a:	f7fe bd55 	b.w	80a23b8 <network_off>

080a390e <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 80a390e:	2300      	movs	r3, #0
 80a3910:	6840      	ldr	r0, [r0, #4]
 80a3912:	461a      	mov	r2, r3
 80a3914:	4619      	mov	r1, r3
 80a3916:	f7fe bd47 	b.w	80a23a8 <network_on>

080a391a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a391a:	2200      	movs	r2, #0
 80a391c:	6840      	ldr	r0, [r0, #4]
 80a391e:	4611      	mov	r1, r2
 80a3920:	f7fe bd2a 	b.w	80a2378 <network_connecting>

080a3924 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a3924:	2200      	movs	r2, #0
 80a3926:	2102      	movs	r1, #2
 80a3928:	6840      	ldr	r0, [r0, #4]
 80a392a:	f7fe bd2d 	b.w	80a2388 <network_disconnect>

080a392e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a392e:	2300      	movs	r3, #0
 80a3930:	6840      	ldr	r0, [r0, #4]
 80a3932:	461a      	mov	r2, r3
 80a3934:	f7fe bd18 	b.w	80a2368 <network_connect>

080a3938 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a3938:	2204      	movs	r2, #4
 80a393a:	4b02      	ldr	r3, [pc, #8]	; (80a3944 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a393c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a393e:	4a02      	ldr	r2, [pc, #8]	; (80a3948 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a3940:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a3942:	4770      	bx	lr
 80a3944:	200008d4 	.word	0x200008d4
 80a3948:	080a74ac 	.word	0x080a74ac

080a394c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a394c:	2300      	movs	r3, #0
 80a394e:	6840      	ldr	r0, [r0, #4]
 80a3950:	461a      	mov	r2, r3
 80a3952:	f7fe bd09 	b.w	80a2368 <network_connect>

080a3956 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a3956:	2200      	movs	r2, #0
 80a3958:	2102      	movs	r1, #2
 80a395a:	6840      	ldr	r0, [r0, #4]
 80a395c:	f7fe bd14 	b.w	80a2388 <network_disconnect>

080a3960 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a3960:	2200      	movs	r2, #0
 80a3962:	6840      	ldr	r0, [r0, #4]
 80a3964:	4611      	mov	r1, r2
 80a3966:	f7fe bd07 	b.w	80a2378 <network_connecting>

080a396a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a396a:	2200      	movs	r2, #0
 80a396c:	6840      	ldr	r0, [r0, #4]
 80a396e:	4611      	mov	r1, r2
 80a3970:	f7fe bd12 	b.w	80a2398 <network_ready>

080a3974 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a3974:	2300      	movs	r3, #0
 80a3976:	6840      	ldr	r0, [r0, #4]
 80a3978:	461a      	mov	r2, r3
 80a397a:	4619      	mov	r1, r3
 80a397c:	f7fe bd14 	b.w	80a23a8 <network_on>

080a3980 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a3980:	2300      	movs	r3, #0
 80a3982:	6840      	ldr	r0, [r0, #4]
 80a3984:	461a      	mov	r2, r3
 80a3986:	4619      	mov	r1, r3
 80a3988:	f7fe bd16 	b.w	80a23b8 <network_off>

080a398c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a398c:	2100      	movs	r1, #0
 80a398e:	6840      	ldr	r0, [r0, #4]
 80a3990:	f7fe bd3a 	b.w	80a2408 <network_is_on>

080a3994 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a3994:	2100      	movs	r1, #0
 80a3996:	6840      	ldr	r0, [r0, #4]
 80a3998:	f7fe bd3e 	b.w	80a2418 <network_is_off>

080a399c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a399c:	2200      	movs	r2, #0
 80a399e:	6840      	ldr	r0, [r0, #4]
 80a39a0:	f081 0101 	eor.w	r1, r1, #1
 80a39a4:	f7fe bd10 	b.w	80a23c8 <network_listen>

080a39a8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a39a8:	2200      	movs	r2, #0
 80a39aa:	6840      	ldr	r0, [r0, #4]
 80a39ac:	f7fe bd1c 	b.w	80a23e8 <network_set_listen_timeout>

080a39b0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a39b0:	2200      	movs	r2, #0
 80a39b2:	6840      	ldr	r0, [r0, #4]
 80a39b4:	4611      	mov	r1, r2
 80a39b6:	f7fe bd1f 	b.w	80a23f8 <network_get_listen_timeout>

080a39ba <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a39ba:	2200      	movs	r2, #0
 80a39bc:	6840      	ldr	r0, [r0, #4]
 80a39be:	4611      	mov	r1, r2
 80a39c0:	f7fe bd0a 	b.w	80a23d8 <network_listening>

080a39c4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a39c4:	b570      	push	{r4, r5, r6, lr}
 80a39c6:	4615      	mov	r5, r2
 80a39c8:	b08e      	sub	sp, #56	; 0x38
 80a39ca:	4604      	mov	r4, r0
    IPAddress addr;
 80a39cc:	a808      	add	r0, sp, #32
 80a39ce:	f7ff fdb3 	bl	80a3538 <_ZN9IPAddressC1Ev>
        HAL_IPAddress ip = {};
 80a39d2:	2211      	movs	r2, #17
 80a39d4:	2100      	movs	r1, #0
 80a39d6:	a803      	add	r0, sp, #12
 80a39d8:	f001 fad2 	bl	80a4f80 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a39dc:	2600      	movs	r6, #0
 80a39de:	4628      	mov	r0, r5
 80a39e0:	f002 fae8 	bl	80a5fb4 <strlen>
 80a39e4:	4b0a      	ldr	r3, [pc, #40]	; (80a3a10 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a39e6:	9600      	str	r6, [sp, #0]
 80a39e8:	b281      	uxth	r1, r0
 80a39ea:	685b      	ldr	r3, [r3, #4]
 80a39ec:	4628      	mov	r0, r5
 80a39ee:	aa03      	add	r2, sp, #12
 80a39f0:	f7fe fc66 	bl	80a22c0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a39f4:	b130      	cbz	r0, 80a3a04 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a39f6:	4631      	mov	r1, r6
 80a39f8:	4620      	mov	r0, r4
 80a39fa:	f7ff fdbd 	bl	80a3578 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a39fe:	4620      	mov	r0, r4
 80a3a00:	b00e      	add	sp, #56	; 0x38
 80a3a02:	bd70      	pop	{r4, r5, r6, pc}
 80a3a04:	4620      	mov	r0, r4
 80a3a06:	a903      	add	r1, sp, #12
 80a3a08:	f7ff fda4 	bl	80a3554 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a3a0c:	e7f7      	b.n	80a39fe <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a3a0e:	bf00      	nop
 80a3a10:	200008d4 	.word	0x200008d4

080a3a14 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a3a14:	4b02      	ldr	r3, [pc, #8]	; (80a3a20 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a3a16:	4a03      	ldr	r2, [pc, #12]	; (80a3a24 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a3a18:	601a      	str	r2, [r3, #0]
 80a3a1a:	2200      	movs	r2, #0
 80a3a1c:	605a      	str	r2, [r3, #4]

} // spark
 80a3a1e:	4770      	bx	lr
 80a3a20:	200008dc 	.word	0x200008dc
 80a3a24:	080a74e8 	.word	0x080a74e8

080a3a28 <__tcf_0>:
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a3a28:	4b02      	ldr	r3, [pc, #8]	; (80a3a34 <__tcf_0+0xc>)
 80a3a2a:	6898      	ldr	r0, [r3, #8]
 80a3a2c:	b108      	cbz	r0, 80a3a32 <__tcf_0+0xa>
            os_mutex_recursive_destroy(handle_);
 80a3a2e:	f7fe bb85 	b.w	80a213c <os_mutex_recursive_destroy>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a3a32:	4770      	bx	lr
 80a3a34:	200008e8 	.word	0x200008e8

080a3a38 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a3a38:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a3a3a:	b570      	push	{r4, r5, r6, lr}
 80a3a3c:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a3a3e:	d901      	bls.n	80a3a44 <pinAvailable+0xc>
    return false;
 80a3a40:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a3a42:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a3a44:	f1a0 030d 	sub.w	r3, r0, #13
 80a3a48:	2b02      	cmp	r3, #2
 80a3a4a:	d90b      	bls.n	80a3a64 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a3a4c:	2801      	cmp	r0, #1
 80a3a4e:	d824      	bhi.n	80a3a9a <pinAvailable+0x62>
 80a3a50:	f000 f8da 	bl	80a3c08 <_Z19__fetch_global_Wirev>
 80a3a54:	2100      	movs	r1, #0
 80a3a56:	7c00      	ldrb	r0, [r0, #16]
 80a3a58:	f7fe fbe0 	bl	80a221c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a3a5c:	f080 0001 	eor.w	r0, r0, #1
 80a3a60:	b2c0      	uxtb	r0, r0
 80a3a62:	e7ee      	b.n	80a3a42 <pinAvailable+0xa>
 80a3a64:	4e12      	ldr	r6, [pc, #72]	; (80a3ab0 <pinAvailable+0x78>)
 80a3a66:	7831      	ldrb	r1, [r6, #0]
 80a3a68:	f3bf 8f5b 	dmb	ish
 80a3a6c:	f011 0501 	ands.w	r5, r1, #1
 80a3a70:	d10d      	bne.n	80a3a8e <pinAvailable+0x56>
 80a3a72:	4630      	mov	r0, r6
 80a3a74:	f7fc fb15 	bl	80a00a2 <__cxa_guard_acquire>
 80a3a78:	b148      	cbz	r0, 80a3a8e <pinAvailable+0x56>
 80a3a7a:	4629      	mov	r1, r5
 80a3a7c:	480d      	ldr	r0, [pc, #52]	; (80a3ab4 <pinAvailable+0x7c>)
 80a3a7e:	f7fe fd93 	bl	80a25a8 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a3a82:	4630      	mov	r0, r6
 80a3a84:	f7fc fb12 	bl	80a00ac <__cxa_guard_release>
 80a3a88:	480b      	ldr	r0, [pc, #44]	; (80a3ab8 <pinAvailable+0x80>)
 80a3a8a:	f001 f96f 	bl	80a4d6c <atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a3a8e:	4b09      	ldr	r3, [pc, #36]	; (80a3ab4 <pinAvailable+0x7c>)
 80a3a90:	7818      	ldrb	r0, [r3, #0]
 80a3a92:	f7fe fbdd 	bl	80a2250 <hal_spi_is_enabled>
 80a3a96:	2800      	cmp	r0, #0
 80a3a98:	d1d2      	bne.n	80a3a40 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a3a9a:	3c12      	subs	r4, #18
 80a3a9c:	2c01      	cmp	r4, #1
 80a3a9e:	d805      	bhi.n	80a3aac <pinAvailable+0x74>
 80a3aa0:	f000 f852 	bl	80a3b48 <_Z22__fetch_global_Serial1v>
 80a3aa4:	7c00      	ldrb	r0, [r0, #16]
 80a3aa6:	f7fe fb79 	bl	80a219c <hal_usart_is_enabled>
 80a3aaa:	e7d7      	b.n	80a3a5c <pinAvailable+0x24>
  return true; // 'pin' is available
 80a3aac:	2001      	movs	r0, #1
 80a3aae:	e7c8      	b.n	80a3a42 <pinAvailable+0xa>
 80a3ab0:	200008e4 	.word	0x200008e4
 80a3ab4:	200008e8 	.word	0x200008e8
 80a3ab8:	080a3a29 	.word	0x080a3a29

080a3abc <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a3abc:	2817      	cmp	r0, #23
{
 80a3abe:	b538      	push	{r3, r4, r5, lr}
 80a3ac0:	4604      	mov	r4, r0
 80a3ac2:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a3ac4:	d80a      	bhi.n	80a3adc <pinMode+0x20>
 80a3ac6:	29ff      	cmp	r1, #255	; 0xff
 80a3ac8:	d008      	beq.n	80a3adc <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a3aca:	f7ff ffb5 	bl	80a3a38 <pinAvailable>
 80a3ace:	b128      	cbz	r0, 80a3adc <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a3ad0:	4629      	mov	r1, r5
 80a3ad2:	4620      	mov	r0, r4
}
 80a3ad4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a3ad8:	f7fe bad0 	b.w	80a207c <HAL_Pin_Mode>
}
 80a3adc:	bd38      	pop	{r3, r4, r5, pc}

080a3ade <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a3ade:	b538      	push	{r3, r4, r5, lr}
 80a3ae0:	4604      	mov	r4, r0
 80a3ae2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a3ae4:	f7fe fad2 	bl	80a208c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a3ae8:	28ff      	cmp	r0, #255	; 0xff
 80a3aea:	d010      	beq.n	80a3b0e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80a3aec:	2806      	cmp	r0, #6
 80a3aee:	d804      	bhi.n	80a3afa <digitalWrite+0x1c>
 80a3af0:	234d      	movs	r3, #77	; 0x4d
 80a3af2:	fa23 f000 	lsr.w	r0, r3, r0
 80a3af6:	07c3      	lsls	r3, r0, #31
 80a3af8:	d409      	bmi.n	80a3b0e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a3afa:	4620      	mov	r0, r4
 80a3afc:	f7ff ff9c 	bl	80a3a38 <pinAvailable>
 80a3b00:	b128      	cbz	r0, 80a3b0e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a3b02:	4629      	mov	r1, r5
 80a3b04:	4620      	mov	r0, r4
}
 80a3b06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80a3b0a:	f7fe bac7 	b.w	80a209c <HAL_GPIO_Write>
}
 80a3b0e:	bd38      	pop	{r3, r4, r5, pc}

080a3b10 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80a3b10:	4770      	bx	lr
	...

080a3b14 <_Z20acquireSerial1Bufferv>:
{
 80a3b14:	b570      	push	{r4, r5, r6, lr}
    hal_usart_buffer_config_t config = {
 80a3b16:	2514      	movs	r5, #20
{
 80a3b18:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 80a3b1a:	462a      	mov	r2, r5
 80a3b1c:	2100      	movs	r1, #0
 80a3b1e:	f001 fa2f 	bl	80a4f80 <memset>
 80a3b22:	8025      	strh	r5, [r4, #0]
 80a3b24:	2580      	movs	r5, #128	; 0x80
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a3b26:	4e07      	ldr	r6, [pc, #28]	; (80a3b44 <_Z20acquireSerial1Bufferv+0x30>)
 80a3b28:	4628      	mov	r0, r5
 80a3b2a:	4631      	mov	r1, r6
    hal_usart_buffer_config_t config = {
 80a3b2c:	8125      	strh	r5, [r4, #8]
 80a3b2e:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a3b30:	f000 f88e 	bl	80a3c50 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a3b34:	4631      	mov	r1, r6
    };
 80a3b36:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a3b38:	4628      	mov	r0, r5
 80a3b3a:	f000 f889 	bl	80a3c50 <_ZnajRKSt9nothrow_t>
    };
 80a3b3e:	60e0      	str	r0, [r4, #12]
}
 80a3b40:	4620      	mov	r0, r4
 80a3b42:	bd70      	pop	{r4, r5, r6, pc}
 80a3b44:	080a751c 	.word	0x080a751c

080a3b48 <_Z22__fetch_global_Serial1v>:
{
 80a3b48:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80a3b4a:	4d0e      	ldr	r5, [pc, #56]	; (80a3b84 <_Z22__fetch_global_Serial1v+0x3c>)
{
 80a3b4c:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80a3b4e:	7829      	ldrb	r1, [r5, #0]
 80a3b50:	f3bf 8f5b 	dmb	ish
 80a3b54:	f011 0401 	ands.w	r4, r1, #1
 80a3b58:	d111      	bne.n	80a3b7e <_Z22__fetch_global_Serial1v+0x36>
 80a3b5a:	4628      	mov	r0, r5
 80a3b5c:	f7fc faa1 	bl	80a00a2 <__cxa_guard_acquire>
 80a3b60:	b168      	cbz	r0, 80a3b7e <_Z22__fetch_global_Serial1v+0x36>
 80a3b62:	a801      	add	r0, sp, #4
 80a3b64:	f7ff ffd6 	bl	80a3b14 <_Z20acquireSerial1Bufferv>
 80a3b68:	4621      	mov	r1, r4
 80a3b6a:	aa01      	add	r2, sp, #4
 80a3b6c:	4806      	ldr	r0, [pc, #24]	; (80a3b88 <_Z22__fetch_global_Serial1v+0x40>)
 80a3b6e:	f7ff fe27 	bl	80a37c0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 80a3b72:	4628      	mov	r0, r5
 80a3b74:	f7fc fa9a 	bl	80a00ac <__cxa_guard_release>
 80a3b78:	4804      	ldr	r0, [pc, #16]	; (80a3b8c <_Z22__fetch_global_Serial1v+0x44>)
 80a3b7a:	f001 f8f7 	bl	80a4d6c <atexit>
    return serial1;
}
 80a3b7e:	4802      	ldr	r0, [pc, #8]	; (80a3b88 <_Z22__fetch_global_Serial1v+0x40>)
 80a3b80:	b007      	add	sp, #28
 80a3b82:	bd30      	pop	{r4, r5, pc}
 80a3b84:	200008f4 	.word	0x200008f4
 80a3b88:	200008f8 	.word	0x200008f8
 80a3b8c:	080a3b11 	.word	0x080a3b11

080a3b90 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
 80a3b90:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
 80a3b92:	4c08      	ldr	r4, [pc, #32]	; (80a3bb4 <_Z21__fetch_global_EEPROMv+0x24>)
 80a3b94:	7823      	ldrb	r3, [r4, #0]
 80a3b96:	f3bf 8f5b 	dmb	ish
 80a3b9a:	07db      	lsls	r3, r3, #31
 80a3b9c:	d408      	bmi.n	80a3bb0 <_Z21__fetch_global_EEPROMv+0x20>
 80a3b9e:	4620      	mov	r0, r4
 80a3ba0:	f7fc fa7f 	bl	80a00a2 <__cxa_guard_acquire>
 80a3ba4:	b120      	cbz	r0, 80a3bb0 <_Z21__fetch_global_EEPROMv+0x20>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
 80a3ba6:	f7fe fa91 	bl	80a20cc <HAL_EEPROM_Init>
 80a3baa:	4620      	mov	r0, r4
 80a3bac:	f7fc fa7e 	bl	80a00ac <__cxa_guard_release>
	return eeprom;
}
 80a3bb0:	4801      	ldr	r0, [pc, #4]	; (80a3bb8 <_Z21__fetch_global_EEPROMv+0x28>)
 80a3bb2:	bd10      	pop	{r4, pc}
 80a3bb4:	20000910 	.word	0x20000910
 80a3bb8:	20000914 	.word	0x20000914

080a3bbc <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a3bbc:	2300      	movs	r3, #0
 80a3bbe:	b507      	push	{r0, r1, r2, lr}
 80a3bc0:	461a      	mov	r2, r3
 80a3bc2:	4619      	mov	r1, r3
 80a3bc4:	9300      	str	r3, [sp, #0]
 80a3bc6:	4803      	ldr	r0, [pc, #12]	; (80a3bd4 <_GLOBAL__sub_I_INADDR_NONE+0x18>)
 80a3bc8:	f7ff fcec 	bl	80a35a4 <_ZN9IPAddressC1Ehhhh>
 80a3bcc:	b003      	add	sp, #12
 80a3bce:	f85d fb04 	ldr.w	pc, [sp], #4
 80a3bd2:	bf00      	nop
 80a3bd4:	20000918 	.word	0x20000918

080a3bd8 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a3bd8:	4770      	bx	lr
	...

080a3bdc <_Z17acquireWireBufferv>:
{
 80a3bdc:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a3bde:	2314      	movs	r3, #20
 80a3be0:	2520      	movs	r5, #32
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3be2:	4e08      	ldr	r6, [pc, #32]	; (80a3c04 <_Z17acquireWireBufferv+0x28>)
{
 80a3be4:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a3be6:	6003      	str	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3be8:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a3bea:	6085      	str	r5, [r0, #8]
 80a3bec:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3bee:	4628      	mov	r0, r5
 80a3bf0:	f000 f82e 	bl	80a3c50 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3bf4:	4631      	mov	r1, r6
	};
 80a3bf6:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3bf8:	4628      	mov	r0, r5
 80a3bfa:	f000 f829 	bl	80a3c50 <_ZnajRKSt9nothrow_t>
	};
 80a3bfe:	60e0      	str	r0, [r4, #12]
}
 80a3c00:	4620      	mov	r0, r4
 80a3c02:	bd70      	pop	{r4, r5, r6, pc}
 80a3c04:	080a751c 	.word	0x080a751c

080a3c08 <_Z19__fetch_global_Wirev>:
{
 80a3c08:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a3c0a:	4d0e      	ldr	r5, [pc, #56]	; (80a3c44 <_Z19__fetch_global_Wirev+0x3c>)
{
 80a3c0c:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a3c0e:	7829      	ldrb	r1, [r5, #0]
 80a3c10:	f3bf 8f5b 	dmb	ish
 80a3c14:	f011 0401 	ands.w	r4, r1, #1
 80a3c18:	d111      	bne.n	80a3c3e <_Z19__fetch_global_Wirev+0x36>
 80a3c1a:	4628      	mov	r0, r5
 80a3c1c:	f7fc fa41 	bl	80a00a2 <__cxa_guard_acquire>
 80a3c20:	b168      	cbz	r0, 80a3c3e <_Z19__fetch_global_Wirev+0x36>
 80a3c22:	a801      	add	r0, sp, #4
 80a3c24:	f7ff ffda 	bl	80a3bdc <_Z17acquireWireBufferv>
 80a3c28:	4621      	mov	r1, r4
 80a3c2a:	aa01      	add	r2, sp, #4
 80a3c2c:	4806      	ldr	r0, [pc, #24]	; (80a3c48 <_Z19__fetch_global_Wirev+0x40>)
 80a3c2e:	f7ff fe1b 	bl	80a3868 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a3c32:	4628      	mov	r0, r5
 80a3c34:	f7fc fa3a 	bl	80a00ac <__cxa_guard_release>
 80a3c38:	4804      	ldr	r0, [pc, #16]	; (80a3c4c <_Z19__fetch_global_Wirev+0x44>)
 80a3c3a:	f001 f897 	bl	80a4d6c <atexit>
	return wire;
}
 80a3c3e:	4802      	ldr	r0, [pc, #8]	; (80a3c48 <_Z19__fetch_global_Wirev+0x40>)
 80a3c40:	b007      	add	sp, #28
 80a3c42:	bd30      	pop	{r4, r5, pc}
 80a3c44:	20000930 	.word	0x20000930
 80a3c48:	20000934 	.word	0x20000934
 80a3c4c:	080a3bd9 	.word	0x080a3bd9

080a3c50 <_ZnajRKSt9nothrow_t>:
 80a3c50:	f7fc ba23 	b.w	80a009a <_Znaj>

080a3c54 <_ZSt25__throw_bad_function_callv>:
 80a3c54:	b508      	push	{r3, lr}
 80a3c56:	f7fe fc7f 	bl	80a2558 <abort>
	...

080a3c5c <__aeabi_drsub>:
 80a3c5c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a3c60:	e002      	b.n	80a3c68 <__adddf3>
 80a3c62:	bf00      	nop

080a3c64 <__aeabi_dsub>:
 80a3c64:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a3c68 <__adddf3>:
 80a3c68:	b530      	push	{r4, r5, lr}
 80a3c6a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a3c6e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a3c72:	ea94 0f05 	teq	r4, r5
 80a3c76:	bf08      	it	eq
 80a3c78:	ea90 0f02 	teqeq	r0, r2
 80a3c7c:	bf1f      	itttt	ne
 80a3c7e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a3c82:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a3c86:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a3c8a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a3c8e:	f000 80e2 	beq.w	80a3e56 <__adddf3+0x1ee>
 80a3c92:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a3c96:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a3c9a:	bfb8      	it	lt
 80a3c9c:	426d      	neglt	r5, r5
 80a3c9e:	dd0c      	ble.n	80a3cba <__adddf3+0x52>
 80a3ca0:	442c      	add	r4, r5
 80a3ca2:	ea80 0202 	eor.w	r2, r0, r2
 80a3ca6:	ea81 0303 	eor.w	r3, r1, r3
 80a3caa:	ea82 0000 	eor.w	r0, r2, r0
 80a3cae:	ea83 0101 	eor.w	r1, r3, r1
 80a3cb2:	ea80 0202 	eor.w	r2, r0, r2
 80a3cb6:	ea81 0303 	eor.w	r3, r1, r3
 80a3cba:	2d36      	cmp	r5, #54	; 0x36
 80a3cbc:	bf88      	it	hi
 80a3cbe:	bd30      	pophi	{r4, r5, pc}
 80a3cc0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a3cc4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a3cc8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a3ccc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a3cd0:	d002      	beq.n	80a3cd8 <__adddf3+0x70>
 80a3cd2:	4240      	negs	r0, r0
 80a3cd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a3cd8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a3cdc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a3ce0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a3ce4:	d002      	beq.n	80a3cec <__adddf3+0x84>
 80a3ce6:	4252      	negs	r2, r2
 80a3ce8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a3cec:	ea94 0f05 	teq	r4, r5
 80a3cf0:	f000 80a7 	beq.w	80a3e42 <__adddf3+0x1da>
 80a3cf4:	f1a4 0401 	sub.w	r4, r4, #1
 80a3cf8:	f1d5 0e20 	rsbs	lr, r5, #32
 80a3cfc:	db0d      	blt.n	80a3d1a <__adddf3+0xb2>
 80a3cfe:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a3d02:	fa22 f205 	lsr.w	r2, r2, r5
 80a3d06:	1880      	adds	r0, r0, r2
 80a3d08:	f141 0100 	adc.w	r1, r1, #0
 80a3d0c:	fa03 f20e 	lsl.w	r2, r3, lr
 80a3d10:	1880      	adds	r0, r0, r2
 80a3d12:	fa43 f305 	asr.w	r3, r3, r5
 80a3d16:	4159      	adcs	r1, r3
 80a3d18:	e00e      	b.n	80a3d38 <__adddf3+0xd0>
 80a3d1a:	f1a5 0520 	sub.w	r5, r5, #32
 80a3d1e:	f10e 0e20 	add.w	lr, lr, #32
 80a3d22:	2a01      	cmp	r2, #1
 80a3d24:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a3d28:	bf28      	it	cs
 80a3d2a:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a3d2e:	fa43 f305 	asr.w	r3, r3, r5
 80a3d32:	18c0      	adds	r0, r0, r3
 80a3d34:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a3d38:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a3d3c:	d507      	bpl.n	80a3d4e <__adddf3+0xe6>
 80a3d3e:	f04f 0e00 	mov.w	lr, #0
 80a3d42:	f1dc 0c00 	rsbs	ip, ip, #0
 80a3d46:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a3d4a:	eb6e 0101 	sbc.w	r1, lr, r1
 80a3d4e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a3d52:	d31b      	bcc.n	80a3d8c <__adddf3+0x124>
 80a3d54:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a3d58:	d30c      	bcc.n	80a3d74 <__adddf3+0x10c>
 80a3d5a:	0849      	lsrs	r1, r1, #1
 80a3d5c:	ea5f 0030 	movs.w	r0, r0, rrx
 80a3d60:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a3d64:	f104 0401 	add.w	r4, r4, #1
 80a3d68:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a3d6c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a3d70:	f080 809a 	bcs.w	80a3ea8 <__adddf3+0x240>
 80a3d74:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a3d78:	bf08      	it	eq
 80a3d7a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a3d7e:	f150 0000 	adcs.w	r0, r0, #0
 80a3d82:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a3d86:	ea41 0105 	orr.w	r1, r1, r5
 80a3d8a:	bd30      	pop	{r4, r5, pc}
 80a3d8c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a3d90:	4140      	adcs	r0, r0
 80a3d92:	eb41 0101 	adc.w	r1, r1, r1
 80a3d96:	3c01      	subs	r4, #1
 80a3d98:	bf28      	it	cs
 80a3d9a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80a3d9e:	d2e9      	bcs.n	80a3d74 <__adddf3+0x10c>
 80a3da0:	f091 0f00 	teq	r1, #0
 80a3da4:	bf04      	itt	eq
 80a3da6:	4601      	moveq	r1, r0
 80a3da8:	2000      	moveq	r0, #0
 80a3daa:	fab1 f381 	clz	r3, r1
 80a3dae:	bf08      	it	eq
 80a3db0:	3320      	addeq	r3, #32
 80a3db2:	f1a3 030b 	sub.w	r3, r3, #11
 80a3db6:	f1b3 0220 	subs.w	r2, r3, #32
 80a3dba:	da0c      	bge.n	80a3dd6 <__adddf3+0x16e>
 80a3dbc:	320c      	adds	r2, #12
 80a3dbe:	dd08      	ble.n	80a3dd2 <__adddf3+0x16a>
 80a3dc0:	f102 0c14 	add.w	ip, r2, #20
 80a3dc4:	f1c2 020c 	rsb	r2, r2, #12
 80a3dc8:	fa01 f00c 	lsl.w	r0, r1, ip
 80a3dcc:	fa21 f102 	lsr.w	r1, r1, r2
 80a3dd0:	e00c      	b.n	80a3dec <__adddf3+0x184>
 80a3dd2:	f102 0214 	add.w	r2, r2, #20
 80a3dd6:	bfd8      	it	le
 80a3dd8:	f1c2 0c20 	rsble	ip, r2, #32
 80a3ddc:	fa01 f102 	lsl.w	r1, r1, r2
 80a3de0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a3de4:	bfdc      	itt	le
 80a3de6:	ea41 010c 	orrle.w	r1, r1, ip
 80a3dea:	4090      	lslle	r0, r2
 80a3dec:	1ae4      	subs	r4, r4, r3
 80a3dee:	bfa2      	ittt	ge
 80a3df0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a3df4:	4329      	orrge	r1, r5
 80a3df6:	bd30      	popge	{r4, r5, pc}
 80a3df8:	ea6f 0404 	mvn.w	r4, r4
 80a3dfc:	3c1f      	subs	r4, #31
 80a3dfe:	da1c      	bge.n	80a3e3a <__adddf3+0x1d2>
 80a3e00:	340c      	adds	r4, #12
 80a3e02:	dc0e      	bgt.n	80a3e22 <__adddf3+0x1ba>
 80a3e04:	f104 0414 	add.w	r4, r4, #20
 80a3e08:	f1c4 0220 	rsb	r2, r4, #32
 80a3e0c:	fa20 f004 	lsr.w	r0, r0, r4
 80a3e10:	fa01 f302 	lsl.w	r3, r1, r2
 80a3e14:	ea40 0003 	orr.w	r0, r0, r3
 80a3e18:	fa21 f304 	lsr.w	r3, r1, r4
 80a3e1c:	ea45 0103 	orr.w	r1, r5, r3
 80a3e20:	bd30      	pop	{r4, r5, pc}
 80a3e22:	f1c4 040c 	rsb	r4, r4, #12
 80a3e26:	f1c4 0220 	rsb	r2, r4, #32
 80a3e2a:	fa20 f002 	lsr.w	r0, r0, r2
 80a3e2e:	fa01 f304 	lsl.w	r3, r1, r4
 80a3e32:	ea40 0003 	orr.w	r0, r0, r3
 80a3e36:	4629      	mov	r1, r5
 80a3e38:	bd30      	pop	{r4, r5, pc}
 80a3e3a:	fa21 f004 	lsr.w	r0, r1, r4
 80a3e3e:	4629      	mov	r1, r5
 80a3e40:	bd30      	pop	{r4, r5, pc}
 80a3e42:	f094 0f00 	teq	r4, #0
 80a3e46:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a3e4a:	bf06      	itte	eq
 80a3e4c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a3e50:	3401      	addeq	r4, #1
 80a3e52:	3d01      	subne	r5, #1
 80a3e54:	e74e      	b.n	80a3cf4 <__adddf3+0x8c>
 80a3e56:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a3e5a:	bf18      	it	ne
 80a3e5c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a3e60:	d029      	beq.n	80a3eb6 <__adddf3+0x24e>
 80a3e62:	ea94 0f05 	teq	r4, r5
 80a3e66:	bf08      	it	eq
 80a3e68:	ea90 0f02 	teqeq	r0, r2
 80a3e6c:	d005      	beq.n	80a3e7a <__adddf3+0x212>
 80a3e6e:	ea54 0c00 	orrs.w	ip, r4, r0
 80a3e72:	bf04      	itt	eq
 80a3e74:	4619      	moveq	r1, r3
 80a3e76:	4610      	moveq	r0, r2
 80a3e78:	bd30      	pop	{r4, r5, pc}
 80a3e7a:	ea91 0f03 	teq	r1, r3
 80a3e7e:	bf1e      	ittt	ne
 80a3e80:	2100      	movne	r1, #0
 80a3e82:	2000      	movne	r0, #0
 80a3e84:	bd30      	popne	{r4, r5, pc}
 80a3e86:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a3e8a:	d105      	bne.n	80a3e98 <__adddf3+0x230>
 80a3e8c:	0040      	lsls	r0, r0, #1
 80a3e8e:	4149      	adcs	r1, r1
 80a3e90:	bf28      	it	cs
 80a3e92:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a3e96:	bd30      	pop	{r4, r5, pc}
 80a3e98:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a3e9c:	bf3c      	itt	cc
 80a3e9e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a3ea2:	bd30      	popcc	{r4, r5, pc}
 80a3ea4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a3ea8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a3eac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a3eb0:	f04f 0000 	mov.w	r0, #0
 80a3eb4:	bd30      	pop	{r4, r5, pc}
 80a3eb6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a3eba:	bf1a      	itte	ne
 80a3ebc:	4619      	movne	r1, r3
 80a3ebe:	4610      	movne	r0, r2
 80a3ec0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a3ec4:	bf1c      	itt	ne
 80a3ec6:	460b      	movne	r3, r1
 80a3ec8:	4602      	movne	r2, r0
 80a3eca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a3ece:	bf06      	itte	eq
 80a3ed0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a3ed4:	ea91 0f03 	teqeq	r1, r3
 80a3ed8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a3edc:	bd30      	pop	{r4, r5, pc}
 80a3ede:	bf00      	nop

080a3ee0 <__aeabi_ui2d>:
 80a3ee0:	f090 0f00 	teq	r0, #0
 80a3ee4:	bf04      	itt	eq
 80a3ee6:	2100      	moveq	r1, #0
 80a3ee8:	4770      	bxeq	lr
 80a3eea:	b530      	push	{r4, r5, lr}
 80a3eec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a3ef0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a3ef4:	f04f 0500 	mov.w	r5, #0
 80a3ef8:	f04f 0100 	mov.w	r1, #0
 80a3efc:	e750      	b.n	80a3da0 <__adddf3+0x138>
 80a3efe:	bf00      	nop

080a3f00 <__aeabi_i2d>:
 80a3f00:	f090 0f00 	teq	r0, #0
 80a3f04:	bf04      	itt	eq
 80a3f06:	2100      	moveq	r1, #0
 80a3f08:	4770      	bxeq	lr
 80a3f0a:	b530      	push	{r4, r5, lr}
 80a3f0c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a3f10:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a3f14:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a3f18:	bf48      	it	mi
 80a3f1a:	4240      	negmi	r0, r0
 80a3f1c:	f04f 0100 	mov.w	r1, #0
 80a3f20:	e73e      	b.n	80a3da0 <__adddf3+0x138>
 80a3f22:	bf00      	nop

080a3f24 <__aeabi_f2d>:
 80a3f24:	0042      	lsls	r2, r0, #1
 80a3f26:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a3f2a:	ea4f 0131 	mov.w	r1, r1, rrx
 80a3f2e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a3f32:	bf1f      	itttt	ne
 80a3f34:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a3f38:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a3f3c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a3f40:	4770      	bxne	lr
 80a3f42:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80a3f46:	bf08      	it	eq
 80a3f48:	4770      	bxeq	lr
 80a3f4a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80a3f4e:	bf04      	itt	eq
 80a3f50:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80a3f54:	4770      	bxeq	lr
 80a3f56:	b530      	push	{r4, r5, lr}
 80a3f58:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a3f5c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a3f60:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a3f64:	e71c      	b.n	80a3da0 <__adddf3+0x138>
 80a3f66:	bf00      	nop

080a3f68 <__aeabi_ul2d>:
 80a3f68:	ea50 0201 	orrs.w	r2, r0, r1
 80a3f6c:	bf08      	it	eq
 80a3f6e:	4770      	bxeq	lr
 80a3f70:	b530      	push	{r4, r5, lr}
 80a3f72:	f04f 0500 	mov.w	r5, #0
 80a3f76:	e00a      	b.n	80a3f8e <__aeabi_l2d+0x16>

080a3f78 <__aeabi_l2d>:
 80a3f78:	ea50 0201 	orrs.w	r2, r0, r1
 80a3f7c:	bf08      	it	eq
 80a3f7e:	4770      	bxeq	lr
 80a3f80:	b530      	push	{r4, r5, lr}
 80a3f82:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a3f86:	d502      	bpl.n	80a3f8e <__aeabi_l2d+0x16>
 80a3f88:	4240      	negs	r0, r0
 80a3f8a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a3f8e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a3f92:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a3f96:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a3f9a:	f43f aed8 	beq.w	80a3d4e <__adddf3+0xe6>
 80a3f9e:	f04f 0203 	mov.w	r2, #3
 80a3fa2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a3fa6:	bf18      	it	ne
 80a3fa8:	3203      	addne	r2, #3
 80a3faa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a3fae:	bf18      	it	ne
 80a3fb0:	3203      	addne	r2, #3
 80a3fb2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a3fb6:	f1c2 0320 	rsb	r3, r2, #32
 80a3fba:	fa00 fc03 	lsl.w	ip, r0, r3
 80a3fbe:	fa20 f002 	lsr.w	r0, r0, r2
 80a3fc2:	fa01 fe03 	lsl.w	lr, r1, r3
 80a3fc6:	ea40 000e 	orr.w	r0, r0, lr
 80a3fca:	fa21 f102 	lsr.w	r1, r1, r2
 80a3fce:	4414      	add	r4, r2
 80a3fd0:	e6bd      	b.n	80a3d4e <__adddf3+0xe6>
 80a3fd2:	bf00      	nop

080a3fd4 <__aeabi_dmul>:
 80a3fd4:	b570      	push	{r4, r5, r6, lr}
 80a3fd6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a3fda:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a3fde:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a3fe2:	bf1d      	ittte	ne
 80a3fe4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a3fe8:	ea94 0f0c 	teqne	r4, ip
 80a3fec:	ea95 0f0c 	teqne	r5, ip
 80a3ff0:	f000 f8de 	bleq	80a41b0 <__aeabi_dmul+0x1dc>
 80a3ff4:	442c      	add	r4, r5
 80a3ff6:	ea81 0603 	eor.w	r6, r1, r3
 80a3ffa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a3ffe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a4002:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a4006:	bf18      	it	ne
 80a4008:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a400c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a4010:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a4014:	d038      	beq.n	80a4088 <__aeabi_dmul+0xb4>
 80a4016:	fba0 ce02 	umull	ip, lr, r0, r2
 80a401a:	f04f 0500 	mov.w	r5, #0
 80a401e:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a4022:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a4026:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a402a:	f04f 0600 	mov.w	r6, #0
 80a402e:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a4032:	f09c 0f00 	teq	ip, #0
 80a4036:	bf18      	it	ne
 80a4038:	f04e 0e01 	orrne.w	lr, lr, #1
 80a403c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a4040:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a4044:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a4048:	d204      	bcs.n	80a4054 <__aeabi_dmul+0x80>
 80a404a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a404e:	416d      	adcs	r5, r5
 80a4050:	eb46 0606 	adc.w	r6, r6, r6
 80a4054:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a4058:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a405c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a4060:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a4064:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a4068:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a406c:	bf88      	it	hi
 80a406e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a4072:	d81e      	bhi.n	80a40b2 <__aeabi_dmul+0xde>
 80a4074:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a4078:	bf08      	it	eq
 80a407a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a407e:	f150 0000 	adcs.w	r0, r0, #0
 80a4082:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a4086:	bd70      	pop	{r4, r5, r6, pc}
 80a4088:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a408c:	ea46 0101 	orr.w	r1, r6, r1
 80a4090:	ea40 0002 	orr.w	r0, r0, r2
 80a4094:	ea81 0103 	eor.w	r1, r1, r3
 80a4098:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a409c:	bfc2      	ittt	gt
 80a409e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a40a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a40a6:	bd70      	popgt	{r4, r5, r6, pc}
 80a40a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a40ac:	f04f 0e00 	mov.w	lr, #0
 80a40b0:	3c01      	subs	r4, #1
 80a40b2:	f300 80ab 	bgt.w	80a420c <__aeabi_dmul+0x238>
 80a40b6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a40ba:	bfde      	ittt	le
 80a40bc:	2000      	movle	r0, #0
 80a40be:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a40c2:	bd70      	pople	{r4, r5, r6, pc}
 80a40c4:	f1c4 0400 	rsb	r4, r4, #0
 80a40c8:	3c20      	subs	r4, #32
 80a40ca:	da35      	bge.n	80a4138 <__aeabi_dmul+0x164>
 80a40cc:	340c      	adds	r4, #12
 80a40ce:	dc1b      	bgt.n	80a4108 <__aeabi_dmul+0x134>
 80a40d0:	f104 0414 	add.w	r4, r4, #20
 80a40d4:	f1c4 0520 	rsb	r5, r4, #32
 80a40d8:	fa00 f305 	lsl.w	r3, r0, r5
 80a40dc:	fa20 f004 	lsr.w	r0, r0, r4
 80a40e0:	fa01 f205 	lsl.w	r2, r1, r5
 80a40e4:	ea40 0002 	orr.w	r0, r0, r2
 80a40e8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a40ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a40f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a40f4:	fa21 f604 	lsr.w	r6, r1, r4
 80a40f8:	eb42 0106 	adc.w	r1, r2, r6
 80a40fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a4100:	bf08      	it	eq
 80a4102:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a4106:	bd70      	pop	{r4, r5, r6, pc}
 80a4108:	f1c4 040c 	rsb	r4, r4, #12
 80a410c:	f1c4 0520 	rsb	r5, r4, #32
 80a4110:	fa00 f304 	lsl.w	r3, r0, r4
 80a4114:	fa20 f005 	lsr.w	r0, r0, r5
 80a4118:	fa01 f204 	lsl.w	r2, r1, r4
 80a411c:	ea40 0002 	orr.w	r0, r0, r2
 80a4120:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a4124:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a4128:	f141 0100 	adc.w	r1, r1, #0
 80a412c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a4130:	bf08      	it	eq
 80a4132:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a4136:	bd70      	pop	{r4, r5, r6, pc}
 80a4138:	f1c4 0520 	rsb	r5, r4, #32
 80a413c:	fa00 f205 	lsl.w	r2, r0, r5
 80a4140:	ea4e 0e02 	orr.w	lr, lr, r2
 80a4144:	fa20 f304 	lsr.w	r3, r0, r4
 80a4148:	fa01 f205 	lsl.w	r2, r1, r5
 80a414c:	ea43 0302 	orr.w	r3, r3, r2
 80a4150:	fa21 f004 	lsr.w	r0, r1, r4
 80a4154:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a4158:	fa21 f204 	lsr.w	r2, r1, r4
 80a415c:	ea20 0002 	bic.w	r0, r0, r2
 80a4160:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a4164:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a4168:	bf08      	it	eq
 80a416a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a416e:	bd70      	pop	{r4, r5, r6, pc}
 80a4170:	f094 0f00 	teq	r4, #0
 80a4174:	d10f      	bne.n	80a4196 <__aeabi_dmul+0x1c2>
 80a4176:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a417a:	0040      	lsls	r0, r0, #1
 80a417c:	eb41 0101 	adc.w	r1, r1, r1
 80a4180:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a4184:	bf08      	it	eq
 80a4186:	3c01      	subeq	r4, #1
 80a4188:	d0f7      	beq.n	80a417a <__aeabi_dmul+0x1a6>
 80a418a:	ea41 0106 	orr.w	r1, r1, r6
 80a418e:	f095 0f00 	teq	r5, #0
 80a4192:	bf18      	it	ne
 80a4194:	4770      	bxne	lr
 80a4196:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a419a:	0052      	lsls	r2, r2, #1
 80a419c:	eb43 0303 	adc.w	r3, r3, r3
 80a41a0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a41a4:	bf08      	it	eq
 80a41a6:	3d01      	subeq	r5, #1
 80a41a8:	d0f7      	beq.n	80a419a <__aeabi_dmul+0x1c6>
 80a41aa:	ea43 0306 	orr.w	r3, r3, r6
 80a41ae:	4770      	bx	lr
 80a41b0:	ea94 0f0c 	teq	r4, ip
 80a41b4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a41b8:	bf18      	it	ne
 80a41ba:	ea95 0f0c 	teqne	r5, ip
 80a41be:	d00c      	beq.n	80a41da <__aeabi_dmul+0x206>
 80a41c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a41c4:	bf18      	it	ne
 80a41c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a41ca:	d1d1      	bne.n	80a4170 <__aeabi_dmul+0x19c>
 80a41cc:	ea81 0103 	eor.w	r1, r1, r3
 80a41d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a41d4:	f04f 0000 	mov.w	r0, #0
 80a41d8:	bd70      	pop	{r4, r5, r6, pc}
 80a41da:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a41de:	bf06      	itte	eq
 80a41e0:	4610      	moveq	r0, r2
 80a41e2:	4619      	moveq	r1, r3
 80a41e4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a41e8:	d019      	beq.n	80a421e <__aeabi_dmul+0x24a>
 80a41ea:	ea94 0f0c 	teq	r4, ip
 80a41ee:	d102      	bne.n	80a41f6 <__aeabi_dmul+0x222>
 80a41f0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a41f4:	d113      	bne.n	80a421e <__aeabi_dmul+0x24a>
 80a41f6:	ea95 0f0c 	teq	r5, ip
 80a41fa:	d105      	bne.n	80a4208 <__aeabi_dmul+0x234>
 80a41fc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a4200:	bf1c      	itt	ne
 80a4202:	4610      	movne	r0, r2
 80a4204:	4619      	movne	r1, r3
 80a4206:	d10a      	bne.n	80a421e <__aeabi_dmul+0x24a>
 80a4208:	ea81 0103 	eor.w	r1, r1, r3
 80a420c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a4210:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a4214:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a4218:	f04f 0000 	mov.w	r0, #0
 80a421c:	bd70      	pop	{r4, r5, r6, pc}
 80a421e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a4222:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a4226:	bd70      	pop	{r4, r5, r6, pc}

080a4228 <__aeabi_ddiv>:
 80a4228:	b570      	push	{r4, r5, r6, lr}
 80a422a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a422e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a4232:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a4236:	bf1d      	ittte	ne
 80a4238:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a423c:	ea94 0f0c 	teqne	r4, ip
 80a4240:	ea95 0f0c 	teqne	r5, ip
 80a4244:	f000 f8a7 	bleq	80a4396 <__aeabi_ddiv+0x16e>
 80a4248:	eba4 0405 	sub.w	r4, r4, r5
 80a424c:	ea81 0e03 	eor.w	lr, r1, r3
 80a4250:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a4254:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a4258:	f000 8088 	beq.w	80a436c <__aeabi_ddiv+0x144>
 80a425c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a4260:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a4264:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a4268:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a426c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a4270:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a4274:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a4278:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a427c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a4280:	429d      	cmp	r5, r3
 80a4282:	bf08      	it	eq
 80a4284:	4296      	cmpeq	r6, r2
 80a4286:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a428a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a428e:	d202      	bcs.n	80a4296 <__aeabi_ddiv+0x6e>
 80a4290:	085b      	lsrs	r3, r3, #1
 80a4292:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4296:	1ab6      	subs	r6, r6, r2
 80a4298:	eb65 0503 	sbc.w	r5, r5, r3
 80a429c:	085b      	lsrs	r3, r3, #1
 80a429e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a42a2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a42a6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a42aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80a42ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a42b2:	bf22      	ittt	cs
 80a42b4:	1ab6      	subcs	r6, r6, r2
 80a42b6:	4675      	movcs	r5, lr
 80a42b8:	ea40 000c 	orrcs.w	r0, r0, ip
 80a42bc:	085b      	lsrs	r3, r3, #1
 80a42be:	ea4f 0232 	mov.w	r2, r2, rrx
 80a42c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80a42c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a42ca:	bf22      	ittt	cs
 80a42cc:	1ab6      	subcs	r6, r6, r2
 80a42ce:	4675      	movcs	r5, lr
 80a42d0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a42d4:	085b      	lsrs	r3, r3, #1
 80a42d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80a42da:	ebb6 0e02 	subs.w	lr, r6, r2
 80a42de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a42e2:	bf22      	ittt	cs
 80a42e4:	1ab6      	subcs	r6, r6, r2
 80a42e6:	4675      	movcs	r5, lr
 80a42e8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a42ec:	085b      	lsrs	r3, r3, #1
 80a42ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80a42f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80a42f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a42fa:	bf22      	ittt	cs
 80a42fc:	1ab6      	subcs	r6, r6, r2
 80a42fe:	4675      	movcs	r5, lr
 80a4300:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a4304:	ea55 0e06 	orrs.w	lr, r5, r6
 80a4308:	d018      	beq.n	80a433c <__aeabi_ddiv+0x114>
 80a430a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a430e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a4312:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a4316:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a431a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a431e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a4322:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a4326:	d1c0      	bne.n	80a42aa <__aeabi_ddiv+0x82>
 80a4328:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a432c:	d10b      	bne.n	80a4346 <__aeabi_ddiv+0x11e>
 80a432e:	ea41 0100 	orr.w	r1, r1, r0
 80a4332:	f04f 0000 	mov.w	r0, #0
 80a4336:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a433a:	e7b6      	b.n	80a42aa <__aeabi_ddiv+0x82>
 80a433c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a4340:	bf04      	itt	eq
 80a4342:	4301      	orreq	r1, r0
 80a4344:	2000      	moveq	r0, #0
 80a4346:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a434a:	bf88      	it	hi
 80a434c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a4350:	f63f aeaf 	bhi.w	80a40b2 <__aeabi_dmul+0xde>
 80a4354:	ebb5 0c03 	subs.w	ip, r5, r3
 80a4358:	bf04      	itt	eq
 80a435a:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a435e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a4362:	f150 0000 	adcs.w	r0, r0, #0
 80a4366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a436a:	bd70      	pop	{r4, r5, r6, pc}
 80a436c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a4370:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a4374:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a4378:	bfc2      	ittt	gt
 80a437a:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a437e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a4382:	bd70      	popgt	{r4, r5, r6, pc}
 80a4384:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a4388:	f04f 0e00 	mov.w	lr, #0
 80a438c:	3c01      	subs	r4, #1
 80a438e:	e690      	b.n	80a40b2 <__aeabi_dmul+0xde>
 80a4390:	ea45 0e06 	orr.w	lr, r5, r6
 80a4394:	e68d      	b.n	80a40b2 <__aeabi_dmul+0xde>
 80a4396:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a439a:	ea94 0f0c 	teq	r4, ip
 80a439e:	bf08      	it	eq
 80a43a0:	ea95 0f0c 	teqeq	r5, ip
 80a43a4:	f43f af3b 	beq.w	80a421e <__aeabi_dmul+0x24a>
 80a43a8:	ea94 0f0c 	teq	r4, ip
 80a43ac:	d10a      	bne.n	80a43c4 <__aeabi_ddiv+0x19c>
 80a43ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a43b2:	f47f af34 	bne.w	80a421e <__aeabi_dmul+0x24a>
 80a43b6:	ea95 0f0c 	teq	r5, ip
 80a43ba:	f47f af25 	bne.w	80a4208 <__aeabi_dmul+0x234>
 80a43be:	4610      	mov	r0, r2
 80a43c0:	4619      	mov	r1, r3
 80a43c2:	e72c      	b.n	80a421e <__aeabi_dmul+0x24a>
 80a43c4:	ea95 0f0c 	teq	r5, ip
 80a43c8:	d106      	bne.n	80a43d8 <__aeabi_ddiv+0x1b0>
 80a43ca:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a43ce:	f43f aefd 	beq.w	80a41cc <__aeabi_dmul+0x1f8>
 80a43d2:	4610      	mov	r0, r2
 80a43d4:	4619      	mov	r1, r3
 80a43d6:	e722      	b.n	80a421e <__aeabi_dmul+0x24a>
 80a43d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a43dc:	bf18      	it	ne
 80a43de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a43e2:	f47f aec5 	bne.w	80a4170 <__aeabi_dmul+0x19c>
 80a43e6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a43ea:	f47f af0d 	bne.w	80a4208 <__aeabi_dmul+0x234>
 80a43ee:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a43f2:	f47f aeeb 	bne.w	80a41cc <__aeabi_dmul+0x1f8>
 80a43f6:	e712      	b.n	80a421e <__aeabi_dmul+0x24a>

080a43f8 <__aeabi_d2uiz>:
 80a43f8:	004a      	lsls	r2, r1, #1
 80a43fa:	d211      	bcs.n	80a4420 <__aeabi_d2uiz+0x28>
 80a43fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a4400:	d211      	bcs.n	80a4426 <__aeabi_d2uiz+0x2e>
 80a4402:	d50d      	bpl.n	80a4420 <__aeabi_d2uiz+0x28>
 80a4404:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a4408:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a440c:	d40e      	bmi.n	80a442c <__aeabi_d2uiz+0x34>
 80a440e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a4412:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a4416:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a441a:	fa23 f002 	lsr.w	r0, r3, r2
 80a441e:	4770      	bx	lr
 80a4420:	f04f 0000 	mov.w	r0, #0
 80a4424:	4770      	bx	lr
 80a4426:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a442a:	d102      	bne.n	80a4432 <__aeabi_d2uiz+0x3a>
 80a442c:	f04f 30ff 	mov.w	r0, #4294967295
 80a4430:	4770      	bx	lr
 80a4432:	f04f 0000 	mov.w	r0, #0
 80a4436:	4770      	bx	lr

080a4438 <__aeabi_frsub>:
 80a4438:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a443c:	e002      	b.n	80a4444 <__addsf3>
 80a443e:	bf00      	nop

080a4440 <__aeabi_fsub>:
 80a4440:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a4444 <__addsf3>:
 80a4444:	0042      	lsls	r2, r0, #1
 80a4446:	bf1f      	itttt	ne
 80a4448:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a444c:	ea92 0f03 	teqne	r2, r3
 80a4450:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a4454:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a4458:	d06a      	beq.n	80a4530 <__addsf3+0xec>
 80a445a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a445e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a4462:	bfc1      	itttt	gt
 80a4464:	18d2      	addgt	r2, r2, r3
 80a4466:	4041      	eorgt	r1, r0
 80a4468:	4048      	eorgt	r0, r1
 80a446a:	4041      	eorgt	r1, r0
 80a446c:	bfb8      	it	lt
 80a446e:	425b      	neglt	r3, r3
 80a4470:	2b19      	cmp	r3, #25
 80a4472:	bf88      	it	hi
 80a4474:	4770      	bxhi	lr
 80a4476:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a447a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a447e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a4482:	bf18      	it	ne
 80a4484:	4240      	negne	r0, r0
 80a4486:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a448a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a448e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a4492:	bf18      	it	ne
 80a4494:	4249      	negne	r1, r1
 80a4496:	ea92 0f03 	teq	r2, r3
 80a449a:	d03f      	beq.n	80a451c <__addsf3+0xd8>
 80a449c:	f1a2 0201 	sub.w	r2, r2, #1
 80a44a0:	fa41 fc03 	asr.w	ip, r1, r3
 80a44a4:	eb10 000c 	adds.w	r0, r0, ip
 80a44a8:	f1c3 0320 	rsb	r3, r3, #32
 80a44ac:	fa01 f103 	lsl.w	r1, r1, r3
 80a44b0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a44b4:	d502      	bpl.n	80a44bc <__addsf3+0x78>
 80a44b6:	4249      	negs	r1, r1
 80a44b8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a44bc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a44c0:	d313      	bcc.n	80a44ea <__addsf3+0xa6>
 80a44c2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a44c6:	d306      	bcc.n	80a44d6 <__addsf3+0x92>
 80a44c8:	0840      	lsrs	r0, r0, #1
 80a44ca:	ea4f 0131 	mov.w	r1, r1, rrx
 80a44ce:	f102 0201 	add.w	r2, r2, #1
 80a44d2:	2afe      	cmp	r2, #254	; 0xfe
 80a44d4:	d251      	bcs.n	80a457a <__addsf3+0x136>
 80a44d6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a44da:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a44de:	bf08      	it	eq
 80a44e0:	f020 0001 	biceq.w	r0, r0, #1
 80a44e4:	ea40 0003 	orr.w	r0, r0, r3
 80a44e8:	4770      	bx	lr
 80a44ea:	0049      	lsls	r1, r1, #1
 80a44ec:	eb40 0000 	adc.w	r0, r0, r0
 80a44f0:	3a01      	subs	r2, #1
 80a44f2:	bf28      	it	cs
 80a44f4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80a44f8:	d2ed      	bcs.n	80a44d6 <__addsf3+0x92>
 80a44fa:	fab0 fc80 	clz	ip, r0
 80a44fe:	f1ac 0c08 	sub.w	ip, ip, #8
 80a4502:	ebb2 020c 	subs.w	r2, r2, ip
 80a4506:	fa00 f00c 	lsl.w	r0, r0, ip
 80a450a:	bfaa      	itet	ge
 80a450c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a4510:	4252      	neglt	r2, r2
 80a4512:	4318      	orrge	r0, r3
 80a4514:	bfbc      	itt	lt
 80a4516:	40d0      	lsrlt	r0, r2
 80a4518:	4318      	orrlt	r0, r3
 80a451a:	4770      	bx	lr
 80a451c:	f092 0f00 	teq	r2, #0
 80a4520:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a4524:	bf06      	itte	eq
 80a4526:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a452a:	3201      	addeq	r2, #1
 80a452c:	3b01      	subne	r3, #1
 80a452e:	e7b5      	b.n	80a449c <__addsf3+0x58>
 80a4530:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a4534:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a4538:	bf18      	it	ne
 80a453a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a453e:	d021      	beq.n	80a4584 <__addsf3+0x140>
 80a4540:	ea92 0f03 	teq	r2, r3
 80a4544:	d004      	beq.n	80a4550 <__addsf3+0x10c>
 80a4546:	f092 0f00 	teq	r2, #0
 80a454a:	bf08      	it	eq
 80a454c:	4608      	moveq	r0, r1
 80a454e:	4770      	bx	lr
 80a4550:	ea90 0f01 	teq	r0, r1
 80a4554:	bf1c      	itt	ne
 80a4556:	2000      	movne	r0, #0
 80a4558:	4770      	bxne	lr
 80a455a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a455e:	d104      	bne.n	80a456a <__addsf3+0x126>
 80a4560:	0040      	lsls	r0, r0, #1
 80a4562:	bf28      	it	cs
 80a4564:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a4568:	4770      	bx	lr
 80a456a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a456e:	bf3c      	itt	cc
 80a4570:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a4574:	4770      	bxcc	lr
 80a4576:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a457a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a457e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4582:	4770      	bx	lr
 80a4584:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a4588:	bf16      	itet	ne
 80a458a:	4608      	movne	r0, r1
 80a458c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a4590:	4601      	movne	r1, r0
 80a4592:	0242      	lsls	r2, r0, #9
 80a4594:	bf06      	itte	eq
 80a4596:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a459a:	ea90 0f01 	teqeq	r0, r1
 80a459e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a45a2:	4770      	bx	lr

080a45a4 <__aeabi_ui2f>:
 80a45a4:	f04f 0300 	mov.w	r3, #0
 80a45a8:	e004      	b.n	80a45b4 <__aeabi_i2f+0x8>
 80a45aa:	bf00      	nop

080a45ac <__aeabi_i2f>:
 80a45ac:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a45b0:	bf48      	it	mi
 80a45b2:	4240      	negmi	r0, r0
 80a45b4:	ea5f 0c00 	movs.w	ip, r0
 80a45b8:	bf08      	it	eq
 80a45ba:	4770      	bxeq	lr
 80a45bc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a45c0:	4601      	mov	r1, r0
 80a45c2:	f04f 0000 	mov.w	r0, #0
 80a45c6:	e01c      	b.n	80a4602 <__aeabi_l2f+0x2a>

080a45c8 <__aeabi_ul2f>:
 80a45c8:	ea50 0201 	orrs.w	r2, r0, r1
 80a45cc:	bf08      	it	eq
 80a45ce:	4770      	bxeq	lr
 80a45d0:	f04f 0300 	mov.w	r3, #0
 80a45d4:	e00a      	b.n	80a45ec <__aeabi_l2f+0x14>
 80a45d6:	bf00      	nop

080a45d8 <__aeabi_l2f>:
 80a45d8:	ea50 0201 	orrs.w	r2, r0, r1
 80a45dc:	bf08      	it	eq
 80a45de:	4770      	bxeq	lr
 80a45e0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a45e4:	d502      	bpl.n	80a45ec <__aeabi_l2f+0x14>
 80a45e6:	4240      	negs	r0, r0
 80a45e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a45ec:	ea5f 0c01 	movs.w	ip, r1
 80a45f0:	bf02      	ittt	eq
 80a45f2:	4684      	moveq	ip, r0
 80a45f4:	4601      	moveq	r1, r0
 80a45f6:	2000      	moveq	r0, #0
 80a45f8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a45fc:	bf08      	it	eq
 80a45fe:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a4602:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a4606:	fabc f28c 	clz	r2, ip
 80a460a:	3a08      	subs	r2, #8
 80a460c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a4610:	db10      	blt.n	80a4634 <__aeabi_l2f+0x5c>
 80a4612:	fa01 fc02 	lsl.w	ip, r1, r2
 80a4616:	4463      	add	r3, ip
 80a4618:	fa00 fc02 	lsl.w	ip, r0, r2
 80a461c:	f1c2 0220 	rsb	r2, r2, #32
 80a4620:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a4624:	fa20 f202 	lsr.w	r2, r0, r2
 80a4628:	eb43 0002 	adc.w	r0, r3, r2
 80a462c:	bf08      	it	eq
 80a462e:	f020 0001 	biceq.w	r0, r0, #1
 80a4632:	4770      	bx	lr
 80a4634:	f102 0220 	add.w	r2, r2, #32
 80a4638:	fa01 fc02 	lsl.w	ip, r1, r2
 80a463c:	f1c2 0220 	rsb	r2, r2, #32
 80a4640:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a4644:	fa21 f202 	lsr.w	r2, r1, r2
 80a4648:	eb43 0002 	adc.w	r0, r3, r2
 80a464c:	bf08      	it	eq
 80a464e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a4652:	4770      	bx	lr

080a4654 <__aeabi_fmul>:
 80a4654:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a4658:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a465c:	bf1e      	ittt	ne
 80a465e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a4662:	ea92 0f0c 	teqne	r2, ip
 80a4666:	ea93 0f0c 	teqne	r3, ip
 80a466a:	d06f      	beq.n	80a474c <__aeabi_fmul+0xf8>
 80a466c:	441a      	add	r2, r3
 80a466e:	ea80 0c01 	eor.w	ip, r0, r1
 80a4672:	0240      	lsls	r0, r0, #9
 80a4674:	bf18      	it	ne
 80a4676:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a467a:	d01e      	beq.n	80a46ba <__aeabi_fmul+0x66>
 80a467c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a4680:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a4684:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a4688:	fba0 3101 	umull	r3, r1, r0, r1
 80a468c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a4690:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a4694:	bf3e      	ittt	cc
 80a4696:	0049      	lslcc	r1, r1, #1
 80a4698:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a469c:	005b      	lslcc	r3, r3, #1
 80a469e:	ea40 0001 	orr.w	r0, r0, r1
 80a46a2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a46a6:	2afd      	cmp	r2, #253	; 0xfd
 80a46a8:	d81d      	bhi.n	80a46e6 <__aeabi_fmul+0x92>
 80a46aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a46ae:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a46b2:	bf08      	it	eq
 80a46b4:	f020 0001 	biceq.w	r0, r0, #1
 80a46b8:	4770      	bx	lr
 80a46ba:	f090 0f00 	teq	r0, #0
 80a46be:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a46c2:	bf08      	it	eq
 80a46c4:	0249      	lsleq	r1, r1, #9
 80a46c6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a46ca:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a46ce:	3a7f      	subs	r2, #127	; 0x7f
 80a46d0:	bfc2      	ittt	gt
 80a46d2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a46d6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a46da:	4770      	bxgt	lr
 80a46dc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a46e0:	f04f 0300 	mov.w	r3, #0
 80a46e4:	3a01      	subs	r2, #1
 80a46e6:	dc5d      	bgt.n	80a47a4 <__aeabi_fmul+0x150>
 80a46e8:	f112 0f19 	cmn.w	r2, #25
 80a46ec:	bfdc      	itt	le
 80a46ee:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a46f2:	4770      	bxle	lr
 80a46f4:	f1c2 0200 	rsb	r2, r2, #0
 80a46f8:	0041      	lsls	r1, r0, #1
 80a46fa:	fa21 f102 	lsr.w	r1, r1, r2
 80a46fe:	f1c2 0220 	rsb	r2, r2, #32
 80a4702:	fa00 fc02 	lsl.w	ip, r0, r2
 80a4706:	ea5f 0031 	movs.w	r0, r1, rrx
 80a470a:	f140 0000 	adc.w	r0, r0, #0
 80a470e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a4712:	bf08      	it	eq
 80a4714:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a4718:	4770      	bx	lr
 80a471a:	f092 0f00 	teq	r2, #0
 80a471e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a4722:	bf02      	ittt	eq
 80a4724:	0040      	lsleq	r0, r0, #1
 80a4726:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a472a:	3a01      	subeq	r2, #1
 80a472c:	d0f9      	beq.n	80a4722 <__aeabi_fmul+0xce>
 80a472e:	ea40 000c 	orr.w	r0, r0, ip
 80a4732:	f093 0f00 	teq	r3, #0
 80a4736:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a473a:	bf02      	ittt	eq
 80a473c:	0049      	lsleq	r1, r1, #1
 80a473e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a4742:	3b01      	subeq	r3, #1
 80a4744:	d0f9      	beq.n	80a473a <__aeabi_fmul+0xe6>
 80a4746:	ea41 010c 	orr.w	r1, r1, ip
 80a474a:	e78f      	b.n	80a466c <__aeabi_fmul+0x18>
 80a474c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a4750:	ea92 0f0c 	teq	r2, ip
 80a4754:	bf18      	it	ne
 80a4756:	ea93 0f0c 	teqne	r3, ip
 80a475a:	d00a      	beq.n	80a4772 <__aeabi_fmul+0x11e>
 80a475c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a4760:	bf18      	it	ne
 80a4762:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a4766:	d1d8      	bne.n	80a471a <__aeabi_fmul+0xc6>
 80a4768:	ea80 0001 	eor.w	r0, r0, r1
 80a476c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a4770:	4770      	bx	lr
 80a4772:	f090 0f00 	teq	r0, #0
 80a4776:	bf17      	itett	ne
 80a4778:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a477c:	4608      	moveq	r0, r1
 80a477e:	f091 0f00 	teqne	r1, #0
 80a4782:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a4786:	d014      	beq.n	80a47b2 <__aeabi_fmul+0x15e>
 80a4788:	ea92 0f0c 	teq	r2, ip
 80a478c:	d101      	bne.n	80a4792 <__aeabi_fmul+0x13e>
 80a478e:	0242      	lsls	r2, r0, #9
 80a4790:	d10f      	bne.n	80a47b2 <__aeabi_fmul+0x15e>
 80a4792:	ea93 0f0c 	teq	r3, ip
 80a4796:	d103      	bne.n	80a47a0 <__aeabi_fmul+0x14c>
 80a4798:	024b      	lsls	r3, r1, #9
 80a479a:	bf18      	it	ne
 80a479c:	4608      	movne	r0, r1
 80a479e:	d108      	bne.n	80a47b2 <__aeabi_fmul+0x15e>
 80a47a0:	ea80 0001 	eor.w	r0, r0, r1
 80a47a4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a47a8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a47ac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a47b0:	4770      	bx	lr
 80a47b2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a47b6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a47ba:	4770      	bx	lr

080a47bc <__aeabi_fdiv>:
 80a47bc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a47c0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a47c4:	bf1e      	ittt	ne
 80a47c6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a47ca:	ea92 0f0c 	teqne	r2, ip
 80a47ce:	ea93 0f0c 	teqne	r3, ip
 80a47d2:	d069      	beq.n	80a48a8 <__aeabi_fdiv+0xec>
 80a47d4:	eba2 0203 	sub.w	r2, r2, r3
 80a47d8:	ea80 0c01 	eor.w	ip, r0, r1
 80a47dc:	0249      	lsls	r1, r1, #9
 80a47de:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a47e2:	d037      	beq.n	80a4854 <__aeabi_fdiv+0x98>
 80a47e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a47e8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a47ec:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a47f0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a47f4:	428b      	cmp	r3, r1
 80a47f6:	bf38      	it	cc
 80a47f8:	005b      	lslcc	r3, r3, #1
 80a47fa:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a47fe:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a4802:	428b      	cmp	r3, r1
 80a4804:	bf24      	itt	cs
 80a4806:	1a5b      	subcs	r3, r3, r1
 80a4808:	ea40 000c 	orrcs.w	r0, r0, ip
 80a480c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a4810:	bf24      	itt	cs
 80a4812:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a4816:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a481a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a481e:	bf24      	itt	cs
 80a4820:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a4824:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a4828:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a482c:	bf24      	itt	cs
 80a482e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a4832:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a4836:	011b      	lsls	r3, r3, #4
 80a4838:	bf18      	it	ne
 80a483a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a483e:	d1e0      	bne.n	80a4802 <__aeabi_fdiv+0x46>
 80a4840:	2afd      	cmp	r2, #253	; 0xfd
 80a4842:	f63f af50 	bhi.w	80a46e6 <__aeabi_fmul+0x92>
 80a4846:	428b      	cmp	r3, r1
 80a4848:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a484c:	bf08      	it	eq
 80a484e:	f020 0001 	biceq.w	r0, r0, #1
 80a4852:	4770      	bx	lr
 80a4854:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a4858:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a485c:	327f      	adds	r2, #127	; 0x7f
 80a485e:	bfc2      	ittt	gt
 80a4860:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a4864:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a4868:	4770      	bxgt	lr
 80a486a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a486e:	f04f 0300 	mov.w	r3, #0
 80a4872:	3a01      	subs	r2, #1
 80a4874:	e737      	b.n	80a46e6 <__aeabi_fmul+0x92>
 80a4876:	f092 0f00 	teq	r2, #0
 80a487a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a487e:	bf02      	ittt	eq
 80a4880:	0040      	lsleq	r0, r0, #1
 80a4882:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a4886:	3a01      	subeq	r2, #1
 80a4888:	d0f9      	beq.n	80a487e <__aeabi_fdiv+0xc2>
 80a488a:	ea40 000c 	orr.w	r0, r0, ip
 80a488e:	f093 0f00 	teq	r3, #0
 80a4892:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a4896:	bf02      	ittt	eq
 80a4898:	0049      	lsleq	r1, r1, #1
 80a489a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a489e:	3b01      	subeq	r3, #1
 80a48a0:	d0f9      	beq.n	80a4896 <__aeabi_fdiv+0xda>
 80a48a2:	ea41 010c 	orr.w	r1, r1, ip
 80a48a6:	e795      	b.n	80a47d4 <__aeabi_fdiv+0x18>
 80a48a8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a48ac:	ea92 0f0c 	teq	r2, ip
 80a48b0:	d108      	bne.n	80a48c4 <__aeabi_fdiv+0x108>
 80a48b2:	0242      	lsls	r2, r0, #9
 80a48b4:	f47f af7d 	bne.w	80a47b2 <__aeabi_fmul+0x15e>
 80a48b8:	ea93 0f0c 	teq	r3, ip
 80a48bc:	f47f af70 	bne.w	80a47a0 <__aeabi_fmul+0x14c>
 80a48c0:	4608      	mov	r0, r1
 80a48c2:	e776      	b.n	80a47b2 <__aeabi_fmul+0x15e>
 80a48c4:	ea93 0f0c 	teq	r3, ip
 80a48c8:	d104      	bne.n	80a48d4 <__aeabi_fdiv+0x118>
 80a48ca:	024b      	lsls	r3, r1, #9
 80a48cc:	f43f af4c 	beq.w	80a4768 <__aeabi_fmul+0x114>
 80a48d0:	4608      	mov	r0, r1
 80a48d2:	e76e      	b.n	80a47b2 <__aeabi_fmul+0x15e>
 80a48d4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a48d8:	bf18      	it	ne
 80a48da:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a48de:	d1ca      	bne.n	80a4876 <__aeabi_fdiv+0xba>
 80a48e0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a48e4:	f47f af5c 	bne.w	80a47a0 <__aeabi_fmul+0x14c>
 80a48e8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a48ec:	f47f af3c 	bne.w	80a4768 <__aeabi_fmul+0x114>
 80a48f0:	e75f      	b.n	80a47b2 <__aeabi_fmul+0x15e>
 80a48f2:	bf00      	nop

080a48f4 <__gesf2>:
 80a48f4:	f04f 3cff 	mov.w	ip, #4294967295
 80a48f8:	e006      	b.n	80a4908 <__cmpsf2+0x4>
 80a48fa:	bf00      	nop

080a48fc <__lesf2>:
 80a48fc:	f04f 0c01 	mov.w	ip, #1
 80a4900:	e002      	b.n	80a4908 <__cmpsf2+0x4>
 80a4902:	bf00      	nop

080a4904 <__cmpsf2>:
 80a4904:	f04f 0c01 	mov.w	ip, #1
 80a4908:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a490c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a4910:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a4914:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a4918:	bf18      	it	ne
 80a491a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a491e:	d011      	beq.n	80a4944 <__cmpsf2+0x40>
 80a4920:	b001      	add	sp, #4
 80a4922:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a4926:	bf18      	it	ne
 80a4928:	ea90 0f01 	teqne	r0, r1
 80a492c:	bf58      	it	pl
 80a492e:	ebb2 0003 	subspl.w	r0, r2, r3
 80a4932:	bf88      	it	hi
 80a4934:	17c8      	asrhi	r0, r1, #31
 80a4936:	bf38      	it	cc
 80a4938:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a493c:	bf18      	it	ne
 80a493e:	f040 0001 	orrne.w	r0, r0, #1
 80a4942:	4770      	bx	lr
 80a4944:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a4948:	d102      	bne.n	80a4950 <__cmpsf2+0x4c>
 80a494a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a494e:	d105      	bne.n	80a495c <__cmpsf2+0x58>
 80a4950:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a4954:	d1e4      	bne.n	80a4920 <__cmpsf2+0x1c>
 80a4956:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a495a:	d0e1      	beq.n	80a4920 <__cmpsf2+0x1c>
 80a495c:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a4960:	4770      	bx	lr
 80a4962:	bf00      	nop

080a4964 <__aeabi_cfrcmple>:
 80a4964:	4684      	mov	ip, r0
 80a4966:	4608      	mov	r0, r1
 80a4968:	4661      	mov	r1, ip
 80a496a:	e7ff      	b.n	80a496c <__aeabi_cfcmpeq>

080a496c <__aeabi_cfcmpeq>:
 80a496c:	b50f      	push	{r0, r1, r2, r3, lr}
 80a496e:	f7ff ffc9 	bl	80a4904 <__cmpsf2>
 80a4972:	2800      	cmp	r0, #0
 80a4974:	bf48      	it	mi
 80a4976:	f110 0f00 	cmnmi.w	r0, #0
 80a497a:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a497c <__aeabi_fcmpeq>:
 80a497c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4980:	f7ff fff4 	bl	80a496c <__aeabi_cfcmpeq>
 80a4984:	bf0c      	ite	eq
 80a4986:	2001      	moveq	r0, #1
 80a4988:	2000      	movne	r0, #0
 80a498a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a498e:	bf00      	nop

080a4990 <__aeabi_fcmplt>:
 80a4990:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4994:	f7ff ffea 	bl	80a496c <__aeabi_cfcmpeq>
 80a4998:	bf34      	ite	cc
 80a499a:	2001      	movcc	r0, #1
 80a499c:	2000      	movcs	r0, #0
 80a499e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a49a2:	bf00      	nop

080a49a4 <__aeabi_fcmple>:
 80a49a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a49a8:	f7ff ffe0 	bl	80a496c <__aeabi_cfcmpeq>
 80a49ac:	bf94      	ite	ls
 80a49ae:	2001      	movls	r0, #1
 80a49b0:	2000      	movhi	r0, #0
 80a49b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a49b6:	bf00      	nop

080a49b8 <__aeabi_fcmpge>:
 80a49b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a49bc:	f7ff ffd2 	bl	80a4964 <__aeabi_cfrcmple>
 80a49c0:	bf94      	ite	ls
 80a49c2:	2001      	movls	r0, #1
 80a49c4:	2000      	movhi	r0, #0
 80a49c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a49ca:	bf00      	nop

080a49cc <__aeabi_fcmpgt>:
 80a49cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a49d0:	f7ff ffc8 	bl	80a4964 <__aeabi_cfrcmple>
 80a49d4:	bf34      	ite	cc
 80a49d6:	2001      	movcc	r0, #1
 80a49d8:	2000      	movcs	r0, #0
 80a49da:	f85d fb08 	ldr.w	pc, [sp], #8
 80a49de:	bf00      	nop

080a49e0 <__aeabi_f2lz>:
 80a49e0:	b510      	push	{r4, lr}
 80a49e2:	2100      	movs	r1, #0
 80a49e4:	4604      	mov	r4, r0
 80a49e6:	f7ff ffd3 	bl	80a4990 <__aeabi_fcmplt>
 80a49ea:	b920      	cbnz	r0, 80a49f6 <__aeabi_f2lz+0x16>
 80a49ec:	4620      	mov	r0, r4
 80a49ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a49f2:	f000 b809 	b.w	80a4a08 <__aeabi_f2ulz>
 80a49f6:	f104 4000 	add.w	r0, r4, #2147483648	; 0x80000000
 80a49fa:	f000 f805 	bl	80a4a08 <__aeabi_f2ulz>
 80a49fe:	4240      	negs	r0, r0
 80a4a00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a4a04:	bd10      	pop	{r4, pc}
 80a4a06:	bf00      	nop

080a4a08 <__aeabi_f2ulz>:
 80a4a08:	b5d0      	push	{r4, r6, r7, lr}
 80a4a0a:	f7ff fa8b 	bl	80a3f24 <__aeabi_f2d>
 80a4a0e:	2200      	movs	r2, #0
 80a4a10:	4b0b      	ldr	r3, [pc, #44]	; (80a4a40 <__aeabi_f2ulz+0x38>)
 80a4a12:	4606      	mov	r6, r0
 80a4a14:	460f      	mov	r7, r1
 80a4a16:	f7ff fadd 	bl	80a3fd4 <__aeabi_dmul>
 80a4a1a:	f7ff fced 	bl	80a43f8 <__aeabi_d2uiz>
 80a4a1e:	4604      	mov	r4, r0
 80a4a20:	f7ff fa5e 	bl	80a3ee0 <__aeabi_ui2d>
 80a4a24:	2200      	movs	r2, #0
 80a4a26:	4b07      	ldr	r3, [pc, #28]	; (80a4a44 <__aeabi_f2ulz+0x3c>)
 80a4a28:	f7ff fad4 	bl	80a3fd4 <__aeabi_dmul>
 80a4a2c:	4602      	mov	r2, r0
 80a4a2e:	460b      	mov	r3, r1
 80a4a30:	4630      	mov	r0, r6
 80a4a32:	4639      	mov	r1, r7
 80a4a34:	f7ff f916 	bl	80a3c64 <__aeabi_dsub>
 80a4a38:	f7ff fcde 	bl	80a43f8 <__aeabi_d2uiz>
 80a4a3c:	4621      	mov	r1, r4
 80a4a3e:	bdd0      	pop	{r4, r6, r7, pc}
 80a4a40:	3df00000 	.word	0x3df00000
 80a4a44:	41f00000 	.word	0x41f00000

080a4a48 <__udivmoddi4>:
 80a4a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a4a4c:	9e08      	ldr	r6, [sp, #32]
 80a4a4e:	460d      	mov	r5, r1
 80a4a50:	4604      	mov	r4, r0
 80a4a52:	4688      	mov	r8, r1
 80a4a54:	2b00      	cmp	r3, #0
 80a4a56:	d14d      	bne.n	80a4af4 <__udivmoddi4+0xac>
 80a4a58:	428a      	cmp	r2, r1
 80a4a5a:	4694      	mov	ip, r2
 80a4a5c:	d968      	bls.n	80a4b30 <__udivmoddi4+0xe8>
 80a4a5e:	fab2 f282 	clz	r2, r2
 80a4a62:	b152      	cbz	r2, 80a4a7a <__udivmoddi4+0x32>
 80a4a64:	fa01 f302 	lsl.w	r3, r1, r2
 80a4a68:	f1c2 0120 	rsb	r1, r2, #32
 80a4a6c:	fa20 f101 	lsr.w	r1, r0, r1
 80a4a70:	fa0c fc02 	lsl.w	ip, ip, r2
 80a4a74:	ea41 0803 	orr.w	r8, r1, r3
 80a4a78:	4094      	lsls	r4, r2
 80a4a7a:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80a4a7e:	fbb8 f7f1 	udiv	r7, r8, r1
 80a4a82:	fa1f fe8c 	uxth.w	lr, ip
 80a4a86:	fb01 8817 	mls	r8, r1, r7, r8
 80a4a8a:	fb07 f00e 	mul.w	r0, r7, lr
 80a4a8e:	0c23      	lsrs	r3, r4, #16
 80a4a90:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80a4a94:	4298      	cmp	r0, r3
 80a4a96:	d90a      	bls.n	80a4aae <__udivmoddi4+0x66>
 80a4a98:	eb1c 0303 	adds.w	r3, ip, r3
 80a4a9c:	f107 35ff 	add.w	r5, r7, #4294967295
 80a4aa0:	f080 811e 	bcs.w	80a4ce0 <__udivmoddi4+0x298>
 80a4aa4:	4298      	cmp	r0, r3
 80a4aa6:	f240 811b 	bls.w	80a4ce0 <__udivmoddi4+0x298>
 80a4aaa:	3f02      	subs	r7, #2
 80a4aac:	4463      	add	r3, ip
 80a4aae:	1a1b      	subs	r3, r3, r0
 80a4ab0:	fbb3 f0f1 	udiv	r0, r3, r1
 80a4ab4:	fb01 3310 	mls	r3, r1, r0, r3
 80a4ab8:	fb00 fe0e 	mul.w	lr, r0, lr
 80a4abc:	b2a4      	uxth	r4, r4
 80a4abe:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80a4ac2:	45a6      	cmp	lr, r4
 80a4ac4:	d90a      	bls.n	80a4adc <__udivmoddi4+0x94>
 80a4ac6:	eb1c 0404 	adds.w	r4, ip, r4
 80a4aca:	f100 33ff 	add.w	r3, r0, #4294967295
 80a4ace:	f080 8109 	bcs.w	80a4ce4 <__udivmoddi4+0x29c>
 80a4ad2:	45a6      	cmp	lr, r4
 80a4ad4:	f240 8106 	bls.w	80a4ce4 <__udivmoddi4+0x29c>
 80a4ad8:	4464      	add	r4, ip
 80a4ada:	3802      	subs	r0, #2
 80a4adc:	2100      	movs	r1, #0
 80a4ade:	eba4 040e 	sub.w	r4, r4, lr
 80a4ae2:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80a4ae6:	b11e      	cbz	r6, 80a4af0 <__udivmoddi4+0xa8>
 80a4ae8:	2300      	movs	r3, #0
 80a4aea:	40d4      	lsrs	r4, r2
 80a4aec:	e9c6 4300 	strd	r4, r3, [r6]
 80a4af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a4af4:	428b      	cmp	r3, r1
 80a4af6:	d908      	bls.n	80a4b0a <__udivmoddi4+0xc2>
 80a4af8:	2e00      	cmp	r6, #0
 80a4afa:	f000 80ee 	beq.w	80a4cda <__udivmoddi4+0x292>
 80a4afe:	2100      	movs	r1, #0
 80a4b00:	e9c6 0500 	strd	r0, r5, [r6]
 80a4b04:	4608      	mov	r0, r1
 80a4b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a4b0a:	fab3 f183 	clz	r1, r3
 80a4b0e:	2900      	cmp	r1, #0
 80a4b10:	d14a      	bne.n	80a4ba8 <__udivmoddi4+0x160>
 80a4b12:	42ab      	cmp	r3, r5
 80a4b14:	d302      	bcc.n	80a4b1c <__udivmoddi4+0xd4>
 80a4b16:	4282      	cmp	r2, r0
 80a4b18:	f200 80fc 	bhi.w	80a4d14 <__udivmoddi4+0x2cc>
 80a4b1c:	1a84      	subs	r4, r0, r2
 80a4b1e:	eb65 0303 	sbc.w	r3, r5, r3
 80a4b22:	2001      	movs	r0, #1
 80a4b24:	4698      	mov	r8, r3
 80a4b26:	2e00      	cmp	r6, #0
 80a4b28:	d0e2      	beq.n	80a4af0 <__udivmoddi4+0xa8>
 80a4b2a:	e9c6 4800 	strd	r4, r8, [r6]
 80a4b2e:	e7df      	b.n	80a4af0 <__udivmoddi4+0xa8>
 80a4b30:	b902      	cbnz	r2, 80a4b34 <__udivmoddi4+0xec>
 80a4b32:	deff      	udf	#255	; 0xff
 80a4b34:	fab2 f282 	clz	r2, r2
 80a4b38:	2a00      	cmp	r2, #0
 80a4b3a:	f040 8091 	bne.w	80a4c60 <__udivmoddi4+0x218>
 80a4b3e:	eba1 000c 	sub.w	r0, r1, ip
 80a4b42:	2101      	movs	r1, #1
 80a4b44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80a4b48:	fa1f fe8c 	uxth.w	lr, ip
 80a4b4c:	fbb0 f3f7 	udiv	r3, r0, r7
 80a4b50:	fb07 0013 	mls	r0, r7, r3, r0
 80a4b54:	0c25      	lsrs	r5, r4, #16
 80a4b56:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80a4b5a:	fb0e f003 	mul.w	r0, lr, r3
 80a4b5e:	42a8      	cmp	r0, r5
 80a4b60:	d908      	bls.n	80a4b74 <__udivmoddi4+0x12c>
 80a4b62:	eb1c 0505 	adds.w	r5, ip, r5
 80a4b66:	f103 38ff 	add.w	r8, r3, #4294967295
 80a4b6a:	d202      	bcs.n	80a4b72 <__udivmoddi4+0x12a>
 80a4b6c:	42a8      	cmp	r0, r5
 80a4b6e:	f200 80ce 	bhi.w	80a4d0e <__udivmoddi4+0x2c6>
 80a4b72:	4643      	mov	r3, r8
 80a4b74:	1a2d      	subs	r5, r5, r0
 80a4b76:	fbb5 f0f7 	udiv	r0, r5, r7
 80a4b7a:	fb07 5510 	mls	r5, r7, r0, r5
 80a4b7e:	fb0e fe00 	mul.w	lr, lr, r0
 80a4b82:	b2a4      	uxth	r4, r4
 80a4b84:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80a4b88:	45a6      	cmp	lr, r4
 80a4b8a:	d908      	bls.n	80a4b9e <__udivmoddi4+0x156>
 80a4b8c:	eb1c 0404 	adds.w	r4, ip, r4
 80a4b90:	f100 35ff 	add.w	r5, r0, #4294967295
 80a4b94:	d202      	bcs.n	80a4b9c <__udivmoddi4+0x154>
 80a4b96:	45a6      	cmp	lr, r4
 80a4b98:	f200 80b6 	bhi.w	80a4d08 <__udivmoddi4+0x2c0>
 80a4b9c:	4628      	mov	r0, r5
 80a4b9e:	eba4 040e 	sub.w	r4, r4, lr
 80a4ba2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80a4ba6:	e79e      	b.n	80a4ae6 <__udivmoddi4+0x9e>
 80a4ba8:	f1c1 0720 	rsb	r7, r1, #32
 80a4bac:	408b      	lsls	r3, r1
 80a4bae:	fa22 fc07 	lsr.w	ip, r2, r7
 80a4bb2:	ea4c 0c03 	orr.w	ip, ip, r3
 80a4bb6:	fa25 fa07 	lsr.w	sl, r5, r7
 80a4bba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80a4bbe:	fbba f8f9 	udiv	r8, sl, r9
 80a4bc2:	fa20 f307 	lsr.w	r3, r0, r7
 80a4bc6:	fb09 aa18 	mls	sl, r9, r8, sl
 80a4bca:	408d      	lsls	r5, r1
 80a4bcc:	fa1f fe8c 	uxth.w	lr, ip
 80a4bd0:	431d      	orrs	r5, r3
 80a4bd2:	fa00 f301 	lsl.w	r3, r0, r1
 80a4bd6:	fb08 f00e 	mul.w	r0, r8, lr
 80a4bda:	0c2c      	lsrs	r4, r5, #16
 80a4bdc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80a4be0:	42a0      	cmp	r0, r4
 80a4be2:	fa02 f201 	lsl.w	r2, r2, r1
 80a4be6:	d90b      	bls.n	80a4c00 <__udivmoddi4+0x1b8>
 80a4be8:	eb1c 0404 	adds.w	r4, ip, r4
 80a4bec:	f108 3aff 	add.w	sl, r8, #4294967295
 80a4bf0:	f080 8088 	bcs.w	80a4d04 <__udivmoddi4+0x2bc>
 80a4bf4:	42a0      	cmp	r0, r4
 80a4bf6:	f240 8085 	bls.w	80a4d04 <__udivmoddi4+0x2bc>
 80a4bfa:	f1a8 0802 	sub.w	r8, r8, #2
 80a4bfe:	4464      	add	r4, ip
 80a4c00:	1a24      	subs	r4, r4, r0
 80a4c02:	fbb4 f0f9 	udiv	r0, r4, r9
 80a4c06:	fb09 4410 	mls	r4, r9, r0, r4
 80a4c0a:	fb00 fe0e 	mul.w	lr, r0, lr
 80a4c0e:	b2ad      	uxth	r5, r5
 80a4c10:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80a4c14:	45a6      	cmp	lr, r4
 80a4c16:	d908      	bls.n	80a4c2a <__udivmoddi4+0x1e2>
 80a4c18:	eb1c 0404 	adds.w	r4, ip, r4
 80a4c1c:	f100 35ff 	add.w	r5, r0, #4294967295
 80a4c20:	d26c      	bcs.n	80a4cfc <__udivmoddi4+0x2b4>
 80a4c22:	45a6      	cmp	lr, r4
 80a4c24:	d96a      	bls.n	80a4cfc <__udivmoddi4+0x2b4>
 80a4c26:	3802      	subs	r0, #2
 80a4c28:	4464      	add	r4, ip
 80a4c2a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80a4c2e:	fba0 9502 	umull	r9, r5, r0, r2
 80a4c32:	eba4 040e 	sub.w	r4, r4, lr
 80a4c36:	42ac      	cmp	r4, r5
 80a4c38:	46c8      	mov	r8, r9
 80a4c3a:	46ae      	mov	lr, r5
 80a4c3c:	d356      	bcc.n	80a4cec <__udivmoddi4+0x2a4>
 80a4c3e:	d053      	beq.n	80a4ce8 <__udivmoddi4+0x2a0>
 80a4c40:	2e00      	cmp	r6, #0
 80a4c42:	d069      	beq.n	80a4d18 <__udivmoddi4+0x2d0>
 80a4c44:	ebb3 0208 	subs.w	r2, r3, r8
 80a4c48:	eb64 040e 	sbc.w	r4, r4, lr
 80a4c4c:	fa22 f301 	lsr.w	r3, r2, r1
 80a4c50:	fa04 f707 	lsl.w	r7, r4, r7
 80a4c54:	431f      	orrs	r7, r3
 80a4c56:	40cc      	lsrs	r4, r1
 80a4c58:	e9c6 7400 	strd	r7, r4, [r6]
 80a4c5c:	2100      	movs	r1, #0
 80a4c5e:	e747      	b.n	80a4af0 <__udivmoddi4+0xa8>
 80a4c60:	fa0c fc02 	lsl.w	ip, ip, r2
 80a4c64:	f1c2 0120 	rsb	r1, r2, #32
 80a4c68:	fa25 f301 	lsr.w	r3, r5, r1
 80a4c6c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80a4c70:	fa20 f101 	lsr.w	r1, r0, r1
 80a4c74:	4095      	lsls	r5, r2
 80a4c76:	430d      	orrs	r5, r1
 80a4c78:	fbb3 f1f7 	udiv	r1, r3, r7
 80a4c7c:	fb07 3311 	mls	r3, r7, r1, r3
 80a4c80:	fa1f fe8c 	uxth.w	lr, ip
 80a4c84:	0c28      	lsrs	r0, r5, #16
 80a4c86:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80a4c8a:	fb01 f30e 	mul.w	r3, r1, lr
 80a4c8e:	4283      	cmp	r3, r0
 80a4c90:	fa04 f402 	lsl.w	r4, r4, r2
 80a4c94:	d908      	bls.n	80a4ca8 <__udivmoddi4+0x260>
 80a4c96:	eb1c 0000 	adds.w	r0, ip, r0
 80a4c9a:	f101 38ff 	add.w	r8, r1, #4294967295
 80a4c9e:	d22f      	bcs.n	80a4d00 <__udivmoddi4+0x2b8>
 80a4ca0:	4283      	cmp	r3, r0
 80a4ca2:	d92d      	bls.n	80a4d00 <__udivmoddi4+0x2b8>
 80a4ca4:	3902      	subs	r1, #2
 80a4ca6:	4460      	add	r0, ip
 80a4ca8:	1ac0      	subs	r0, r0, r3
 80a4caa:	fbb0 f3f7 	udiv	r3, r0, r7
 80a4cae:	fb07 0013 	mls	r0, r7, r3, r0
 80a4cb2:	b2ad      	uxth	r5, r5
 80a4cb4:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80a4cb8:	fb03 f00e 	mul.w	r0, r3, lr
 80a4cbc:	42a8      	cmp	r0, r5
 80a4cbe:	d908      	bls.n	80a4cd2 <__udivmoddi4+0x28a>
 80a4cc0:	eb1c 0505 	adds.w	r5, ip, r5
 80a4cc4:	f103 38ff 	add.w	r8, r3, #4294967295
 80a4cc8:	d216      	bcs.n	80a4cf8 <__udivmoddi4+0x2b0>
 80a4cca:	42a8      	cmp	r0, r5
 80a4ccc:	d914      	bls.n	80a4cf8 <__udivmoddi4+0x2b0>
 80a4cce:	3b02      	subs	r3, #2
 80a4cd0:	4465      	add	r5, ip
 80a4cd2:	1a28      	subs	r0, r5, r0
 80a4cd4:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80a4cd8:	e738      	b.n	80a4b4c <__udivmoddi4+0x104>
 80a4cda:	4631      	mov	r1, r6
 80a4cdc:	4630      	mov	r0, r6
 80a4cde:	e707      	b.n	80a4af0 <__udivmoddi4+0xa8>
 80a4ce0:	462f      	mov	r7, r5
 80a4ce2:	e6e4      	b.n	80a4aae <__udivmoddi4+0x66>
 80a4ce4:	4618      	mov	r0, r3
 80a4ce6:	e6f9      	b.n	80a4adc <__udivmoddi4+0x94>
 80a4ce8:	454b      	cmp	r3, r9
 80a4cea:	d2a9      	bcs.n	80a4c40 <__udivmoddi4+0x1f8>
 80a4cec:	ebb9 0802 	subs.w	r8, r9, r2
 80a4cf0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80a4cf4:	3801      	subs	r0, #1
 80a4cf6:	e7a3      	b.n	80a4c40 <__udivmoddi4+0x1f8>
 80a4cf8:	4643      	mov	r3, r8
 80a4cfa:	e7ea      	b.n	80a4cd2 <__udivmoddi4+0x28a>
 80a4cfc:	4628      	mov	r0, r5
 80a4cfe:	e794      	b.n	80a4c2a <__udivmoddi4+0x1e2>
 80a4d00:	4641      	mov	r1, r8
 80a4d02:	e7d1      	b.n	80a4ca8 <__udivmoddi4+0x260>
 80a4d04:	46d0      	mov	r8, sl
 80a4d06:	e77b      	b.n	80a4c00 <__udivmoddi4+0x1b8>
 80a4d08:	4464      	add	r4, ip
 80a4d0a:	3802      	subs	r0, #2
 80a4d0c:	e747      	b.n	80a4b9e <__udivmoddi4+0x156>
 80a4d0e:	3b02      	subs	r3, #2
 80a4d10:	4465      	add	r5, ip
 80a4d12:	e72f      	b.n	80a4b74 <__udivmoddi4+0x12c>
 80a4d14:	4608      	mov	r0, r1
 80a4d16:	e706      	b.n	80a4b26 <__udivmoddi4+0xde>
 80a4d18:	4631      	mov	r1, r6
 80a4d1a:	e6e9      	b.n	80a4af0 <__udivmoddi4+0xa8>

080a4d1c <__aeabi_idiv0>:
 80a4d1c:	4770      	bx	lr
 80a4d1e:	bf00      	nop

080a4d20 <asctime_r>:
 80a4d20:	b510      	push	{r4, lr}
 80a4d22:	460c      	mov	r4, r1
 80a4d24:	6941      	ldr	r1, [r0, #20]
 80a4d26:	b086      	sub	sp, #24
 80a4d28:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 80a4d2c:	6903      	ldr	r3, [r0, #16]
 80a4d2e:	6982      	ldr	r2, [r0, #24]
 80a4d30:	9104      	str	r1, [sp, #16]
 80a4d32:	6801      	ldr	r1, [r0, #0]
 80a4d34:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80a4d38:	9103      	str	r1, [sp, #12]
 80a4d3a:	6841      	ldr	r1, [r0, #4]
 80a4d3c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80a4d40:	9102      	str	r1, [sp, #8]
 80a4d42:	6881      	ldr	r1, [r0, #8]
 80a4d44:	9101      	str	r1, [sp, #4]
 80a4d46:	68c1      	ldr	r1, [r0, #12]
 80a4d48:	4620      	mov	r0, r4
 80a4d4a:	9100      	str	r1, [sp, #0]
 80a4d4c:	4904      	ldr	r1, [pc, #16]	; (80a4d60 <asctime_r+0x40>)
 80a4d4e:	440b      	add	r3, r1
 80a4d50:	4904      	ldr	r1, [pc, #16]	; (80a4d64 <asctime_r+0x44>)
 80a4d52:	440a      	add	r2, r1
 80a4d54:	4904      	ldr	r1, [pc, #16]	; (80a4d68 <asctime_r+0x48>)
 80a4d56:	f7fd fbd7 	bl	80a2508 <siprintf>
 80a4d5a:	4620      	mov	r0, r4
 80a4d5c:	b006      	add	sp, #24
 80a4d5e:	bd10      	pop	{r4, pc}
 80a4d60:	080a7552 	.word	0x080a7552
 80a4d64:	080a753d 	.word	0x080a753d
 80a4d68:	080a751d 	.word	0x080a751d

080a4d6c <atexit>:
 80a4d6c:	2300      	movs	r3, #0
 80a4d6e:	4601      	mov	r1, r0
 80a4d70:	461a      	mov	r2, r3
 80a4d72:	4618      	mov	r0, r3
 80a4d74:	f001 bc9e 	b.w	80a66b4 <__register_exitproc>

080a4d78 <atol>:
 80a4d78:	220a      	movs	r2, #10
 80a4d7a:	2100      	movs	r1, #0
 80a4d7c:	f001 b9dc 	b.w	80a6138 <strtol>

080a4d80 <localtime_r>:
 80a4d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a4d84:	460c      	mov	r4, r1
 80a4d86:	4680      	mov	r8, r0
 80a4d88:	f001 fd54 	bl	80a6834 <__gettzinfo>
 80a4d8c:	4621      	mov	r1, r4
 80a4d8e:	4605      	mov	r5, r0
 80a4d90:	4640      	mov	r0, r8
 80a4d92:	f001 fd53 	bl	80a683c <gmtime_r>
 80a4d96:	6943      	ldr	r3, [r0, #20]
 80a4d98:	4604      	mov	r4, r0
 80a4d9a:	0799      	lsls	r1, r3, #30
 80a4d9c:	f203 776c 	addw	r7, r3, #1900	; 0x76c
 80a4da0:	d105      	bne.n	80a4dae <localtime_r+0x2e>
 80a4da2:	2264      	movs	r2, #100	; 0x64
 80a4da4:	fb97 f3f2 	sdiv	r3, r7, r2
 80a4da8:	fb02 7313 	mls	r3, r2, r3, r7
 80a4dac:	bb73      	cbnz	r3, 80a4e0c <localtime_r+0x8c>
 80a4dae:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80a4db2:	fb97 f6f3 	sdiv	r6, r7, r3
 80a4db6:	fb03 7616 	mls	r6, r3, r6, r7
 80a4dba:	fab6 f386 	clz	r3, r6
 80a4dbe:	095b      	lsrs	r3, r3, #5
 80a4dc0:	2230      	movs	r2, #48	; 0x30
 80a4dc2:	4e66      	ldr	r6, [pc, #408]	; (80a4f5c <localtime_r+0x1dc>)
 80a4dc4:	fb02 6603 	mla	r6, r2, r3, r6
 80a4dc8:	f001 fae0 	bl	80a638c <__tz_lock>
 80a4dcc:	f001 faea 	bl	80a63a4 <_tzset_unlocked>
 80a4dd0:	4b63      	ldr	r3, [pc, #396]	; (80a4f60 <localtime_r+0x1e0>)
 80a4dd2:	681b      	ldr	r3, [r3, #0]
 80a4dd4:	b34b      	cbz	r3, 80a4e2a <localtime_r+0xaa>
 80a4dd6:	686b      	ldr	r3, [r5, #4]
 80a4dd8:	42bb      	cmp	r3, r7
 80a4dda:	d119      	bne.n	80a4e10 <localtime_r+0x90>
 80a4ddc:	e9d8 2300 	ldrd	r2, r3, [r8]
 80a4de0:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 80a4de4:	682f      	ldr	r7, [r5, #0]
 80a4de6:	b9df      	cbnz	r7, 80a4e20 <localtime_r+0xa0>
 80a4de8:	4282      	cmp	r2, r0
 80a4dea:	eb73 0101 	sbcs.w	r1, r3, r1
 80a4dee:	da23      	bge.n	80a4e38 <localtime_r+0xb8>
 80a4df0:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 80a4df4:	4282      	cmp	r2, r0
 80a4df6:	eb73 0701 	sbcs.w	r7, r3, r1
 80a4dfa:	bfb4      	ite	lt
 80a4dfc:	2701      	movlt	r7, #1
 80a4dfe:	2700      	movge	r7, #0
 80a4e00:	4282      	cmp	r2, r0
 80a4e02:	418b      	sbcs	r3, r1
 80a4e04:	6227      	str	r7, [r4, #32]
 80a4e06:	db19      	blt.n	80a4e3c <localtime_r+0xbc>
 80a4e08:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80a4e0a:	e018      	b.n	80a4e3e <localtime_r+0xbe>
 80a4e0c:	2301      	movs	r3, #1
 80a4e0e:	e7d7      	b.n	80a4dc0 <localtime_r+0x40>
 80a4e10:	4638      	mov	r0, r7
 80a4e12:	f001 fa17 	bl	80a6244 <__tzcalc_limits>
 80a4e16:	2800      	cmp	r0, #0
 80a4e18:	d1e0      	bne.n	80a4ddc <localtime_r+0x5c>
 80a4e1a:	f04f 33ff 	mov.w	r3, #4294967295
 80a4e1e:	e004      	b.n	80a4e2a <localtime_r+0xaa>
 80a4e20:	4282      	cmp	r2, r0
 80a4e22:	eb73 0101 	sbcs.w	r1, r3, r1
 80a4e26:	da02      	bge.n	80a4e2e <localtime_r+0xae>
 80a4e28:	2300      	movs	r3, #0
 80a4e2a:	6223      	str	r3, [r4, #32]
 80a4e2c:	e7ec      	b.n	80a4e08 <localtime_r+0x88>
 80a4e2e:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 80a4e32:	4282      	cmp	r2, r0
 80a4e34:	418b      	sbcs	r3, r1
 80a4e36:	daf7      	bge.n	80a4e28 <localtime_r+0xa8>
 80a4e38:	2301      	movs	r3, #1
 80a4e3a:	6223      	str	r3, [r4, #32]
 80a4e3c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80a4e3e:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80a4e42:	fb93 f5f2 	sdiv	r5, r3, r2
 80a4e46:	203c      	movs	r0, #60	; 0x3c
 80a4e48:	fb02 3315 	mls	r3, r2, r5, r3
 80a4e4c:	fb93 f2f0 	sdiv	r2, r3, r0
 80a4e50:	fb00 3012 	mls	r0, r0, r2, r3
 80a4e54:	6861      	ldr	r1, [r4, #4]
 80a4e56:	6823      	ldr	r3, [r4, #0]
 80a4e58:	1a89      	subs	r1, r1, r2
 80a4e5a:	68a2      	ldr	r2, [r4, #8]
 80a4e5c:	1a1b      	subs	r3, r3, r0
 80a4e5e:	1b52      	subs	r2, r2, r5
 80a4e60:	2b3b      	cmp	r3, #59	; 0x3b
 80a4e62:	6023      	str	r3, [r4, #0]
 80a4e64:	6061      	str	r1, [r4, #4]
 80a4e66:	60a2      	str	r2, [r4, #8]
 80a4e68:	dd34      	ble.n	80a4ed4 <localtime_r+0x154>
 80a4e6a:	3101      	adds	r1, #1
 80a4e6c:	6061      	str	r1, [r4, #4]
 80a4e6e:	3b3c      	subs	r3, #60	; 0x3c
 80a4e70:	6023      	str	r3, [r4, #0]
 80a4e72:	6863      	ldr	r3, [r4, #4]
 80a4e74:	2b3b      	cmp	r3, #59	; 0x3b
 80a4e76:	dd33      	ble.n	80a4ee0 <localtime_r+0x160>
 80a4e78:	3201      	adds	r2, #1
 80a4e7a:	60a2      	str	r2, [r4, #8]
 80a4e7c:	3b3c      	subs	r3, #60	; 0x3c
 80a4e7e:	6063      	str	r3, [r4, #4]
 80a4e80:	68a3      	ldr	r3, [r4, #8]
 80a4e82:	2b17      	cmp	r3, #23
 80a4e84:	dd32      	ble.n	80a4eec <localtime_r+0x16c>
 80a4e86:	69e2      	ldr	r2, [r4, #28]
 80a4e88:	3b18      	subs	r3, #24
 80a4e8a:	3201      	adds	r2, #1
 80a4e8c:	61e2      	str	r2, [r4, #28]
 80a4e8e:	69a2      	ldr	r2, [r4, #24]
 80a4e90:	60a3      	str	r3, [r4, #8]
 80a4e92:	3201      	adds	r2, #1
 80a4e94:	2a06      	cmp	r2, #6
 80a4e96:	bfc8      	it	gt
 80a4e98:	2200      	movgt	r2, #0
 80a4e9a:	61a2      	str	r2, [r4, #24]
 80a4e9c:	68e2      	ldr	r2, [r4, #12]
 80a4e9e:	6923      	ldr	r3, [r4, #16]
 80a4ea0:	3201      	adds	r2, #1
 80a4ea2:	60e2      	str	r2, [r4, #12]
 80a4ea4:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 80a4ea8:	428a      	cmp	r2, r1
 80a4eaa:	dd0e      	ble.n	80a4eca <localtime_r+0x14a>
 80a4eac:	2b0b      	cmp	r3, #11
 80a4eae:	eba2 0201 	sub.w	r2, r2, r1
 80a4eb2:	60e2      	str	r2, [r4, #12]
 80a4eb4:	f103 0201 	add.w	r2, r3, #1
 80a4eb8:	bf05      	ittet	eq
 80a4eba:	2200      	moveq	r2, #0
 80a4ebc:	6963      	ldreq	r3, [r4, #20]
 80a4ebe:	6122      	strne	r2, [r4, #16]
 80a4ec0:	3301      	addeq	r3, #1
 80a4ec2:	bf02      	ittt	eq
 80a4ec4:	6122      	streq	r2, [r4, #16]
 80a4ec6:	6163      	streq	r3, [r4, #20]
 80a4ec8:	61e2      	streq	r2, [r4, #28]
 80a4eca:	f001 fa65 	bl	80a6398 <__tz_unlock>
 80a4ece:	4620      	mov	r0, r4
 80a4ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a4ed4:	2b00      	cmp	r3, #0
 80a4ed6:	dacc      	bge.n	80a4e72 <localtime_r+0xf2>
 80a4ed8:	3901      	subs	r1, #1
 80a4eda:	6061      	str	r1, [r4, #4]
 80a4edc:	333c      	adds	r3, #60	; 0x3c
 80a4ede:	e7c7      	b.n	80a4e70 <localtime_r+0xf0>
 80a4ee0:	2b00      	cmp	r3, #0
 80a4ee2:	dacd      	bge.n	80a4e80 <localtime_r+0x100>
 80a4ee4:	3a01      	subs	r2, #1
 80a4ee6:	60a2      	str	r2, [r4, #8]
 80a4ee8:	333c      	adds	r3, #60	; 0x3c
 80a4eea:	e7c8      	b.n	80a4e7e <localtime_r+0xfe>
 80a4eec:	2b00      	cmp	r3, #0
 80a4eee:	daec      	bge.n	80a4eca <localtime_r+0x14a>
 80a4ef0:	69e2      	ldr	r2, [r4, #28]
 80a4ef2:	3318      	adds	r3, #24
 80a4ef4:	3a01      	subs	r2, #1
 80a4ef6:	61e2      	str	r2, [r4, #28]
 80a4ef8:	69a2      	ldr	r2, [r4, #24]
 80a4efa:	60a3      	str	r3, [r4, #8]
 80a4efc:	3a01      	subs	r2, #1
 80a4efe:	bf48      	it	mi
 80a4f00:	2206      	movmi	r2, #6
 80a4f02:	61a2      	str	r2, [r4, #24]
 80a4f04:	68e2      	ldr	r2, [r4, #12]
 80a4f06:	3a01      	subs	r2, #1
 80a4f08:	60e2      	str	r2, [r4, #12]
 80a4f0a:	2a00      	cmp	r2, #0
 80a4f0c:	d1dd      	bne.n	80a4eca <localtime_r+0x14a>
 80a4f0e:	6923      	ldr	r3, [r4, #16]
 80a4f10:	3b01      	subs	r3, #1
 80a4f12:	d405      	bmi.n	80a4f20 <localtime_r+0x1a0>
 80a4f14:	6123      	str	r3, [r4, #16]
 80a4f16:	6923      	ldr	r3, [r4, #16]
 80a4f18:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80a4f1c:	60e3      	str	r3, [r4, #12]
 80a4f1e:	e7d4      	b.n	80a4eca <localtime_r+0x14a>
 80a4f20:	230b      	movs	r3, #11
 80a4f22:	6123      	str	r3, [r4, #16]
 80a4f24:	6963      	ldr	r3, [r4, #20]
 80a4f26:	1e5a      	subs	r2, r3, #1
 80a4f28:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80a4f2c:	6162      	str	r2, [r4, #20]
 80a4f2e:	079a      	lsls	r2, r3, #30
 80a4f30:	d105      	bne.n	80a4f3e <localtime_r+0x1be>
 80a4f32:	2164      	movs	r1, #100	; 0x64
 80a4f34:	fb93 f2f1 	sdiv	r2, r3, r1
 80a4f38:	fb01 3212 	mls	r2, r1, r2, r3
 80a4f3c:	b962      	cbnz	r2, 80a4f58 <localtime_r+0x1d8>
 80a4f3e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a4f42:	fb93 f1f2 	sdiv	r1, r3, r2
 80a4f46:	fb02 3311 	mls	r3, r2, r1, r3
 80a4f4a:	fab3 f383 	clz	r3, r3
 80a4f4e:	095b      	lsrs	r3, r3, #5
 80a4f50:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80a4f54:	61e3      	str	r3, [r4, #28]
 80a4f56:	e7de      	b.n	80a4f16 <localtime_r+0x196>
 80a4f58:	2301      	movs	r3, #1
 80a4f5a:	e7f9      	b.n	80a4f50 <localtime_r+0x1d0>
 80a4f5c:	080a75d8 	.word	0x080a75d8
 80a4f60:	20000964 	.word	0x20000964

080a4f64 <memcpy>:
 80a4f64:	440a      	add	r2, r1
 80a4f66:	4291      	cmp	r1, r2
 80a4f68:	f100 33ff 	add.w	r3, r0, #4294967295
 80a4f6c:	d100      	bne.n	80a4f70 <memcpy+0xc>
 80a4f6e:	4770      	bx	lr
 80a4f70:	b510      	push	{r4, lr}
 80a4f72:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a4f76:	4291      	cmp	r1, r2
 80a4f78:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a4f7c:	d1f9      	bne.n	80a4f72 <memcpy+0xe>
 80a4f7e:	bd10      	pop	{r4, pc}

080a4f80 <memset>:
 80a4f80:	4603      	mov	r3, r0
 80a4f82:	4402      	add	r2, r0
 80a4f84:	4293      	cmp	r3, r2
 80a4f86:	d100      	bne.n	80a4f8a <memset+0xa>
 80a4f88:	4770      	bx	lr
 80a4f8a:	f803 1b01 	strb.w	r1, [r3], #1
 80a4f8e:	e7f9      	b.n	80a4f84 <memset+0x4>

080a4f90 <validate_structure>:
 80a4f90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a4f92:	6801      	ldr	r1, [r0, #0]
 80a4f94:	4604      	mov	r4, r0
 80a4f96:	293b      	cmp	r1, #59	; 0x3b
 80a4f98:	d911      	bls.n	80a4fbe <validate_structure+0x2e>
 80a4f9a:	223c      	movs	r2, #60	; 0x3c
 80a4f9c:	4668      	mov	r0, sp
 80a4f9e:	f001 fbf1 	bl	80a6784 <div>
 80a4fa2:	9a01      	ldr	r2, [sp, #4]
 80a4fa4:	6863      	ldr	r3, [r4, #4]
 80a4fa6:	9900      	ldr	r1, [sp, #0]
 80a4fa8:	2a00      	cmp	r2, #0
 80a4faa:	440b      	add	r3, r1
 80a4fac:	6063      	str	r3, [r4, #4]
 80a4fae:	bfbb      	ittet	lt
 80a4fb0:	323c      	addlt	r2, #60	; 0x3c
 80a4fb2:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80a4fb6:	6022      	strge	r2, [r4, #0]
 80a4fb8:	6022      	strlt	r2, [r4, #0]
 80a4fba:	bfb8      	it	lt
 80a4fbc:	6063      	strlt	r3, [r4, #4]
 80a4fbe:	6861      	ldr	r1, [r4, #4]
 80a4fc0:	293b      	cmp	r1, #59	; 0x3b
 80a4fc2:	d911      	bls.n	80a4fe8 <validate_structure+0x58>
 80a4fc4:	223c      	movs	r2, #60	; 0x3c
 80a4fc6:	4668      	mov	r0, sp
 80a4fc8:	f001 fbdc 	bl	80a6784 <div>
 80a4fcc:	9a01      	ldr	r2, [sp, #4]
 80a4fce:	68a3      	ldr	r3, [r4, #8]
 80a4fd0:	9900      	ldr	r1, [sp, #0]
 80a4fd2:	2a00      	cmp	r2, #0
 80a4fd4:	440b      	add	r3, r1
 80a4fd6:	60a3      	str	r3, [r4, #8]
 80a4fd8:	bfbb      	ittet	lt
 80a4fda:	323c      	addlt	r2, #60	; 0x3c
 80a4fdc:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80a4fe0:	6062      	strge	r2, [r4, #4]
 80a4fe2:	6062      	strlt	r2, [r4, #4]
 80a4fe4:	bfb8      	it	lt
 80a4fe6:	60a3      	strlt	r3, [r4, #8]
 80a4fe8:	68a1      	ldr	r1, [r4, #8]
 80a4fea:	2917      	cmp	r1, #23
 80a4fec:	d911      	bls.n	80a5012 <validate_structure+0x82>
 80a4fee:	2218      	movs	r2, #24
 80a4ff0:	4668      	mov	r0, sp
 80a4ff2:	f001 fbc7 	bl	80a6784 <div>
 80a4ff6:	9a01      	ldr	r2, [sp, #4]
 80a4ff8:	68e3      	ldr	r3, [r4, #12]
 80a4ffa:	9900      	ldr	r1, [sp, #0]
 80a4ffc:	2a00      	cmp	r2, #0
 80a4ffe:	440b      	add	r3, r1
 80a5000:	60e3      	str	r3, [r4, #12]
 80a5002:	bfbb      	ittet	lt
 80a5004:	3218      	addlt	r2, #24
 80a5006:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80a500a:	60a2      	strge	r2, [r4, #8]
 80a500c:	60a2      	strlt	r2, [r4, #8]
 80a500e:	bfb8      	it	lt
 80a5010:	60e3      	strlt	r3, [r4, #12]
 80a5012:	6921      	ldr	r1, [r4, #16]
 80a5014:	290b      	cmp	r1, #11
 80a5016:	d911      	bls.n	80a503c <validate_structure+0xac>
 80a5018:	220c      	movs	r2, #12
 80a501a:	4668      	mov	r0, sp
 80a501c:	f001 fbb2 	bl	80a6784 <div>
 80a5020:	9a01      	ldr	r2, [sp, #4]
 80a5022:	6963      	ldr	r3, [r4, #20]
 80a5024:	9900      	ldr	r1, [sp, #0]
 80a5026:	2a00      	cmp	r2, #0
 80a5028:	440b      	add	r3, r1
 80a502a:	6163      	str	r3, [r4, #20]
 80a502c:	bfbb      	ittet	lt
 80a502e:	320c      	addlt	r2, #12
 80a5030:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80a5034:	6122      	strge	r2, [r4, #16]
 80a5036:	6122      	strlt	r2, [r4, #16]
 80a5038:	bfb8      	it	lt
 80a503a:	6163      	strlt	r3, [r4, #20]
 80a503c:	6963      	ldr	r3, [r4, #20]
 80a503e:	0798      	lsls	r0, r3, #30
 80a5040:	d120      	bne.n	80a5084 <validate_structure+0xf4>
 80a5042:	2164      	movs	r1, #100	; 0x64
 80a5044:	fb93 f2f1 	sdiv	r2, r3, r1
 80a5048:	fb01 3212 	mls	r2, r1, r2, r3
 80a504c:	b9e2      	cbnz	r2, 80a5088 <validate_structure+0xf8>
 80a504e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a5052:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80a5056:	fb93 f1f2 	sdiv	r1, r3, r2
 80a505a:	fb02 3311 	mls	r3, r2, r1, r3
 80a505e:	2b00      	cmp	r3, #0
 80a5060:	bf14      	ite	ne
 80a5062:	231c      	movne	r3, #28
 80a5064:	231d      	moveq	r3, #29
 80a5066:	68e2      	ldr	r2, [r4, #12]
 80a5068:	2a00      	cmp	r2, #0
 80a506a:	dc0f      	bgt.n	80a508c <validate_structure+0xfc>
 80a506c:	260b      	movs	r6, #11
 80a506e:	2064      	movs	r0, #100	; 0x64
 80a5070:	f44f 75c8 	mov.w	r5, #400	; 0x190
 80a5074:	4f31      	ldr	r7, [pc, #196]	; (80a513c <validate_structure+0x1ac>)
 80a5076:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 80a507a:	f1bc 0f00 	cmp.w	ip, #0
 80a507e:	dd31      	ble.n	80a50e4 <validate_structure+0x154>
 80a5080:	b003      	add	sp, #12
 80a5082:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a5084:	231c      	movs	r3, #28
 80a5086:	e7ee      	b.n	80a5066 <validate_structure+0xd6>
 80a5088:	231d      	movs	r3, #29
 80a508a:	e7ec      	b.n	80a5066 <validate_structure+0xd6>
 80a508c:	2700      	movs	r7, #0
 80a508e:	2064      	movs	r0, #100	; 0x64
 80a5090:	f44f 75c8 	mov.w	r5, #400	; 0x190
 80a5094:	4e29      	ldr	r6, [pc, #164]	; (80a513c <validate_structure+0x1ac>)
 80a5096:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 80a509a:	2a01      	cmp	r2, #1
 80a509c:	bf0c      	ite	eq
 80a509e:	469c      	moveq	ip, r3
 80a50a0:	f856 c022 	ldrne.w	ip, [r6, r2, lsl #2]
 80a50a4:	4561      	cmp	r1, ip
 80a50a6:	ddeb      	ble.n	80a5080 <validate_structure+0xf0>
 80a50a8:	3201      	adds	r2, #1
 80a50aa:	eba1 010c 	sub.w	r1, r1, ip
 80a50ae:	2a0c      	cmp	r2, #12
 80a50b0:	60e1      	str	r1, [r4, #12]
 80a50b2:	6122      	str	r2, [r4, #16]
 80a50b4:	d1ef      	bne.n	80a5096 <validate_structure+0x106>
 80a50b6:	6963      	ldr	r3, [r4, #20]
 80a50b8:	1c5a      	adds	r2, r3, #1
 80a50ba:	0791      	lsls	r1, r2, #30
 80a50bc:	e9c4 7204 	strd	r7, r2, [r4, #16]
 80a50c0:	d137      	bne.n	80a5132 <validate_structure+0x1a2>
 80a50c2:	fb92 f1f0 	sdiv	r1, r2, r0
 80a50c6:	fb00 2211 	mls	r2, r0, r1, r2
 80a50ca:	2a00      	cmp	r2, #0
 80a50cc:	d133      	bne.n	80a5136 <validate_structure+0x1a6>
 80a50ce:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 80a50d2:	fb93 f2f5 	sdiv	r2, r3, r5
 80a50d6:	fb05 3312 	mls	r3, r5, r2, r3
 80a50da:	2b00      	cmp	r3, #0
 80a50dc:	bf14      	ite	ne
 80a50de:	231c      	movne	r3, #28
 80a50e0:	231d      	moveq	r3, #29
 80a50e2:	e7d8      	b.n	80a5096 <validate_structure+0x106>
 80a50e4:	6921      	ldr	r1, [r4, #16]
 80a50e6:	3901      	subs	r1, #1
 80a50e8:	6121      	str	r1, [r4, #16]
 80a50ea:	3101      	adds	r1, #1
 80a50ec:	d114      	bne.n	80a5118 <validate_structure+0x188>
 80a50ee:	6963      	ldr	r3, [r4, #20]
 80a50f0:	1e5a      	subs	r2, r3, #1
 80a50f2:	0791      	lsls	r1, r2, #30
 80a50f4:	e9c4 6204 	strd	r6, r2, [r4, #16]
 80a50f8:	d117      	bne.n	80a512a <validate_structure+0x19a>
 80a50fa:	fb92 f1f0 	sdiv	r1, r2, r0
 80a50fe:	fb00 2211 	mls	r2, r0, r1, r2
 80a5102:	b9a2      	cbnz	r2, 80a512e <validate_structure+0x19e>
 80a5104:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80a5108:	fb93 f2f5 	sdiv	r2, r3, r5
 80a510c:	fb05 3312 	mls	r3, r5, r2, r3
 80a5110:	2b00      	cmp	r3, #0
 80a5112:	bf14      	ite	ne
 80a5114:	231c      	movne	r3, #28
 80a5116:	231d      	moveq	r3, #29
 80a5118:	6922      	ldr	r2, [r4, #16]
 80a511a:	2a01      	cmp	r2, #1
 80a511c:	bf0c      	ite	eq
 80a511e:	461a      	moveq	r2, r3
 80a5120:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 80a5124:	4462      	add	r2, ip
 80a5126:	60e2      	str	r2, [r4, #12]
 80a5128:	e7a5      	b.n	80a5076 <validate_structure+0xe6>
 80a512a:	231c      	movs	r3, #28
 80a512c:	e7f4      	b.n	80a5118 <validate_structure+0x188>
 80a512e:	231d      	movs	r3, #29
 80a5130:	e7f2      	b.n	80a5118 <validate_structure+0x188>
 80a5132:	231c      	movs	r3, #28
 80a5134:	e7af      	b.n	80a5096 <validate_structure+0x106>
 80a5136:	231d      	movs	r3, #29
 80a5138:	e7ad      	b.n	80a5096 <validate_structure+0x106>
 80a513a:	bf00      	nop
 80a513c:	080a7578 	.word	0x080a7578

080a5140 <mktime>:
 80a5140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a5144:	b085      	sub	sp, #20
 80a5146:	4607      	mov	r7, r0
 80a5148:	f001 fb74 	bl	80a6834 <__gettzinfo>
 80a514c:	4681      	mov	r9, r0
 80a514e:	4638      	mov	r0, r7
 80a5150:	f7ff ff1e 	bl	80a4f90 <validate_structure>
 80a5154:	e9d7 4000 	ldrd	r4, r0, [r7]
 80a5158:	233c      	movs	r3, #60	; 0x3c
 80a515a:	fb03 4400 	mla	r4, r3, r0, r4
 80a515e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80a5162:	68b8      	ldr	r0, [r7, #8]
 80a5164:	4abc      	ldr	r2, [pc, #752]	; (80a5458 <mktime+0x318>)
 80a5166:	fb03 4400 	mla	r4, r3, r0, r4
 80a516a:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
 80a516e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80a5172:	3d01      	subs	r5, #1
 80a5174:	2b01      	cmp	r3, #1
 80a5176:	697e      	ldr	r6, [r7, #20]
 80a5178:	4415      	add	r5, r2
 80a517a:	dd11      	ble.n	80a51a0 <mktime+0x60>
 80a517c:	07b1      	lsls	r1, r6, #30
 80a517e:	d10f      	bne.n	80a51a0 <mktime+0x60>
 80a5180:	2264      	movs	r2, #100	; 0x64
 80a5182:	fb96 f3f2 	sdiv	r3, r6, r2
 80a5186:	fb02 6313 	mls	r3, r2, r3, r6
 80a518a:	b943      	cbnz	r3, 80a519e <mktime+0x5e>
 80a518c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a5190:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 80a5194:	fb93 f1f2 	sdiv	r1, r3, r2
 80a5198:	fb02 3311 	mls	r3, r2, r1, r3
 80a519c:	b903      	cbnz	r3, 80a51a0 <mktime+0x60>
 80a519e:	3501      	adds	r5, #1
 80a51a0:	f644 6220 	movw	r2, #20000	; 0x4e20
 80a51a4:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 80a51a8:	3310      	adds	r3, #16
 80a51aa:	4293      	cmp	r3, r2
 80a51ac:	61fd      	str	r5, [r7, #28]
 80a51ae:	f200 815c 	bhi.w	80a546a <mktime+0x32a>
 80a51b2:	2e46      	cmp	r6, #70	; 0x46
 80a51b4:	dd71      	ble.n	80a529a <mktime+0x15a>
 80a51b6:	2346      	movs	r3, #70	; 0x46
 80a51b8:	f240 1c6d 	movw	ip, #365	; 0x16d
 80a51bc:	2164      	movs	r1, #100	; 0x64
 80a51be:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80a51c2:	079a      	lsls	r2, r3, #30
 80a51c4:	d163      	bne.n	80a528e <mktime+0x14e>
 80a51c6:	fb93 f2f1 	sdiv	r2, r3, r1
 80a51ca:	fb01 3212 	mls	r2, r1, r2, r3
 80a51ce:	2a00      	cmp	r2, #0
 80a51d0:	d160      	bne.n	80a5294 <mktime+0x154>
 80a51d2:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 80a51d6:	fb92 fef0 	sdiv	lr, r2, r0
 80a51da:	fb00 221e 	mls	r2, r0, lr, r2
 80a51de:	2a00      	cmp	r2, #0
 80a51e0:	bf14      	ite	ne
 80a51e2:	4662      	movne	r2, ip
 80a51e4:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80a51e8:	3301      	adds	r3, #1
 80a51ea:	429e      	cmp	r6, r3
 80a51ec:	4415      	add	r5, r2
 80a51ee:	d1e8      	bne.n	80a51c2 <mktime+0x82>
 80a51f0:	4b9a      	ldr	r3, [pc, #616]	; (80a545c <mktime+0x31c>)
 80a51f2:	ea4f 78e4 	mov.w	r8, r4, asr #31
 80a51f6:	fbc5 4803 	smlal	r4, r8, r5, r3
 80a51fa:	f001 f8c7 	bl	80a638c <__tz_lock>
 80a51fe:	f001 f8d1 	bl	80a63a4 <_tzset_unlocked>
 80a5202:	4b97      	ldr	r3, [pc, #604]	; (80a5460 <mktime+0x320>)
 80a5204:	f8d3 b000 	ldr.w	fp, [r3]
 80a5208:	f1bb 0f00 	cmp.w	fp, #0
 80a520c:	d039      	beq.n	80a5282 <mktime+0x142>
 80a520e:	f8d7 b020 	ldr.w	fp, [r7, #32]
 80a5212:	6978      	ldr	r0, [r7, #20]
 80a5214:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80a5218:	f1bb 0f01 	cmp.w	fp, #1
 80a521c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80a5220:	46da      	mov	sl, fp
 80a5222:	bfa8      	it	ge
 80a5224:	f04f 0a01 	movge.w	sl, #1
 80a5228:	4283      	cmp	r3, r0
 80a522a:	d178      	bne.n	80a531e <mktime+0x1de>
 80a522c:	e9d9 3208 	ldrd	r3, r2, [r9, #32]
 80a5230:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 80a5234:	f8d9 e04c 	ldr.w	lr, [r9, #76]	; 0x4c
 80a5238:	1a5b      	subs	r3, r3, r1
 80a523a:	9302      	str	r3, [sp, #8]
 80a523c:	eb62 73e1 	sbc.w	r3, r2, r1, asr #31
 80a5240:	9303      	str	r3, [sp, #12]
 80a5242:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 80a5246:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 80a524a:	ebb3 0c02 	subs.w	ip, r3, r2
 80a524e:	eb6e 70e2 	sbc.w	r0, lr, r2, asr #31
 80a5252:	4564      	cmp	r4, ip
 80a5254:	9301      	str	r3, [sp, #4]
 80a5256:	eb78 0300 	sbcs.w	r3, r8, r0
 80a525a:	da66      	bge.n	80a532a <mktime+0x1ea>
 80a525c:	f8d9 3000 	ldr.w	r3, [r9]
 80a5260:	2b00      	cmp	r3, #0
 80a5262:	d06f      	beq.n	80a5344 <mktime+0x204>
 80a5264:	9b02      	ldr	r3, [sp, #8]
 80a5266:	429c      	cmp	r4, r3
 80a5268:	9b03      	ldr	r3, [sp, #12]
 80a526a:	eb78 0303 	sbcs.w	r3, r8, r3
 80a526e:	db03      	blt.n	80a5278 <mktime+0x138>
 80a5270:	4564      	cmp	r4, ip
 80a5272:	eb78 0300 	sbcs.w	r3, r8, r0
 80a5276:	db6b      	blt.n	80a5350 <mktime+0x210>
 80a5278:	f1bb 0f00 	cmp.w	fp, #0
 80a527c:	f04f 0b00 	mov.w	fp, #0
 80a5280:	da6b      	bge.n	80a535a <mktime+0x21a>
 80a5282:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
 80a5286:	190c      	adds	r4, r1, r4
 80a5288:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 80a528c:	e0a9      	b.n	80a53e2 <mktime+0x2a2>
 80a528e:	f240 126d 	movw	r2, #365	; 0x16d
 80a5292:	e7a9      	b.n	80a51e8 <mktime+0xa8>
 80a5294:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80a5298:	e7a6      	b.n	80a51e8 <mktime+0xa8>
 80a529a:	d0a9      	beq.n	80a51f0 <mktime+0xb0>
 80a529c:	2345      	movs	r3, #69	; 0x45
 80a529e:	f240 1c6d 	movw	ip, #365	; 0x16d
 80a52a2:	2164      	movs	r1, #100	; 0x64
 80a52a4:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80a52a8:	e012      	b.n	80a52d0 <mktime+0x190>
 80a52aa:	bb62      	cbnz	r2, 80a5306 <mktime+0x1c6>
 80a52ac:	fb93 f2f1 	sdiv	r2, r3, r1
 80a52b0:	fb01 3212 	mls	r2, r1, r2, r3
 80a52b4:	bb52      	cbnz	r2, 80a530c <mktime+0x1cc>
 80a52b6:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 80a52ba:	fb92 fef0 	sdiv	lr, r2, r0
 80a52be:	fb00 221e 	mls	r2, r0, lr, r2
 80a52c2:	2a00      	cmp	r2, #0
 80a52c4:	bf14      	ite	ne
 80a52c6:	4662      	movne	r2, ip
 80a52c8:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80a52cc:	1aad      	subs	r5, r5, r2
 80a52ce:	3b01      	subs	r3, #1
 80a52d0:	429e      	cmp	r6, r3
 80a52d2:	f003 0203 	and.w	r2, r3, #3
 80a52d6:	dbe8      	blt.n	80a52aa <mktime+0x16a>
 80a52d8:	b9da      	cbnz	r2, 80a5312 <mktime+0x1d2>
 80a52da:	2264      	movs	r2, #100	; 0x64
 80a52dc:	fb96 f3f2 	sdiv	r3, r6, r2
 80a52e0:	fb02 6313 	mls	r3, r2, r3, r6
 80a52e4:	b9c3      	cbnz	r3, 80a5318 <mktime+0x1d8>
 80a52e6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a52ea:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 80a52ee:	fb93 f1f2 	sdiv	r1, r3, r2
 80a52f2:	fb02 3311 	mls	r3, r2, r1, r3
 80a52f6:	2b00      	cmp	r3, #0
 80a52f8:	f240 136d 	movw	r3, #365	; 0x16d
 80a52fc:	bf08      	it	eq
 80a52fe:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 80a5302:	1aed      	subs	r5, r5, r3
 80a5304:	e774      	b.n	80a51f0 <mktime+0xb0>
 80a5306:	f240 126d 	movw	r2, #365	; 0x16d
 80a530a:	e7df      	b.n	80a52cc <mktime+0x18c>
 80a530c:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80a5310:	e7dc      	b.n	80a52cc <mktime+0x18c>
 80a5312:	f240 136d 	movw	r3, #365	; 0x16d
 80a5316:	e7f4      	b.n	80a5302 <mktime+0x1c2>
 80a5318:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 80a531c:	e7f1      	b.n	80a5302 <mktime+0x1c2>
 80a531e:	f000 ff91 	bl	80a6244 <__tzcalc_limits>
 80a5322:	2800      	cmp	r0, #0
 80a5324:	d182      	bne.n	80a522c <mktime+0xec>
 80a5326:	46d3      	mov	fp, sl
 80a5328:	e050      	b.n	80a53cc <mktime+0x28c>
 80a532a:	9b01      	ldr	r3, [sp, #4]
 80a532c:	1a5b      	subs	r3, r3, r1
 80a532e:	9301      	str	r3, [sp, #4]
 80a5330:	ea4f 73e1 	mov.w	r3, r1, asr #31
 80a5334:	eb6e 0e03 	sbc.w	lr, lr, r3
 80a5338:	9b01      	ldr	r3, [sp, #4]
 80a533a:	429c      	cmp	r4, r3
 80a533c:	eb78 030e 	sbcs.w	r3, r8, lr
 80a5340:	dbf1      	blt.n	80a5326 <mktime+0x1e6>
 80a5342:	e78b      	b.n	80a525c <mktime+0x11c>
 80a5344:	9b02      	ldr	r3, [sp, #8]
 80a5346:	429c      	cmp	r4, r3
 80a5348:	9b03      	ldr	r3, [sp, #12]
 80a534a:	eb78 0303 	sbcs.w	r3, r8, r3
 80a534e:	db8f      	blt.n	80a5270 <mktime+0x130>
 80a5350:	f1bb 0f00 	cmp.w	fp, #0
 80a5354:	db3e      	blt.n	80a53d4 <mktime+0x294>
 80a5356:	f04f 0b01 	mov.w	fp, #1
 80a535a:	ea8a 0a0b 	eor.w	sl, sl, fp
 80a535e:	f1ba 0f01 	cmp.w	sl, #1
 80a5362:	d133      	bne.n	80a53cc <mktime+0x28c>
 80a5364:	f1bb 0f00 	cmp.w	fp, #0
 80a5368:	d04e      	beq.n	80a5408 <mktime+0x2c8>
 80a536a:	1a52      	subs	r2, r2, r1
 80a536c:	683b      	ldr	r3, [r7, #0]
 80a536e:	1914      	adds	r4, r2, r4
 80a5370:	4413      	add	r3, r2
 80a5372:	4638      	mov	r0, r7
 80a5374:	603b      	str	r3, [r7, #0]
 80a5376:	eb48 78e2 	adc.w	r8, r8, r2, asr #31
 80a537a:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 80a537e:	f7ff fe07 	bl	80a4f90 <validate_structure>
 80a5382:	68fa      	ldr	r2, [r7, #12]
 80a5384:	ebb2 020a 	subs.w	r2, r2, sl
 80a5388:	d020      	beq.n	80a53cc <mktime+0x28c>
 80a538a:	2a01      	cmp	r2, #1
 80a538c:	dc3e      	bgt.n	80a540c <mktime+0x2cc>
 80a538e:	1c90      	adds	r0, r2, #2
 80a5390:	bfd8      	it	le
 80a5392:	2201      	movle	r2, #1
 80a5394:	69fb      	ldr	r3, [r7, #28]
 80a5396:	4415      	add	r5, r2
 80a5398:	18d3      	adds	r3, r2, r3
 80a539a:	d540      	bpl.n	80a541e <mktime+0x2de>
 80a539c:	1e73      	subs	r3, r6, #1
 80a539e:	0799      	lsls	r1, r3, #30
 80a53a0:	d137      	bne.n	80a5412 <mktime+0x2d2>
 80a53a2:	2264      	movs	r2, #100	; 0x64
 80a53a4:	fb93 f1f2 	sdiv	r1, r3, r2
 80a53a8:	fb02 3311 	mls	r3, r2, r1, r3
 80a53ac:	bba3      	cbnz	r3, 80a5418 <mktime+0x2d8>
 80a53ae:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80a53b2:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 80a53b6:	fb96 f2f3 	sdiv	r2, r6, r3
 80a53ba:	fb03 6612 	mls	r6, r3, r2, r6
 80a53be:	2e00      	cmp	r6, #0
 80a53c0:	f240 136d 	movw	r3, #365	; 0x16d
 80a53c4:	bf18      	it	ne
 80a53c6:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 80a53ca:	61fb      	str	r3, [r7, #28]
 80a53cc:	f1bb 0f01 	cmp.w	fp, #1
 80a53d0:	f47f af57 	bne.w	80a5282 <mktime+0x142>
 80a53d4:	f04f 0b01 	mov.w	fp, #1
 80a53d8:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 80a53dc:	190c      	adds	r4, r1, r4
 80a53de:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 80a53e2:	f000 ffd9 	bl	80a6398 <__tz_unlock>
 80a53e6:	2307      	movs	r3, #7
 80a53e8:	3504      	adds	r5, #4
 80a53ea:	fb95 f3f3 	sdiv	r3, r5, r3
 80a53ee:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a53f2:	1aed      	subs	r5, r5, r3
 80a53f4:	bf48      	it	mi
 80a53f6:	3507      	addmi	r5, #7
 80a53f8:	f8c7 b020 	str.w	fp, [r7, #32]
 80a53fc:	61bd      	str	r5, [r7, #24]
 80a53fe:	4620      	mov	r0, r4
 80a5400:	4641      	mov	r1, r8
 80a5402:	b005      	add	sp, #20
 80a5404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a5408:	1a8a      	subs	r2, r1, r2
 80a540a:	e7af      	b.n	80a536c <mktime+0x22c>
 80a540c:	f04f 32ff 	mov.w	r2, #4294967295
 80a5410:	e7c0      	b.n	80a5394 <mktime+0x254>
 80a5412:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 80a5416:	e7d8      	b.n	80a53ca <mktime+0x28a>
 80a5418:	f240 136d 	movw	r3, #365	; 0x16d
 80a541c:	e7d5      	b.n	80a53ca <mktime+0x28a>
 80a541e:	07b2      	lsls	r2, r6, #30
 80a5420:	d117      	bne.n	80a5452 <mktime+0x312>
 80a5422:	2164      	movs	r1, #100	; 0x64
 80a5424:	fb96 f2f1 	sdiv	r2, r6, r1
 80a5428:	fb01 6212 	mls	r2, r1, r2, r6
 80a542c:	b9d2      	cbnz	r2, 80a5464 <mktime+0x324>
 80a542e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a5432:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 80a5436:	fb96 f1f2 	sdiv	r1, r6, r2
 80a543a:	fb02 6611 	mls	r6, r2, r1, r6
 80a543e:	2e00      	cmp	r6, #0
 80a5440:	f240 126d 	movw	r2, #365	; 0x16d
 80a5444:	bf08      	it	eq
 80a5446:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80a544a:	4293      	cmp	r3, r2
 80a544c:	bfa8      	it	ge
 80a544e:	1a9b      	subge	r3, r3, r2
 80a5450:	e7bb      	b.n	80a53ca <mktime+0x28a>
 80a5452:	f240 126d 	movw	r2, #365	; 0x16d
 80a5456:	e7f8      	b.n	80a544a <mktime+0x30a>
 80a5458:	080a75a8 	.word	0x080a75a8
 80a545c:	00015180 	.word	0x00015180
 80a5460:	20000964 	.word	0x20000964
 80a5464:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80a5468:	e7ef      	b.n	80a544a <mktime+0x30a>
 80a546a:	f04f 34ff 	mov.w	r4, #4294967295
 80a546e:	46a0      	mov	r8, r4
 80a5470:	e7c5      	b.n	80a53fe <mktime+0x2be>
 80a5472:	bf00      	nop

080a5474 <srand>:
 80a5474:	b538      	push	{r3, r4, r5, lr}
 80a5476:	4b10      	ldr	r3, [pc, #64]	; (80a54b8 <srand+0x44>)
 80a5478:	4604      	mov	r4, r0
 80a547a:	681d      	ldr	r5, [r3, #0]
 80a547c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a547e:	b9b3      	cbnz	r3, 80a54ae <srand+0x3a>
 80a5480:	2018      	movs	r0, #24
 80a5482:	f7fd f821 	bl	80a24c8 <malloc>
 80a5486:	4602      	mov	r2, r0
 80a5488:	63a8      	str	r0, [r5, #56]	; 0x38
 80a548a:	b920      	cbnz	r0, 80a5496 <srand+0x22>
 80a548c:	2142      	movs	r1, #66	; 0x42
 80a548e:	4b0b      	ldr	r3, [pc, #44]	; (80a54bc <srand+0x48>)
 80a5490:	480b      	ldr	r0, [pc, #44]	; (80a54c0 <srand+0x4c>)
 80a5492:	f7fd f879 	bl	80a2588 <__assert_func>
 80a5496:	490b      	ldr	r1, [pc, #44]	; (80a54c4 <srand+0x50>)
 80a5498:	4b0b      	ldr	r3, [pc, #44]	; (80a54c8 <srand+0x54>)
 80a549a:	e9c0 1300 	strd	r1, r3, [r0]
 80a549e:	4b0b      	ldr	r3, [pc, #44]	; (80a54cc <srand+0x58>)
 80a54a0:	2100      	movs	r1, #0
 80a54a2:	6083      	str	r3, [r0, #8]
 80a54a4:	230b      	movs	r3, #11
 80a54a6:	8183      	strh	r3, [r0, #12]
 80a54a8:	2001      	movs	r0, #1
 80a54aa:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80a54ae:	2200      	movs	r2, #0
 80a54b0:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a54b2:	611c      	str	r4, [r3, #16]
 80a54b4:	615a      	str	r2, [r3, #20]
 80a54b6:	bd38      	pop	{r3, r4, r5, pc}
 80a54b8:	20000008 	.word	0x20000008
 80a54bc:	080a7638 	.word	0x080a7638
 80a54c0:	080a764f 	.word	0x080a764f
 80a54c4:	abcd330e 	.word	0xabcd330e
 80a54c8:	e66d1234 	.word	0xe66d1234
 80a54cc:	0005deec 	.word	0x0005deec

080a54d0 <strchr>:
 80a54d0:	4603      	mov	r3, r0
 80a54d2:	b2c9      	uxtb	r1, r1
 80a54d4:	4618      	mov	r0, r3
 80a54d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a54da:	b112      	cbz	r2, 80a54e2 <strchr+0x12>
 80a54dc:	428a      	cmp	r2, r1
 80a54de:	d1f9      	bne.n	80a54d4 <strchr+0x4>
 80a54e0:	4770      	bx	lr
 80a54e2:	2900      	cmp	r1, #0
 80a54e4:	bf18      	it	ne
 80a54e6:	2000      	movne	r0, #0
 80a54e8:	4770      	bx	lr

080a54ea <strcmp>:
 80a54ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a54ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a54f2:	2a01      	cmp	r2, #1
 80a54f4:	bf28      	it	cs
 80a54f6:	429a      	cmpcs	r2, r3
 80a54f8:	d0f7      	beq.n	80a54ea <strcmp>
 80a54fa:	1ad0      	subs	r0, r2, r3
 80a54fc:	4770      	bx	lr

080a54fe <strcpy>:
 80a54fe:	4603      	mov	r3, r0
 80a5500:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a5504:	f803 2b01 	strb.w	r2, [r3], #1
 80a5508:	2a00      	cmp	r2, #0
 80a550a:	d1f9      	bne.n	80a5500 <strcpy+0x2>
 80a550c:	4770      	bx	lr
	...

080a5510 <strdup>:
 80a5510:	4b02      	ldr	r3, [pc, #8]	; (80a551c <strdup+0xc>)
 80a5512:	4601      	mov	r1, r0
 80a5514:	6818      	ldr	r0, [r3, #0]
 80a5516:	f000 b803 	b.w	80a5520 <_strdup_r>
 80a551a:	bf00      	nop
 80a551c:	20000008 	.word	0x20000008

080a5520 <_strdup_r>:
 80a5520:	b570      	push	{r4, r5, r6, lr}
 80a5522:	4604      	mov	r4, r0
 80a5524:	4608      	mov	r0, r1
 80a5526:	460d      	mov	r5, r1
 80a5528:	f000 fd44 	bl	80a5fb4 <strlen>
 80a552c:	1c46      	adds	r6, r0, #1
 80a552e:	4631      	mov	r1, r6
 80a5530:	4620      	mov	r0, r4
 80a5532:	f7fd f819 	bl	80a2568 <_malloc_r>
 80a5536:	4604      	mov	r4, r0
 80a5538:	b118      	cbz	r0, 80a5542 <_strdup_r+0x22>
 80a553a:	4632      	mov	r2, r6
 80a553c:	4629      	mov	r1, r5
 80a553e:	f7ff fd11 	bl	80a4f64 <memcpy>
 80a5542:	4620      	mov	r0, r4
 80a5544:	bd70      	pop	{r4, r5, r6, pc}
	...

080a5548 <iso_year_adjust>:
 80a5548:	6942      	ldr	r2, [r0, #20]
 80a554a:	f240 736c 	movw	r3, #1900	; 0x76c
 80a554e:	2a00      	cmp	r2, #0
 80a5550:	bfa8      	it	ge
 80a5552:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 80a5556:	4413      	add	r3, r2
 80a5558:	0792      	lsls	r2, r2, #30
 80a555a:	d105      	bne.n	80a5568 <iso_year_adjust+0x20>
 80a555c:	2164      	movs	r1, #100	; 0x64
 80a555e:	fb93 f2f1 	sdiv	r2, r3, r1
 80a5562:	fb01 3212 	mls	r2, r1, r2, r3
 80a5566:	b9da      	cbnz	r2, 80a55a0 <iso_year_adjust+0x58>
 80a5568:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a556c:	fb93 f1f2 	sdiv	r1, r3, r2
 80a5570:	fb02 3311 	mls	r3, r2, r1, r3
 80a5574:	fab3 f383 	clz	r3, r3
 80a5578:	095b      	lsrs	r3, r3, #5
 80a557a:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 80a557e:	0040      	lsls	r0, r0, #1
 80a5580:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 80a5584:	4418      	add	r0, r3
 80a5586:	f241 63a2 	movw	r3, #5794	; 0x16a2
 80a558a:	4298      	cmp	r0, r3
 80a558c:	d03a      	beq.n	80a5604 <iso_year_adjust+0xbc>
 80a558e:	dc21      	bgt.n	80a55d4 <iso_year_adjust+0x8c>
 80a5590:	2801      	cmp	r0, #1
 80a5592:	dc1a      	bgt.n	80a55ca <iso_year_adjust+0x82>
 80a5594:	2800      	cmp	r0, #0
 80a5596:	bfb4      	ite	lt
 80a5598:	2000      	movlt	r0, #0
 80a559a:	f04f 30ff 	movge.w	r0, #4294967295
 80a559e:	4770      	bx	lr
 80a55a0:	2301      	movs	r3, #1
 80a55a2:	e7ea      	b.n	80a557a <iso_year_adjust+0x32>
 80a55a4:	2817      	cmp	r0, #23
 80a55a6:	d813      	bhi.n	80a55d0 <iso_year_adjust+0x88>
 80a55a8:	e8df f000 	tbb	[pc, r0]
 80a55ac:	0c0c0c0c 	.word	0x0c0c0c0c
 80a55b0:	0c0c1212 	.word	0x0c0c1212
 80a55b4:	12121212 	.word	0x12121212
 80a55b8:	12121212 	.word	0x12121212
 80a55bc:	0c0c1212 	.word	0x0c0c1212
 80a55c0:	0c0c1212 	.word	0x0c0c1212
 80a55c4:	f04f 30ff 	mov.w	r0, #4294967295
 80a55c8:	4770      	bx	lr
 80a55ca:	380a      	subs	r0, #10
 80a55cc:	2817      	cmp	r0, #23
 80a55ce:	d9e9      	bls.n	80a55a4 <iso_year_adjust+0x5c>
 80a55d0:	2000      	movs	r0, #0
 80a55d2:	4770      	bx	lr
 80a55d4:	f241 63b4 	movw	r3, #5812	; 0x16b4
 80a55d8:	4298      	cmp	r0, r3
 80a55da:	dc06      	bgt.n	80a55ea <iso_year_adjust+0xa2>
 80a55dc:	f241 63b1 	movw	r3, #5809	; 0x16b1
 80a55e0:	4298      	cmp	r0, r3
 80a55e2:	bfd4      	ite	le
 80a55e4:	2000      	movle	r0, #0
 80a55e6:	2001      	movgt	r0, #1
 80a55e8:	4770      	bx	lr
 80a55ea:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 80a55ee:	3802      	subs	r0, #2
 80a55f0:	2815      	cmp	r0, #21
 80a55f2:	d8ed      	bhi.n	80a55d0 <iso_year_adjust+0x88>
 80a55f4:	2301      	movs	r3, #1
 80a55f6:	4083      	lsls	r3, r0
 80a55f8:	4803      	ldr	r0, [pc, #12]	; (80a5608 <iso_year_adjust+0xc0>)
 80a55fa:	4018      	ands	r0, r3
 80a55fc:	3800      	subs	r0, #0
 80a55fe:	bf18      	it	ne
 80a5600:	2001      	movne	r0, #1
 80a5602:	4770      	bx	lr
 80a5604:	2001      	movs	r0, #1
 80a5606:	4770      	bx	lr
 80a5608:	002a001f 	.word	0x002a001f

080a560c <__strftime.isra.0>:
 80a560c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a5610:	461e      	mov	r6, r3
 80a5612:	2300      	movs	r3, #0
 80a5614:	4607      	mov	r7, r0
 80a5616:	460d      	mov	r5, r1
 80a5618:	461c      	mov	r4, r3
 80a561a:	b08f      	sub	sp, #60	; 0x3c
 80a561c:	9302      	str	r3, [sp, #8]
 80a561e:	7813      	ldrb	r3, [r2, #0]
 80a5620:	2b00      	cmp	r3, #0
 80a5622:	f000 84b5 	beq.w	80a5f90 <__strftime.isra.0+0x984>
 80a5626:	2b25      	cmp	r3, #37	; 0x25
 80a5628:	d11f      	bne.n	80a566a <__strftime.isra.0+0x5e>
 80a562a:	f892 b001 	ldrb.w	fp, [r2, #1]
 80a562e:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
 80a5632:	d024      	beq.n	80a567e <__strftime.isra.0+0x72>
 80a5634:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 80a5638:	d021      	beq.n	80a567e <__strftime.isra.0+0x72>
 80a563a:	f04f 0b00 	mov.w	fp, #0
 80a563e:	f102 0801 	add.w	r8, r2, #1
 80a5642:	f898 2000 	ldrb.w	r2, [r8]
 80a5646:	3a31      	subs	r2, #49	; 0x31
 80a5648:	2a08      	cmp	r2, #8
 80a564a:	d81b      	bhi.n	80a5684 <__strftime.isra.0+0x78>
 80a564c:	4640      	mov	r0, r8
 80a564e:	220a      	movs	r2, #10
 80a5650:	a906      	add	r1, sp, #24
 80a5652:	f000 fded 	bl	80a6230 <strtoul>
 80a5656:	4681      	mov	r9, r0
 80a5658:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80a565c:	f898 2000 	ldrb.w	r2, [r8]
 80a5660:	2a45      	cmp	r2, #69	; 0x45
 80a5662:	d112      	bne.n	80a568a <__strftime.isra.0+0x7e>
 80a5664:	f108 0801 	add.w	r8, r8, #1
 80a5668:	e011      	b.n	80a568e <__strftime.isra.0+0x82>
 80a566a:	1e69      	subs	r1, r5, #1
 80a566c:	42a1      	cmp	r1, r4
 80a566e:	d802      	bhi.n	80a5676 <__strftime.isra.0+0x6a>
 80a5670:	2400      	movs	r4, #0
 80a5672:	f000 bc90 	b.w	80a5f96 <__strftime.isra.0+0x98a>
 80a5676:	553b      	strb	r3, [r7, r4]
 80a5678:	3201      	adds	r2, #1
 80a567a:	3401      	adds	r4, #1
 80a567c:	e7cf      	b.n	80a561e <__strftime.isra.0+0x12>
 80a567e:	f102 0802 	add.w	r8, r2, #2
 80a5682:	e7de      	b.n	80a5642 <__strftime.isra.0+0x36>
 80a5684:	f04f 0900 	mov.w	r9, #0
 80a5688:	e7e8      	b.n	80a565c <__strftime.isra.0+0x50>
 80a568a:	2a4f      	cmp	r2, #79	; 0x4f
 80a568c:	d0ea      	beq.n	80a5664 <__strftime.isra.0+0x58>
 80a568e:	f898 0000 	ldrb.w	r0, [r8]
 80a5692:	f1a0 0225 	sub.w	r2, r0, #37	; 0x25
 80a5696:	2a55      	cmp	r2, #85	; 0x55
 80a5698:	d8ea      	bhi.n	80a5670 <__strftime.isra.0+0x64>
 80a569a:	a301      	add	r3, pc, #4	; (adr r3, 80a56a0 <__strftime.isra.0+0x94>)
 80a569c:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 80a56a0:	080a5f85 	.word	0x080a5f85
 80a56a4:	080a5671 	.word	0x080a5671
 80a56a8:	080a5671 	.word	0x080a5671
 80a56ac:	080a5671 	.word	0x080a5671
 80a56b0:	080a5671 	.word	0x080a5671
 80a56b4:	080a5671 	.word	0x080a5671
 80a56b8:	080a5671 	.word	0x080a5671
 80a56bc:	080a5671 	.word	0x080a5671
 80a56c0:	080a5671 	.word	0x080a5671
 80a56c4:	080a5671 	.word	0x080a5671
 80a56c8:	080a5671 	.word	0x080a5671
 80a56cc:	080a5671 	.word	0x080a5671
 80a56d0:	080a5671 	.word	0x080a5671
 80a56d4:	080a5671 	.word	0x080a5671
 80a56d8:	080a5671 	.word	0x080a5671
 80a56dc:	080a5671 	.word	0x080a5671
 80a56e0:	080a5671 	.word	0x080a5671
 80a56e4:	080a5671 	.word	0x080a5671
 80a56e8:	080a5671 	.word	0x080a5671
 80a56ec:	080a5671 	.word	0x080a5671
 80a56f0:	080a5671 	.word	0x080a5671
 80a56f4:	080a5671 	.word	0x080a5671
 80a56f8:	080a5671 	.word	0x080a5671
 80a56fc:	080a5671 	.word	0x080a5671
 80a5700:	080a5671 	.word	0x080a5671
 80a5704:	080a5671 	.word	0x080a5671
 80a5708:	080a5671 	.word	0x080a5671
 80a570c:	080a5671 	.word	0x080a5671
 80a5710:	080a5835 	.word	0x080a5835
 80a5714:	080a588d 	.word	0x080a588d
 80a5718:	080a58fb 	.word	0x080a58fb
 80a571c:	080a5999 	.word	0x080a5999
 80a5720:	080a5671 	.word	0x080a5671
 80a5724:	080a59e3 	.word	0x080a59e3
 80a5728:	080a5ad1 	.word	0x080a5ad1
 80a572c:	080a5ba7 	.word	0x080a5ba7
 80a5730:	080a5bb5 	.word	0x080a5bb5
 80a5734:	080a5671 	.word	0x080a5671
 80a5738:	080a5671 	.word	0x080a5671
 80a573c:	080a5671 	.word	0x080a5671
 80a5740:	080a5be5 	.word	0x080a5be5
 80a5744:	080a5671 	.word	0x080a5671
 80a5748:	080a5671 	.word	0x080a5671
 80a574c:	080a5bf9 	.word	0x080a5bf9
 80a5750:	080a5671 	.word	0x080a5671
 80a5754:	080a5c4b 	.word	0x080a5c4b
 80a5758:	080a5d5d 	.word	0x080a5d5d
 80a575c:	080a5d6d 	.word	0x080a5d6d
 80a5760:	080a5d95 	.word	0x080a5d95
 80a5764:	080a5da5 	.word	0x080a5da5
 80a5768:	080a5e3f 	.word	0x080a5e3f
 80a576c:	080a58f3 	.word	0x080a58f3
 80a5770:	080a5e6b 	.word	0x080a5e6b
 80a5774:	080a5f33 	.word	0x080a5f33
 80a5778:	080a5671 	.word	0x080a5671
 80a577c:	080a5671 	.word	0x080a5671
 80a5780:	080a5671 	.word	0x080a5671
 80a5784:	080a5671 	.word	0x080a5671
 80a5788:	080a5671 	.word	0x080a5671
 80a578c:	080a5671 	.word	0x080a5671
 80a5790:	080a57f9 	.word	0x080a57f9
 80a5794:	080a5863 	.word	0x080a5863
 80a5798:	080a58b9 	.word	0x080a58b9
 80a579c:	080a5975 	.word	0x080a5975
 80a57a0:	080a5975 	.word	0x080a5975
 80a57a4:	080a5671 	.word	0x080a5671
 80a57a8:	080a5a35 	.word	0x080a5a35
 80a57ac:	080a5863 	.word	0x080a5863
 80a57b0:	080a5671 	.word	0x080a5671
 80a57b4:	080a5bd7 	.word	0x080a5bd7
 80a57b8:	080a5ba7 	.word	0x080a5ba7
 80a57bc:	080a5bb5 	.word	0x080a5bb5
 80a57c0:	080a5bdf 	.word	0x080a5bdf
 80a57c4:	080a5be9 	.word	0x080a5be9
 80a57c8:	080a5671 	.word	0x080a5671
 80a57cc:	080a5bf9 	.word	0x080a5bf9
 80a57d0:	080a5671 	.word	0x080a5671
 80a57d4:	080a58e3 	.word	0x080a58e3
 80a57d8:	080a5c5d 	.word	0x080a5c5d
 80a57dc:	080a5d61 	.word	0x080a5d61
 80a57e0:	080a5d7b 	.word	0x080a5d7b
 80a57e4:	080a5671 	.word	0x080a5671
 80a57e8:	080a5e31 	.word	0x080a5e31
 80a57ec:	080a58eb 	.word	0x080a58eb
 80a57f0:	080a5e4f 	.word	0x080a5e4f
 80a57f4:	080a5ebd 	.word	0x080a5ebd
 80a57f8:	69b3      	ldr	r3, [r6, #24]
 80a57fa:	4aa9      	ldr	r2, [pc, #676]	; (80a5aa0 <__strftime.isra.0+0x494>)
 80a57fc:	3318      	adds	r3, #24
 80a57fe:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 80a5802:	4648      	mov	r0, r9
 80a5804:	f000 fbd6 	bl	80a5fb4 <strlen>
 80a5808:	f109 39ff 	add.w	r9, r9, #4294967295
 80a580c:	4420      	add	r0, r4
 80a580e:	1e6b      	subs	r3, r5, #1
 80a5810:	42a0      	cmp	r0, r4
 80a5812:	d107      	bne.n	80a5824 <__strftime.isra.0+0x218>
 80a5814:	f898 3000 	ldrb.w	r3, [r8]
 80a5818:	2b00      	cmp	r3, #0
 80a581a:	f000 83b9 	beq.w	80a5f90 <__strftime.isra.0+0x984>
 80a581e:	f108 0201 	add.w	r2, r8, #1
 80a5822:	e6fc      	b.n	80a561e <__strftime.isra.0+0x12>
 80a5824:	42a3      	cmp	r3, r4
 80a5826:	f67f af23 	bls.w	80a5670 <__strftime.isra.0+0x64>
 80a582a:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 80a582e:	553a      	strb	r2, [r7, r4]
 80a5830:	3401      	adds	r4, #1
 80a5832:	e7ed      	b.n	80a5810 <__strftime.isra.0+0x204>
 80a5834:	69b2      	ldr	r2, [r6, #24]
 80a5836:	4b9a      	ldr	r3, [pc, #616]	; (80a5aa0 <__strftime.isra.0+0x494>)
 80a5838:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80a583c:	f8d3 907c 	ldr.w	r9, [r3, #124]	; 0x7c
 80a5840:	4648      	mov	r0, r9
 80a5842:	f000 fbb7 	bl	80a5fb4 <strlen>
 80a5846:	f109 39ff 	add.w	r9, r9, #4294967295
 80a584a:	4420      	add	r0, r4
 80a584c:	1e6b      	subs	r3, r5, #1
 80a584e:	42a0      	cmp	r0, r4
 80a5850:	d0e0      	beq.n	80a5814 <__strftime.isra.0+0x208>
 80a5852:	42a3      	cmp	r3, r4
 80a5854:	f67f af0c 	bls.w	80a5670 <__strftime.isra.0+0x64>
 80a5858:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 80a585c:	553a      	strb	r2, [r7, r4]
 80a585e:	3401      	adds	r4, #1
 80a5860:	e7f5      	b.n	80a584e <__strftime.isra.0+0x242>
 80a5862:	4b8f      	ldr	r3, [pc, #572]	; (80a5aa0 <__strftime.isra.0+0x494>)
 80a5864:	6932      	ldr	r2, [r6, #16]
 80a5866:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
 80a586a:	4648      	mov	r0, r9
 80a586c:	f000 fba2 	bl	80a5fb4 <strlen>
 80a5870:	f109 39ff 	add.w	r9, r9, #4294967295
 80a5874:	4420      	add	r0, r4
 80a5876:	1e6b      	subs	r3, r5, #1
 80a5878:	42a0      	cmp	r0, r4
 80a587a:	d0cb      	beq.n	80a5814 <__strftime.isra.0+0x208>
 80a587c:	42a3      	cmp	r3, r4
 80a587e:	f67f aef7 	bls.w	80a5670 <__strftime.isra.0+0x64>
 80a5882:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 80a5886:	553a      	strb	r2, [r7, r4]
 80a5888:	3401      	adds	r4, #1
 80a588a:	e7f5      	b.n	80a5878 <__strftime.isra.0+0x26c>
 80a588c:	6933      	ldr	r3, [r6, #16]
 80a588e:	4a84      	ldr	r2, [pc, #528]	; (80a5aa0 <__strftime.isra.0+0x494>)
 80a5890:	330c      	adds	r3, #12
 80a5892:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 80a5896:	4648      	mov	r0, r9
 80a5898:	f000 fb8c 	bl	80a5fb4 <strlen>
 80a589c:	f109 39ff 	add.w	r9, r9, #4294967295
 80a58a0:	4420      	add	r0, r4
 80a58a2:	1e6b      	subs	r3, r5, #1
 80a58a4:	42a0      	cmp	r0, r4
 80a58a6:	d0b5      	beq.n	80a5814 <__strftime.isra.0+0x208>
 80a58a8:	42a3      	cmp	r3, r4
 80a58aa:	f67f aee1 	bls.w	80a5670 <__strftime.isra.0+0x64>
 80a58ae:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 80a58b2:	553a      	strb	r2, [r7, r4]
 80a58b4:	3401      	adds	r4, #1
 80a58b6:	e7f5      	b.n	80a58a4 <__strftime.isra.0+0x298>
 80a58b8:	4b79      	ldr	r3, [pc, #484]	; (80a5aa0 <__strftime.isra.0+0x494>)
 80a58ba:	f8d3 90a0 	ldr.w	r9, [r3, #160]	; 0xa0
 80a58be:	4648      	mov	r0, r9
 80a58c0:	f000 fb78 	bl	80a5fb4 <strlen>
 80a58c4:	f899 3000 	ldrb.w	r3, [r9]
 80a58c8:	2b00      	cmp	r3, #0
 80a58ca:	d0a3      	beq.n	80a5814 <__strftime.isra.0+0x208>
 80a58cc:	4633      	mov	r3, r6
 80a58ce:	464a      	mov	r2, r9
 80a58d0:	1b29      	subs	r1, r5, r4
 80a58d2:	1938      	adds	r0, r7, r4
 80a58d4:	f7ff fe9a 	bl	80a560c <__strftime.isra.0>
 80a58d8:	2800      	cmp	r0, #0
 80a58da:	f77f aec9 	ble.w	80a5670 <__strftime.isra.0+0x64>
 80a58de:	4404      	add	r4, r0
 80a58e0:	e798      	b.n	80a5814 <__strftime.isra.0+0x208>
 80a58e2:	4b6f      	ldr	r3, [pc, #444]	; (80a5aa0 <__strftime.isra.0+0x494>)
 80a58e4:	f8d3 90e4 	ldr.w	r9, [r3, #228]	; 0xe4
 80a58e8:	e7e9      	b.n	80a58be <__strftime.isra.0+0x2b2>
 80a58ea:	4b6d      	ldr	r3, [pc, #436]	; (80a5aa0 <__strftime.isra.0+0x494>)
 80a58ec:	f8d3 909c 	ldr.w	r9, [r3, #156]	; 0x9c
 80a58f0:	e7e5      	b.n	80a58be <__strftime.isra.0+0x2b2>
 80a58f2:	4b6b      	ldr	r3, [pc, #428]	; (80a5aa0 <__strftime.isra.0+0x494>)
 80a58f4:	f8d3 9098 	ldr.w	r9, [r3, #152]	; 0x98
 80a58f8:	e7e1      	b.n	80a58be <__strftime.isra.0+0x2b2>
 80a58fa:	496a      	ldr	r1, [pc, #424]	; (80a5aa4 <__strftime.isra.0+0x498>)
 80a58fc:	f8d6 a014 	ldr.w	sl, [r6, #20]
 80a5900:	458a      	cmp	sl, r1
 80a5902:	bfac      	ite	ge
 80a5904:	2100      	movge	r1, #0
 80a5906:	2101      	movlt	r1, #1
 80a5908:	f1ba 0f00 	cmp.w	sl, #0
 80a590c:	db11      	blt.n	80a5932 <__strftime.isra.0+0x326>
 80a590e:	2064      	movs	r0, #100	; 0x64
 80a5910:	fb9a f0f0 	sdiv	r0, sl, r0
 80a5914:	3013      	adds	r0, #19
 80a5916:	f1bb 0f00 	cmp.w	fp, #0
 80a591a:	d014      	beq.n	80a5946 <__strftime.isra.0+0x33a>
 80a591c:	2863      	cmp	r0, #99	; 0x63
 80a591e:	dd27      	ble.n	80a5970 <__strftime.isra.0+0x364>
 80a5920:	4b61      	ldr	r3, [pc, #388]	; (80a5aa8 <__strftime.isra.0+0x49c>)
 80a5922:	4a62      	ldr	r2, [pc, #392]	; (80a5aac <__strftime.isra.0+0x4a0>)
 80a5924:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 80a5928:	bf18      	it	ne
 80a592a:	461a      	movne	r2, r3
 80a592c:	f8df c180 	ldr.w	ip, [pc, #384]	; 80a5ab0 <__strftime.isra.0+0x4a4>
 80a5930:	e00c      	b.n	80a594c <__strftime.isra.0+0x340>
 80a5932:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 80a5936:	9103      	str	r1, [sp, #12]
 80a5938:	f000 ff20 	bl	80a677c <abs>
 80a593c:	2264      	movs	r2, #100	; 0x64
 80a593e:	9903      	ldr	r1, [sp, #12]
 80a5940:	fb90 f0f2 	sdiv	r0, r0, r2
 80a5944:	e7e7      	b.n	80a5916 <__strftime.isra.0+0x30a>
 80a5946:	4a58      	ldr	r2, [pc, #352]	; (80a5aa8 <__strftime.isra.0+0x49c>)
 80a5948:	f8df c168 	ldr.w	ip, [pc, #360]	; 80a5ab4 <__strftime.isra.0+0x4a8>
 80a594c:	f1b9 0f02 	cmp.w	r9, #2
 80a5950:	bf2c      	ite	cs
 80a5952:	ebc1 0109 	rsbcs	r1, r1, r9
 80a5956:	f1c1 0102 	rsbcc	r1, r1, #2
 80a595a:	4b57      	ldr	r3, [pc, #348]	; (80a5ab8 <__strftime.isra.0+0x4ac>)
 80a595c:	9100      	str	r1, [sp, #0]
 80a595e:	4951      	ldr	r1, [pc, #324]	; (80a5aa4 <__strftime.isra.0+0x498>)
 80a5960:	9001      	str	r0, [sp, #4]
 80a5962:	458a      	cmp	sl, r1
 80a5964:	bfa8      	it	ge
 80a5966:	4613      	movge	r3, r2
 80a5968:	4662      	mov	r2, ip
 80a596a:	1b29      	subs	r1, r5, r4
 80a596c:	1938      	adds	r0, r7, r4
 80a596e:	e029      	b.n	80a59c4 <__strftime.isra.0+0x3b8>
 80a5970:	4a4d      	ldr	r2, [pc, #308]	; (80a5aa8 <__strftime.isra.0+0x49c>)
 80a5972:	e7db      	b.n	80a592c <__strftime.isra.0+0x320>
 80a5974:	4951      	ldr	r1, [pc, #324]	; (80a5abc <__strftime.isra.0+0x4b0>)
 80a5976:	4a52      	ldr	r2, [pc, #328]	; (80a5ac0 <__strftime.isra.0+0x4b4>)
 80a5978:	68f3      	ldr	r3, [r6, #12]
 80a597a:	2864      	cmp	r0, #100	; 0x64
 80a597c:	bf08      	it	eq
 80a597e:	460a      	moveq	r2, r1
 80a5980:	1b29      	subs	r1, r5, r4
 80a5982:	1938      	adds	r0, r7, r4
 80a5984:	f7fc fdd8 	bl	80a2538 <sniprintf>
 80a5988:	2800      	cmp	r0, #0
 80a598a:	f6ff ae71 	blt.w	80a5670 <__strftime.isra.0+0x64>
 80a598e:	4404      	add	r4, r0
 80a5990:	42a5      	cmp	r5, r4
 80a5992:	f63f af3f 	bhi.w	80a5814 <__strftime.isra.0+0x208>
 80a5996:	e66b      	b.n	80a5670 <__strftime.isra.0+0x64>
 80a5998:	6970      	ldr	r0, [r6, #20]
 80a599a:	6933      	ldr	r3, [r6, #16]
 80a599c:	2800      	cmp	r0, #0
 80a599e:	68f2      	ldr	r2, [r6, #12]
 80a59a0:	eb07 0904 	add.w	r9, r7, r4
 80a59a4:	eba5 0a04 	sub.w	sl, r5, r4
 80a59a8:	f103 0b01 	add.w	fp, r3, #1
 80a59ac:	db0d      	blt.n	80a59ca <__strftime.isra.0+0x3be>
 80a59ae:	2164      	movs	r1, #100	; 0x64
 80a59b0:	fb90 fcf1 	sdiv	ip, r0, r1
 80a59b4:	fb01 001c 	mls	r0, r1, ip, r0
 80a59b8:	e9cd 2000 	strd	r2, r0, [sp]
 80a59bc:	465b      	mov	r3, fp
 80a59be:	4651      	mov	r1, sl
 80a59c0:	4648      	mov	r0, r9
 80a59c2:	4a40      	ldr	r2, [pc, #256]	; (80a5ac4 <__strftime.isra.0+0x4b8>)
 80a59c4:	f7fc fdb8 	bl	80a2538 <sniprintf>
 80a59c8:	e7de      	b.n	80a5988 <__strftime.isra.0+0x37c>
 80a59ca:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80a59ce:	9203      	str	r2, [sp, #12]
 80a59d0:	f000 fed4 	bl	80a677c <abs>
 80a59d4:	2164      	movs	r1, #100	; 0x64
 80a59d6:	fb90 fcf1 	sdiv	ip, r0, r1
 80a59da:	9a03      	ldr	r2, [sp, #12]
 80a59dc:	fb0c 0011 	mls	r0, ip, r1, r0
 80a59e0:	e7ea      	b.n	80a59b8 <__strftime.isra.0+0x3ac>
 80a59e2:	2225      	movs	r2, #37	; 0x25
 80a59e4:	f88d 2018 	strb.w	r2, [sp, #24]
 80a59e8:	f1bb 0f00 	cmp.w	fp, #0
 80a59ec:	d011      	beq.n	80a5a12 <__strftime.isra.0+0x406>
 80a59ee:	f1b9 0f06 	cmp.w	r9, #6
 80a59f2:	bf38      	it	cc
 80a59f4:	f04f 0906 	movcc.w	r9, #6
 80a59f8:	f1b9 0306 	subs.w	r3, r9, #6
 80a59fc:	f88d b019 	strb.w	fp, [sp, #25]
 80a5a00:	d10c      	bne.n	80a5a1c <__strftime.isra.0+0x410>
 80a5a02:	f10d 001a 	add.w	r0, sp, #26
 80a5a06:	4930      	ldr	r1, [pc, #192]	; (80a5ac8 <__strftime.isra.0+0x4bc>)
 80a5a08:	f7ff fd79 	bl	80a54fe <strcpy>
 80a5a0c:	4633      	mov	r3, r6
 80a5a0e:	aa06      	add	r2, sp, #24
 80a5a10:	e75e      	b.n	80a58d0 <__strftime.isra.0+0x2c4>
 80a5a12:	f04f 0b2b 	mov.w	fp, #43	; 0x2b
 80a5a16:	f04f 090a 	mov.w	r9, #10
 80a5a1a:	e7ed      	b.n	80a59f8 <__strftime.isra.0+0x3ec>
 80a5a1c:	211e      	movs	r1, #30
 80a5a1e:	4a2b      	ldr	r2, [pc, #172]	; (80a5acc <__strftime.isra.0+0x4c0>)
 80a5a20:	f10d 001a 	add.w	r0, sp, #26
 80a5a24:	f7fc fd88 	bl	80a2538 <sniprintf>
 80a5a28:	2800      	cmp	r0, #0
 80a5a2a:	ddea      	ble.n	80a5a02 <__strftime.isra.0+0x3f6>
 80a5a2c:	f10d 031a 	add.w	r3, sp, #26
 80a5a30:	4418      	add	r0, r3
 80a5a32:	e7e8      	b.n	80a5a06 <__strftime.isra.0+0x3fa>
 80a5a34:	4630      	mov	r0, r6
 80a5a36:	f7ff fd87 	bl	80a5548 <iso_year_adjust>
 80a5a3a:	4681      	mov	r9, r0
 80a5a3c:	6970      	ldr	r0, [r6, #20]
 80a5a3e:	2800      	cmp	r0, #0
 80a5a40:	db11      	blt.n	80a5a66 <__strftime.isra.0+0x45a>
 80a5a42:	2364      	movs	r3, #100	; 0x64
 80a5a44:	fb90 f2f3 	sdiv	r2, r0, r3
 80a5a48:	fb03 0012 	mls	r0, r3, r2, r0
 80a5a4c:	2264      	movs	r2, #100	; 0x64
 80a5a4e:	4481      	add	r9, r0
 80a5a50:	fb99 f3f2 	sdiv	r3, r9, r2
 80a5a54:	fb02 9913 	mls	r9, r2, r3, r9
 80a5a58:	4491      	add	r9, r2
 80a5a5a:	fbb9 f3f2 	udiv	r3, r9, r2
 80a5a5e:	fb02 9313 	mls	r3, r2, r3, r9
 80a5a62:	4a16      	ldr	r2, [pc, #88]	; (80a5abc <__strftime.isra.0+0x4b0>)
 80a5a64:	e78c      	b.n	80a5980 <__strftime.isra.0+0x374>
 80a5a66:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80a5a6a:	f000 fe87 	bl	80a677c <abs>
 80a5a6e:	2364      	movs	r3, #100	; 0x64
 80a5a70:	fb90 f2f3 	sdiv	r2, r0, r3
 80a5a74:	f1b9 0f00 	cmp.w	r9, #0
 80a5a78:	fb02 0013 	mls	r0, r2, r3, r0
 80a5a7c:	da07      	bge.n	80a5a8e <__strftime.isra.0+0x482>
 80a5a7e:	6972      	ldr	r2, [r6, #20]
 80a5a80:	f2a3 73cf 	subw	r3, r3, #1999	; 0x7cf
 80a5a84:	429a      	cmp	r2, r3
 80a5a86:	bfb8      	it	lt
 80a5a88:	f04f 0901 	movlt.w	r9, #1
 80a5a8c:	e7de      	b.n	80a5a4c <__strftime.isra.0+0x440>
 80a5a8e:	d0dd      	beq.n	80a5a4c <__strftime.isra.0+0x440>
 80a5a90:	6972      	ldr	r2, [r6, #20]
 80a5a92:	4b04      	ldr	r3, [pc, #16]	; (80a5aa4 <__strftime.isra.0+0x498>)
 80a5a94:	429a      	cmp	r2, r3
 80a5a96:	bfb8      	it	lt
 80a5a98:	f04f 39ff 	movlt.w	r9, #4294967295
 80a5a9c:	e7d6      	b.n	80a5a4c <__strftime.isra.0+0x440>
 80a5a9e:	bf00      	nop
 80a5aa0:	080a7854 	.word	0x080a7854
 80a5aa4:	fffff894 	.word	0xfffff894
 80a5aa8:	080a6b86 	.word	0x080a6b86
 80a5aac:	080a76db 	.word	0x080a76db
 80a5ab0:	080a76d3 	.word	0x080a76d3
 80a5ab4:	080a76cc 	.word	0x080a76cc
 80a5ab8:	080a76dd 	.word	0x080a76dd
 80a5abc:	080a76ed 	.word	0x080a76ed
 80a5ac0:	080a76df 	.word	0x080a76df
 80a5ac4:	080a76e3 	.word	0x080a76e3
 80a5ac8:	080a76f6 	.word	0x080a76f6
 80a5acc:	080a76f2 	.word	0x080a76f2
 80a5ad0:	6971      	ldr	r1, [r6, #20]
 80a5ad2:	4aba      	ldr	r2, [pc, #744]	; (80a5dbc <__strftime.isra.0+0x7b0>)
 80a5ad4:	4630      	mov	r0, r6
 80a5ad6:	4291      	cmp	r1, r2
 80a5ad8:	bfac      	ite	ge
 80a5ada:	2300      	movge	r3, #0
 80a5adc:	2301      	movlt	r3, #1
 80a5ade:	e9cd 3103 	strd	r3, r1, [sp, #12]
 80a5ae2:	f7ff fd31 	bl	80a5548 <iso_year_adjust>
 80a5ae6:	9904      	ldr	r1, [sp, #16]
 80a5ae8:	4682      	mov	sl, r0
 80a5aea:	2900      	cmp	r1, #0
 80a5aec:	db2c      	blt.n	80a5b48 <__strftime.isra.0+0x53c>
 80a5aee:	2264      	movs	r2, #100	; 0x64
 80a5af0:	fb91 f2f2 	sdiv	r2, r1, r2
 80a5af4:	3213      	adds	r2, #19
 80a5af6:	6970      	ldr	r0, [r6, #20]
 80a5af8:	2800      	cmp	r0, #0
 80a5afa:	db2f      	blt.n	80a5b5c <__strftime.isra.0+0x550>
 80a5afc:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80a5b00:	fb90 fefc 	sdiv	lr, r0, ip
 80a5b04:	fb0c 001e 	mls	r0, ip, lr, r0
 80a5b08:	f1ba 0f00 	cmp.w	sl, #0
 80a5b0c:	da35      	bge.n	80a5b7a <__strftime.isra.0+0x56e>
 80a5b0e:	6971      	ldr	r1, [r6, #20]
 80a5b10:	4bab      	ldr	r3, [pc, #684]	; (80a5dc0 <__strftime.isra.0+0x7b4>)
 80a5b12:	4299      	cmp	r1, r3
 80a5b14:	db3b      	blt.n	80a5b8e <__strftime.isra.0+0x582>
 80a5b16:	4482      	add	sl, r0
 80a5b18:	f1ba 3fff 	cmp.w	sl, #4294967295
 80a5b1c:	d13c      	bne.n	80a5b98 <__strftime.isra.0+0x58c>
 80a5b1e:	f04f 0a63 	mov.w	sl, #99	; 0x63
 80a5b22:	3a01      	subs	r2, #1
 80a5b24:	2064      	movs	r0, #100	; 0x64
 80a5b26:	9b03      	ldr	r3, [sp, #12]
 80a5b28:	fb00 aa02 	mla	sl, r0, r2, sl
 80a5b2c:	2b00      	cmp	r3, #0
 80a5b2e:	f000 81a8 	beq.w	80a5e82 <__strftime.isra.0+0x876>
 80a5b32:	222d      	movs	r2, #45	; 0x2d
 80a5b34:	f88d 2018 	strb.w	r2, [sp, #24]
 80a5b38:	f1b9 0f00 	cmp.w	r9, #0
 80a5b3c:	d001      	beq.n	80a5b42 <__strftime.isra.0+0x536>
 80a5b3e:	f109 39ff 	add.w	r9, r9, #4294967295
 80a5b42:	f10d 0219 	add.w	r2, sp, #25
 80a5b46:	e1a7      	b.n	80a5e98 <__strftime.isra.0+0x88c>
 80a5b48:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 80a5b4c:	9104      	str	r1, [sp, #16]
 80a5b4e:	f000 fe15 	bl	80a677c <abs>
 80a5b52:	2264      	movs	r2, #100	; 0x64
 80a5b54:	9904      	ldr	r1, [sp, #16]
 80a5b56:	fb90 f2f2 	sdiv	r2, r0, r2
 80a5b5a:	e7cc      	b.n	80a5af6 <__strftime.isra.0+0x4ea>
 80a5b5c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80a5b60:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80a5b64:	f000 fe0a 	bl	80a677c <abs>
 80a5b68:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 80a5b6c:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80a5b70:	fb90 fefc 	sdiv	lr, r0, ip
 80a5b74:	fb0e 001c 	mls	r0, lr, ip, r0
 80a5b78:	e7c6      	b.n	80a5b08 <__strftime.isra.0+0x4fc>
 80a5b7a:	d0cc      	beq.n	80a5b16 <__strftime.isra.0+0x50a>
 80a5b7c:	4b8f      	ldr	r3, [pc, #572]	; (80a5dbc <__strftime.isra.0+0x7b0>)
 80a5b7e:	4299      	cmp	r1, r3
 80a5b80:	bfb6      	itet	lt
 80a5b82:	2301      	movlt	r3, #1
 80a5b84:	2300      	movge	r3, #0
 80a5b86:	f04f 3aff 	movlt.w	sl, #4294967295
 80a5b8a:	9303      	str	r3, [sp, #12]
 80a5b8c:	e7c3      	b.n	80a5b16 <__strftime.isra.0+0x50a>
 80a5b8e:	f04f 0a01 	mov.w	sl, #1
 80a5b92:	f8cd a00c 	str.w	sl, [sp, #12]
 80a5b96:	e7be      	b.n	80a5b16 <__strftime.isra.0+0x50a>
 80a5b98:	f1ba 0f64 	cmp.w	sl, #100	; 0x64
 80a5b9c:	bf04      	itt	eq
 80a5b9e:	f04f 0a00 	moveq.w	sl, #0
 80a5ba2:	3201      	addeq	r2, #1
 80a5ba4:	e7be      	b.n	80a5b24 <__strftime.isra.0+0x518>
 80a5ba6:	4987      	ldr	r1, [pc, #540]	; (80a5dc4 <__strftime.isra.0+0x7b8>)
 80a5ba8:	4a87      	ldr	r2, [pc, #540]	; (80a5dc8 <__strftime.isra.0+0x7bc>)
 80a5baa:	68b3      	ldr	r3, [r6, #8]
 80a5bac:	286b      	cmp	r0, #107	; 0x6b
 80a5bae:	bf08      	it	eq
 80a5bb0:	460a      	moveq	r2, r1
 80a5bb2:	e6e5      	b.n	80a5980 <__strftime.isra.0+0x374>
 80a5bb4:	68b3      	ldr	r3, [r6, #8]
 80a5bb6:	b163      	cbz	r3, 80a5bd2 <__strftime.isra.0+0x5c6>
 80a5bb8:	2b0c      	cmp	r3, #12
 80a5bba:	d004      	beq.n	80a5bc6 <__strftime.isra.0+0x5ba>
 80a5bbc:	210c      	movs	r1, #12
 80a5bbe:	fb93 f2f1 	sdiv	r2, r3, r1
 80a5bc2:	fb01 3312 	mls	r3, r1, r2, r3
 80a5bc6:	4980      	ldr	r1, [pc, #512]	; (80a5dc8 <__strftime.isra.0+0x7bc>)
 80a5bc8:	4a7e      	ldr	r2, [pc, #504]	; (80a5dc4 <__strftime.isra.0+0x7b8>)
 80a5bca:	2849      	cmp	r0, #73	; 0x49
 80a5bcc:	bf08      	it	eq
 80a5bce:	460a      	moveq	r2, r1
 80a5bd0:	e6d6      	b.n	80a5980 <__strftime.isra.0+0x374>
 80a5bd2:	230c      	movs	r3, #12
 80a5bd4:	e7f7      	b.n	80a5bc6 <__strftime.isra.0+0x5ba>
 80a5bd6:	69f3      	ldr	r3, [r6, #28]
 80a5bd8:	4a7c      	ldr	r2, [pc, #496]	; (80a5dcc <__strftime.isra.0+0x7c0>)
 80a5bda:	3301      	adds	r3, #1
 80a5bdc:	e6d0      	b.n	80a5980 <__strftime.isra.0+0x374>
 80a5bde:	6933      	ldr	r3, [r6, #16]
 80a5be0:	3301      	adds	r3, #1
 80a5be2:	e73e      	b.n	80a5a62 <__strftime.isra.0+0x456>
 80a5be4:	6873      	ldr	r3, [r6, #4]
 80a5be6:	e73c      	b.n	80a5a62 <__strftime.isra.0+0x456>
 80a5be8:	1e6b      	subs	r3, r5, #1
 80a5bea:	429c      	cmp	r4, r3
 80a5bec:	f4bf ad40 	bcs.w	80a5670 <__strftime.isra.0+0x64>
 80a5bf0:	230a      	movs	r3, #10
 80a5bf2:	553b      	strb	r3, [r7, r4]
 80a5bf4:	3401      	adds	r4, #1
 80a5bf6:	e60d      	b.n	80a5814 <__strftime.isra.0+0x208>
 80a5bf8:	68b3      	ldr	r3, [r6, #8]
 80a5bfa:	2b0b      	cmp	r3, #11
 80a5bfc:	bfd4      	ite	le
 80a5bfe:	2200      	movle	r2, #0
 80a5c00:	2201      	movgt	r2, #1
 80a5c02:	4b73      	ldr	r3, [pc, #460]	; (80a5dd0 <__strftime.isra.0+0x7c4>)
 80a5c04:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80a5c08:	f8d3 90a4 	ldr.w	r9, [r3, #164]	; 0xa4
 80a5c0c:	4648      	mov	r0, r9
 80a5c0e:	f000 f9d1 	bl	80a5fb4 <strlen>
 80a5c12:	f109 32ff 	add.w	r2, r9, #4294967295
 80a5c16:	4420      	add	r0, r4
 80a5c18:	f105 3cff 	add.w	ip, r5, #4294967295
 80a5c1c:	42a0      	cmp	r0, r4
 80a5c1e:	f43f adf9 	beq.w	80a5814 <__strftime.isra.0+0x208>
 80a5c22:	45a4      	cmp	ip, r4
 80a5c24:	f67f ad24 	bls.w	80a5670 <__strftime.isra.0+0x64>
 80a5c28:	f898 1000 	ldrb.w	r1, [r8]
 80a5c2c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80a5c30:	2950      	cmp	r1, #80	; 0x50
 80a5c32:	d107      	bne.n	80a5c44 <__strftime.isra.0+0x638>
 80a5c34:	4967      	ldr	r1, [pc, #412]	; (80a5dd4 <__strftime.isra.0+0x7c8>)
 80a5c36:	5cc9      	ldrb	r1, [r1, r3]
 80a5c38:	f001 0103 	and.w	r1, r1, #3
 80a5c3c:	2901      	cmp	r1, #1
 80a5c3e:	bf08      	it	eq
 80a5c40:	3320      	addeq	r3, #32
 80a5c42:	b2db      	uxtb	r3, r3
 80a5c44:	553b      	strb	r3, [r7, r4]
 80a5c46:	3401      	adds	r4, #1
 80a5c48:	e7e8      	b.n	80a5c1c <__strftime.isra.0+0x610>
 80a5c4a:	6873      	ldr	r3, [r6, #4]
 80a5c4c:	4a62      	ldr	r2, [pc, #392]	; (80a5dd8 <__strftime.isra.0+0x7cc>)
 80a5c4e:	9300      	str	r3, [sp, #0]
 80a5c50:	68b3      	ldr	r3, [r6, #8]
 80a5c52:	1b29      	subs	r1, r5, r4
 80a5c54:	1938      	adds	r0, r7, r4
 80a5c56:	f7fc fc6f 	bl	80a2538 <sniprintf>
 80a5c5a:	e695      	b.n	80a5988 <__strftime.isra.0+0x37c>
 80a5c5c:	6a33      	ldr	r3, [r6, #32]
 80a5c5e:	2b00      	cmp	r3, #0
 80a5c60:	db79      	blt.n	80a5d56 <__strftime.isra.0+0x74a>
 80a5c62:	f000 fb93 	bl	80a638c <__tz_lock>
 80a5c66:	9b02      	ldr	r3, [sp, #8]
 80a5c68:	b90b      	cbnz	r3, 80a5c6e <__strftime.isra.0+0x662>
 80a5c6a:	f000 fb9b 	bl	80a63a4 <_tzset_unlocked>
 80a5c6e:	f000 fde1 	bl	80a6834 <__gettzinfo>
 80a5c72:	6a33      	ldr	r3, [r6, #32]
 80a5c74:	2b00      	cmp	r3, #0
 80a5c76:	bfd4      	ite	le
 80a5c78:	2200      	movle	r2, #0
 80a5c7a:	2201      	movgt	r2, #1
 80a5c7c:	2328      	movs	r3, #40	; 0x28
 80a5c7e:	fb02 3303 	mla	r3, r2, r3, r3
 80a5c82:	58c3      	ldr	r3, [r0, r3]
 80a5c84:	f1c3 0900 	rsb	r9, r3, #0
 80a5c88:	f000 fb86 	bl	80a6398 <__tz_unlock>
 80a5c8c:	2301      	movs	r3, #1
 80a5c8e:	9302      	str	r3, [sp, #8]
 80a5c90:	6972      	ldr	r2, [r6, #20]
 80a5c92:	1b29      	subs	r1, r5, r4
 80a5c94:	f1b2 0345 	subs.w	r3, r2, #69	; 0x45
 80a5c98:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 80a5c9c:	f16c 0c00 	sbc.w	ip, ip, #0
 80a5ca0:	f1bc 0f00 	cmp.w	ip, #0
 80a5ca4:	eb07 0004 	add.w	r0, r7, r4
 80a5ca8:	da02      	bge.n	80a5cb0 <__strftime.isra.0+0x6a4>
 80a5caa:	3303      	adds	r3, #3
 80a5cac:	f14c 0c00 	adc.w	ip, ip, #0
 80a5cb0:	f04f 0e64 	mov.w	lr, #100	; 0x64
 80a5cb4:	f102 3aff 	add.w	sl, r2, #4294967295
 80a5cb8:	fb9a fefe 	sdiv	lr, sl, lr
 80a5cbc:	089b      	lsrs	r3, r3, #2
 80a5cbe:	ea43 738c 	orr.w	r3, r3, ip, lsl #30
 80a5cc2:	ebb3 030e 	subs.w	r3, r3, lr
 80a5cc6:	ea4f 0cac 	mov.w	ip, ip, asr #2
 80a5cca:	eb6c 7cee 	sbc.w	ip, ip, lr, asr #31
 80a5cce:	f44f 7ec8 	mov.w	lr, #400	; 0x190
 80a5cd2:	f202 1a2b 	addw	sl, r2, #299	; 0x12b
 80a5cd6:	fb9a fefe 	sdiv	lr, sl, lr
 80a5cda:	eb13 030e 	adds.w	r3, r3, lr
 80a5cde:	eb4c 7eee 	adc.w	lr, ip, lr, asr #31
 80a5ce2:	f240 1c6d 	movw	ip, #365	; 0x16d
 80a5ce6:	3a46      	subs	r2, #70	; 0x46
 80a5ce8:	fb0c f202 	mul.w	r2, ip, r2
 80a5cec:	f04f 0c18 	mov.w	ip, #24
 80a5cf0:	189b      	adds	r3, r3, r2
 80a5cf2:	eb4e 72e2 	adc.w	r2, lr, r2, asr #31
 80a5cf6:	f8d6 e01c 	ldr.w	lr, [r6, #28]
 80a5cfa:	eb13 030e 	adds.w	r3, r3, lr
 80a5cfe:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 80a5d02:	fba3 3e0c 	umull	r3, lr, r3, ip
 80a5d06:	fb0c e202 	mla	r2, ip, r2, lr
 80a5d0a:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 80a5d0e:	f8d6 e008 	ldr.w	lr, [r6, #8]
 80a5d12:	eb13 030e 	adds.w	r3, r3, lr
 80a5d16:	eb42 7eee 	adc.w	lr, r2, lr, asr #31
 80a5d1a:	fba3 320c 	umull	r3, r2, r3, ip
 80a5d1e:	fb0c 220e 	mla	r2, ip, lr, r2
 80a5d22:	f8d6 e004 	ldr.w	lr, [r6, #4]
 80a5d26:	eb13 030e 	adds.w	r3, r3, lr
 80a5d2a:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 80a5d2e:	fba3 3e0c 	umull	r3, lr, r3, ip
 80a5d32:	fb0c e202 	mla	r2, ip, r2, lr
 80a5d36:	f8d6 e000 	ldr.w	lr, [r6]
 80a5d3a:	eb13 030e 	adds.w	r3, r3, lr
 80a5d3e:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 80a5d42:	ebb3 0309 	subs.w	r3, r3, r9
 80a5d46:	eb62 72e9 	sbc.w	r2, r2, r9, asr #31
 80a5d4a:	e9cd 3200 	strd	r3, r2, [sp]
 80a5d4e:	4a23      	ldr	r2, [pc, #140]	; (80a5ddc <__strftime.isra.0+0x7d0>)
 80a5d50:	f7fc fbf2 	bl	80a2538 <sniprintf>
 80a5d54:	e618      	b.n	80a5988 <__strftime.isra.0+0x37c>
 80a5d56:	f04f 0900 	mov.w	r9, #0
 80a5d5a:	e799      	b.n	80a5c90 <__strftime.isra.0+0x684>
 80a5d5c:	6833      	ldr	r3, [r6, #0]
 80a5d5e:	e680      	b.n	80a5a62 <__strftime.isra.0+0x456>
 80a5d60:	1e6b      	subs	r3, r5, #1
 80a5d62:	429c      	cmp	r4, r3
 80a5d64:	f4bf ac84 	bcs.w	80a5670 <__strftime.isra.0+0x64>
 80a5d68:	2309      	movs	r3, #9
 80a5d6a:	e742      	b.n	80a5bf2 <__strftime.isra.0+0x5e6>
 80a5d6c:	6833      	ldr	r3, [r6, #0]
 80a5d6e:	4a1c      	ldr	r2, [pc, #112]	; (80a5de0 <__strftime.isra.0+0x7d4>)
 80a5d70:	9301      	str	r3, [sp, #4]
 80a5d72:	6873      	ldr	r3, [r6, #4]
 80a5d74:	9300      	str	r3, [sp, #0]
 80a5d76:	68b3      	ldr	r3, [r6, #8]
 80a5d78:	e5f7      	b.n	80a596a <__strftime.isra.0+0x35e>
 80a5d7a:	1e6b      	subs	r3, r5, #1
 80a5d7c:	429c      	cmp	r4, r3
 80a5d7e:	f4bf ac77 	bcs.w	80a5670 <__strftime.isra.0+0x64>
 80a5d82:	69b3      	ldr	r3, [r6, #24]
 80a5d84:	1c62      	adds	r2, r4, #1
 80a5d86:	b91b      	cbnz	r3, 80a5d90 <__strftime.isra.0+0x784>
 80a5d88:	2337      	movs	r3, #55	; 0x37
 80a5d8a:	553b      	strb	r3, [r7, r4]
 80a5d8c:	4614      	mov	r4, r2
 80a5d8e:	e541      	b.n	80a5814 <__strftime.isra.0+0x208>
 80a5d90:	3330      	adds	r3, #48	; 0x30
 80a5d92:	e7fa      	b.n	80a5d8a <__strftime.isra.0+0x77e>
 80a5d94:	69f3      	ldr	r3, [r6, #28]
 80a5d96:	69b2      	ldr	r2, [r6, #24]
 80a5d98:	3307      	adds	r3, #7
 80a5d9a:	1a9b      	subs	r3, r3, r2
 80a5d9c:	2207      	movs	r2, #7
 80a5d9e:	fb93 f3f2 	sdiv	r3, r3, r2
 80a5da2:	e65e      	b.n	80a5a62 <__strftime.isra.0+0x456>
 80a5da4:	4630      	mov	r0, r6
 80a5da6:	f7ff fbcf 	bl	80a5548 <iso_year_adjust>
 80a5daa:	69b2      	ldr	r2, [r6, #24]
 80a5dac:	b1d2      	cbz	r2, 80a5de4 <__strftime.isra.0+0x7d8>
 80a5dae:	3a01      	subs	r2, #1
 80a5db0:	2800      	cmp	r0, #0
 80a5db2:	dc3b      	bgt.n	80a5e2c <__strftime.isra.0+0x820>
 80a5db4:	69f3      	ldr	r3, [r6, #28]
 80a5db6:	d117      	bne.n	80a5de8 <__strftime.isra.0+0x7dc>
 80a5db8:	330a      	adds	r3, #10
 80a5dba:	e7ee      	b.n	80a5d9a <__strftime.isra.0+0x78e>
 80a5dbc:	fffff894 	.word	0xfffff894
 80a5dc0:	fffff895 	.word	0xfffff895
 80a5dc4:	080a76df 	.word	0x080a76df
 80a5dc8:	080a76ed 	.word	0x080a76ed
 80a5dcc:	080a7702 	.word	0x080a7702
 80a5dd0:	080a7854 	.word	0x080a7854
 80a5dd4:	080a798d 	.word	0x080a798d
 80a5dd8:	080a7711 	.word	0x080a7711
 80a5ddc:	080a7707 	.word	0x080a7707
 80a5de0:	080a770c 	.word	0x080a770c
 80a5de4:	2206      	movs	r2, #6
 80a5de6:	e7e3      	b.n	80a5db0 <__strftime.isra.0+0x7a4>
 80a5de8:	6971      	ldr	r1, [r6, #20]
 80a5dea:	1ad2      	subs	r2, r2, r3
 80a5dec:	2900      	cmp	r1, #0
 80a5dee:	f240 736b 	movw	r3, #1899	; 0x76b
 80a5df2:	bfa8      	it	ge
 80a5df4:	f06f 0364 	mvnge.w	r3, #100	; 0x64
 80a5df8:	440b      	add	r3, r1
 80a5dfa:	0799      	lsls	r1, r3, #30
 80a5dfc:	d105      	bne.n	80a5e0a <__strftime.isra.0+0x7fe>
 80a5dfe:	2064      	movs	r0, #100	; 0x64
 80a5e00:	fb93 f1f0 	sdiv	r1, r3, r0
 80a5e04:	fb00 3111 	mls	r1, r0, r1, r3
 80a5e08:	b971      	cbnz	r1, 80a5e28 <__strftime.isra.0+0x81c>
 80a5e0a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80a5e0e:	fb93 f0f1 	sdiv	r0, r3, r1
 80a5e12:	fb01 3310 	mls	r3, r1, r0, r3
 80a5e16:	fab3 f383 	clz	r3, r3
 80a5e1a:	095b      	lsrs	r3, r3, #5
 80a5e1c:	1ad3      	subs	r3, r2, r3
 80a5e1e:	2b05      	cmp	r3, #5
 80a5e20:	bfb4      	ite	lt
 80a5e22:	2335      	movlt	r3, #53	; 0x35
 80a5e24:	2334      	movge	r3, #52	; 0x34
 80a5e26:	e61c      	b.n	80a5a62 <__strftime.isra.0+0x456>
 80a5e28:	2301      	movs	r3, #1
 80a5e2a:	e7f7      	b.n	80a5e1c <__strftime.isra.0+0x810>
 80a5e2c:	2301      	movs	r3, #1
 80a5e2e:	e618      	b.n	80a5a62 <__strftime.isra.0+0x456>
 80a5e30:	1e6b      	subs	r3, r5, #1
 80a5e32:	429c      	cmp	r4, r3
 80a5e34:	f4bf ac1c 	bcs.w	80a5670 <__strftime.isra.0+0x64>
 80a5e38:	69b3      	ldr	r3, [r6, #24]
 80a5e3a:	3330      	adds	r3, #48	; 0x30
 80a5e3c:	e6d9      	b.n	80a5bf2 <__strftime.isra.0+0x5e6>
 80a5e3e:	69b2      	ldr	r2, [r6, #24]
 80a5e40:	b11a      	cbz	r2, 80a5e4a <__strftime.isra.0+0x83e>
 80a5e42:	3a01      	subs	r2, #1
 80a5e44:	69f3      	ldr	r3, [r6, #28]
 80a5e46:	3307      	adds	r3, #7
 80a5e48:	e7a7      	b.n	80a5d9a <__strftime.isra.0+0x78e>
 80a5e4a:	2206      	movs	r2, #6
 80a5e4c:	e7fa      	b.n	80a5e44 <__strftime.isra.0+0x838>
 80a5e4e:	6970      	ldr	r0, [r6, #20]
 80a5e50:	2800      	cmp	r0, #0
 80a5e52:	db05      	blt.n	80a5e60 <__strftime.isra.0+0x854>
 80a5e54:	2364      	movs	r3, #100	; 0x64
 80a5e56:	fb90 f2f3 	sdiv	r2, r0, r3
 80a5e5a:	fb02 0313 	mls	r3, r2, r3, r0
 80a5e5e:	e600      	b.n	80a5a62 <__strftime.isra.0+0x456>
 80a5e60:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80a5e64:	f000 fc8a 	bl	80a677c <abs>
 80a5e68:	e7f4      	b.n	80a5e54 <__strftime.isra.0+0x848>
 80a5e6a:	6972      	ldr	r2, [r6, #20]
 80a5e6c:	494c      	ldr	r1, [pc, #304]	; (80a5fa0 <__strftime.isra.0+0x994>)
 80a5e6e:	428a      	cmp	r2, r1
 80a5e70:	da05      	bge.n	80a5e7e <__strftime.isra.0+0x872>
 80a5e72:	202d      	movs	r0, #45	; 0x2d
 80a5e74:	eba1 0a02 	sub.w	sl, r1, r2
 80a5e78:	f88d 0018 	strb.w	r0, [sp, #24]
 80a5e7c:	e65c      	b.n	80a5b38 <__strftime.isra.0+0x52c>
 80a5e7e:	f202 7a6c 	addw	sl, r2, #1900	; 0x76c
 80a5e82:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 80a5e86:	d106      	bne.n	80a5e96 <__strftime.isra.0+0x88a>
 80a5e88:	f242 720f 	movw	r2, #9999	; 0x270f
 80a5e8c:	4592      	cmp	sl, r2
 80a5e8e:	d902      	bls.n	80a5e96 <__strftime.isra.0+0x88a>
 80a5e90:	f88d b018 	strb.w	fp, [sp, #24]
 80a5e94:	e650      	b.n	80a5b38 <__strftime.isra.0+0x52c>
 80a5e96:	aa06      	add	r2, sp, #24
 80a5e98:	2125      	movs	r1, #37	; 0x25
 80a5e9a:	7011      	strb	r1, [r2, #0]
 80a5e9c:	f1bb 0f00 	cmp.w	fp, #0
 80a5ea0:	d108      	bne.n	80a5eb4 <__strftime.isra.0+0x8a8>
 80a5ea2:	1c50      	adds	r0, r2, #1
 80a5ea4:	493f      	ldr	r1, [pc, #252]	; (80a5fa4 <__strftime.isra.0+0x998>)
 80a5ea6:	f7ff fb2a 	bl	80a54fe <strcpy>
 80a5eaa:	464b      	mov	r3, r9
 80a5eac:	f8cd a000 	str.w	sl, [sp]
 80a5eb0:	aa06      	add	r2, sp, #24
 80a5eb2:	e6ce      	b.n	80a5c52 <__strftime.isra.0+0x646>
 80a5eb4:	2330      	movs	r3, #48	; 0x30
 80a5eb6:	1c90      	adds	r0, r2, #2
 80a5eb8:	7053      	strb	r3, [r2, #1]
 80a5eba:	e7f3      	b.n	80a5ea4 <__strftime.isra.0+0x898>
 80a5ebc:	6a33      	ldr	r3, [r6, #32]
 80a5ebe:	2b00      	cmp	r3, #0
 80a5ec0:	f6ff aca8 	blt.w	80a5814 <__strftime.isra.0+0x208>
 80a5ec4:	f000 fa62 	bl	80a638c <__tz_lock>
 80a5ec8:	9b02      	ldr	r3, [sp, #8]
 80a5eca:	b90b      	cbnz	r3, 80a5ed0 <__strftime.isra.0+0x8c4>
 80a5ecc:	f000 fa6a 	bl	80a63a4 <_tzset_unlocked>
 80a5ed0:	f000 fcb0 	bl	80a6834 <__gettzinfo>
 80a5ed4:	6a33      	ldr	r3, [r6, #32]
 80a5ed6:	eb07 0a04 	add.w	sl, r7, r4
 80a5eda:	2b00      	cmp	r3, #0
 80a5edc:	bfd4      	ite	le
 80a5ede:	2200      	movle	r2, #0
 80a5ee0:	2201      	movgt	r2, #1
 80a5ee2:	2328      	movs	r3, #40	; 0x28
 80a5ee4:	fb02 3303 	mla	r3, r2, r3, r3
 80a5ee8:	58c3      	ldr	r3, [r0, r3]
 80a5eea:	eba5 0b04 	sub.w	fp, r5, r4
 80a5eee:	f1c3 0900 	rsb	r9, r3, #0
 80a5ef2:	f000 fa51 	bl	80a6398 <__tz_unlock>
 80a5ef6:	233c      	movs	r3, #60	; 0x3c
 80a5ef8:	fb99 f0f3 	sdiv	r0, r9, r3
 80a5efc:	f000 fd4c 	bl	80a6998 <labs>
 80a5f00:	233c      	movs	r3, #60	; 0x3c
 80a5f02:	fb90 f2f3 	sdiv	r2, r0, r3
 80a5f06:	fb02 0013 	mls	r0, r2, r3, r0
 80a5f0a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80a5f0e:	9000      	str	r0, [sp, #0]
 80a5f10:	fb99 f3f3 	sdiv	r3, r9, r3
 80a5f14:	4659      	mov	r1, fp
 80a5f16:	4650      	mov	r0, sl
 80a5f18:	4a23      	ldr	r2, [pc, #140]	; (80a5fa8 <__strftime.isra.0+0x99c>)
 80a5f1a:	f7fc fb0d 	bl	80a2538 <sniprintf>
 80a5f1e:	2800      	cmp	r0, #0
 80a5f20:	f6ff aba6 	blt.w	80a5670 <__strftime.isra.0+0x64>
 80a5f24:	4404      	add	r4, r0
 80a5f26:	42a5      	cmp	r5, r4
 80a5f28:	f67f aba2 	bls.w	80a5670 <__strftime.isra.0+0x64>
 80a5f2c:	2301      	movs	r3, #1
 80a5f2e:	9302      	str	r3, [sp, #8]
 80a5f30:	e470      	b.n	80a5814 <__strftime.isra.0+0x208>
 80a5f32:	6a33      	ldr	r3, [r6, #32]
 80a5f34:	2b00      	cmp	r3, #0
 80a5f36:	f6ff ac6d 	blt.w	80a5814 <__strftime.isra.0+0x208>
 80a5f3a:	f000 fa27 	bl	80a638c <__tz_lock>
 80a5f3e:	9b02      	ldr	r3, [sp, #8]
 80a5f40:	b90b      	cbnz	r3, 80a5f46 <__strftime.isra.0+0x93a>
 80a5f42:	f000 fa2f 	bl	80a63a4 <_tzset_unlocked>
 80a5f46:	6a33      	ldr	r3, [r6, #32]
 80a5f48:	4a18      	ldr	r2, [pc, #96]	; (80a5fac <__strftime.isra.0+0x9a0>)
 80a5f4a:	2b00      	cmp	r3, #0
 80a5f4c:	bfd4      	ite	le
 80a5f4e:	2300      	movle	r3, #0
 80a5f50:	2301      	movgt	r3, #1
 80a5f52:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 80a5f56:	4648      	mov	r0, r9
 80a5f58:	f000 f82c 	bl	80a5fb4 <strlen>
 80a5f5c:	f109 39ff 	add.w	r9, r9, #4294967295
 80a5f60:	4420      	add	r0, r4
 80a5f62:	1e6b      	subs	r3, r5, #1
 80a5f64:	42a0      	cmp	r0, r4
 80a5f66:	d102      	bne.n	80a5f6e <__strftime.isra.0+0x962>
 80a5f68:	f000 fa16 	bl	80a6398 <__tz_unlock>
 80a5f6c:	e7de      	b.n	80a5f2c <__strftime.isra.0+0x920>
 80a5f6e:	42a3      	cmp	r3, r4
 80a5f70:	d904      	bls.n	80a5f7c <__strftime.isra.0+0x970>
 80a5f72:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 80a5f76:	553a      	strb	r2, [r7, r4]
 80a5f78:	3401      	adds	r4, #1
 80a5f7a:	e7f3      	b.n	80a5f64 <__strftime.isra.0+0x958>
 80a5f7c:	f000 fa0c 	bl	80a6398 <__tz_unlock>
 80a5f80:	f7ff bb76 	b.w	80a5670 <__strftime.isra.0+0x64>
 80a5f84:	1e6b      	subs	r3, r5, #1
 80a5f86:	429c      	cmp	r4, r3
 80a5f88:	f4bf ab72 	bcs.w	80a5670 <__strftime.isra.0+0x64>
 80a5f8c:	2325      	movs	r3, #37	; 0x25
 80a5f8e:	e630      	b.n	80a5bf2 <__strftime.isra.0+0x5e6>
 80a5f90:	b10d      	cbz	r5, 80a5f96 <__strftime.isra.0+0x98a>
 80a5f92:	2300      	movs	r3, #0
 80a5f94:	553b      	strb	r3, [r7, r4]
 80a5f96:	4620      	mov	r0, r4
 80a5f98:	b00f      	add	sp, #60	; 0x3c
 80a5f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a5f9e:	bf00      	nop
 80a5fa0:	fffff894 	.word	0xfffff894
 80a5fa4:	080a76fe 	.word	0x080a76fe
 80a5fa8:	080a771b 	.word	0x080a771b
 80a5fac:	2000006c 	.word	0x2000006c

080a5fb0 <strftime>:
 80a5fb0:	f7ff bb2c 	b.w	80a560c <__strftime.isra.0>

080a5fb4 <strlen>:
 80a5fb4:	4603      	mov	r3, r0
 80a5fb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a5fba:	2a00      	cmp	r2, #0
 80a5fbc:	d1fb      	bne.n	80a5fb6 <strlen+0x2>
 80a5fbe:	1a18      	subs	r0, r3, r0
 80a5fc0:	3801      	subs	r0, #1
 80a5fc2:	4770      	bx	lr

080a5fc4 <strncmp>:
 80a5fc4:	4603      	mov	r3, r0
 80a5fc6:	b510      	push	{r4, lr}
 80a5fc8:	b172      	cbz	r2, 80a5fe8 <strncmp+0x24>
 80a5fca:	3901      	subs	r1, #1
 80a5fcc:	1884      	adds	r4, r0, r2
 80a5fce:	f813 0b01 	ldrb.w	r0, [r3], #1
 80a5fd2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80a5fd6:	4290      	cmp	r0, r2
 80a5fd8:	d101      	bne.n	80a5fde <strncmp+0x1a>
 80a5fda:	42a3      	cmp	r3, r4
 80a5fdc:	d101      	bne.n	80a5fe2 <strncmp+0x1e>
 80a5fde:	1a80      	subs	r0, r0, r2
 80a5fe0:	bd10      	pop	{r4, pc}
 80a5fe2:	2800      	cmp	r0, #0
 80a5fe4:	d1f3      	bne.n	80a5fce <strncmp+0xa>
 80a5fe6:	e7fa      	b.n	80a5fde <strncmp+0x1a>
 80a5fe8:	4610      	mov	r0, r2
 80a5fea:	e7f9      	b.n	80a5fe0 <strncmp+0x1c>

080a5fec <strncpy>:
 80a5fec:	4603      	mov	r3, r0
 80a5fee:	b510      	push	{r4, lr}
 80a5ff0:	3901      	subs	r1, #1
 80a5ff2:	b132      	cbz	r2, 80a6002 <strncpy+0x16>
 80a5ff4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80a5ff8:	3a01      	subs	r2, #1
 80a5ffa:	f803 4b01 	strb.w	r4, [r3], #1
 80a5ffe:	2c00      	cmp	r4, #0
 80a6000:	d1f7      	bne.n	80a5ff2 <strncpy+0x6>
 80a6002:	2100      	movs	r1, #0
 80a6004:	441a      	add	r2, r3
 80a6006:	4293      	cmp	r3, r2
 80a6008:	d100      	bne.n	80a600c <strncpy+0x20>
 80a600a:	bd10      	pop	{r4, pc}
 80a600c:	f803 1b01 	strb.w	r1, [r3], #1
 80a6010:	e7f9      	b.n	80a6006 <strncpy+0x1a>

080a6012 <strstr>:
 80a6012:	780a      	ldrb	r2, [r1, #0]
 80a6014:	b570      	push	{r4, r5, r6, lr}
 80a6016:	b96a      	cbnz	r2, 80a6034 <strstr+0x22>
 80a6018:	bd70      	pop	{r4, r5, r6, pc}
 80a601a:	429a      	cmp	r2, r3
 80a601c:	d109      	bne.n	80a6032 <strstr+0x20>
 80a601e:	460c      	mov	r4, r1
 80a6020:	4605      	mov	r5, r0
 80a6022:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80a6026:	2b00      	cmp	r3, #0
 80a6028:	d0f6      	beq.n	80a6018 <strstr+0x6>
 80a602a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80a602e:	429e      	cmp	r6, r3
 80a6030:	d0f7      	beq.n	80a6022 <strstr+0x10>
 80a6032:	3001      	adds	r0, #1
 80a6034:	7803      	ldrb	r3, [r0, #0]
 80a6036:	2b00      	cmp	r3, #0
 80a6038:	d1ef      	bne.n	80a601a <strstr+0x8>
 80a603a:	4618      	mov	r0, r3
 80a603c:	e7ec      	b.n	80a6018 <strstr+0x6>
	...

080a6040 <_strtol_l.constprop.0>:
 80a6040:	2b01      	cmp	r3, #1
 80a6042:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a6046:	4680      	mov	r8, r0
 80a6048:	d001      	beq.n	80a604e <_strtol_l.constprop.0+0xe>
 80a604a:	2b24      	cmp	r3, #36	; 0x24
 80a604c:	d906      	bls.n	80a605c <_strtol_l.constprop.0+0x1c>
 80a604e:	f7fc fa93 	bl	80a2578 <__errno>
 80a6052:	2316      	movs	r3, #22
 80a6054:	6003      	str	r3, [r0, #0]
 80a6056:	2000      	movs	r0, #0
 80a6058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a605c:	460d      	mov	r5, r1
 80a605e:	4f35      	ldr	r7, [pc, #212]	; (80a6134 <_strtol_l.constprop.0+0xf4>)
 80a6060:	4628      	mov	r0, r5
 80a6062:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a6066:	5de6      	ldrb	r6, [r4, r7]
 80a6068:	f016 0608 	ands.w	r6, r6, #8
 80a606c:	d1f8      	bne.n	80a6060 <_strtol_l.constprop.0+0x20>
 80a606e:	2c2d      	cmp	r4, #45	; 0x2d
 80a6070:	d12f      	bne.n	80a60d2 <_strtol_l.constprop.0+0x92>
 80a6072:	2601      	movs	r6, #1
 80a6074:	782c      	ldrb	r4, [r5, #0]
 80a6076:	1c85      	adds	r5, r0, #2
 80a6078:	2b00      	cmp	r3, #0
 80a607a:	d057      	beq.n	80a612c <_strtol_l.constprop.0+0xec>
 80a607c:	2b10      	cmp	r3, #16
 80a607e:	d109      	bne.n	80a6094 <_strtol_l.constprop.0+0x54>
 80a6080:	2c30      	cmp	r4, #48	; 0x30
 80a6082:	d107      	bne.n	80a6094 <_strtol_l.constprop.0+0x54>
 80a6084:	7828      	ldrb	r0, [r5, #0]
 80a6086:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a608a:	2858      	cmp	r0, #88	; 0x58
 80a608c:	d149      	bne.n	80a6122 <_strtol_l.constprop.0+0xe2>
 80a608e:	2310      	movs	r3, #16
 80a6090:	786c      	ldrb	r4, [r5, #1]
 80a6092:	3502      	adds	r5, #2
 80a6094:	2700      	movs	r7, #0
 80a6096:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 80a609a:	f10e 3eff 	add.w	lr, lr, #4294967295
 80a609e:	fbbe f9f3 	udiv	r9, lr, r3
 80a60a2:	4638      	mov	r0, r7
 80a60a4:	fb03 ea19 	mls	sl, r3, r9, lr
 80a60a8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80a60ac:	f1bc 0f09 	cmp.w	ip, #9
 80a60b0:	d814      	bhi.n	80a60dc <_strtol_l.constprop.0+0x9c>
 80a60b2:	4664      	mov	r4, ip
 80a60b4:	42a3      	cmp	r3, r4
 80a60b6:	dd22      	ble.n	80a60fe <_strtol_l.constprop.0+0xbe>
 80a60b8:	2f00      	cmp	r7, #0
 80a60ba:	db1d      	blt.n	80a60f8 <_strtol_l.constprop.0+0xb8>
 80a60bc:	4581      	cmp	r9, r0
 80a60be:	d31b      	bcc.n	80a60f8 <_strtol_l.constprop.0+0xb8>
 80a60c0:	d101      	bne.n	80a60c6 <_strtol_l.constprop.0+0x86>
 80a60c2:	45a2      	cmp	sl, r4
 80a60c4:	db18      	blt.n	80a60f8 <_strtol_l.constprop.0+0xb8>
 80a60c6:	2701      	movs	r7, #1
 80a60c8:	fb00 4003 	mla	r0, r0, r3, r4
 80a60cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a60d0:	e7ea      	b.n	80a60a8 <_strtol_l.constprop.0+0x68>
 80a60d2:	2c2b      	cmp	r4, #43	; 0x2b
 80a60d4:	bf04      	itt	eq
 80a60d6:	782c      	ldrbeq	r4, [r5, #0]
 80a60d8:	1c85      	addeq	r5, r0, #2
 80a60da:	e7cd      	b.n	80a6078 <_strtol_l.constprop.0+0x38>
 80a60dc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80a60e0:	f1bc 0f19 	cmp.w	ip, #25
 80a60e4:	d801      	bhi.n	80a60ea <_strtol_l.constprop.0+0xaa>
 80a60e6:	3c37      	subs	r4, #55	; 0x37
 80a60e8:	e7e4      	b.n	80a60b4 <_strtol_l.constprop.0+0x74>
 80a60ea:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80a60ee:	f1bc 0f19 	cmp.w	ip, #25
 80a60f2:	d804      	bhi.n	80a60fe <_strtol_l.constprop.0+0xbe>
 80a60f4:	3c57      	subs	r4, #87	; 0x57
 80a60f6:	e7dd      	b.n	80a60b4 <_strtol_l.constprop.0+0x74>
 80a60f8:	f04f 37ff 	mov.w	r7, #4294967295
 80a60fc:	e7e6      	b.n	80a60cc <_strtol_l.constprop.0+0x8c>
 80a60fe:	2f00      	cmp	r7, #0
 80a6100:	da07      	bge.n	80a6112 <_strtol_l.constprop.0+0xd2>
 80a6102:	2322      	movs	r3, #34	; 0x22
 80a6104:	4670      	mov	r0, lr
 80a6106:	f8c8 3000 	str.w	r3, [r8]
 80a610a:	2a00      	cmp	r2, #0
 80a610c:	d0a4      	beq.n	80a6058 <_strtol_l.constprop.0+0x18>
 80a610e:	1e69      	subs	r1, r5, #1
 80a6110:	e005      	b.n	80a611e <_strtol_l.constprop.0+0xde>
 80a6112:	b106      	cbz	r6, 80a6116 <_strtol_l.constprop.0+0xd6>
 80a6114:	4240      	negs	r0, r0
 80a6116:	2a00      	cmp	r2, #0
 80a6118:	d09e      	beq.n	80a6058 <_strtol_l.constprop.0+0x18>
 80a611a:	2f00      	cmp	r7, #0
 80a611c:	d1f7      	bne.n	80a610e <_strtol_l.constprop.0+0xce>
 80a611e:	6011      	str	r1, [r2, #0]
 80a6120:	e79a      	b.n	80a6058 <_strtol_l.constprop.0+0x18>
 80a6122:	2430      	movs	r4, #48	; 0x30
 80a6124:	2b00      	cmp	r3, #0
 80a6126:	d1b5      	bne.n	80a6094 <_strtol_l.constprop.0+0x54>
 80a6128:	2308      	movs	r3, #8
 80a612a:	e7b3      	b.n	80a6094 <_strtol_l.constprop.0+0x54>
 80a612c:	2c30      	cmp	r4, #48	; 0x30
 80a612e:	d0a9      	beq.n	80a6084 <_strtol_l.constprop.0+0x44>
 80a6130:	230a      	movs	r3, #10
 80a6132:	e7af      	b.n	80a6094 <_strtol_l.constprop.0+0x54>
 80a6134:	080a798d 	.word	0x080a798d

080a6138 <strtol>:
 80a6138:	4613      	mov	r3, r2
 80a613a:	460a      	mov	r2, r1
 80a613c:	4601      	mov	r1, r0
 80a613e:	4802      	ldr	r0, [pc, #8]	; (80a6148 <strtol+0x10>)
 80a6140:	6800      	ldr	r0, [r0, #0]
 80a6142:	f7ff bf7d 	b.w	80a6040 <_strtol_l.constprop.0>
 80a6146:	bf00      	nop
 80a6148:	20000008 	.word	0x20000008

080a614c <_strtoul_l.constprop.0>:
 80a614c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a6150:	4686      	mov	lr, r0
 80a6152:	460d      	mov	r5, r1
 80a6154:	4f35      	ldr	r7, [pc, #212]	; (80a622c <_strtoul_l.constprop.0+0xe0>)
 80a6156:	4628      	mov	r0, r5
 80a6158:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a615c:	5de6      	ldrb	r6, [r4, r7]
 80a615e:	f016 0608 	ands.w	r6, r6, #8
 80a6162:	d1f8      	bne.n	80a6156 <_strtoul_l.constprop.0+0xa>
 80a6164:	2c2d      	cmp	r4, #45	; 0x2d
 80a6166:	d12f      	bne.n	80a61c8 <_strtoul_l.constprop.0+0x7c>
 80a6168:	2601      	movs	r6, #1
 80a616a:	782c      	ldrb	r4, [r5, #0]
 80a616c:	1c85      	adds	r5, r0, #2
 80a616e:	2b00      	cmp	r3, #0
 80a6170:	d057      	beq.n	80a6222 <_strtoul_l.constprop.0+0xd6>
 80a6172:	2b10      	cmp	r3, #16
 80a6174:	d109      	bne.n	80a618a <_strtoul_l.constprop.0+0x3e>
 80a6176:	2c30      	cmp	r4, #48	; 0x30
 80a6178:	d107      	bne.n	80a618a <_strtoul_l.constprop.0+0x3e>
 80a617a:	7828      	ldrb	r0, [r5, #0]
 80a617c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a6180:	2858      	cmp	r0, #88	; 0x58
 80a6182:	d149      	bne.n	80a6218 <_strtoul_l.constprop.0+0xcc>
 80a6184:	2310      	movs	r3, #16
 80a6186:	786c      	ldrb	r4, [r5, #1]
 80a6188:	3502      	adds	r5, #2
 80a618a:	f04f 38ff 	mov.w	r8, #4294967295
 80a618e:	fbb8 f8f3 	udiv	r8, r8, r3
 80a6192:	2700      	movs	r7, #0
 80a6194:	fb03 f908 	mul.w	r9, r3, r8
 80a6198:	4638      	mov	r0, r7
 80a619a:	ea6f 0909 	mvn.w	r9, r9
 80a619e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80a61a2:	f1bc 0f09 	cmp.w	ip, #9
 80a61a6:	d814      	bhi.n	80a61d2 <_strtoul_l.constprop.0+0x86>
 80a61a8:	4664      	mov	r4, ip
 80a61aa:	42a3      	cmp	r3, r4
 80a61ac:	dd22      	ble.n	80a61f4 <_strtoul_l.constprop.0+0xa8>
 80a61ae:	2f00      	cmp	r7, #0
 80a61b0:	db1d      	blt.n	80a61ee <_strtoul_l.constprop.0+0xa2>
 80a61b2:	4580      	cmp	r8, r0
 80a61b4:	d31b      	bcc.n	80a61ee <_strtoul_l.constprop.0+0xa2>
 80a61b6:	d101      	bne.n	80a61bc <_strtoul_l.constprop.0+0x70>
 80a61b8:	45a1      	cmp	r9, r4
 80a61ba:	db18      	blt.n	80a61ee <_strtoul_l.constprop.0+0xa2>
 80a61bc:	2701      	movs	r7, #1
 80a61be:	fb00 4003 	mla	r0, r0, r3, r4
 80a61c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a61c6:	e7ea      	b.n	80a619e <_strtoul_l.constprop.0+0x52>
 80a61c8:	2c2b      	cmp	r4, #43	; 0x2b
 80a61ca:	bf04      	itt	eq
 80a61cc:	782c      	ldrbeq	r4, [r5, #0]
 80a61ce:	1c85      	addeq	r5, r0, #2
 80a61d0:	e7cd      	b.n	80a616e <_strtoul_l.constprop.0+0x22>
 80a61d2:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80a61d6:	f1bc 0f19 	cmp.w	ip, #25
 80a61da:	d801      	bhi.n	80a61e0 <_strtoul_l.constprop.0+0x94>
 80a61dc:	3c37      	subs	r4, #55	; 0x37
 80a61de:	e7e4      	b.n	80a61aa <_strtoul_l.constprop.0+0x5e>
 80a61e0:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80a61e4:	f1bc 0f19 	cmp.w	ip, #25
 80a61e8:	d804      	bhi.n	80a61f4 <_strtoul_l.constprop.0+0xa8>
 80a61ea:	3c57      	subs	r4, #87	; 0x57
 80a61ec:	e7dd      	b.n	80a61aa <_strtoul_l.constprop.0+0x5e>
 80a61ee:	f04f 37ff 	mov.w	r7, #4294967295
 80a61f2:	e7e6      	b.n	80a61c2 <_strtoul_l.constprop.0+0x76>
 80a61f4:	2f00      	cmp	r7, #0
 80a61f6:	da07      	bge.n	80a6208 <_strtoul_l.constprop.0+0xbc>
 80a61f8:	2322      	movs	r3, #34	; 0x22
 80a61fa:	f04f 30ff 	mov.w	r0, #4294967295
 80a61fe:	f8ce 3000 	str.w	r3, [lr]
 80a6202:	b932      	cbnz	r2, 80a6212 <_strtoul_l.constprop.0+0xc6>
 80a6204:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a6208:	b106      	cbz	r6, 80a620c <_strtoul_l.constprop.0+0xc0>
 80a620a:	4240      	negs	r0, r0
 80a620c:	2a00      	cmp	r2, #0
 80a620e:	d0f9      	beq.n	80a6204 <_strtoul_l.constprop.0+0xb8>
 80a6210:	b107      	cbz	r7, 80a6214 <_strtoul_l.constprop.0+0xc8>
 80a6212:	1e69      	subs	r1, r5, #1
 80a6214:	6011      	str	r1, [r2, #0]
 80a6216:	e7f5      	b.n	80a6204 <_strtoul_l.constprop.0+0xb8>
 80a6218:	2430      	movs	r4, #48	; 0x30
 80a621a:	2b00      	cmp	r3, #0
 80a621c:	d1b5      	bne.n	80a618a <_strtoul_l.constprop.0+0x3e>
 80a621e:	2308      	movs	r3, #8
 80a6220:	e7b3      	b.n	80a618a <_strtoul_l.constprop.0+0x3e>
 80a6222:	2c30      	cmp	r4, #48	; 0x30
 80a6224:	d0a9      	beq.n	80a617a <_strtoul_l.constprop.0+0x2e>
 80a6226:	230a      	movs	r3, #10
 80a6228:	e7af      	b.n	80a618a <_strtoul_l.constprop.0+0x3e>
 80a622a:	bf00      	nop
 80a622c:	080a798d 	.word	0x080a798d

080a6230 <strtoul>:
 80a6230:	4613      	mov	r3, r2
 80a6232:	460a      	mov	r2, r1
 80a6234:	4601      	mov	r1, r0
 80a6236:	4802      	ldr	r0, [pc, #8]	; (80a6240 <strtoul+0x10>)
 80a6238:	6800      	ldr	r0, [r0, #0]
 80a623a:	f7ff bf87 	b.w	80a614c <_strtoul_l.constprop.0>
 80a623e:	bf00      	nop
 80a6240:	20000008 	.word	0x20000008

080a6244 <__tzcalc_limits>:
 80a6244:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a6248:	4605      	mov	r5, r0
 80a624a:	f000 faf3 	bl	80a6834 <__gettzinfo>
 80a624e:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80a6252:	429d      	cmp	r5, r3
 80a6254:	f340 8094 	ble.w	80a6380 <__tzcalc_limits+0x13c>
 80a6258:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 80a625c:	18ac      	adds	r4, r5, r2
 80a625e:	f240 126d 	movw	r2, #365	; 0x16d
 80a6262:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 80a6266:	10a4      	asrs	r4, r4, #2
 80a6268:	fb02 4403 	mla	r4, r2, r3, r4
 80a626c:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80a6270:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 80a6274:	fb93 f3f2 	sdiv	r3, r3, r2
 80a6278:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 80a627c:	441c      	add	r4, r3
 80a627e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80a6282:	186a      	adds	r2, r5, r1
 80a6284:	fbb2 f2f3 	udiv	r2, r2, r3
 80a6288:	fb95 fef3 	sdiv	lr, r5, r3
 80a628c:	4414      	add	r4, r2
 80a628e:	2264      	movs	r2, #100	; 0x64
 80a6290:	fb03 5e1e 	mls	lr, r3, lr, r5
 80a6294:	fb95 fcf2 	sdiv	ip, r5, r2
 80a6298:	fabe f78e 	clz	r7, lr
 80a629c:	4601      	mov	r1, r0
 80a629e:	fb02 5c1c 	mls	ip, r2, ip, r5
 80a62a2:	6045      	str	r5, [r0, #4]
 80a62a4:	097f      	lsrs	r7, r7, #5
 80a62a6:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 80a62aa:	f005 0303 	and.w	r3, r5, #3
 80a62ae:	7a0a      	ldrb	r2, [r1, #8]
 80a62b0:	694d      	ldr	r5, [r1, #20]
 80a62b2:	2a4a      	cmp	r2, #74	; 0x4a
 80a62b4:	d12a      	bne.n	80a630c <__tzcalc_limits+0xc8>
 80a62b6:	1962      	adds	r2, r4, r5
 80a62b8:	b913      	cbnz	r3, 80a62c0 <__tzcalc_limits+0x7c>
 80a62ba:	f1bc 0f00 	cmp.w	ip, #0
 80a62be:	d102      	bne.n	80a62c6 <__tzcalc_limits+0x82>
 80a62c0:	f1be 0f00 	cmp.w	lr, #0
 80a62c4:	d120      	bne.n	80a6308 <__tzcalc_limits+0xc4>
 80a62c6:	2d3b      	cmp	r5, #59	; 0x3b
 80a62c8:	bfd4      	ite	le
 80a62ca:	2500      	movle	r5, #0
 80a62cc:	2501      	movgt	r5, #1
 80a62ce:	4415      	add	r5, r2
 80a62d0:	3d01      	subs	r5, #1
 80a62d2:	698e      	ldr	r6, [r1, #24]
 80a62d4:	4a2b      	ldr	r2, [pc, #172]	; (80a6384 <__tzcalc_limits+0x140>)
 80a62d6:	fb02 6505 	mla	r5, r2, r5, r6
 80a62da:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80a62dc:	4415      	add	r5, r2
 80a62de:	17ea      	asrs	r2, r5, #31
 80a62e0:	e9c1 5208 	strd	r5, r2, [r1, #32]
 80a62e4:	3128      	adds	r1, #40	; 0x28
 80a62e6:	458b      	cmp	fp, r1
 80a62e8:	d1e1      	bne.n	80a62ae <__tzcalc_limits+0x6a>
 80a62ea:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 80a62ee:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 80a62f2:	428c      	cmp	r4, r1
 80a62f4:	eb72 0303 	sbcs.w	r3, r2, r3
 80a62f8:	bfb4      	ite	lt
 80a62fa:	2301      	movlt	r3, #1
 80a62fc:	2300      	movge	r3, #0
 80a62fe:	6003      	str	r3, [r0, #0]
 80a6300:	2001      	movs	r0, #1
 80a6302:	b003      	add	sp, #12
 80a6304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a6308:	2500      	movs	r5, #0
 80a630a:	e7e0      	b.n	80a62ce <__tzcalc_limits+0x8a>
 80a630c:	2a44      	cmp	r2, #68	; 0x44
 80a630e:	d101      	bne.n	80a6314 <__tzcalc_limits+0xd0>
 80a6310:	4425      	add	r5, r4
 80a6312:	e7de      	b.n	80a62d2 <__tzcalc_limits+0x8e>
 80a6314:	bb73      	cbnz	r3, 80a6374 <__tzcalc_limits+0x130>
 80a6316:	f1bc 0f00 	cmp.w	ip, #0
 80a631a:	bf0c      	ite	eq
 80a631c:	463e      	moveq	r6, r7
 80a631e:	2601      	movne	r6, #1
 80a6320:	f04f 0830 	mov.w	r8, #48	; 0x30
 80a6324:	68ca      	ldr	r2, [r1, #12]
 80a6326:	f04f 0900 	mov.w	r9, #0
 80a632a:	9201      	str	r2, [sp, #4]
 80a632c:	4622      	mov	r2, r4
 80a632e:	f8df a058 	ldr.w	sl, [pc, #88]	; 80a6388 <__tzcalc_limits+0x144>
 80a6332:	fb08 a606 	mla	r6, r8, r6, sl
 80a6336:	3e04      	subs	r6, #4
 80a6338:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80a633c:	f109 0901 	add.w	r9, r9, #1
 80a6340:	45c8      	cmp	r8, r9
 80a6342:	f856 a029 	ldr.w	sl, [r6, r9, lsl #2]
 80a6346:	dc17      	bgt.n	80a6378 <__tzcalc_limits+0x134>
 80a6348:	f04f 0807 	mov.w	r8, #7
 80a634c:	1d16      	adds	r6, r2, #4
 80a634e:	fb96 f9f8 	sdiv	r9, r6, r8
 80a6352:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 80a6356:	eba6 0909 	sub.w	r9, r6, r9
 80a635a:	ebb5 0909 	subs.w	r9, r5, r9
 80a635e:	690d      	ldr	r5, [r1, #16]
 80a6360:	bf48      	it	mi
 80a6362:	44c1      	addmi	r9, r8
 80a6364:	3d01      	subs	r5, #1
 80a6366:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
 80a636a:	444d      	add	r5, r9
 80a636c:	4555      	cmp	r5, sl
 80a636e:	da05      	bge.n	80a637c <__tzcalc_limits+0x138>
 80a6370:	4415      	add	r5, r2
 80a6372:	e7ae      	b.n	80a62d2 <__tzcalc_limits+0x8e>
 80a6374:	463e      	mov	r6, r7
 80a6376:	e7d3      	b.n	80a6320 <__tzcalc_limits+0xdc>
 80a6378:	4452      	add	r2, sl
 80a637a:	e7dd      	b.n	80a6338 <__tzcalc_limits+0xf4>
 80a637c:	3d07      	subs	r5, #7
 80a637e:	e7f5      	b.n	80a636c <__tzcalc_limits+0x128>
 80a6380:	2000      	movs	r0, #0
 80a6382:	e7be      	b.n	80a6302 <__tzcalc_limits+0xbe>
 80a6384:	00015180 	.word	0x00015180
 80a6388:	080a75d8 	.word	0x080a75d8

080a638c <__tz_lock>:
 80a638c:	4801      	ldr	r0, [pc, #4]	; (80a6394 <__tz_lock+0x8>)
 80a638e:	f000 bb07 	b.w	80a69a0 <__retarget_lock_acquire>
 80a6392:	bf00      	nop
 80a6394:	200009fe 	.word	0x200009fe

080a6398 <__tz_unlock>:
 80a6398:	4801      	ldr	r0, [pc, #4]	; (80a63a0 <__tz_unlock+0x8>)
 80a639a:	f000 bb03 	b.w	80a69a4 <__retarget_lock_release>
 80a639e:	bf00      	nop
 80a63a0:	200009fe 	.word	0x200009fe

080a63a4 <_tzset_unlocked>:
 80a63a4:	4b01      	ldr	r3, [pc, #4]	; (80a63ac <_tzset_unlocked+0x8>)
 80a63a6:	6818      	ldr	r0, [r3, #0]
 80a63a8:	f000 b802 	b.w	80a63b0 <_tzset_unlocked_r>
 80a63ac:	20000008 	.word	0x20000008

080a63b0 <_tzset_unlocked_r>:
 80a63b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a63b4:	b08d      	sub	sp, #52	; 0x34
 80a63b6:	4607      	mov	r7, r0
 80a63b8:	f000 fa3c 	bl	80a6834 <__gettzinfo>
 80a63bc:	49b1      	ldr	r1, [pc, #708]	; (80a6684 <_tzset_unlocked_r+0x2d4>)
 80a63be:	4605      	mov	r5, r0
 80a63c0:	4638      	mov	r0, r7
 80a63c2:	f000 fa2f 	bl	80a6824 <_getenv_r>
 80a63c6:	4eb0      	ldr	r6, [pc, #704]	; (80a6688 <_tzset_unlocked_r+0x2d8>)
 80a63c8:	4604      	mov	r4, r0
 80a63ca:	b970      	cbnz	r0, 80a63ea <_tzset_unlocked_r+0x3a>
 80a63cc:	4baf      	ldr	r3, [pc, #700]	; (80a668c <_tzset_unlocked_r+0x2dc>)
 80a63ce:	4ab0      	ldr	r2, [pc, #704]	; (80a6690 <_tzset_unlocked_r+0x2e0>)
 80a63d0:	6018      	str	r0, [r3, #0]
 80a63d2:	4bb0      	ldr	r3, [pc, #704]	; (80a6694 <_tzset_unlocked_r+0x2e4>)
 80a63d4:	6018      	str	r0, [r3, #0]
 80a63d6:	4bb0      	ldr	r3, [pc, #704]	; (80a6698 <_tzset_unlocked_r+0x2e8>)
 80a63d8:	6830      	ldr	r0, [r6, #0]
 80a63da:	e9c3 2200 	strd	r2, r2, [r3]
 80a63de:	f7fc f87b 	bl	80a24d8 <free>
 80a63e2:	6034      	str	r4, [r6, #0]
 80a63e4:	b00d      	add	sp, #52	; 0x34
 80a63e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a63ea:	6831      	ldr	r1, [r6, #0]
 80a63ec:	2900      	cmp	r1, #0
 80a63ee:	d162      	bne.n	80a64b6 <_tzset_unlocked_r+0x106>
 80a63f0:	6830      	ldr	r0, [r6, #0]
 80a63f2:	f7fc f871 	bl	80a24d8 <free>
 80a63f6:	4620      	mov	r0, r4
 80a63f8:	f7ff fddc 	bl	80a5fb4 <strlen>
 80a63fc:	1c41      	adds	r1, r0, #1
 80a63fe:	4638      	mov	r0, r7
 80a6400:	f7fc f8b2 	bl	80a2568 <_malloc_r>
 80a6404:	6030      	str	r0, [r6, #0]
 80a6406:	2800      	cmp	r0, #0
 80a6408:	d15a      	bne.n	80a64c0 <_tzset_unlocked_r+0x110>
 80a640a:	7823      	ldrb	r3, [r4, #0]
 80a640c:	ae0a      	add	r6, sp, #40	; 0x28
 80a640e:	2b3a      	cmp	r3, #58	; 0x3a
 80a6410:	bf08      	it	eq
 80a6412:	3401      	addeq	r4, #1
 80a6414:	4633      	mov	r3, r6
 80a6416:	4620      	mov	r0, r4
 80a6418:	4aa0      	ldr	r2, [pc, #640]	; (80a669c <_tzset_unlocked_r+0x2ec>)
 80a641a:	49a1      	ldr	r1, [pc, #644]	; (80a66a0 <_tzset_unlocked_r+0x2f0>)
 80a641c:	f7fc f87c 	bl	80a2518 <siscanf>
 80a6420:	2800      	cmp	r0, #0
 80a6422:	dddf      	ble.n	80a63e4 <_tzset_unlocked_r+0x34>
 80a6424:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a6426:	18e7      	adds	r7, r4, r3
 80a6428:	5ce3      	ldrb	r3, [r4, r3]
 80a642a:	2b2d      	cmp	r3, #45	; 0x2d
 80a642c:	d14c      	bne.n	80a64c8 <_tzset_unlocked_r+0x118>
 80a642e:	f04f 38ff 	mov.w	r8, #4294967295
 80a6432:	3701      	adds	r7, #1
 80a6434:	2400      	movs	r4, #0
 80a6436:	f10d 0a20 	add.w	sl, sp, #32
 80a643a:	f10d 0b1e 	add.w	fp, sp, #30
 80a643e:	4633      	mov	r3, r6
 80a6440:	4638      	mov	r0, r7
 80a6442:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 80a6446:	4997      	ldr	r1, [pc, #604]	; (80a66a4 <_tzset_unlocked_r+0x2f4>)
 80a6448:	9603      	str	r6, [sp, #12]
 80a644a:	f8cd b000 	str.w	fp, [sp]
 80a644e:	aa07      	add	r2, sp, #28
 80a6450:	f8ad 401e 	strh.w	r4, [sp, #30]
 80a6454:	f8ad 4020 	strh.w	r4, [sp, #32]
 80a6458:	f7fc f85e 	bl	80a2518 <siscanf>
 80a645c:	42a0      	cmp	r0, r4
 80a645e:	ddc1      	ble.n	80a63e4 <_tzset_unlocked_r+0x34>
 80a6460:	213c      	movs	r1, #60	; 0x3c
 80a6462:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a6466:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a646a:	f8df 923c 	ldr.w	r9, [pc, #572]	; 80a66a8 <_tzset_unlocked_r+0x2f8>
 80a646e:	fb01 3302 	mla	r3, r1, r2, r3
 80a6472:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a6476:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a647a:	fb01 3302 	mla	r3, r1, r2, r3
 80a647e:	fb08 f303 	mul.w	r3, r8, r3
 80a6482:	f8df 8214 	ldr.w	r8, [pc, #532]	; 80a6698 <_tzset_unlocked_r+0x2e8>
 80a6486:	62ab      	str	r3, [r5, #40]	; 0x28
 80a6488:	4b84      	ldr	r3, [pc, #528]	; (80a669c <_tzset_unlocked_r+0x2ec>)
 80a648a:	464a      	mov	r2, r9
 80a648c:	f8c8 3000 	str.w	r3, [r8]
 80a6490:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a6492:	4983      	ldr	r1, [pc, #524]	; (80a66a0 <_tzset_unlocked_r+0x2f0>)
 80a6494:	441f      	add	r7, r3
 80a6496:	4638      	mov	r0, r7
 80a6498:	4633      	mov	r3, r6
 80a649a:	f7fc f83d 	bl	80a2518 <siscanf>
 80a649e:	42a0      	cmp	r0, r4
 80a64a0:	dc18      	bgt.n	80a64d4 <_tzset_unlocked_r+0x124>
 80a64a2:	f8d8 3000 	ldr.w	r3, [r8]
 80a64a6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80a64a8:	f8c8 3004 	str.w	r3, [r8, #4]
 80a64ac:	4b77      	ldr	r3, [pc, #476]	; (80a668c <_tzset_unlocked_r+0x2dc>)
 80a64ae:	601a      	str	r2, [r3, #0]
 80a64b0:	4b78      	ldr	r3, [pc, #480]	; (80a6694 <_tzset_unlocked_r+0x2e4>)
 80a64b2:	601c      	str	r4, [r3, #0]
 80a64b4:	e796      	b.n	80a63e4 <_tzset_unlocked_r+0x34>
 80a64b6:	f7ff f818 	bl	80a54ea <strcmp>
 80a64ba:	2800      	cmp	r0, #0
 80a64bc:	d198      	bne.n	80a63f0 <_tzset_unlocked_r+0x40>
 80a64be:	e791      	b.n	80a63e4 <_tzset_unlocked_r+0x34>
 80a64c0:	4621      	mov	r1, r4
 80a64c2:	f7ff f81c 	bl	80a54fe <strcpy>
 80a64c6:	e7a0      	b.n	80a640a <_tzset_unlocked_r+0x5a>
 80a64c8:	2b2b      	cmp	r3, #43	; 0x2b
 80a64ca:	f04f 0801 	mov.w	r8, #1
 80a64ce:	bf08      	it	eq
 80a64d0:	3701      	addeq	r7, #1
 80a64d2:	e7af      	b.n	80a6434 <_tzset_unlocked_r+0x84>
 80a64d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a64d6:	f8c8 9004 	str.w	r9, [r8, #4]
 80a64da:	18fc      	adds	r4, r7, r3
 80a64dc:	5cfb      	ldrb	r3, [r7, r3]
 80a64de:	2b2d      	cmp	r3, #45	; 0x2d
 80a64e0:	f040 808c 	bne.w	80a65fc <_tzset_unlocked_r+0x24c>
 80a64e4:	f04f 37ff 	mov.w	r7, #4294967295
 80a64e8:	3401      	adds	r4, #1
 80a64ea:	2300      	movs	r3, #0
 80a64ec:	4620      	mov	r0, r4
 80a64ee:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a64f2:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a64f6:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a64fa:	930a      	str	r3, [sp, #40]	; 0x28
 80a64fc:	e9cd a602 	strd	sl, r6, [sp, #8]
 80a6500:	4633      	mov	r3, r6
 80a6502:	e9cd b600 	strd	fp, r6, [sp]
 80a6506:	4967      	ldr	r1, [pc, #412]	; (80a66a4 <_tzset_unlocked_r+0x2f4>)
 80a6508:	aa07      	add	r2, sp, #28
 80a650a:	f7fc f805 	bl	80a2518 <siscanf>
 80a650e:	2800      	cmp	r0, #0
 80a6510:	dc7a      	bgt.n	80a6608 <_tzset_unlocked_r+0x258>
 80a6512:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80a6514:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80a6518:	462f      	mov	r7, r5
 80a651a:	f04f 0900 	mov.w	r9, #0
 80a651e:	652b      	str	r3, [r5, #80]	; 0x50
 80a6520:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a6522:	441c      	add	r4, r3
 80a6524:	7823      	ldrb	r3, [r4, #0]
 80a6526:	2b2c      	cmp	r3, #44	; 0x2c
 80a6528:	bf08      	it	eq
 80a652a:	3401      	addeq	r4, #1
 80a652c:	f894 8000 	ldrb.w	r8, [r4]
 80a6530:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80a6534:	d17a      	bne.n	80a662c <_tzset_unlocked_r+0x27c>
 80a6536:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80a653a:	e9cd 6301 	strd	r6, r3, [sp, #4]
 80a653e:	ab09      	add	r3, sp, #36	; 0x24
 80a6540:	9300      	str	r3, [sp, #0]
 80a6542:	4620      	mov	r0, r4
 80a6544:	4633      	mov	r3, r6
 80a6546:	4959      	ldr	r1, [pc, #356]	; (80a66ac <_tzset_unlocked_r+0x2fc>)
 80a6548:	9603      	str	r6, [sp, #12]
 80a654a:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80a654e:	f7fb ffe3 	bl	80a2518 <siscanf>
 80a6552:	2803      	cmp	r0, #3
 80a6554:	f47f af46 	bne.w	80a63e4 <_tzset_unlocked_r+0x34>
 80a6558:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80a655c:	1e4b      	subs	r3, r1, #1
 80a655e:	2b0b      	cmp	r3, #11
 80a6560:	f63f af40 	bhi.w	80a63e4 <_tzset_unlocked_r+0x34>
 80a6564:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80a6568:	1e53      	subs	r3, r2, #1
 80a656a:	2b04      	cmp	r3, #4
 80a656c:	f63f af3a 	bhi.w	80a63e4 <_tzset_unlocked_r+0x34>
 80a6570:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80a6574:	2b06      	cmp	r3, #6
 80a6576:	f63f af35 	bhi.w	80a63e4 <_tzset_unlocked_r+0x34>
 80a657a:	e9c7 1203 	strd	r1, r2, [r7, #12]
 80a657e:	f887 8008 	strb.w	r8, [r7, #8]
 80a6582:	617b      	str	r3, [r7, #20]
 80a6584:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a6586:	eb04 0803 	add.w	r8, r4, r3
 80a658a:	2302      	movs	r3, #2
 80a658c:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a6590:	2300      	movs	r3, #0
 80a6592:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a6596:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a659a:	930a      	str	r3, [sp, #40]	; 0x28
 80a659c:	f898 3000 	ldrb.w	r3, [r8]
 80a65a0:	2b2f      	cmp	r3, #47	; 0x2f
 80a65a2:	d109      	bne.n	80a65b8 <_tzset_unlocked_r+0x208>
 80a65a4:	4633      	mov	r3, r6
 80a65a6:	4640      	mov	r0, r8
 80a65a8:	e9cd a602 	strd	sl, r6, [sp, #8]
 80a65ac:	e9cd b600 	strd	fp, r6, [sp]
 80a65b0:	493f      	ldr	r1, [pc, #252]	; (80a66b0 <_tzset_unlocked_r+0x300>)
 80a65b2:	aa07      	add	r2, sp, #28
 80a65b4:	f7fb ffb0 	bl	80a2518 <siscanf>
 80a65b8:	213c      	movs	r1, #60	; 0x3c
 80a65ba:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a65be:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a65c2:	3728      	adds	r7, #40	; 0x28
 80a65c4:	fb01 3302 	mla	r3, r1, r2, r3
 80a65c8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a65cc:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a65d0:	fb01 3302 	mla	r3, r1, r2, r3
 80a65d4:	f847 3c10 	str.w	r3, [r7, #-16]
 80a65d8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80a65da:	4444      	add	r4, r8
 80a65dc:	f1b9 0f00 	cmp.w	r9, #0
 80a65e0:	d021      	beq.n	80a6626 <_tzset_unlocked_r+0x276>
 80a65e2:	6868      	ldr	r0, [r5, #4]
 80a65e4:	f7ff fe2e 	bl	80a6244 <__tzcalc_limits>
 80a65e8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80a65ea:	4b28      	ldr	r3, [pc, #160]	; (80a668c <_tzset_unlocked_r+0x2dc>)
 80a65ec:	601a      	str	r2, [r3, #0]
 80a65ee:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80a65f0:	1a9b      	subs	r3, r3, r2
 80a65f2:	bf18      	it	ne
 80a65f4:	2301      	movne	r3, #1
 80a65f6:	4a27      	ldr	r2, [pc, #156]	; (80a6694 <_tzset_unlocked_r+0x2e4>)
 80a65f8:	6013      	str	r3, [r2, #0]
 80a65fa:	e6f3      	b.n	80a63e4 <_tzset_unlocked_r+0x34>
 80a65fc:	2b2b      	cmp	r3, #43	; 0x2b
 80a65fe:	f04f 0701 	mov.w	r7, #1
 80a6602:	bf08      	it	eq
 80a6604:	3401      	addeq	r4, #1
 80a6606:	e770      	b.n	80a64ea <_tzset_unlocked_r+0x13a>
 80a6608:	213c      	movs	r1, #60	; 0x3c
 80a660a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a660e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a6612:	fb01 3302 	mla	r3, r1, r2, r3
 80a6616:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a661a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a661e:	fb01 3302 	mla	r3, r1, r2, r3
 80a6622:	437b      	muls	r3, r7
 80a6624:	e778      	b.n	80a6518 <_tzset_unlocked_r+0x168>
 80a6626:	f04f 0901 	mov.w	r9, #1
 80a662a:	e77b      	b.n	80a6524 <_tzset_unlocked_r+0x174>
 80a662c:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80a6630:	bf0a      	itet	eq
 80a6632:	4643      	moveq	r3, r8
 80a6634:	2344      	movne	r3, #68	; 0x44
 80a6636:	3401      	addeq	r4, #1
 80a6638:	220a      	movs	r2, #10
 80a663a:	4620      	mov	r0, r4
 80a663c:	a90b      	add	r1, sp, #44	; 0x2c
 80a663e:	9305      	str	r3, [sp, #20]
 80a6640:	f7ff fdf6 	bl	80a6230 <strtoul>
 80a6644:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80a6648:	9b05      	ldr	r3, [sp, #20]
 80a664a:	45a0      	cmp	r8, r4
 80a664c:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80a6650:	d114      	bne.n	80a667c <_tzset_unlocked_r+0x2cc>
 80a6652:	234d      	movs	r3, #77	; 0x4d
 80a6654:	f1b9 0f00 	cmp.w	r9, #0
 80a6658:	d107      	bne.n	80a666a <_tzset_unlocked_r+0x2ba>
 80a665a:	2103      	movs	r1, #3
 80a665c:	722b      	strb	r3, [r5, #8]
 80a665e:	2302      	movs	r3, #2
 80a6660:	f8c5 9014 	str.w	r9, [r5, #20]
 80a6664:	e9c5 1303 	strd	r1, r3, [r5, #12]
 80a6668:	e78f      	b.n	80a658a <_tzset_unlocked_r+0x1da>
 80a666a:	220b      	movs	r2, #11
 80a666c:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 80a6670:	2301      	movs	r3, #1
 80a6672:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 80a6676:	2300      	movs	r3, #0
 80a6678:	63eb      	str	r3, [r5, #60]	; 0x3c
 80a667a:	e786      	b.n	80a658a <_tzset_unlocked_r+0x1da>
 80a667c:	b280      	uxth	r0, r0
 80a667e:	723b      	strb	r3, [r7, #8]
 80a6680:	6178      	str	r0, [r7, #20]
 80a6682:	e782      	b.n	80a658a <_tzset_unlocked_r+0x1da>
 80a6684:	080a7950 	.word	0x080a7950
 80a6688:	20000960 	.word	0x20000960
 80a668c:	20000968 	.word	0x20000968
 80a6690:	080a7953 	.word	0x080a7953
 80a6694:	20000964 	.word	0x20000964
 80a6698:	2000006c 	.word	0x2000006c
 80a669c:	20000953 	.word	0x20000953
 80a66a0:	080a7957 	.word	0x080a7957
 80a66a4:	080a797a 	.word	0x080a797a
 80a66a8:	20000948 	.word	0x20000948
 80a66ac:	080a7966 	.word	0x080a7966
 80a66b0:	080a7979 	.word	0x080a7979

080a66b4 <__register_exitproc>:
 80a66b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a66b8:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80a6768 <__register_exitproc+0xb4>
 80a66bc:	4606      	mov	r6, r0
 80a66be:	f8d8 0000 	ldr.w	r0, [r8]
 80a66c2:	461f      	mov	r7, r3
 80a66c4:	460d      	mov	r5, r1
 80a66c6:	4691      	mov	r9, r2
 80a66c8:	f000 f96b 	bl	80a69a2 <__retarget_lock_acquire_recursive>
 80a66cc:	4b27      	ldr	r3, [pc, #156]	; (80a676c <__register_exitproc+0xb8>)
 80a66ce:	681c      	ldr	r4, [r3, #0]
 80a66d0:	b934      	cbnz	r4, 80a66e0 <__register_exitproc+0x2c>
 80a66d2:	4c27      	ldr	r4, [pc, #156]	; (80a6770 <__register_exitproc+0xbc>)
 80a66d4:	601c      	str	r4, [r3, #0]
 80a66d6:	4b27      	ldr	r3, [pc, #156]	; (80a6774 <__register_exitproc+0xc0>)
 80a66d8:	b113      	cbz	r3, 80a66e0 <__register_exitproc+0x2c>
 80a66da:	681b      	ldr	r3, [r3, #0]
 80a66dc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80a66e0:	6863      	ldr	r3, [r4, #4]
 80a66e2:	2b1f      	cmp	r3, #31
 80a66e4:	dd07      	ble.n	80a66f6 <__register_exitproc+0x42>
 80a66e6:	f8d8 0000 	ldr.w	r0, [r8]
 80a66ea:	f000 f95c 	bl	80a69a6 <__retarget_lock_release_recursive>
 80a66ee:	f04f 30ff 	mov.w	r0, #4294967295
 80a66f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a66f6:	b35e      	cbz	r6, 80a6750 <__register_exitproc+0x9c>
 80a66f8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80a66fc:	b988      	cbnz	r0, 80a6722 <__register_exitproc+0x6e>
 80a66fe:	4b1e      	ldr	r3, [pc, #120]	; (80a6778 <__register_exitproc+0xc4>)
 80a6700:	b923      	cbnz	r3, 80a670c <__register_exitproc+0x58>
 80a6702:	f8d8 0000 	ldr.w	r0, [r8]
 80a6706:	f000 f94d 	bl	80a69a4 <__retarget_lock_release>
 80a670a:	e7f0      	b.n	80a66ee <__register_exitproc+0x3a>
 80a670c:	f44f 7084 	mov.w	r0, #264	; 0x108
 80a6710:	f7fb feda 	bl	80a24c8 <malloc>
 80a6714:	2800      	cmp	r0, #0
 80a6716:	d0f4      	beq.n	80a6702 <__register_exitproc+0x4e>
 80a6718:	2300      	movs	r3, #0
 80a671a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80a671e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80a6722:	2201      	movs	r2, #1
 80a6724:	6863      	ldr	r3, [r4, #4]
 80a6726:	2e02      	cmp	r6, #2
 80a6728:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80a672c:	fa02 f203 	lsl.w	r2, r2, r3
 80a6730:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80a6734:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80a6738:	ea43 0302 	orr.w	r3, r3, r2
 80a673c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80a6740:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80a6744:	bf02      	ittt	eq
 80a6746:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80a674a:	4313      	orreq	r3, r2
 80a674c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 80a6750:	6863      	ldr	r3, [r4, #4]
 80a6752:	f8d8 0000 	ldr.w	r0, [r8]
 80a6756:	1c5a      	adds	r2, r3, #1
 80a6758:	3302      	adds	r3, #2
 80a675a:	6062      	str	r2, [r4, #4]
 80a675c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80a6760:	f000 f921 	bl	80a69a6 <__retarget_lock_release_recursive>
 80a6764:	2000      	movs	r0, #0
 80a6766:	e7c4      	b.n	80a66f2 <__register_exitproc+0x3e>
 80a6768:	20000074 	.word	0x20000074
 80a676c:	200009f8 	.word	0x200009f8
 80a6770:	2000096c 	.word	0x2000096c
 80a6774:	00000000 	.word	0x00000000
 80a6778:	080a24c9 	.word	0x080a24c9

080a677c <abs>:
 80a677c:	2800      	cmp	r0, #0
 80a677e:	bfb8      	it	lt
 80a6780:	4240      	neglt	r0, r0
 80a6782:	4770      	bx	lr

080a6784 <div>:
 80a6784:	b510      	push	{r4, lr}
 80a6786:	fb91 f4f2 	sdiv	r4, r1, r2
 80a678a:	2900      	cmp	r1, #0
 80a678c:	fb02 1314 	mls	r3, r2, r4, r1
 80a6790:	db06      	blt.n	80a67a0 <div+0x1c>
 80a6792:	2b00      	cmp	r3, #0
 80a6794:	da01      	bge.n	80a679a <div+0x16>
 80a6796:	3401      	adds	r4, #1
 80a6798:	1a9b      	subs	r3, r3, r2
 80a679a:	e9c0 4300 	strd	r4, r3, [r0]
 80a679e:	bd10      	pop	{r4, pc}
 80a67a0:	2b00      	cmp	r3, #0
 80a67a2:	bfc4      	itt	gt
 80a67a4:	f104 34ff 	addgt.w	r4, r4, #4294967295
 80a67a8:	189b      	addgt	r3, r3, r2
 80a67aa:	e7f6      	b.n	80a679a <div+0x16>

080a67ac <_findenv_r>:
 80a67ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a67b0:	f8df a06c 	ldr.w	sl, [pc, #108]	; 80a6820 <_findenv_r+0x74>
 80a67b4:	4607      	mov	r7, r0
 80a67b6:	4689      	mov	r9, r1
 80a67b8:	4616      	mov	r6, r2
 80a67ba:	f000 f8f5 	bl	80a69a8 <__env_lock>
 80a67be:	f8da 4000 	ldr.w	r4, [sl]
 80a67c2:	b134      	cbz	r4, 80a67d2 <_findenv_r+0x26>
 80a67c4:	464b      	mov	r3, r9
 80a67c6:	4698      	mov	r8, r3
 80a67c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a67cc:	b13a      	cbz	r2, 80a67de <_findenv_r+0x32>
 80a67ce:	2a3d      	cmp	r2, #61	; 0x3d
 80a67d0:	d1f9      	bne.n	80a67c6 <_findenv_r+0x1a>
 80a67d2:	4638      	mov	r0, r7
 80a67d4:	f000 f8ee 	bl	80a69b4 <__env_unlock>
 80a67d8:	2000      	movs	r0, #0
 80a67da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a67de:	eba8 0809 	sub.w	r8, r8, r9
 80a67e2:	46a3      	mov	fp, r4
 80a67e4:	f854 0b04 	ldr.w	r0, [r4], #4
 80a67e8:	2800      	cmp	r0, #0
 80a67ea:	d0f2      	beq.n	80a67d2 <_findenv_r+0x26>
 80a67ec:	4642      	mov	r2, r8
 80a67ee:	4649      	mov	r1, r9
 80a67f0:	f7ff fbe8 	bl	80a5fc4 <strncmp>
 80a67f4:	2800      	cmp	r0, #0
 80a67f6:	d1f4      	bne.n	80a67e2 <_findenv_r+0x36>
 80a67f8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80a67fc:	eb03 0508 	add.w	r5, r3, r8
 80a6800:	f813 3008 	ldrb.w	r3, [r3, r8]
 80a6804:	2b3d      	cmp	r3, #61	; 0x3d
 80a6806:	d1ec      	bne.n	80a67e2 <_findenv_r+0x36>
 80a6808:	f8da 3000 	ldr.w	r3, [sl]
 80a680c:	4638      	mov	r0, r7
 80a680e:	ebab 0303 	sub.w	r3, fp, r3
 80a6812:	109b      	asrs	r3, r3, #2
 80a6814:	6033      	str	r3, [r6, #0]
 80a6816:	f000 f8cd 	bl	80a69b4 <__env_unlock>
 80a681a:	1c68      	adds	r0, r5, #1
 80a681c:	e7dd      	b.n	80a67da <_findenv_r+0x2e>
 80a681e:	bf00      	nop
 80a6820:	200000d0 	.word	0x200000d0

080a6824 <_getenv_r>:
 80a6824:	b507      	push	{r0, r1, r2, lr}
 80a6826:	aa01      	add	r2, sp, #4
 80a6828:	f7ff ffc0 	bl	80a67ac <_findenv_r>
 80a682c:	b003      	add	sp, #12
 80a682e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a6834 <__gettzinfo>:
 80a6834:	4800      	ldr	r0, [pc, #0]	; (80a6838 <__gettzinfo+0x4>)
 80a6836:	4770      	bx	lr
 80a6838:	20000078 	.word	0x20000078

080a683c <gmtime_r>:
 80a683c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a6840:	e9d0 6700 	ldrd	r6, r7, [r0]
 80a6844:	460c      	mov	r4, r1
 80a6846:	2300      	movs	r3, #0
 80a6848:	4630      	mov	r0, r6
 80a684a:	4639      	mov	r1, r7
 80a684c:	4a4e      	ldr	r2, [pc, #312]	; (80a6988 <gmtime_r+0x14c>)
 80a684e:	f000 f8b7 	bl	80a69c0 <__aeabi_ldivmod>
 80a6852:	4639      	mov	r1, r7
 80a6854:	4605      	mov	r5, r0
 80a6856:	2300      	movs	r3, #0
 80a6858:	4630      	mov	r0, r6
 80a685a:	4a4b      	ldr	r2, [pc, #300]	; (80a6988 <gmtime_r+0x14c>)
 80a685c:	f000 f8b0 	bl	80a69c0 <__aeabi_ldivmod>
 80a6860:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 80a6864:	2a00      	cmp	r2, #0
 80a6866:	bfbc      	itt	lt
 80a6868:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80a686c:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80a6870:	fbb2 f1f0 	udiv	r1, r2, r0
 80a6874:	fb00 2211 	mls	r2, r0, r1, r2
 80a6878:	f04f 003c 	mov.w	r0, #60	; 0x3c
 80a687c:	60a1      	str	r1, [r4, #8]
 80a687e:	fbb2 f1f0 	udiv	r1, r2, r0
 80a6882:	fb00 2211 	mls	r2, r0, r1, r2
 80a6886:	6061      	str	r1, [r4, #4]
 80a6888:	f04f 0107 	mov.w	r1, #7
 80a688c:	f505 232f 	add.w	r3, r5, #716800	; 0xaf000
 80a6890:	bfac      	ite	ge
 80a6892:	f603 236c 	addwge	r3, r3, #2668	; 0xa6c
 80a6896:	f603 236b 	addwlt	r3, r3, #2667	; 0xa6b
 80a689a:	6022      	str	r2, [r4, #0]
 80a689c:	1cda      	adds	r2, r3, #3
 80a689e:	fb92 f1f1 	sdiv	r1, r2, r1
 80a68a2:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80a68a6:	1a52      	subs	r2, r2, r1
 80a68a8:	bf48      	it	mi
 80a68aa:	3207      	addmi	r2, #7
 80a68ac:	2b00      	cmp	r3, #0
 80a68ae:	4d37      	ldr	r5, [pc, #220]	; (80a698c <gmtime_r+0x150>)
 80a68b0:	61a2      	str	r2, [r4, #24]
 80a68b2:	bfbd      	ittte	lt
 80a68b4:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 80a68b8:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 80a68bc:	fb92 f5f5 	sdivlt	r5, r2, r5
 80a68c0:	fb93 f5f5 	sdivge	r5, r3, r5
 80a68c4:	4832      	ldr	r0, [pc, #200]	; (80a6990 <gmtime_r+0x154>)
 80a68c6:	f648 62ac 	movw	r2, #36524	; 0x8eac
 80a68ca:	fb00 3005 	mla	r0, r0, r5, r3
 80a68ce:	f240 53b4 	movw	r3, #1460	; 0x5b4
 80a68d2:	fbb0 f2f2 	udiv	r2, r0, r2
 80a68d6:	fbb0 f1f3 	udiv	r1, r0, r3
 80a68da:	4402      	add	r2, r0
 80a68dc:	1a52      	subs	r2, r2, r1
 80a68de:	492d      	ldr	r1, [pc, #180]	; (80a6994 <gmtime_r+0x158>)
 80a68e0:	f240 1c6d 	movw	ip, #365	; 0x16d
 80a68e4:	fbb0 f1f1 	udiv	r1, r0, r1
 80a68e8:	1a52      	subs	r2, r2, r1
 80a68ea:	fbb2 f1fc 	udiv	r1, r2, ip
 80a68ee:	2764      	movs	r7, #100	; 0x64
 80a68f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80a68f4:	fbb1 f6f7 	udiv	r6, r1, r7
 80a68f8:	2299      	movs	r2, #153	; 0x99
 80a68fa:	1af3      	subs	r3, r6, r3
 80a68fc:	4403      	add	r3, r0
 80a68fe:	fb0c 3311 	mls	r3, ip, r1, r3
 80a6902:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 80a6906:	f10e 0e02 	add.w	lr, lr, #2
 80a690a:	fbbe f0f2 	udiv	r0, lr, r2
 80a690e:	f04f 0805 	mov.w	r8, #5
 80a6912:	4342      	muls	r2, r0
 80a6914:	3202      	adds	r2, #2
 80a6916:	fbb2 f2f8 	udiv	r2, r2, r8
 80a691a:	f103 0c01 	add.w	ip, r3, #1
 80a691e:	ebac 0c02 	sub.w	ip, ip, r2
 80a6922:	f240 52f9 	movw	r2, #1529	; 0x5f9
 80a6926:	4596      	cmp	lr, r2
 80a6928:	bf94      	ite	ls
 80a692a:	2202      	movls	r2, #2
 80a692c:	f06f 0209 	mvnhi.w	r2, #9
 80a6930:	4410      	add	r0, r2
 80a6932:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a6936:	fb02 1505 	mla	r5, r2, r5, r1
 80a693a:	2801      	cmp	r0, #1
 80a693c:	bf98      	it	ls
 80a693e:	3501      	addls	r5, #1
 80a6940:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80a6944:	d30d      	bcc.n	80a6962 <gmtime_r+0x126>
 80a6946:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80a694a:	61e3      	str	r3, [r4, #28]
 80a694c:	2300      	movs	r3, #0
 80a694e:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 80a6952:	e9c4 0504 	strd	r0, r5, [r4, #16]
 80a6956:	f8c4 c00c 	str.w	ip, [r4, #12]
 80a695a:	4620      	mov	r0, r4
 80a695c:	6223      	str	r3, [r4, #32]
 80a695e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a6962:	078a      	lsls	r2, r1, #30
 80a6964:	d102      	bne.n	80a696c <gmtime_r+0x130>
 80a6966:	fb07 1616 	mls	r6, r7, r6, r1
 80a696a:	b95e      	cbnz	r6, 80a6984 <gmtime_r+0x148>
 80a696c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a6970:	fbb1 f6f2 	udiv	r6, r1, r2
 80a6974:	fb02 1216 	mls	r2, r2, r6, r1
 80a6978:	fab2 f282 	clz	r2, r2
 80a697c:	0952      	lsrs	r2, r2, #5
 80a697e:	333b      	adds	r3, #59	; 0x3b
 80a6980:	4413      	add	r3, r2
 80a6982:	e7e2      	b.n	80a694a <gmtime_r+0x10e>
 80a6984:	2201      	movs	r2, #1
 80a6986:	e7fa      	b.n	80a697e <gmtime_r+0x142>
 80a6988:	00015180 	.word	0x00015180
 80a698c:	00023ab1 	.word	0x00023ab1
 80a6990:	fffdc54f 	.word	0xfffdc54f
 80a6994:	00023ab0 	.word	0x00023ab0

080a6998 <labs>:
 80a6998:	2800      	cmp	r0, #0
 80a699a:	bfb8      	it	lt
 80a699c:	4240      	neglt	r0, r0
 80a699e:	4770      	bx	lr

080a69a0 <__retarget_lock_acquire>:
 80a69a0:	4770      	bx	lr

080a69a2 <__retarget_lock_acquire_recursive>:
 80a69a2:	4770      	bx	lr

080a69a4 <__retarget_lock_release>:
 80a69a4:	4770      	bx	lr

080a69a6 <__retarget_lock_release_recursive>:
 80a69a6:	4770      	bx	lr

080a69a8 <__env_lock>:
 80a69a8:	4801      	ldr	r0, [pc, #4]	; (80a69b0 <__env_lock+0x8>)
 80a69aa:	f7ff bffa 	b.w	80a69a2 <__retarget_lock_acquire_recursive>
 80a69ae:	bf00      	nop
 80a69b0:	200009fd 	.word	0x200009fd

080a69b4 <__env_unlock>:
 80a69b4:	4801      	ldr	r0, [pc, #4]	; (80a69bc <__env_unlock+0x8>)
 80a69b6:	f7ff bff6 	b.w	80a69a6 <__retarget_lock_release_recursive>
 80a69ba:	bf00      	nop
 80a69bc:	200009fd 	.word	0x200009fd

080a69c0 <__aeabi_ldivmod>:
 80a69c0:	b97b      	cbnz	r3, 80a69e2 <__aeabi_ldivmod+0x22>
 80a69c2:	b972      	cbnz	r2, 80a69e2 <__aeabi_ldivmod+0x22>
 80a69c4:	2900      	cmp	r1, #0
 80a69c6:	bfbe      	ittt	lt
 80a69c8:	2000      	movlt	r0, #0
 80a69ca:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80a69ce:	e006      	blt.n	80a69de <__aeabi_ldivmod+0x1e>
 80a69d0:	bf08      	it	eq
 80a69d2:	2800      	cmpeq	r0, #0
 80a69d4:	bf1c      	itt	ne
 80a69d6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80a69da:	f04f 30ff 	movne.w	r0, #4294967295
 80a69de:	f7fe b99d 	b.w	80a4d1c <__aeabi_idiv0>
 80a69e2:	f1ad 0c08 	sub.w	ip, sp, #8
 80a69e6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80a69ea:	2900      	cmp	r1, #0
 80a69ec:	db09      	blt.n	80a6a02 <__aeabi_ldivmod+0x42>
 80a69ee:	2b00      	cmp	r3, #0
 80a69f0:	db1a      	blt.n	80a6a28 <__aeabi_ldivmod+0x68>
 80a69f2:	f7fe f829 	bl	80a4a48 <__udivmoddi4>
 80a69f6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a69fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a69fe:	b004      	add	sp, #16
 80a6a00:	4770      	bx	lr
 80a6a02:	4240      	negs	r0, r0
 80a6a04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a6a08:	2b00      	cmp	r3, #0
 80a6a0a:	db1b      	blt.n	80a6a44 <__aeabi_ldivmod+0x84>
 80a6a0c:	f7fe f81c 	bl	80a4a48 <__udivmoddi4>
 80a6a10:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a6a14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a6a18:	b004      	add	sp, #16
 80a6a1a:	4240      	negs	r0, r0
 80a6a1c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a6a20:	4252      	negs	r2, r2
 80a6a22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a6a26:	4770      	bx	lr
 80a6a28:	4252      	negs	r2, r2
 80a6a2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a6a2e:	f7fe f80b 	bl	80a4a48 <__udivmoddi4>
 80a6a32:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a6a36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a6a3a:	b004      	add	sp, #16
 80a6a3c:	4240      	negs	r0, r0
 80a6a3e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a6a42:	4770      	bx	lr
 80a6a44:	4252      	negs	r2, r2
 80a6a46:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a6a4a:	f7fd fffd 	bl	80a4a48 <__udivmoddi4>
 80a6a4e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a6a52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a6a56:	b004      	add	sp, #16
 80a6a58:	4252      	negs	r2, r2
 80a6a5a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a6a5e:	4770      	bx	lr

080a6a60 <dynalib_user>:
 80a6a60:	001d 080a 005d 080a 0085 080a 0089 080a     ....]...........
 80a6a70:	0000 0000 616f 7475 5f68 7375 5f72 6f63     ....oauth_usr_co
 80a6a80:	6564 6f00 7561 6874 705f 6c6f 5f6c 7561     de.oauth_poll_au
 80a6a90:	6874 6f00 7561 6874 725f 6665 745f 6b6f     th.oauth_ref_tok
 80a6aa0:	6e65 6800 6f6f 2d6b 6572 7073 6e6f 6573     en.hook-response
 80a6ab0:	4400 4245 4755 6800 6f6f 2d6b 7265 6f72     .DEBUG.hook-erro
 80a6ac0:	0072 0a0d 6854 7369 6120 7070 696c 6163     r...This applica
 80a6ad0:	6974 6e6f 7220 7165 6975 6572 2073 6f79     tion requires yo
 80a6ae0:	7275 7020 7265 696d 7373 6f69 206e 6f74     ur permission to
 80a6af0:	6120 6363 7365 2073 6f79 7275 4720 6f6f      access your Goo
 80a6b00:	6c67 2065 6143 656c 646e 7261 002e 0a0d     gle Calendar....
 80a6b10:	6c50 6165 6573 202c 6f67 7420 3a6f 0020     Please, go to: .
 80a6b20:	202c 6e61 2064 6e65 6574 2072 6874 2065     , and enter the 
 80a6b30:	6f66 6c6c 776f 6e69 2067 6f63 6564 203a     following code: 
 80a6b40:	0d00 440a 7665 6369 2065 7561 6874 726f     ...Device author
 80a6b50:	7a69 6465 0d21 000a 6544 6976 6563 6120     ized!...Device a
 80a6b60:	7475 6f68 6972 657a 2164 0d00 410a 6363     uthorized!...Acc
 80a6b70:	7365 2073 6f74 656b 206e 6572 7266 7365     ess token refres
 80a6b80:	6568 2164 0a0d 4100 6363 7365 2073 6f74     hed!...Access to
 80a6b90:	656b 206e 6572 7266 7365 6568 2164 5200     ken refreshed!.R
 80a6ba0:	7365 3a70 4f20 7541 6874 5f32 7453 7461     esp: OAuth2_Stat
 80a6bb0:	2065 6f4e 2074 6553 2174 2121 0d00 480a     e Not Set!!!...H
 80a6bc0:	5454 2050 5245 4f52 2052 202d 6425 0d00     TTP ERROR - %d..
 80a6bd0:	450a 7272 726f 203a 6e49 6176 696c 2064     .Error: Invalid 
 80a6be0:	6c63 6569 746e 6920 2e64 4100 7475 6f68     client id..Autho
 80a6bf0:	6972 617a 6974 6e6f 7020 6e65 6964 676e     rization pending
 80a6c00:	2e2e 002e 0a0d 7245 6f72 3a72 4120 6363     ......Error: Acc
 80a6c10:	7365 2073 6564 696e 6465 002e 0a0d 7245     ess denied....Er
 80a6c20:	6f72 3a72 4920 766e 6c61 6469 6320 696c     ror: Invalid cli
 80a6c30:	6e65 2074 6573 7263 7465 002e 0a0d 7245     ent secret....Er
 80a6c40:	6f72 3a72 4920 766e 6c61 6469 7220 7165     ror: Invalid req
 80a6c50:	6575 7473 002e 6f54 656b 206e 6974 656d     uest..Token time
 80a6c60:	756f 3a74 5220 6665 6572 6873 6e69 2e67     out: Refreshing.
 80a6c70:	2e2e 2f00 6f68 6b6f 722d 7365 6f70 736e     .../hook-respons
 80a6c80:	2f65 2f00 6f68 6b6f 652d 7272 726f 002f     e/./hook-error/.
 80a6c90:	227b 6c63 6569 746e 695f 2264 223a 7325     {"client_id":"%s
 80a6ca0:	7d22 5500 6573 2072 6f63 6564 7220 7165     "}.User code req
 80a6cb0:	6575 7473 7320 6e65 2174 7b00 6322 696c     uest sent!.{"cli
 80a6cc0:	6e65 5f74 6469 3a22 2522 2273 222c 6c63     ent_id":"%s","cl
 80a6cd0:	6569 746e 735f 6365 6572 2274 223a 7325     ient_secret":"%s
 80a6ce0:	2c22 6322 646f 2265 223a 7325 7d22 4500     ","code":"%s"}.E
 80a6cf0:	7272 726f 203a 7355 7265 6320 646f 2065     rror: User code 
 80a6d00:	6168 2073 7865 6970 6572 2e64 7b00 7222     has expired..{"r
 80a6d10:	6665 6572 6873 745f 6b6f 6e65 3a22 2522     efresh_token":"%
 80a6d20:	2273 222c 6c63 6569 746e 695f 2264 223a     s","client_id":"
 80a6d30:	7325 2c22 6322 696c 6e65 5f74 6573 7263     %s","client_secr
 80a6d40:	7465 3a22 2522 2273 007d 6552 7266 7365     et":"%s"}.Refres
 80a6d50:	2068 6f74 656b 206e 6572 7571 7365 2074     h token request 
 80a6d60:	6573 746e 5700 6961 6974 676e 203a 414f     sent.Waiting: OA
 80a6d70:	7475 3268 7220 7365 6f70 736e 2e65 2e2e     uth2 response...
 80a6d80:	5400 4d49 4f45 5455 6f20 7561 6874 2032     .TIMEOUT oauth2 
 80a6d90:	6177 7469 6e69 2067 6f66 2072 2061 6572     waiting for a re
 80a6da0:	7073 6e6f 6573 2e2e 002e 6544 6976 6563     sponse....Device
 80a6db0:	4120 7475 6f68 6972 657a 2164 4c00 6f6f      Authorized!.Loo
 80a6dc0:	3a70 4f20 7541 6874 5f32 7453 7461 2065     p: OAuth2_State 
 80a6dd0:	6f4e 2074 6553 2174 2121 4500 706d 7974     Not Set!!!.Empty
	...
 80a6fd8:	0000 6300 6c61 6e65 6164 5f72 7665 6e65     ...calendar_even
 80a6fe8:	0074 302d 3a37 3030 7b00 6322 6c61 6e65     t.-07:00.{"calen
 80a6ff8:	6164 5f72 6469 3a22 2522 2273 222c 6361     dar_id":"%s","ac
 80a7008:	6563 7373 745f 6b6f 6e65 3a22 2522 2273     cess_token":"%s"
 80a7018:	222c 6974 656d 6d5f 6e69 3a22 2522 2273     ,"time_min":"%s"
 80a7028:	222c 6974 656d 6d5f 7861 3a22 2522 2273     ,"time_max":"%s"
 80a7038:	007d 6425 252d 2d64 6425 2520 3a64 3025     }.%d-%d-%d %d:%0
 80a7048:	6432 253a 3230 0064 7e7e 007e 0a0d 7245     2d:%02d.~~~...Er
 80a7058:	6f72 3a72 5420 6568 7220 7165 6575 7473     ror: The request
 80a7068:	6465 6f20 6472 7265 6e69 2067 7369 6e20     ed ordering is n
 80a7078:	746f 6120 6176 6c69 6261 656c 6620 726f     ot available for
 80a7088:	7420 6568 7020 7261 6974 7563 616c 2072      the particular 
 80a7098:	7571 7265 2e79 0d00 450a 7272 726f 203a     query....Error: 
 80a70a8:	6e49 6176 696c 2064 7263 6465 6e65 6974     Invalid credenti
 80a70b8:	6c61 2e73 0d00 450a 7272 726f 203a 6e49     als....Error: In
 80a70c8:	6176 696c 2064 6163 656c 646e 7261 6920     valid calendar i
 80a70d8:	2e64 4300 6c61 6e65 6164 2072 7665 6e65     d..Calendar even
 80a70e8:	2074 7570 6c62 7369 6568 2164 5300 6174     t published!.Sta
 80a70f8:	6567 6320 6168 676e 6465 7420 3a6f 4f20     ge changed to: O
 80a7108:	5541 4854 0032 7453 6761 3a65 4320 4c41     AUTH2.Stage: CAL
 80a7118:	4e45 4144 0052 7453 6761 3a65 5720 4941     ENDAR.Stage: WAI
 80a7128:	4954 474e 5300 6174 6567 203a 5645 4e45     TING.Stage: EVEN
 80a7138:	5f54 4f54 5f4f 4f4c 474e 5300 6174 6567     T_TOO_LONG.Stage
 80a7148:	203a 4550 444e 4e49 0047 7453 6761 3a65     : PENDING.Stage:
 80a7158:	4120 5443 5649 0045 6341 7674 3a65 0020      ACTIVE.Actve: .
 80a7168:	7453 6761 3a65 4d20 4e41 4155 004c 7041     Stage: MANUAL.Ap
 80a7178:	2070 7453 6761 2065 6146 6c69 7275 0065     p Stage Failure.
 80a7188:	614d 756e 6c61 203a 6552 616c 2079 6425     Manual: Relay %d
 80a7198:	5400 6d69 2065 6552 616d 6e69 6e69 0067     .Time Remaining.
 80a71a8:	7543 7272 6e65 2074 7453 7461 0065 654d     Current State.Me
 80a71b8:	6f6d 7972 5200 6165 2064 6143 656c 646e     mory.Read Calend
 80a71c8:	7261 2820 2031 6572 6461 0029 7245 7361     ar (1 read).Eras
 80a71d8:	2065 6f54 656b 206e 3128 6520 6172 6573     e Token (1 erase
 80a71e8:	0029 6552 616c 2079 6e4f 2820 2030 6c61     ).Relay On (0 al
 80a71f8:	296c 5200 6c65 7961 4f20 6666 2820 2030     l).Relay Off (0 
 80a7208:	6c61 296c 5200 6c65 7961 3120 4d20 6e69     all).Relay 1 Min
 80a7218:	5200 6c65 7961 3220 4d20 6e69 5200 6c65     .Relay 2 Min.Rel
 80a7228:	7961 3320 4d20 6e69 4500 6172 6573 5420     ay 3 Min.Erase T
 80a7238:	6b6f 6e65 4f00 7561 6874 2032 6c61 6572     oken.Oauth2 alre
 80a7248:	6461 2079 7561 6874 6e65 6369 7461 6465     ady authenicated
 80a7258:	4d00 7861 4520 6576 746e 5420 6d69 2065     .Max Event Time 
 80a7268:	7845 6563 6465 6465 5000 6572 7373 5220     Exceeded.Press R
 80a7278:	7365 7465 4220 7475 6f74 006e 6550 646e     eset Button.Pend
 80a7288:	6e69 3a67 0020 6f4e 7020 6e65 6964 676e     ing: .No pending
 80a7298:	6520 6576 746e 2173 5700 6961 6974 676e      events!.Waiting
 80a72a8:	3300 3535 3833 3132 3838 3131 2d39 3031     .355382188119-10
 80a72b8:	6832 7674 6966 6e69 6471 3063 7370 3065     2htvfiinqdc0pse0
 80a72c8:	3065 7539 6b71 3676 6c38 6a33 3736 612e     e09uqkv68l3j67.a
 80a72d8:	7070 2e73 6f67 676f 656c 7375 7265 6f63     pps.googleuserco
 80a72e8:	746e 6e65 2e74 6f63 006d 5156 6d4f 6e34     ntent.com.VQOm4n
 80a72f8:	4a43 7a4a 7558 3343 7937 5962 6a33 5769     CJJzXuC37ybY3jiW
 80a7308:	386c 3100 3367 6730 3539 6561 6a67 6631     l8.1g30g95aegj1f
 80a7318:	6f70 7433 7034 6e37 6865 7368 406b 7267     po3t4p7nehhsk@gr
 80a7328:	756f 2e70 6163 656c 646e 7261 672e 6f6f     oup.calendar.goo
 80a7338:	6c67 2e65 6f63 006d                         gle.com.

080a7340 <_ZL9TIME_ZONE>:
 80a7340:	56f9 6765 5400 6d6f 4600 6f72 5200 6c65     .Veg.Tom.Fro.Rel
 80a7350:	7961 5320 7465 7075 4320 6d6f 6c70 7465     ay Setup Complet
 80a7360:	0065 6572 616c 3179 3d20 4f20 004e 6572     e.relay1 = ON.re
 80a7370:	616c 3179 3d20 4f20 4646 7200 6c65 7961     lay1 = OFF.relay
 80a7380:	2032 203d 4e4f 7200 6c65 7961 2032 203d     2 = ON.relay2 = 
 80a7390:	464f 0046 6572 616c 3379 3d20 4f20 004e     OFF.relay3 = ON.
 80a73a0:	6572 616c 3379 3d20 4f20 4646 5400 7275     relay3 = OFF.Tur
 80a73b0:	696e 676e 6f20 6666 7220 6c65 7961 0073     ning off relays.
 80a73c0:	7061 0070 2b25 3330 3a64 3025 7532 2500     app.%+03d:%02u.%
 80a73d0:	2d59 6d25 252d 5464 4825 253a 3a4d 5325     Y-%m-%dT%H:%M:%S
 80a73e0:	7a25 6100 6373 6974 656d 0000               %z.asctime..

080a73ec <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a73f4:	2f55 080a 2f5b 080a 2f99 080a 2f69 080a     U/..[/.../..i/..
 80a7404:	2f57 080a                                   W/..

080a7408 <_ZTV9IPAddress>:
	...
 80a7410:	34f7 080a 34f5 080a 3529 080a               .4...4..)5..

080a741c <_ZTV9USBSerial>:
	...
 80a7424:	35c3 080a 3629 080a 3601 080a 2959 080a     .5..)6...6..Y)..
 80a7434:	35f3 080a 35c5 080a 35d5 080a 3623 080a     .5...5...5..#6..
 80a7444:	35e5 080a 35bd 080a                         .5...5..

080a744c <_ZTV11USARTSerial>:
	...
 80a7454:	3749 080a 37b1 080a 378d 080a 2959 080a     I7...7...7..Y)..
 80a7464:	375d 080a 3779 080a 376b 080a 3787 080a     ]7..y7..k7...7..
 80a7474:	374b 080a 374f 080a                         K7..O7..

080a747c <_ZTV7TwoWire>:
	...
 80a7484:	3811 080a 385b 080a 3833 080a 3813 080a     .8..[8..38...8..
 80a7494:	383b 080a 3843 080a 384b 080a 3853 080a     ;8..C8..K8..S8..

080a74a4 <_ZTVN5spark9WiFiClassE>:
	...
 80a74ac:	392f 080a 3925 080a 391b 080a 388d 080a     /9..%9...9...8..
 80a74bc:	390f 080a 3903 080a 398d 080a 3995 080a     .9...9...9...9..
 80a74cc:	38f7 080a 38ef 080a 38e5 080a 38db 080a     .8...8...8...8..
 80a74dc:	3897 080a                                   .8..

080a74e0 <_ZTVN5spark12NetworkClassE>:
	...
 80a74e8:	394d 080a 3957 080a 3961 080a 396b 080a     M9..W9..a9..k9..
 80a74f8:	3975 080a 3981 080a 398d 080a 3995 080a     u9...9...9...9..
 80a7508:	399d 080a 39a9 080a 39b1 080a 39bb 080a     .9...9...9...9..
 80a7518:	39c5 080a                                   .9..

080a751c <_ZSt7nothrow>:
 80a751c:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
 80a752c:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

080a753d <day_name.1>:
 80a753d:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 80a754d:	6972 6153                                    riSat

080a7552 <mon_name.0>:
 80a7552:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 80a7562:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 80a7572:	4476 6365 0000                              vDec..

080a7578 <DAYS_IN_MONTH>:
 80a7578:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 80a7588:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a7598:	001e 0000 001f 0000 001e 0000 001f 0000     ................

080a75a8 <_DAYS_BEFORE_MONTH>:
 80a75a8:	0000 0000 001f 0000 003b 0000 005a 0000     ........;...Z...
 80a75b8:	0078 0000 0097 0000 00b5 0000 00d4 0000     x...............
 80a75c8:	00f3 0000 0111 0000 0130 0000 014e 0000     ........0...N...

080a75d8 <__month_lengths>:
 80a75d8:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 80a75e8:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a75f8:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a7608:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 80a7618:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a7628:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a7638:	4552 4e45 2054 616d 6c6c 636f 7320 6375     REENT malloc suc
 80a7648:	6563 6465 6465 2f00 6e6d 2f74 6f77 6b72     ceeded./mnt/work
 80a7658:	7073 6361 2f65 6f77 6b72 7073 6361 2f65     space/workspace/
 80a7668:	4347 2d43 3031 702d 7069 6c65 6e69 2f65     GCC-10-pipeline/
 80a7678:	656a 6b6e 6e69 2d73 4347 2d43 3031 702d     jenkins-GCC-10-p
 80a7688:	7069 6c65 6e69 2d65 3834 325f 3230 3130     ipeline-48_20201
 80a7698:	3231 5f34 3631 3630 3831 3630 3134 732f     124_1606180641/s
 80a76a8:	6372 6e2f 7765 696c 2f62 656e 6c77 6269     rc/newlib/newlib
 80a76b8:	6c2f 6269 2f63 7473 6c64 6269 722f 6e61     /libc/stdlib/ran
 80a76c8:	2e64 0063 7325 2e25 642a 2500 2573 2e30     d.c.%s%.*d.%s%0.
 80a76d8:	642a 2b00 2d00 2500 6432 2500 322e 2f64     *d.+.-.%2d.%.2d/
 80a76e8:	2e25 6432 252f 322e 0064 6c25 0075 2d59     %.2d/%.2d.%lu.Y-
 80a76f8:	6d25 252d 0064 2a2e 0075 2e25 6433 2500     %m-%d..*u.%.3d.%
 80a7708:	6c6c 0064 2e25 6432 253a 322e 3a64 2e25     lld.%.2d:%.2d:%.
 80a7718:	6432 2500 302b 6c33 2564 322e 646c 4a00     2d.%+03ld%.2ld.J
 80a7728:	6e61 4600 6265 4d00 7261 4100 7270 4d00     an.Feb.Mar.Apr.M
 80a7738:	7961 4a00 6e75 4a00 6c75 4100 6775 5300     ay.Jun.Jul.Aug.S
 80a7748:	7065 4f00 7463 4e00 766f 4400 6365 4a00     ep.Oct.Nov.Dec.J
 80a7758:	6e61 6175 7972 4600 6265 7572 7261 0079     anuary.February.
 80a7768:	614d 6372 0068 7041 6972 006c 754a 656e     March.April.June
 80a7778:	4a00 6c75 0079 7541 7567 7473 5300 7065     .July.August.Sep
 80a7788:	6574 626d 7265 4f00 7463 626f 7265 4e00     tember.October.N
 80a7798:	766f 6d65 6562 0072 6544 6563 626d 7265     ovember.December
 80a77a8:	5300 6e75 4d00 6e6f 5400 6575 5700 6465     .Sun.Mon.Tue.Wed
 80a77b8:	5400 7568 4600 6972 5300 7461 5300 6e75     .Thu.Fri.Sat.Sun
 80a77c8:	6164 0079 6f4d 646e 7961 5400 6575 6473     day.Monday.Tuesd
 80a77d8:	7961 5700 6465 656e 6473 7961 5400 7568     ay.Wednesday.Thu
 80a77e8:	7372 6164 0079 7246 6469 7961 5300 7461     rsday.Friday.Sat
 80a77f8:	7275 6164 0079 4825 253a 3a4d 5325 2500     urday.%H:%M:%S.%
 80a7808:	2f6d 6425 252f 0079 6125 2520 2062 6525     m/%d/%y.%a %b %e
 80a7818:	2520 3a48 4d25 253a 2053 5925 4100 004d      %H:%M:%S %Y.AM.
 80a7828:	4d50 2500 2061 6225 2520 2065 4825 253a     PM.%a %b %e %H:%
 80a7838:	3a4d 5325 2520 205a 5925 6d00 0064 4925     M:%S %Z %Y.md.%I
 80a7848:	253a 3a4d 5325 2520 0070 0000               :%M:%S %p...

080a7854 <_C_time_locale>:
 80a7854:	7727 080a 772b 080a 772f 080a 7733 080a     'w..+w../w..3w..
 80a7864:	7737 080a 773b 080a 773f 080a 7743 080a     7w..;w..?w..Cw..
 80a7874:	7747 080a 774b 080a 774f 080a 7753 080a     Gw..Kw..Ow..Sw..
 80a7884:	7757 080a 775f 080a 7768 080a 776e 080a     Ww.._w..hw..nw..
 80a7894:	7737 080a 7774 080a 7779 080a 777e 080a     7w..tw..yw..~w..
 80a78a4:	7785 080a 778f 080a 7797 080a 77a0 080a     .w...w...w...w..
 80a78b4:	77a9 080a 77ad 080a 77b1 080a 77b5 080a     .w...w...w...w..
 80a78c4:	77b9 080a 77bd 080a 77c1 080a 77c5 080a     .w...w...w...w..
 80a78d4:	77cc 080a 77d3 080a 77db 080a 77e5 080a     .w...w...w...w..
 80a78e4:	77ee 080a 77f5 080a 77fe 080a 7807 080a     .w...w...w...x..
 80a78f4:	7810 080a 7825 080a 7828 080a 782b 080a     .x..%x..(x..+x..
 80a7904:	7757 080a 775f 080a 7768 080a 776e 080a     Ww.._w..hw..nw..
 80a7914:	7737 080a 7774 080a 7779 080a 777e 080a     7w..tw..yw..~w..
 80a7924:	7785 080a 778f 080a 7797 080a 77a0 080a     .w...w...w...w..
 80a7934:	7843 080a 7846 080a 6b86 080a 6b86 080a     Cx..Fx...k...k..
 80a7944:	6b86 080a 6b86 080a 6b86 080a 5a54 4700     .k...k...k..TZ.G
 80a7954:	544d 2500 3031 5e5b 2d30 2c39 2d2b 255d     MT.%10[^0-9,+-]%
 80a7964:	006e 254d 7568 6e25 252e 7568 6e25 252e     n.M%hu%n.%hu%n.%
 80a7974:	7568 6e25 2f00 6825 2575 3a6e 6825 2575     hu%n./%hu%n:%hu%
 80a7984:	3a6e 6825 2575 006e                         n:%hu%n.

080a798c <_ctype_>:
 80a798c:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 80a799c:	2020 2020 2020 2020 2020 2020 2020 2020                     
 80a79ac:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 80a79bc:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 80a79cc:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 80a79dc:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 80a79ec:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 80a79fc:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 80a7a0c:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

080a7a8d <link_const_variable_data_end>:
 80a7a8d:	00          	.byte	0x00
	...

080a7a90 <link_constructors_location>:
 80a7a90:	080a0d3d 	.word	0x080a0d3d
 80a7a94:	080a1571 	.word	0x080a1571
 80a7a98:	080a1d65 	.word	0x080a1d65
 80a7a9c:	080a2071 	.word	0x080a2071
 80a7aa0:	080a25e9 	.word	0x080a25e9
 80a7aa4:	080a2a11 	.word	0x080a2a11
 80a7aa8:	080a2dad 	.word	0x080a2dad
 80a7aac:	080a2de9 	.word	0x080a2de9
 80a7ab0:	080a3939 	.word	0x080a3939
 80a7ab4:	080a3a15 	.word	0x080a3a15
 80a7ab8:	080a3bbd 	.word	0x080a3bbd

080a7abc <link_constructors_end>:
 80a7abc:	00000000 	.word	0x00000000
