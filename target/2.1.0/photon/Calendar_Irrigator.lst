
c:/Users/Nick/Documents/Particle/calendar_irrigator/Calendar_Irrigator/target/2.1.0/photon/Calendar_Irrigator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000078d4  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  080a78f0  080a78f0  000178f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  40024000  080a78f8  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000240  20000000  080a78fc  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000538  20000240  20000240  00040240  2**3
                  ALLOC
  7 .module_info_suffix 00000028  080a7b3c  080a7b3c  00037b3c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  080a7b64  080a7b64  00037b64  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0016c66a  00000000  00000000  00037b68  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00018fc9  00000000  00000000  001a41d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0002052f  00000000  00000000  001bd19b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002298  00000000  00000000  001dd6ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00005bf0  00000000  00000000  001df962  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0002bf6c  00000000  00000000  001e5552  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000377e3  00000000  00000000  002114be  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000bb0a0  00000000  00000000  00248ca1  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00006388  00000000  00000000  00303d44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f004 ff27 	bl	80a4e80 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f004 ff2f 	bl	80a4e9c <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a78fc 	.word	0x080a78fc
 80a004c:	20000240 	.word	0x20000240
 80a0050:	20000240 	.word	0x20000240
 80a0054:	20000775 	.word	0x20000775
 80a0058:	20000775 	.word	0x20000775

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f002 fecb 	bl	80a2df8 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0062:	2500      	movs	r5, #0
 80a0064:	4e05      	ldr	r6, [pc, #20]	; (80a007c <module_user_init+0x20>)
 80a0066:	4c06      	ldr	r4, [pc, #24]	; (80a0080 <module_user_init+0x24>)
 80a0068:	1ba4      	subs	r4, r4, r6
 80a006a:	08a4      	lsrs	r4, r4, #2
 80a006c:	42a5      	cmp	r5, r4
 80a006e:	d100      	bne.n	80a0072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0072:	f856 3b04 	ldr.w	r3, [r6], #4
 80a0076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f7      	b.n	80a006c <module_user_init+0x10>
 80a007c:	080a78b8 	.word	0x080a78b8
 80a0080:	080a78e4 	.word	0x080a78e4

080a0084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0084:	f001 bdca 	b.w	80a1c1c <setup>

080a0088 <module_user_loop>:
}

void module_user_loop() {
 80a0088:	b508      	push	{r3, lr}
    loop();
 80a008a:	f001 fe41 	bl	80a1d10 <loop>
    _post_loop();
}
 80a008e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0092:	f002 be73 	b.w	80a2d7c <_post_loop>

080a0096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80a0096:	f002 b991 	b.w	80a23bc <malloc>

080a009a <_Znaj>:
 80a009a:	f002 b98f 	b.w	80a23bc <malloc>

080a009e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a009e:	f002 b995 	b.w	80a23cc <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr

080a00b2 <_Z12split_stringR6StringcRsS1_>:
//!
//!	@return None.
//
//*****************************************************************************
String split_string(String &str, char delimiter, int16_t &index, int16_t &last_index)
{
 80a00b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a00b4:	460e      	mov	r6, r1
 80a00b6:	4605      	mov	r5, r0
 80a00b8:	4611      	mov	r1, r2
    //  Search for the delimiter position.
    index = str.indexOf(delimiter, index);
 80a00ba:	4630      	mov	r0, r6
 80a00bc:	f9b3 2000 	ldrsh.w	r2, [r3]
{
 80a00c0:	461c      	mov	r4, r3
 80a00c2:	9f06      	ldr	r7, [sp, #24]
    index = str.indexOf(delimiter, index);
 80a00c4:	f002 fb4c 	bl	80a2760 <_ZNK6String7indexOfEcj>
 80a00c8:	b203      	sxth	r3, r0
 80a00ca:	8023      	strh	r3, [r4, #0]
    //  Generate an string from the given indexs values.
    String result = str.substring(last_index, index);
 80a00cc:	4628      	mov	r0, r5
 80a00ce:	f9b7 2000 	ldrsh.w	r2, [r7]
 80a00d2:	4631      	mov	r1, r6
 80a00d4:	f002 fb64 	bl	80a27a0 <_ZNK6String9substringEjj>
    last_index = ++index;
 80a00d8:	8822      	ldrh	r2, [r4, #0]
    return result;
}
 80a00da:	4628      	mov	r0, r5
    last_index = ++index;
 80a00dc:	3201      	adds	r2, #1
 80a00de:	b212      	sxth	r2, r2
 80a00e0:	8022      	strh	r2, [r4, #0]
 80a00e2:	803a      	strh	r2, [r7, #0]
}
 80a00e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a00e6 <_Z9unix_timeiiiiii>:
//!
//!	@return A unix timestamp corresponding to the parameters passed.
//
//*****************************************************************************
time_t unix_time(int year, int month, int day, int hour, int min, int sec)
{
 80a00e6:	b500      	push	{lr}
 80a00e8:	b08b      	sub	sp, #44	; 0x2c
  struct tm t;
  t.tm_year = year - 1900;
  t.tm_mon = month - 1;
  t.tm_mday = day;
  t.tm_hour = hour;
 80a00ea:	9303      	str	r3, [sp, #12]
  t.tm_min = min;
 80a00ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  t.tm_year = year - 1900;
 80a00ee:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
  t.tm_min = min;
 80a00f2:	9302      	str	r3, [sp, #8]
  t.tm_sec = sec;
 80a00f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  t.tm_year = year - 1900;
 80a00f6:	9006      	str	r0, [sp, #24]
  t.tm_sec = sec;
 80a00f8:	9301      	str	r3, [sp, #4]
  t.tm_isdst = 0;
 80a00fa:	2300      	movs	r3, #0
  t.tm_mon = month - 1;
 80a00fc:	3901      	subs	r1, #1
  return mktime(&t);
 80a00fe:	a801      	add	r0, sp, #4
  t.tm_mday = day;
 80a0100:	e9cd 2104 	strd	r2, r1, [sp, #16]
  t.tm_isdst = 0;
 80a0104:	9309      	str	r3, [sp, #36]	; 0x24
  return mktime(&t);
 80a0106:	f004 ffa9 	bl	80a505c <mktime>
 80a010a:	b00b      	add	sp, #44	; 0x2c
 80a010c:	f85d fb04 	ldr.w	pc, [sp], #4

080a0110 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM13Google_OAuth2FvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a0110:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a0112:	b538      	push	{r3, r4, r5, lr}
 80a0114:	4604      	mov	r4, r0
	  switch (__op)
 80a0116:	d007      	beq.n	80a0128 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM13Google_OAuth2FvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x18>
 80a0118:	2a03      	cmp	r2, #3
 80a011a:	d011      	beq.n	80a0140 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM13Google_OAuth2FvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x30>
 80a011c:	2a01      	cmp	r2, #1
 80a011e:	d101      	bne.n	80a0124 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM13Google_OAuth2FvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80a0120:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
 80a0122:	6023      	str	r3, [r4, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a0124:	2000      	movs	r0, #0
 80a0126:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80a0128:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
 80a012a:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a012c:	f7ff ffb3 	bl	80a0096 <_Znwj>
 80a0130:	4603      	mov	r3, r0
 80a0132:	2800      	cmp	r0, #0
 80a0134:	d0f5      	beq.n	80a0122 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM13Google_OAuth2FvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
 80a0136:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80a013a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80a013e:	e7f0      	b.n	80a0122 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM13Google_OAuth2FvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
	  delete __victim._M_access<_Functor*>();
 80a0140:	6800      	ldr	r0, [r0, #0]
 80a0142:	2800      	cmp	r0, #0
 80a0144:	d0ee      	beq.n	80a0124 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM13Google_OAuth2FvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>
 80a0146:	210c      	movs	r1, #12
 80a0148:	f003 fd0b 	bl	80a3b62 <_ZdlPvj>
 80a014c:	e7ea      	b.n	80a0124 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM13Google_OAuth2FvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>

080a014e <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM13Google_OAuth2FvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE9_M_invokeERKSt9_Any_dataOS1_SH_>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a014e:	b470      	push	{r4, r5, r6}
	    return __source._M_access<_Functor*>();
 80a0150:	6803      	ldr	r3, [r0, #0]
      // Call unqualified
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return std::__invoke(_M_f,
 80a0152:	6809      	ldr	r1, [r1, #0]
  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    {
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
 80a0154:	685c      	ldr	r4, [r3, #4]
 80a0156:	689d      	ldr	r5, [r3, #8]
 80a0158:	1066      	asrs	r6, r4, #1
 80a015a:	eb05 0064 	add.w	r0, r5, r4, asr #1
 80a015e:	07e4      	lsls	r4, r4, #31
 80a0160:	bf48      	it	mi
 80a0162:	59ac      	ldrmi	r4, [r5, r6]
 80a0164:	681b      	ldr	r3, [r3, #0]
 80a0166:	6812      	ldr	r2, [r2, #0]
 80a0168:	bf48      	it	mi
 80a016a:	58e3      	ldrmi	r3, [r4, r3]
      {
	(*_Base::_M_get_pointer(__functor))(
	    std::forward<_ArgTypes>(__args)...);
      }
 80a016c:	bc70      	pop	{r4, r5, r6}
 80a016e:	4718      	bx	r3

080a0170 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>:

inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
 80a0170:	b513      	push	{r0, r1, r4, lr}
 80a0172:	4604      	mov	r4, r0
 80a0174:	4b05      	ldr	r3, [pc, #20]	; (80a018c <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0+0x1c>)
 80a0176:	460a      	mov	r2, r1
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 80a0178:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a017a:	4905      	ldr	r1, [pc, #20]	; (80a0190 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0+0x20>)
 80a017c:	f88d 3000 	strb.w	r3, [sp]
 80a0180:	233c      	movs	r3, #60	; 0x3c
 80a0182:	f002 ffc7 	bl	80a3114 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    return publish(name, data, PUBLIC);
}
 80a0186:	4620      	mov	r0, r4
 80a0188:	b002      	add	sp, #8
 80a018a:	bd10      	pop	{r4, pc}
 80a018c:	20000244 	.word	0x20000244
 80a0190:	080a6978 	.word	0x080a6978

080a0194 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 80a0194:	b510      	push	{r4, lr}
      if (_M_manager)
 80a0196:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 80a0198:	4604      	mov	r4, r0
      if (_M_manager)
 80a019a:	b113      	cbz	r3, 80a01a2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a019c:	2203      	movs	r2, #3
 80a019e:	4601      	mov	r1, r0
 80a01a0:	4798      	blx	r3
    }
 80a01a2:	4620      	mov	r0, r4
 80a01a4:	bd10      	pop	{r4, pc}
	...

080a01a8 <_ZN13Google_OAuth2C1ERK6StringS2_>:
//!
//!	@param[in] client_id OAuth2.0 client ID used to request user consent.
//!	@param[in] client_secret OAuth2.0 client secret used to request user consent. 
//
//*****************************************************************************
Google_OAuth2::Google_OAuth2(const String &client_id, const String &client_secret)
 80a01a8:	b570      	push	{r4, r5, r6, lr}
    : CLIENT_ID(client_id), CLIENT_SECRET(client_secret)
 80a01aa:	f44f 7300 	mov.w	r3, #512	; 0x200
Google_OAuth2::Google_OAuth2(const String &client_id, const String &client_secret)
 80a01ae:	460e      	mov	r6, r1
    : CLIENT_ID(client_id), CLIENT_SECRET(client_secret)
 80a01b0:	2100      	movs	r1, #0
 80a01b2:	e9c0 1300 	strd	r1, r3, [r0]
            //  if 1, token is not available.
            uint8_t available;
            //  Raw token data (max. 60 characters).
            char data[512];
            //  Default constructor.
            oauth2_token() : available(1), data("Empty") {};
 80a01b6:	2301      	movs	r3, #1
Google_OAuth2::Google_OAuth2(const String &client_id, const String &client_secret)
 80a01b8:	4604      	mov	r4, r0
 80a01ba:	4615      	mov	r5, r2
 80a01bc:	7203      	strb	r3, [r0, #8]
 80a01be:	4b23      	ldr	r3, [pc, #140]	; (80a024c <_ZN13Google_OAuth2C1ERK6StringS2_+0xa4>)
 80a01c0:	300f      	adds	r0, #15
 80a01c2:	681a      	ldr	r2, [r3, #0]
 80a01c4:	889b      	ldrh	r3, [r3, #4]
 80a01c6:	f840 2c06 	str.w	r2, [r0, #-6]
 80a01ca:	f820 3c02 	strh.w	r3, [r0, #-2]
 80a01ce:	f44f 72fd 	mov.w	r2, #506	; 0x1fa
 80a01d2:	f004 fe63 	bl	80a4e9c <memset>
    : CLIENT_ID(client_id), CLIENT_SECRET(client_secret)
 80a01d6:	491e      	ldr	r1, [pc, #120]	; (80a0250 <_ZN13Google_OAuth2C1ERK6StringS2_+0xa8>)
 80a01d8:	f504 7003 	add.w	r0, r4, #524	; 0x20c
 80a01dc:	f002 f9d4 	bl	80a2588 <_ZN6StringC1EPKc>
 80a01e0:	491c      	ldr	r1, [pc, #112]	; (80a0254 <_ZN13Google_OAuth2C1ERK6StringS2_+0xac>)
 80a01e2:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 80a01e6:	f002 f9cf 	bl	80a2588 <_ZN6StringC1EPKc>
 80a01ea:	491b      	ldr	r1, [pc, #108]	; (80a0258 <_ZN13Google_OAuth2C1ERK6StringS2_+0xb0>)
 80a01ec:	f504 700b 	add.w	r0, r4, #556	; 0x22c
 80a01f0:	f002 f9ca 	bl	80a2588 <_ZN6StringC1EPKc>
 80a01f4:	4631      	mov	r1, r6
 80a01f6:	f504 700f 	add.w	r0, r4, #572	; 0x23c
 80a01fa:	f002 fa04 	bl	80a2606 <_ZN6StringC1ERKS_>
 80a01fe:	4629      	mov	r1, r5
 80a0200:	4d16      	ldr	r5, [pc, #88]	; (80a025c <_ZN13Google_OAuth2C1ERK6StringS2_+0xb4>)
 80a0202:	f504 7013 	add.w	r0, r4, #588	; 0x24c
 80a0206:	f002 f9fe 	bl	80a2606 <_ZN6StringC1ERKS_>
 80a020a:	4629      	mov	r1, r5
 80a020c:	f504 7017 	add.w	r0, r4, #604	; 0x25c
 80a0210:	f002 f9ba 	bl	80a2588 <_ZN6StringC1EPKc>
 80a0214:	4629      	mov	r1, r5
 80a0216:	f504 701b 	add.w	r0, r4, #620	; 0x26c
 80a021a:	f002 f9b5 	bl	80a2588 <_ZN6StringC1EPKc>
 80a021e:	4629      	mov	r1, r5
 80a0220:	f504 701f 	add.w	r0, r4, #636	; 0x27c
 80a0224:	f002 f9b0 	bl	80a2588 <_ZN6StringC1EPKc>
 80a0228:	4629      	mov	r1, r5
 80a022a:	f504 7023 	add.w	r0, r4, #652	; 0x28c
 80a022e:	f002 f9ab 	bl	80a2588 <_ZN6StringC1EPKc>
 80a0232:	4629      	mov	r1, r5
 80a0234:	f504 7027 	add.w	r0, r4, #668	; 0x29c
 80a0238:	f002 f9a6 	bl	80a2588 <_ZN6StringC1EPKc>
 80a023c:	4629      	mov	r1, r5
 80a023e:	f504 7031 	add.w	r0, r4, #708	; 0x2c4
 80a0242:	f002 f9a1 	bl	80a2588 <_ZN6StringC1EPKc>
{

}
 80a0246:	4620      	mov	r0, r4
 80a0248:	bd70      	pop	{r4, r5, r6, pc}
 80a024a:	bf00      	nop
 80a024c:	080a6cee 	.word	0x080a6cee
 80a0250:	080a697e 	.word	0x080a697e
 80a0254:	080a698d 	.word	0x080a698d
 80a0258:	080a699d 	.word	0x080a699d
 80a025c:	080a6ac2 	.word	0x080a6ac2

080a0260 <_ZN13Google_OAuth29time_leftEv>:
//!
//! @return false if no time left, true if there is still time left.
//
//*****************************************************************************
bool Google_OAuth2::time_left(void)
{
 80a0260:	b570      	push	{r4, r5, r6, lr}
 80a0262:	4605      	mov	r5, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0264:	f001 fea4 	bl	80a1fb0 <HAL_Timer_Get_Milli_Seconds>
    uint32_t time_elapsed = millis() - time;
 80a0268:	f8d5 42b0 	ldr.w	r4, [r5, #688]	; 0x2b0
 80a026c:	4606      	mov	r6, r0
 80a026e:	f001 fe9f 	bl	80a1fb0 <HAL_Timer_Get_Milli_Seconds>
    time = millis();
    life_time -= time_elapsed;
 80a0272:	f8d5 32b4 	ldr.w	r3, [r5, #692]	; 0x2b4
    time = millis();
 80a0276:	f8c5 02b0 	str.w	r0, [r5, #688]	; 0x2b0
    life_time -= time_elapsed;
 80a027a:	441c      	add	r4, r3
 80a027c:	1ba0      	subs	r0, r4, r6
    return (life_time > 0);
}
 80a027e:	2800      	cmp	r0, #0
    life_time -= time_elapsed;
 80a0280:	f8c5 02b4 	str.w	r0, [r5, #692]	; 0x2b4
}
 80a0284:	bfd4      	ite	le
 80a0286:	2000      	movle	r0, #0
 80a0288:	2001      	movgt	r0, #1
 80a028a:	bd70      	pop	{r4, r5, r6, pc}

080a028c <_ZN13Google_OAuth213authenticatedEv>:
    }
    
    //char  statusText[64];
    //sprintf(statusText, "Time Remaining %ld", life_time);
    //DEBUG_PRINT(statusText);
    return state == OAuth2_State::REFRESH_TOKEN;
 80a028c:	f890 02be 	ldrb.w	r0, [r0, #702]	; 0x2be
    
}
 80a0290:	1e83      	subs	r3, r0, #2
 80a0292:	4258      	negs	r0, r3
 80a0294:	4158      	adcs	r0, r3
 80a0296:	4770      	bx	lr

080a0298 <_ZN13Google_OAuth210authorizedEv>:
//! @return false if not authorized, true if authorized.
//
//*****************************************************************************
bool Google_OAuth2::authorized(void)
{
    return state == OAuth2_State::AUTHORIZED;
 80a0298:	f890 02be 	ldrb.w	r0, [r0, #702]	; 0x2be
}
 80a029c:	1ec3      	subs	r3, r0, #3
 80a029e:	4258      	negs	r0, r3
 80a02a0:	4158      	adcs	r0, r3
 80a02a2:	4770      	bx	lr

080a02a4 <_ZN13Google_OAuth26failedEv>:
//! @return false if did not fail, true if failed.
//
//*****************************************************************************
bool Google_OAuth2::failed(void)
{
    return state == OAuth2_State::FAILED;
 80a02a4:	f890 02be 	ldrb.w	r0, [r0, #702]	; 0x2be
    
}
 80a02a8:	1f43      	subs	r3, r0, #5
 80a02aa:	4258      	negs	r0, r3
 80a02ac:	4158      	adcs	r0, r3
 80a02ae:	4770      	bx	lr

080a02b0 <_ZN13Google_OAuth211write_tokenEv>:
//!
//! @return None.
//
//*****************************************************************************
void Google_OAuth2::write_token(void)
{
 80a02b0:	b598      	push	{r3, r4, r7, lr}
    
    
    int n = refresh_token.length();
 
    // declaring character array
    char token[n + 1];
 80a02b2:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
{
 80a02b6:	af00      	add	r7, sp, #0
    char token[n + 1];
 80a02b8:	3308      	adds	r3, #8
 80a02ba:	f023 0307 	bic.w	r3, r3, #7
 80a02be:	ebad 0d03 	sub.w	sp, sp, r3
{
 80a02c2:	4604      	mov	r4, r0
 
    // copying the contents of the
    // string to char array
    strcpy(token, refresh_token.c_str());
 80a02c4:	f8d0 129c 	ldr.w	r1, [r0, #668]	; 0x29c
 80a02c8:	4668      	mov	r0, sp
 80a02ca:	f005 f8aa 	bl	80a5422 <strcpy>
    //    cout << token[i];
    
    
    
    //  Write 0 to indicate "available".
    Refresh_Token.available = 0;
 80a02ce:	2300      	movs	r3, #0
    //delay(1000);
    //DEBUG_PRINT("write token");

    //  Copy the token into the Refresh Token struct.
    strlcpy_P(Refresh_Token.data, token, sizeof(Refresh_Token.data));
 80a02d0:	4669      	mov	r1, sp
    Refresh_Token.available = 0;
 80a02d2:	7223      	strb	r3, [r4, #8]
    strlcpy_P(Refresh_Token.data, token, sizeof(Refresh_Token.data));
 80a02d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80a02d8:	f104 0009 	add.w	r0, r4, #9
 80a02dc:	f005 fe42 	bl	80a5f64 <strncpy>
    EEPROM.put(TOKEN_ADDRESS, Refresh_Token);
 80a02e0:	f003 fbcc 	bl	80a3a7c <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 80a02e4:	f240 2201 	movw	r2, #513	; 0x201
 80a02e8:	6820      	ldr	r0, [r4, #0]
 80a02ea:	f104 0108 	add.w	r1, r4, #8
 80a02ee:	f001 fe77 	bl	80a1fe0 <HAL_EEPROM_Put>
    
    
}
 80a02f2:	46bd      	mov	sp, r7
 80a02f4:	bd98      	pop	{r3, r4, r7, pc}

080a02f6 <_ZN13Google_OAuth210read_tokenEv>:
//!
//! @return false if token not available, true if token available.
//
//*****************************************************************************
bool Google_OAuth2::read_token(void)
{
 80a02f6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a02f8:	4604      	mov	r4, r0
    EEPROM.get(TOKEN_ADDRESS, Refresh_Token);
 80a02fa:	f003 fbbf 	bl	80a3a7c <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 80a02fe:	f240 2201 	movw	r2, #513	; 0x201
 80a0302:	6820      	ldr	r0, [r4, #0]
 80a0304:	f104 0108 	add.w	r1, r4, #8
 80a0308:	f001 fe62 	bl	80a1fd0 <HAL_EEPROM_Get>
  
    //  If 1, token not available in memory.
    //  If 0, token available in memory.
    if (Refresh_Token.available == 1)
 80a030c:	7a23      	ldrb	r3, [r4, #8]
 80a030e:	2b01      	cmp	r3, #1
 80a0310:	d00f      	beq.n	80a0332 <_ZN13Google_OAuth210read_tokenEv+0x3c>
    {
        return false;
    }
    //  Access the raw token data from the Refresh Token struct
    //  and convert it into an string object.
    refresh_token = String(Refresh_Token.data);
 80a0312:	f104 0109 	add.w	r1, r4, #9
 80a0316:	4668      	mov	r0, sp
 80a0318:	f002 f936 	bl	80a2588 <_ZN6StringC1EPKc>
 80a031c:	4669      	mov	r1, sp
 80a031e:	f504 7027 	add.w	r0, r4, #668	; 0x29c
 80a0322:	f002 f97b 	bl	80a261c <_ZN6StringaSEOS_>
 80a0326:	4668      	mov	r0, sp
 80a0328:	f002 f8e4 	bl	80a24f4 <_ZN6StringD1Ev>
 80a032c:	2001      	movs	r0, #1
    //delay(1000);
    //DEBUG_PRINT("token read from struct next");
    //delay(1000);
    //DEBUG_PRINT(refresh_token);
    return true;
}
 80a032e:	b004      	add	sp, #16
 80a0330:	bd10      	pop	{r4, pc}
        return false;
 80a0332:	2000      	movs	r0, #0
 80a0334:	e7fb      	b.n	80a032e <_ZN13Google_OAuth210read_tokenEv+0x38>

080a0336 <_ZN13Google_OAuth211erase_tokenEv>:
//!
//! @return None.
//
//*****************************************************************************
void Google_OAuth2::erase_token(void)
{
 80a0336:	b538      	push	{r3, r4, r5, lr}
    //  Write 1 to indicate "not available".
    Refresh_Token.available = 1;
 80a0338:	4605      	mov	r5, r0
 80a033a:	2301      	movs	r3, #1
{
 80a033c:	4604      	mov	r4, r0
    Refresh_Token.available = 1;
 80a033e:	f805 3f08 	strb.w	r3, [r5, #8]!
    EEPROM.put(TOKEN_ADDRESS, Refresh_Token);
 80a0342:	f003 fb9b 	bl	80a3a7c <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 80a0346:	4629      	mov	r1, r5
 80a0348:	6820      	ldr	r0, [r4, #0]
 80a034a:	f240 2201 	movw	r2, #513	; 0x201
}
 80a034e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a0352:	f001 be45 	b.w	80a1fe0 <HAL_EEPROM_Put>

080a0356 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a0356:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a0358:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 80a035a:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 80a035c:	b17c      	cbz	r4, 80a037e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 80a035e:	6863      	ldr	r3, [r4, #4]
 80a0360:	3b01      	subs	r3, #1
 80a0362:	6063      	str	r3, [r4, #4]
 80a0364:	b95b      	cbnz	r3, 80a037e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 80a0366:	6823      	ldr	r3, [r4, #0]
 80a0368:	4620      	mov	r0, r4
 80a036a:	689b      	ldr	r3, [r3, #8]
 80a036c:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a036e:	68a3      	ldr	r3, [r4, #8]
 80a0370:	3b01      	subs	r3, #1
 80a0372:	60a3      	str	r3, [r4, #8]
 80a0374:	b91b      	cbnz	r3, 80a037e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a0376:	6823      	ldr	r3, [r4, #0]
 80a0378:	4620      	mov	r0, r4
 80a037a:	68db      	ldr	r3, [r3, #12]
 80a037c:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 80a037e:	4628      	mov	r0, r5
 80a0380:	bd38      	pop	{r3, r4, r5, pc}
	...

080a0384 <_ZN13Google_OAuth25startEv>:
void Google_OAuth2::start(void){
 80a0384:	b510      	push	{r4, lr}
 80a0386:	b086      	sub	sp, #24
 80a0388:	4604      	mov	r4, r0
    if (read_token())
 80a038a:	f7ff ffb4 	bl	80a02f6 <_ZN13Google_OAuth210read_tokenEv>
 80a038e:	b1b8      	cbz	r0, 80a03c0 <_ZN13Google_OAuth25startEv+0x3c>
        state = OAuth2_State::REFRESH_TOKEN;
 80a0390:	2302      	movs	r3, #2
        DEBUG_PRINT("State: Oauth2 Refresh Token");
 80a0392:	490d      	ldr	r1, [pc, #52]	; (80a03c8 <_ZN13Google_OAuth25startEv+0x44>)
        state = OAuth2_State::REFRESH_TOKEN;
 80a0394:	f884 32be 	strb.w	r3, [r4, #702]	; 0x2be
        DEBUG_PRINT("State: Oauth2 Req User Code");
 80a0398:	a802      	add	r0, sp, #8
 80a039a:	f002 fa29 	bl	80a27f0 <_ZN6String6formatEPKcz>
 80a039e:	9902      	ldr	r1, [sp, #8]
 80a03a0:	4668      	mov	r0, sp
 80a03a2:	f7ff fee5 	bl	80a0170 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a03a6:	a801      	add	r0, sp, #4
 80a03a8:	f7ff ffd5 	bl	80a0356 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a03ac:	a802      	add	r0, sp, #8
 80a03ae:	f002 f8a1 	bl	80a24f4 <_ZN6StringD1Ev>
    polling_time = 0;
 80a03b2:	2300      	movs	r3, #0
 80a03b4:	f8c4 32b8 	str.w	r3, [r4, #696]	; 0x2b8
    is_device_subscribed = false;
 80a03b8:	f884 32c0 	strb.w	r3, [r4, #704]	; 0x2c0
}
 80a03bc:	b006      	add	sp, #24
 80a03be:	bd10      	pop	{r4, pc}
        DEBUG_PRINT("State: Oauth2 Req User Code");
 80a03c0:	4902      	ldr	r1, [pc, #8]	; (80a03cc <_ZN13Google_OAuth25startEv+0x48>)
        state = OAuth2_State::REQ_USER_CODE;
 80a03c2:	f884 02be 	strb.w	r0, [r4, #702]	; 0x2be
        DEBUG_PRINT("State: Oauth2 Req User Code");
 80a03c6:	e7e7      	b.n	80a0398 <_ZN13Google_OAuth25startEv+0x14>
 80a03c8:	080a69ad 	.word	0x080a69ad
 80a03cc:	080a69c9 	.word	0x080a69c9

080a03d0 <_ZN13Google_OAuth26parserEPKcS1_>:
{
 80a03d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    int16_t index = 0, last_index = 0;
 80a03d2:	2600      	movs	r6, #0
{
 80a03d4:	460d      	mov	r5, r1
 80a03d6:	b09b      	sub	sp, #108	; 0x6c
    String str_data = String(data);
 80a03d8:	4611      	mov	r1, r2
{
 80a03da:	4604      	mov	r4, r0
    String str_data = String(data);
 80a03dc:	a806      	add	r0, sp, #24
    int16_t index = 0, last_index = 0;
 80a03de:	f8ad 600c 	strh.w	r6, [sp, #12]
 80a03e2:	f8ad 600e 	strh.w	r6, [sp, #14]
    String str_data = String(data);
 80a03e6:	f002 f8cf 	bl	80a2588 <_ZN6StringC1EPKc>
    String str_event = String(event);
 80a03ea:	4629      	mov	r1, r5
 80a03ec:	a80a      	add	r0, sp, #40	; 0x28
    split_string(str_event, '/', index, last_index); // skip deviceID.
 80a03ee:	f10d 050e 	add.w	r5, sp, #14
    String str_event = String(event);
 80a03f2:	f002 f8c9 	bl	80a2588 <_ZN6StringC1EPKc>
    split_string(str_event, '/', index, last_index); // skip deviceID.
 80a03f6:	222f      	movs	r2, #47	; 0x2f
 80a03f8:	ab03      	add	r3, sp, #12
 80a03fa:	a90a      	add	r1, sp, #40	; 0x28
 80a03fc:	a816      	add	r0, sp, #88	; 0x58
 80a03fe:	9500      	str	r5, [sp, #0]
 80a0400:	f7ff fe57 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
 80a0404:	a816      	add	r0, sp, #88	; 0x58
 80a0406:	f002 f875 	bl	80a24f4 <_ZN6StringD1Ev>
    String hook = split_string(str_event, '/', index, last_index);
 80a040a:	222f      	movs	r2, #47	; 0x2f
 80a040c:	ab03      	add	r3, sp, #12
 80a040e:	a90a      	add	r1, sp, #40	; 0x28
 80a0410:	a80e      	add	r0, sp, #56	; 0x38
 80a0412:	9500      	str	r5, [sp, #0]
 80a0414:	f7ff fe4d 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
    String webhook_event_name = split_string(str_event, '/', index, last_index);
 80a0418:	a90a      	add	r1, sp, #40	; 0x28
 80a041a:	a812      	add	r0, sp, #72	; 0x48
 80a041c:	222f      	movs	r2, #47	; 0x2f
 80a041e:	9500      	str	r5, [sp, #0]
 80a0420:	ab03      	add	r3, sp, #12
 80a0422:	f7ff fe46 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
    if (hook.equals("hook-response"))
 80a0426:	4974      	ldr	r1, [pc, #464]	; (80a05f8 <_ZN13Google_OAuth26parserEPKcS1_+0x228>)
 80a0428:	a80e      	add	r0, sp, #56	; 0x38
    index = 0, last_index = 0;
 80a042a:	f8ad 600c 	strh.w	r6, [sp, #12]
 80a042e:	f8ad 600e 	strh.w	r6, [sp, #14]
    if (hook.equals("hook-response"))
 80a0432:	f002 f978 	bl	80a2726 <_ZNK6String6equalsEPKc>
 80a0436:	2800      	cmp	r0, #0
 80a0438:	f000 80cc 	beq.w	80a05d4 <_ZN13Google_OAuth26parserEPKcS1_+0x204>
        if (webhook_event_name.equals(EVENT_REQ_USER_CODE))
 80a043c:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 80a0440:	a812      	add	r0, sp, #72	; 0x48
 80a0442:	f002 f963 	bl	80a270c <_ZNK6String6equalsERKS_>
 80a0446:	4607      	mov	r7, r0
 80a0448:	2800      	cmp	r0, #0
 80a044a:	d060      	beq.n	80a050e <_ZN13Google_OAuth26parserEPKcS1_+0x13e>
            device_code = split_string(str_data, '~', index, last_index);
 80a044c:	227e      	movs	r2, #126	; 0x7e
 80a044e:	ab03      	add	r3, sp, #12
 80a0450:	a906      	add	r1, sp, #24
 80a0452:	a816      	add	r0, sp, #88	; 0x58
 80a0454:	9500      	str	r5, [sp, #0]
 80a0456:	f7ff fe2c 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
 80a045a:	a916      	add	r1, sp, #88	; 0x58
 80a045c:	f504 7017 	add.w	r0, r4, #604	; 0x25c
 80a0460:	f002 f8dc 	bl	80a261c <_ZN6StringaSEOS_>
 80a0464:	a816      	add	r0, sp, #88	; 0x58
 80a0466:	f002 f845 	bl	80a24f4 <_ZN6StringD1Ev>
            user_code = split_string(str_data, '~', index, last_index);
 80a046a:	227e      	movs	r2, #126	; 0x7e
 80a046c:	ab03      	add	r3, sp, #12
 80a046e:	a906      	add	r1, sp, #24
 80a0470:	a816      	add	r0, sp, #88	; 0x58
 80a0472:	9500      	str	r5, [sp, #0]
 80a0474:	f7ff fe1d 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
 80a0478:	a916      	add	r1, sp, #88	; 0x58
 80a047a:	f504 701b 	add.w	r0, r4, #620	; 0x26c
 80a047e:	f002 f8cd 	bl	80a261c <_ZN6StringaSEOS_>
 80a0482:	a816      	add	r0, sp, #88	; 0x58
 80a0484:	f002 f836 	bl	80a24f4 <_ZN6StringD1Ev>
            auth_url = split_string(str_data, '~', index, last_index);
 80a0488:	227e      	movs	r2, #126	; 0x7e
 80a048a:	ab03      	add	r3, sp, #12
 80a048c:	a906      	add	r1, sp, #24
 80a048e:	a816      	add	r0, sp, #88	; 0x58
 80a0490:	9500      	str	r5, [sp, #0]
 80a0492:	f7ff fe0e 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
 80a0496:	a916      	add	r1, sp, #88	; 0x58
 80a0498:	f504 701f 	add.w	r0, r4, #636	; 0x27c
 80a049c:	f002 f8be 	bl	80a261c <_ZN6StringaSEOS_>
 80a04a0:	a816      	add	r0, sp, #88	; 0x58
 80a04a2:	f002 f827 	bl	80a24f4 <_ZN6StringD1Ev>
            life_time = split_string(str_data, '~', index, last_index).toInt() * 1000;
 80a04a6:	227e      	movs	r2, #126	; 0x7e
 80a04a8:	a906      	add	r1, sp, #24
 80a04aa:	ab03      	add	r3, sp, #12
 80a04ac:	a816      	add	r0, sp, #88	; 0x58
 80a04ae:	9500      	str	r5, [sp, #0]
 80a04b0:	f7ff fdff 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
 80a04b4:	a816      	add	r0, sp, #88	; 0x58
 80a04b6:	f002 f995 	bl	80a27e4 <_ZNK6String5toIntEv>
 80a04ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a04be:	4343      	muls	r3, r0
 80a04c0:	a816      	add	r0, sp, #88	; 0x58
 80a04c2:	f8c4 32b4 	str.w	r3, [r4, #692]	; 0x2b4
 80a04c6:	f002 f815 	bl	80a24f4 <_ZN6StringD1Ev>
            polling_rate = split_string(str_data, '\0', index, last_index).toInt() * 1000;
 80a04ca:	ab03      	add	r3, sp, #12
 80a04cc:	4632      	mov	r2, r6
 80a04ce:	a906      	add	r1, sp, #24
 80a04d0:	a816      	add	r0, sp, #88	; 0x58
 80a04d2:	9500      	str	r5, [sp, #0]
 80a04d4:	f7ff fded 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
 80a04d8:	a816      	add	r0, sp, #88	; 0x58
 80a04da:	f002 f983 	bl	80a27e4 <_ZNK6String5toIntEv>
 80a04de:	ebc0 1340 	rsb	r3, r0, r0, lsl #5
 80a04e2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80a04e6:	00c0      	lsls	r0, r0, #3
 80a04e8:	f8a4 02bc 	strh.w	r0, [r4, #700]	; 0x2bc
        http_status_code = str_data.substring(13, 16).toInt();
 80a04ec:	a816      	add	r0, sp, #88	; 0x58
 80a04ee:	f002 f801 	bl	80a24f4 <_ZN6StringD1Ev>
    String webhook_event_name = split_string(str_event, '/', index, last_index);
 80a04f2:	a812      	add	r0, sp, #72	; 0x48
 80a04f4:	f001 fffe 	bl	80a24f4 <_ZN6StringD1Ev>
    String hook = split_string(str_event, '/', index, last_index);
 80a04f8:	a80e      	add	r0, sp, #56	; 0x38
 80a04fa:	f001 fffb 	bl	80a24f4 <_ZN6StringD1Ev>
    String str_event = String(event);
 80a04fe:	a80a      	add	r0, sp, #40	; 0x28
 80a0500:	f001 fff8 	bl	80a24f4 <_ZN6StringD1Ev>
    String str_data = String(data);
 80a0504:	a806      	add	r0, sp, #24
 80a0506:	f001 fff5 	bl	80a24f4 <_ZN6StringD1Ev>
}
 80a050a:	b01b      	add	sp, #108	; 0x6c
 80a050c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if (webhook_event_name.equals(EVENT_POLL_AUTH))
 80a050e:	f504 7107 	add.w	r1, r4, #540	; 0x21c
 80a0512:	a812      	add	r0, sp, #72	; 0x48
 80a0514:	f002 f8fa 	bl	80a270c <_ZNK6String6equalsERKS_>
 80a0518:	4606      	mov	r6, r0
 80a051a:	2800      	cmp	r0, #0
 80a051c:	d040      	beq.n	80a05a0 <_ZN13Google_OAuth26parserEPKcS1_+0x1d0>
            access_token = split_string(str_data, '~', index, last_index);
 80a051e:	227e      	movs	r2, #126	; 0x7e
 80a0520:	ab03      	add	r3, sp, #12
 80a0522:	a906      	add	r1, sp, #24
 80a0524:	a816      	add	r0, sp, #88	; 0x58
 80a0526:	9500      	str	r5, [sp, #0]
 80a0528:	f7ff fdc3 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
 80a052c:	a916      	add	r1, sp, #88	; 0x58
 80a052e:	f504 7023 	add.w	r0, r4, #652	; 0x28c
 80a0532:	f002 f873 	bl	80a261c <_ZN6StringaSEOS_>
 80a0536:	a816      	add	r0, sp, #88	; 0x58
 80a0538:	f001 ffdc 	bl	80a24f4 <_ZN6StringD1Ev>
            refresh_token = split_string(str_data, '~', index, last_index);
 80a053c:	227e      	movs	r2, #126	; 0x7e
 80a053e:	ab03      	add	r3, sp, #12
 80a0540:	a906      	add	r1, sp, #24
 80a0542:	a816      	add	r0, sp, #88	; 0x58
 80a0544:	9500      	str	r5, [sp, #0]
 80a0546:	f7ff fdb4 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
 80a054a:	a916      	add	r1, sp, #88	; 0x58
 80a054c:	f504 7027 	add.w	r0, r4, #668	; 0x29c
 80a0550:	f002 f864 	bl	80a261c <_ZN6StringaSEOS_>
 80a0554:	a816      	add	r0, sp, #88	; 0x58
 80a0556:	f001 ffcd 	bl	80a24f4 <_ZN6StringD1Ev>
            delay(1000);
 80a055a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a055e:	f002 fbaf 	bl	80a2cc0 <delay>
            DEBUG_PRINT(refresh_token);
 80a0562:	f8d4 129c 	ldr.w	r1, [r4, #668]	; 0x29c
 80a0566:	a816      	add	r0, sp, #88	; 0x58
 80a0568:	f002 f942 	bl	80a27f0 <_ZN6String6formatEPKcz>
 80a056c:	9916      	ldr	r1, [sp, #88]	; 0x58
 80a056e:	a804      	add	r0, sp, #16
 80a0570:	f7ff fdfe 	bl	80a0170 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>
 80a0574:	a805      	add	r0, sp, #20
 80a0576:	f7ff feee 	bl	80a0356 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a057a:	a816      	add	r0, sp, #88	; 0x58
 80a057c:	f001 ffba 	bl	80a24f4 <_ZN6StringD1Ev>
            life_time = split_string(str_data, '\0', index, last_index).toInt() * 1000;
 80a0580:	463a      	mov	r2, r7
 80a0582:	9500      	str	r5, [sp, #0]
 80a0584:	ab03      	add	r3, sp, #12
            life_time = split_string(str_data, '\0', index, last_index).toInt() * 1000;
 80a0586:	a906      	add	r1, sp, #24
 80a0588:	a816      	add	r0, sp, #88	; 0x58
 80a058a:	f7ff fd92 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
 80a058e:	a816      	add	r0, sp, #88	; 0x58
 80a0590:	f002 f928 	bl	80a27e4 <_ZNK6String5toIntEv>
 80a0594:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0598:	4343      	muls	r3, r0
 80a059a:	f8c4 32b4 	str.w	r3, [r4, #692]	; 0x2b4
 80a059e:	e7a5      	b.n	80a04ec <_ZN13Google_OAuth26parserEPKcS1_+0x11c>
        else if (webhook_event_name.equals(EVENT_REFRESH_TOKEN))
 80a05a0:	f504 710b 	add.w	r1, r4, #556	; 0x22c
 80a05a4:	a812      	add	r0, sp, #72	; 0x48
 80a05a6:	f002 f8b1 	bl	80a270c <_ZNK6String6equalsERKS_>
 80a05aa:	2800      	cmp	r0, #0
 80a05ac:	d0a1      	beq.n	80a04f2 <_ZN13Google_OAuth26parserEPKcS1_+0x122>
            access_token = split_string(str_data, '~', index, last_index);
 80a05ae:	227e      	movs	r2, #126	; 0x7e
 80a05b0:	ab03      	add	r3, sp, #12
 80a05b2:	a906      	add	r1, sp, #24
 80a05b4:	a816      	add	r0, sp, #88	; 0x58
 80a05b6:	9500      	str	r5, [sp, #0]
 80a05b8:	f7ff fd7b 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
 80a05bc:	a916      	add	r1, sp, #88	; 0x58
 80a05be:	f504 7023 	add.w	r0, r4, #652	; 0x28c
 80a05c2:	f002 f82b 	bl	80a261c <_ZN6StringaSEOS_>
 80a05c6:	a816      	add	r0, sp, #88	; 0x58
 80a05c8:	f001 ff94 	bl	80a24f4 <_ZN6StringD1Ev>
            life_time = split_string(str_data, '\0', index, last_index).toInt() * 1000;
 80a05cc:	4632      	mov	r2, r6
 80a05ce:	9500      	str	r5, [sp, #0]
 80a05d0:	ab03      	add	r3, sp, #12
 80a05d2:	e7d8      	b.n	80a0586 <_ZN13Google_OAuth26parserEPKcS1_+0x1b6>
    else if (hook.equals("hook-error"))
 80a05d4:	4909      	ldr	r1, [pc, #36]	; (80a05fc <_ZN13Google_OAuth26parserEPKcS1_+0x22c>)
 80a05d6:	a80e      	add	r0, sp, #56	; 0x38
 80a05d8:	f002 f8a5 	bl	80a2726 <_ZNK6String6equalsEPKc>
 80a05dc:	2800      	cmp	r0, #0
 80a05de:	d088      	beq.n	80a04f2 <_ZN13Google_OAuth26parserEPKcS1_+0x122>
        http_status_code = str_data.substring(13, 16).toInt();
 80a05e0:	2310      	movs	r3, #16
 80a05e2:	220d      	movs	r2, #13
 80a05e4:	a906      	add	r1, sp, #24
 80a05e6:	a816      	add	r0, sp, #88	; 0x58
 80a05e8:	f002 f8da 	bl	80a27a0 <_ZNK6String9substringEjj>
 80a05ec:	a816      	add	r0, sp, #88	; 0x58
 80a05ee:	f002 f8f9 	bl	80a27e4 <_ZNK6String5toIntEv>
 80a05f2:	f8a4 02d4 	strh.w	r0, [r4, #724]	; 0x2d4
 80a05f6:	e779      	b.n	80a04ec <_ZN13Google_OAuth26parserEPKcS1_+0x11c>
 80a05f8:	080a69e5 	.word	0x080a69e5
 80a05fc:	080a69f3 	.word	0x080a69f3

080a0600 <_ZN13Google_OAuth216response_handlerEPKcS1_>:
{
 80a0600:	b510      	push	{r4, lr}
 80a0602:	4604      	mov	r4, r0
 80a0604:	b08a      	sub	sp, #40	; 0x28
    parser(event, data);
 80a0606:	f7ff fee3 	bl	80a03d0 <_ZN13Google_OAuth26parserEPKcS1_>
    switch (last_state)
 80a060a:	f894 32bf 	ldrb.w	r3, [r4, #703]	; 0x2bf
 80a060e:	2b01      	cmp	r3, #1
 80a0610:	d074      	beq.n	80a06fc <_ZN13Google_OAuth216response_handlerEPKcS1_+0xfc>
 80a0612:	2b02      	cmp	r3, #2
 80a0614:	f000 809a 	beq.w	80a074c <_ZN13Google_OAuth216response_handlerEPKcS1_+0x14c>
 80a0618:	2b00      	cmp	r3, #0
 80a061a:	f040 80b2 	bne.w	80a0782 <_ZN13Google_OAuth216response_handlerEPKcS1_+0x182>
            String msg = "\r\nThis application requires your permission to access your Google Calendar.";
 80a061e:	495f      	ldr	r1, [pc, #380]	; (80a079c <_ZN13Google_OAuth216response_handlerEPKcS1_+0x19c>)
 80a0620:	a802      	add	r0, sp, #8
 80a0622:	f001 ffb1 	bl	80a2588 <_ZN6StringC1EPKc>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a0626:	495e      	ldr	r1, [pc, #376]	; (80a07a0 <_ZN13Google_OAuth216response_handlerEPKcS1_+0x1a0>)
 80a0628:	a806      	add	r0, sp, #24
 80a062a:	f001 ffad 	bl	80a2588 <_ZN6StringC1EPKc>
            msg += "\r\nPlease, go to: " + auth_url;
 80a062e:	f504 711f 	add.w	r1, r4, #636	; 0x27c
 80a0632:	a806      	add	r0, sp, #24
 80a0634:	f002 f835 	bl	80a26a2 <_ZplRK15StringSumHelperRK6String>
 80a0638:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80a063a:	a802      	add	r0, sp, #8
 80a063c:	f002 f81e 	bl	80a267c <_ZN6String6concatERKS_>
class StringSumHelper : public String
 80a0640:	a806      	add	r0, sp, #24
 80a0642:	f001 ff57 	bl	80a24f4 <_ZN6StringD1Ev>
	StringSumHelper(const char *p) : String(p) {}
 80a0646:	4957      	ldr	r1, [pc, #348]	; (80a07a4 <_ZN13Google_OAuth216response_handlerEPKcS1_+0x1a4>)
 80a0648:	a806      	add	r0, sp, #24
 80a064a:	f001 ff9d 	bl	80a2588 <_ZN6StringC1EPKc>
            msg += ", and enter the following code: " + user_code + "\r\n";
 80a064e:	f504 711b 	add.w	r1, r4, #620	; 0x26c
 80a0652:	a806      	add	r0, sp, #24
 80a0654:	f002 f825 	bl	80a26a2 <_ZplRK15StringSumHelperRK6String>
 80a0658:	4953      	ldr	r1, [pc, #332]	; (80a07a8 <_ZN13Google_OAuth216response_handlerEPKcS1_+0x1a8>)
 80a065a:	f002 f82e 	bl	80a26ba <_ZplRK15StringSumHelperPKc>
 80a065e:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80a0660:	a802      	add	r0, sp, #8
 80a0662:	f002 f80b 	bl	80a267c <_ZN6String6concatERKS_>
class StringSumHelper : public String
 80a0666:	a806      	add	r0, sp, #24
 80a0668:	f001 ff44 	bl	80a24f4 <_ZN6StringD1Ev>
            Serial.println(msg);
 80a066c:	f002 ff88 	bl	80a3580 <_Z16_fetch_usbserialv>
 80a0670:	9902      	ldr	r1, [sp, #8]
 80a0672:	f002 f91a 	bl	80a28aa <_ZN5Print7printlnEPKc>
            delay(1000);
 80a0676:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a067a:	f002 fb21 	bl	80a2cc0 <delay>
            DEBUG_PRINT(auth_url);
 80a067e:	f8d4 127c 	ldr.w	r1, [r4, #636]	; 0x27c
 80a0682:	a806      	add	r0, sp, #24
 80a0684:	f002 f8b4 	bl	80a27f0 <_ZN6String6formatEPKcz>
 80a0688:	9906      	ldr	r1, [sp, #24]
 80a068a:	4668      	mov	r0, sp
 80a068c:	f7ff fd70 	bl	80a0170 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>
 80a0690:	a801      	add	r0, sp, #4
 80a0692:	f7ff fe60 	bl	80a0356 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0696:	a806      	add	r0, sp, #24
 80a0698:	f001 ff2c 	bl	80a24f4 <_ZN6StringD1Ev>
            delay(1000);
 80a069c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a06a0:	f002 fb0e 	bl	80a2cc0 <delay>
            DEBUG_PRINT(user_code);
 80a06a4:	f8d4 126c 	ldr.w	r1, [r4, #620]	; 0x26c
 80a06a8:	a806      	add	r0, sp, #24
 80a06aa:	f002 f8a1 	bl	80a27f0 <_ZN6String6formatEPKcz>
 80a06ae:	9906      	ldr	r1, [sp, #24]
 80a06b0:	4668      	mov	r0, sp
 80a06b2:	f7ff fd5d 	bl	80a0170 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>
 80a06b6:	a801      	add	r0, sp, #4
 80a06b8:	f7ff fe4d 	bl	80a0356 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a06bc:	a806      	add	r0, sp, #24
 80a06be:	f001 ff19 	bl	80a24f4 <_ZN6StringD1Ev>
            delay(1000);
 80a06c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a06c6:	f002 fafb 	bl	80a2cc0 <delay>
            DEBUG_PRINT(msg);
 80a06ca:	9902      	ldr	r1, [sp, #8]
 80a06cc:	a806      	add	r0, sp, #24
 80a06ce:	f002 f88f 	bl	80a27f0 <_ZN6String6formatEPKcz>
 80a06d2:	9906      	ldr	r1, [sp, #24]
 80a06d4:	4668      	mov	r0, sp
 80a06d6:	f7ff fd4b 	bl	80a0170 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>
 80a06da:	a801      	add	r0, sp, #4
 80a06dc:	f7ff fe3b 	bl	80a0356 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a06e0:	a806      	add	r0, sp, #24
 80a06e2:	f001 ff07 	bl	80a24f4 <_ZN6StringD1Ev>
    last_state = state;
 80a06e6:	f894 32be 	ldrb.w	r3, [r4, #702]	; 0x2be
            String msg = "\r\nThis application requires your permission to access your Google Calendar.";
 80a06ea:	a802      	add	r0, sp, #8
    last_state = state;
 80a06ec:	f884 32bf 	strb.w	r3, [r4, #703]	; 0x2bf
    state = new_state;
 80a06f0:	2301      	movs	r3, #1
 80a06f2:	f884 32be 	strb.w	r3, [r4, #702]	; 0x2be
            DEBUG_PRINT("Resp: OAuth2_State Not Set!!!");
 80a06f6:	f001 fefd 	bl	80a24f4 <_ZN6StringD1Ev>
            break;
 80a06fa:	e01c      	b.n	80a0736 <_ZN13Google_OAuth216response_handlerEPKcS1_+0x136>
            Serial.println("\r\nDevice authorized!\r\n");
 80a06fc:	f002 ff40 	bl	80a3580 <_Z16_fetch_usbserialv>
 80a0700:	492a      	ldr	r1, [pc, #168]	; (80a07ac <_ZN13Google_OAuth216response_handlerEPKcS1_+0x1ac>)
 80a0702:	f002 f8d2 	bl	80a28aa <_ZN5Print7printlnEPKc>
            DEBUG_PRINT("Device authorized!");
 80a0706:	492a      	ldr	r1, [pc, #168]	; (80a07b0 <_ZN13Google_OAuth216response_handlerEPKcS1_+0x1b0>)
 80a0708:	a806      	add	r0, sp, #24
 80a070a:	f002 f871 	bl	80a27f0 <_ZN6String6formatEPKcz>
 80a070e:	9906      	ldr	r1, [sp, #24]
 80a0710:	a802      	add	r0, sp, #8
 80a0712:	f7ff fd2d 	bl	80a0170 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>
 80a0716:	a803      	add	r0, sp, #12
 80a0718:	f7ff fe1d 	bl	80a0356 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a071c:	a806      	add	r0, sp, #24
 80a071e:	f001 fee9 	bl	80a24f4 <_ZN6StringD1Ev>
    last_state = state;
 80a0722:	f894 32be 	ldrb.w	r3, [r4, #702]	; 0x2be
            write_token();
 80a0726:	4620      	mov	r0, r4
    last_state = state;
 80a0728:	f884 32bf 	strb.w	r3, [r4, #703]	; 0x2bf
    state = new_state;
 80a072c:	2303      	movs	r3, #3
 80a072e:	f884 32be 	strb.w	r3, [r4, #702]	; 0x2be
            write_token();
 80a0732:	f7ff fdbd 	bl	80a02b0 <_ZN13Google_OAuth211write_tokenEv>
 80a0736:	f001 fc3b 	bl	80a1fb0 <HAL_Timer_Get_Milli_Seconds>
    time = millis();
 80a073a:	f8c4 02b0 	str.w	r0, [r4, #688]	; 0x2b0
    is_device_subscribed = false;
 80a073e:	2000      	movs	r0, #0
 80a0740:	f884 02c0 	strb.w	r0, [r4, #704]	; 0x2c0
        spark_unsubscribe(NULL);
 80a0744:	f001 fe22 	bl	80a238c <spark_unsubscribe>
}
 80a0748:	b00a      	add	sp, #40	; 0x28
 80a074a:	bd10      	pop	{r4, pc}
            Serial.println("\r\nAccess token refreshed!\r\n");
 80a074c:	f002 ff18 	bl	80a3580 <_Z16_fetch_usbserialv>
 80a0750:	4918      	ldr	r1, [pc, #96]	; (80a07b4 <_ZN13Google_OAuth216response_handlerEPKcS1_+0x1b4>)
 80a0752:	f002 f8aa 	bl	80a28aa <_ZN5Print7printlnEPKc>
            DEBUG_PRINT("Access token refreshed!");
 80a0756:	4918      	ldr	r1, [pc, #96]	; (80a07b8 <_ZN13Google_OAuth216response_handlerEPKcS1_+0x1b8>)
 80a0758:	a806      	add	r0, sp, #24
 80a075a:	f002 f849 	bl	80a27f0 <_ZN6String6formatEPKcz>
 80a075e:	9906      	ldr	r1, [sp, #24]
 80a0760:	a802      	add	r0, sp, #8
 80a0762:	f7ff fd05 	bl	80a0170 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>
 80a0766:	a803      	add	r0, sp, #12
 80a0768:	f7ff fdf5 	bl	80a0356 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a076c:	a806      	add	r0, sp, #24
 80a076e:	f001 fec1 	bl	80a24f4 <_ZN6StringD1Ev>
    last_state = state;
 80a0772:	f894 32be 	ldrb.w	r3, [r4, #702]	; 0x2be
 80a0776:	f884 32bf 	strb.w	r3, [r4, #703]	; 0x2bf
    state = new_state;
 80a077a:	2303      	movs	r3, #3
 80a077c:	f884 32be 	strb.w	r3, [r4, #702]	; 0x2be
}
 80a0780:	e7d9      	b.n	80a0736 <_ZN13Google_OAuth216response_handlerEPKcS1_+0x136>
            DEBUG_PRINT("Resp: OAuth2_State Not Set!!!");
 80a0782:	490e      	ldr	r1, [pc, #56]	; (80a07bc <_ZN13Google_OAuth216response_handlerEPKcS1_+0x1bc>)
 80a0784:	a806      	add	r0, sp, #24
 80a0786:	f002 f833 	bl	80a27f0 <_ZN6String6formatEPKcz>
 80a078a:	9906      	ldr	r1, [sp, #24]
 80a078c:	a802      	add	r0, sp, #8
 80a078e:	f7ff fcef 	bl	80a0170 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>
 80a0792:	a803      	add	r0, sp, #12
 80a0794:	f7ff fddf 	bl	80a0356 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0798:	a806      	add	r0, sp, #24
 80a079a:	e7ac      	b.n	80a06f6 <_ZN13Google_OAuth216response_handlerEPKcS1_+0xf6>
 80a079c:	080a69fe 	.word	0x080a69fe
 80a07a0:	080a6a4a 	.word	0x080a6a4a
 80a07a4:	080a6a5c 	.word	0x080a6a5c
 80a07a8:	080a6ac0 	.word	0x080a6ac0
 80a07ac:	080a6a7d 	.word	0x080a6a7d
 80a07b0:	080a6a94 	.word	0x080a6a94
 80a07b4:	080a6aa7 	.word	0x080a6aa7
 80a07b8:	080a6ac3 	.word	0x080a6ac3
 80a07bc:	080a6adb 	.word	0x080a6adb

080a07c0 <_ZN13Google_OAuth213error_handlerEPKcS1_>:
{
 80a07c0:	b530      	push	{r4, r5, lr}
 80a07c2:	4604      	mov	r4, r0
 80a07c4:	b087      	sub	sp, #28
    parser(event, data);
 80a07c6:	f7ff fe03 	bl	80a03d0 <_ZN13Google_OAuth26parserEPKcS1_>
    http_error = String::format("\r\nHTTP ERROR - %d", http_status_code);
 80a07ca:	f504 7531 	add.w	r5, r4, #708	; 0x2c4
 80a07ce:	f8b4 22d4 	ldrh.w	r2, [r4, #724]	; 0x2d4
 80a07d2:	4935      	ldr	r1, [pc, #212]	; (80a08a8 <_ZN13Google_OAuth213error_handlerEPKcS1_+0xe8>)
 80a07d4:	a802      	add	r0, sp, #8
 80a07d6:	f002 f80b 	bl	80a27f0 <_ZN6String6formatEPKcz>
 80a07da:	a902      	add	r1, sp, #8
 80a07dc:	4628      	mov	r0, r5
 80a07de:	f001 ff1d 	bl	80a261c <_ZN6StringaSEOS_>
 80a07e2:	a802      	add	r0, sp, #8
 80a07e4:	f001 fe86 	bl	80a24f4 <_ZN6StringD1Ev>
    switch (last_state)
 80a07e8:	f894 32bf 	ldrb.w	r3, [r4, #703]	; 0x2bf
 80a07ec:	2b01      	cmp	r3, #1
 80a07ee:	d02a      	beq.n	80a0846 <_ZN13Google_OAuth213error_handlerEPKcS1_+0x86>
 80a07f0:	2b02      	cmp	r3, #2
 80a07f2:	d054      	beq.n	80a089e <_ZN13Google_OAuth213error_handlerEPKcS1_+0xde>
 80a07f4:	b91b      	cbnz	r3, 80a07fe <_ZN13Google_OAuth213error_handlerEPKcS1_+0x3e>
            http_error = "\r\nError: Invalid client id.";
 80a07f6:	4628      	mov	r0, r5
 80a07f8:	492c      	ldr	r1, [pc, #176]	; (80a08ac <_ZN13Google_OAuth213error_handlerEPKcS1_+0xec>)
 80a07fa:	f001 ff17 	bl	80a262c <_ZN6StringaSEPKc>
    if (http_status_code > 0 && http_status_code != HTTP_PRECONDITION_REQUIRED)
 80a07fe:	f8b4 32d4 	ldrh.w	r3, [r4, #724]	; 0x2d4
 80a0802:	b1f3      	cbz	r3, 80a0842 <_ZN13Google_OAuth213error_handlerEPKcS1_+0x82>
 80a0804:	f5b3 7fd6 	cmp.w	r3, #428	; 0x1ac
 80a0808:	d01b      	beq.n	80a0842 <_ZN13Google_OAuth213error_handlerEPKcS1_+0x82>
        Serial.println(http_error);
 80a080a:	f002 feb9 	bl	80a3580 <_Z16_fetch_usbserialv>
 80a080e:	f8d4 12c4 	ldr.w	r1, [r4, #708]	; 0x2c4
 80a0812:	f002 f84a 	bl	80a28aa <_ZN5Print7printlnEPKc>
        DEBUG_PRINT(http_error);
 80a0816:	f8d4 12c4 	ldr.w	r1, [r4, #708]	; 0x2c4
 80a081a:	a802      	add	r0, sp, #8
 80a081c:	f001 ffe8 	bl	80a27f0 <_ZN6String6formatEPKcz>
 80a0820:	9902      	ldr	r1, [sp, #8]
 80a0822:	4668      	mov	r0, sp
 80a0824:	f7ff fca4 	bl	80a0170 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>
 80a0828:	a801      	add	r0, sp, #4
 80a082a:	f7ff fd94 	bl	80a0356 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a082e:	a802      	add	r0, sp, #8
 80a0830:	f001 fe60 	bl	80a24f4 <_ZN6StringD1Ev>
    last_state = state;
 80a0834:	f894 32be 	ldrb.w	r3, [r4, #702]	; 0x2be
 80a0838:	f884 32bf 	strb.w	r3, [r4, #703]	; 0x2bf
    state = new_state;
 80a083c:	2305      	movs	r3, #5
 80a083e:	f884 32be 	strb.w	r3, [r4, #702]	; 0x2be
}
 80a0842:	b007      	add	sp, #28
 80a0844:	bd30      	pop	{r4, r5, pc}
            if (http_status_code == HTTP_PRECONDITION_REQUIRED)
 80a0846:	f8b4 32d4 	ldrh.w	r3, [r4, #724]	; 0x2d4
 80a084a:	f5b3 7fd6 	cmp.w	r3, #428	; 0x1ac
 80a084e:	d113      	bne.n	80a0878 <_ZN13Google_OAuth213error_handlerEPKcS1_+0xb8>
                Serial.println("Authorization pending...");
 80a0850:	f002 fe96 	bl	80a3580 <_Z16_fetch_usbserialv>
 80a0854:	4916      	ldr	r1, [pc, #88]	; (80a08b0 <_ZN13Google_OAuth213error_handlerEPKcS1_+0xf0>)
 80a0856:	f002 f828 	bl	80a28aa <_ZN5Print7printlnEPKc>
                DEBUG_PRINT("Authorization pending...");
 80a085a:	a802      	add	r0, sp, #8
 80a085c:	4914      	ldr	r1, [pc, #80]	; (80a08b0 <_ZN13Google_OAuth213error_handlerEPKcS1_+0xf0>)
 80a085e:	f001 ffc7 	bl	80a27f0 <_ZN6String6formatEPKcz>
 80a0862:	4668      	mov	r0, sp
 80a0864:	9902      	ldr	r1, [sp, #8]
 80a0866:	f7ff fc83 	bl	80a0170 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>
 80a086a:	a801      	add	r0, sp, #4
 80a086c:	f7ff fd73 	bl	80a0356 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0870:	a802      	add	r0, sp, #8
 80a0872:	f001 fe3f 	bl	80a24f4 <_ZN6StringD1Ev>
 80a0876:	e7c2      	b.n	80a07fe <_ZN13Google_OAuth213error_handlerEPKcS1_+0x3e>
            else if (http_status_code == HTTP_FORBIDDEN)
 80a0878:	f240 1293 	movw	r2, #403	; 0x193
 80a087c:	4293      	cmp	r3, r2
 80a087e:	d104      	bne.n	80a088a <_ZN13Google_OAuth213error_handlerEPKcS1_+0xca>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 80a0880:	490c      	ldr	r1, [pc, #48]	; (80a08b4 <_ZN13Google_OAuth213error_handlerEPKcS1_+0xf4>)
 80a0882:	4628      	mov	r0, r5
 80a0884:	f001 fefe 	bl	80a2684 <_ZN6String6concatEPKc>
 80a0888:	e7b9      	b.n	80a07fe <_ZN13Google_OAuth213error_handlerEPKcS1_+0x3e>
            else if (http_status_code == HTTP_UNAUTHORIZED)
 80a088a:	f240 1291 	movw	r2, #401	; 0x191
 80a088e:	4293      	cmp	r3, r2
 80a0890:	d101      	bne.n	80a0896 <_ZN13Google_OAuth213error_handlerEPKcS1_+0xd6>
 80a0892:	4909      	ldr	r1, [pc, #36]	; (80a08b8 <_ZN13Google_OAuth213error_handlerEPKcS1_+0xf8>)
 80a0894:	e7f5      	b.n	80a0882 <_ZN13Google_OAuth213error_handlerEPKcS1_+0xc2>
            else if (http_status_code > 0)
 80a0896:	2b00      	cmp	r3, #0
 80a0898:	d0b1      	beq.n	80a07fe <_ZN13Google_OAuth213error_handlerEPKcS1_+0x3e>
 80a089a:	4908      	ldr	r1, [pc, #32]	; (80a08bc <_ZN13Google_OAuth213error_handlerEPKcS1_+0xfc>)
 80a089c:	e7f1      	b.n	80a0882 <_ZN13Google_OAuth213error_handlerEPKcS1_+0xc2>
            erase_token();
 80a089e:	4620      	mov	r0, r4
 80a08a0:	f7ff fd49 	bl	80a0336 <_ZN13Google_OAuth211erase_tokenEv>
 80a08a4:	e7f9      	b.n	80a089a <_ZN13Google_OAuth213error_handlerEPKcS1_+0xda>
 80a08a6:	bf00      	nop
 80a08a8:	080a6af9 	.word	0x080a6af9
 80a08ac:	080a6b0b 	.word	0x080a6b0b
 80a08b0:	080a6b27 	.word	0x080a6b27
 80a08b4:	080a6b40 	.word	0x080a6b40
 80a08b8:	080a6b58 	.word	0x080a6b58
 80a08bc:	080a6b78 	.word	0x080a6b78

080a08c0 <_ZN13Google_OAuth214is_token_validEv>:
{
 80a08c0:	b530      	push	{r4, r5, lr}
 80a08c2:	b087      	sub	sp, #28
 80a08c4:	4605      	mov	r5, r0
    if (time_left()) 
 80a08c6:	f7ff fccb 	bl	80a0260 <_ZN13Google_OAuth29time_leftEv>
 80a08ca:	4604      	mov	r4, r0
 80a08cc:	b980      	cbnz	r0, 80a08f0 <_ZN13Google_OAuth214is_token_validEv+0x30>
        state = OAuth2_State::REFRESH_TOKEN;
 80a08ce:	2302      	movs	r3, #2
        DEBUG_PRINT("Token timeout: Refreshing...");
 80a08d0:	4909      	ldr	r1, [pc, #36]	; (80a08f8 <_ZN13Google_OAuth214is_token_validEv+0x38>)
        state = OAuth2_State::REFRESH_TOKEN;
 80a08d2:	f885 32be 	strb.w	r3, [r5, #702]	; 0x2be
        DEBUG_PRINT("Token timeout: Refreshing...");
 80a08d6:	a802      	add	r0, sp, #8
 80a08d8:	f001 ff8a 	bl	80a27f0 <_ZN6String6formatEPKcz>
 80a08dc:	4668      	mov	r0, sp
 80a08de:	9902      	ldr	r1, [sp, #8]
 80a08e0:	f7ff fc46 	bl	80a0170 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>
 80a08e4:	a801      	add	r0, sp, #4
 80a08e6:	f7ff fd36 	bl	80a0356 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a08ea:	a802      	add	r0, sp, #8
 80a08ec:	f001 fe02 	bl	80a24f4 <_ZN6StringD1Ev>
}
 80a08f0:	4620      	mov	r0, r4
 80a08f2:	b007      	add	sp, #28
 80a08f4:	bd30      	pop	{r4, r5, pc}
 80a08f6:	bf00      	nop
 80a08f8:	080a6b92 	.word	0x080a6b92

080a08fc <_ZN13Google_OAuth211print_errorEv>:
{
 80a08fc:	b510      	push	{r4, lr}
 80a08fe:	4604      	mov	r4, r0
 80a0900:	b086      	sub	sp, #24
    Serial.println(http_error);
 80a0902:	f002 fe3d 	bl	80a3580 <_Z16_fetch_usbserialv>
 80a0906:	f8d4 12c4 	ldr.w	r1, [r4, #708]	; 0x2c4
 80a090a:	f001 ffce 	bl	80a28aa <_ZN5Print7printlnEPKc>
    DEBUG_PRINT(http_error);
 80a090e:	f8d4 12c4 	ldr.w	r1, [r4, #708]	; 0x2c4
 80a0912:	a802      	add	r0, sp, #8
 80a0914:	f001 ff6c 	bl	80a27f0 <_ZN6String6formatEPKcz>
 80a0918:	9902      	ldr	r1, [sp, #8]
 80a091a:	4668      	mov	r0, sp
 80a091c:	f7ff fc28 	bl	80a0170 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>
 80a0920:	a801      	add	r0, sp, #4
 80a0922:	f7ff fd18 	bl	80a0356 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0926:	a802      	add	r0, sp, #8
 80a0928:	f001 fde4 	bl	80a24f4 <_ZN6StringD1Ev>
}
 80a092c:	b006      	add	sp, #24
 80a092e:	bd10      	pop	{r4, pc}

080a0930 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>:
    function(_Functor) -> function<_Signature>;
#endif

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a0930:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a0932:	2300      	movs	r3, #0
 80a0934:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 80a0936:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a0938:	4604      	mov	r4, r0
 80a093a:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a093c:	b12b      	cbz	r3, 80a094a <_ZNSt8functionIFvPKcS1_EEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a093e:	2202      	movs	r2, #2
 80a0940:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a0942:	68eb      	ldr	r3, [r5, #12]
 80a0944:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a0946:	68ab      	ldr	r3, [r5, #8]
 80a0948:	60a3      	str	r3, [r4, #8]
	}
    }
 80a094a:	4620      	mov	r0, r4
 80a094c:	bd38      	pop	{r3, r4, r5, pc}
	...

080a0950 <_ZN10CloudClass9subscribeI13Google_OAuth2EEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0.constprop.0>:
    bool subscribe(const char *eventName, void (T::*handler)(const char *, const char *), T *instance, Spark_Subscription_Scope_TypeDef scope)
 80a0950:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0952:	461f      	mov	r7, r3
    _Function_base() : _M_manager(nullptr) { }
 80a0954:	2300      	movs	r3, #0
 80a0956:	b091      	sub	sp, #68	; 0x44
 80a0958:	ad02      	add	r5, sp, #8
 80a095a:	e885 0006 	stmia.w	r5, {r1, r2}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a095e:	ac05      	add	r4, sp, #20
 80a0960:	4606      	mov	r6, r0
 80a0962:	e895 0003 	ldmia.w	r5, {r0, r1}
 80a0966:	e884 0005 	stmia.w	r4, {r0, r2}
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a096a:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
 80a096c:	930a      	str	r3, [sp, #40]	; 0x28
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a096e:	f7ff fb92 	bl	80a0096 <_Znwj>
 80a0972:	4602      	mov	r2, r0
 80a0974:	b120      	cbz	r0, 80a0980 <_ZN10CloudClass9subscribeI13Google_OAuth2EEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0.constprop.0+0x30>
	{ }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
 80a0976:	e894 0003 	ldmia.w	r4, {r0, r1}
 80a097a:	e882 0003 	stmia.w	r2, {r0, r1}
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a097e:	6097      	str	r7, [r2, #8]
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a0980:	4b13      	ldr	r3, [pc, #76]	; (80a09d0 <_ZN10CloudClass9subscribeI13Google_OAuth2EEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0.constprop.0+0x80>)
        return subscribe_wiring(eventName, handler, scope);
 80a0982:	a908      	add	r1, sp, #32
 80a0984:	930b      	str	r3, [sp, #44]	; 0x2c
	    _M_manager = &_My_handler::_M_manager;
 80a0986:	4b13      	ldr	r3, [pc, #76]	; (80a09d4 <_ZN10CloudClass9subscribeI13Google_OAuth2EEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0.constprop.0+0x84>)
 80a0988:	a80c      	add	r0, sp, #48	; 0x30
 80a098a:	930a      	str	r3, [sp, #40]	; 0x28
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a098c:	9208      	str	r2, [sp, #32]
 80a098e:	f7ff ffcf 	bl	80a0930 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
        if (handler) // if the call-wrapper has wrapped a callable object
 80a0992:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80a0994:	b94b      	cbnz	r3, 80a09aa <_ZN10CloudClass9subscribeI13Google_OAuth2EEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0.constprop.0+0x5a>
        bool success = false;
 80a0996:	2400      	movs	r4, #0
    class function<_Res(_ArgTypes...)>
 80a0998:	a80c      	add	r0, sp, #48	; 0x30
 80a099a:	f7ff fbfb 	bl	80a0194 <_ZNSt14_Function_baseD1Ev>
 80a099e:	a808      	add	r0, sp, #32
 80a09a0:	f7ff fbf8 	bl	80a0194 <_ZNSt14_Function_baseD1Ev>
    }
 80a09a4:	4620      	mov	r0, r4
 80a09a6:	b011      	add	sp, #68	; 0x44
 80a09a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
            auto wrapper = new wiring_event_handler_t(handler);
 80a09aa:	2010      	movs	r0, #16
 80a09ac:	f7ff fb73 	bl	80a0096 <_Znwj>
 80a09b0:	4604      	mov	r4, r0
 80a09b2:	2800      	cmp	r0, #0
 80a09b4:	d0ef      	beq.n	80a0996 <_ZN10CloudClass9subscribeI13Google_OAuth2EEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0.constprop.0+0x46>
 80a09b6:	a90c      	add	r1, sp, #48	; 0x30
 80a09b8:	f7ff ffba 	bl	80a0930 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
                success = spark_subscribe(eventName, (EventHandler)call_wiring_event_handler, wrapper, scope, deviceID, NULL);
 80a09bc:	2300      	movs	r3, #0
 80a09be:	4622      	mov	r2, r4
 80a09c0:	4630      	mov	r0, r6
 80a09c2:	e9cd 3300 	strd	r3, r3, [sp]
 80a09c6:	4904      	ldr	r1, [pc, #16]	; (80a09d8 <_ZN10CloudClass9subscribeI13Google_OAuth2EEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0.constprop.0+0x88>)
 80a09c8:	f001 fcd8 	bl	80a237c <spark_subscribe>
 80a09cc:	4604      	mov	r4, r0
 80a09ce:	e7e3      	b.n	80a0998 <_ZN10CloudClass9subscribeI13Google_OAuth2EEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0.constprop.0+0x48>
 80a09d0:	080a014f 	.word	0x080a014f
 80a09d4:	080a0111 	.word	0x080a0111
 80a09d8:	080a2f13 	.word	0x080a2f13

080a09dc <_ZN13Google_OAuth219subscribe_device_toERK6String>:
{
 80a09dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (!is_device_subscribed)
 80a09e0:	f890 72c0 	ldrb.w	r7, [r0, #704]	; 0x2c0
{
 80a09e4:	4606      	mov	r6, r0
 80a09e6:	4688      	mov	r8, r1
 80a09e8:	b090      	sub	sp, #64	; 0x40
    if (!is_device_subscribed)
 80a09ea:	2f00      	cmp	r7, #0
 80a09ec:	d14f      	bne.n	80a0a8e <_ZN13Google_OAuth219subscribe_device_toERK6String+0xb2>
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, long seconds = 0, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleepPinImpl(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, std::chrono::seconds s, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, s.count(), flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count()); }

    static String deviceID(void) { return spark_deviceID(); }
 80a09ee:	ac0c      	add	r4, sp, #48	; 0x30
        spark_unsubscribe(NULL);
 80a09f0:	4638      	mov	r0, r7
	StringSumHelper(const String &s) : String(s) {}
 80a09f2:	ad08      	add	r5, sp, #32
 80a09f4:	f001 fcca 	bl	80a238c <spark_unsubscribe>
 80a09f8:	4620      	mov	r0, r4
 80a09fa:	f001 fcaf 	bl	80a235c <spark_deviceID>
 80a09fe:	4621      	mov	r1, r4
 80a0a00:	4628      	mov	r0, r5
 80a0a02:	f001 fe00 	bl	80a2606 <_ZN6StringC1ERKS_>
        String hook_reponse = System.deviceID() + "/hook-response/" + event;
 80a0a06:	4923      	ldr	r1, [pc, #140]	; (80a0a94 <_ZN13Google_OAuth219subscribe_device_toERK6String+0xb8>)
 80a0a08:	4628      	mov	r0, r5
 80a0a0a:	f001 fe56 	bl	80a26ba <_ZplRK15StringSumHelperPKc>
 80a0a0e:	4641      	mov	r1, r8
 80a0a10:	f001 fe47 	bl	80a26a2 <_ZplRK15StringSumHelperRK6String>
 80a0a14:	4601      	mov	r1, r0
 80a0a16:	4668      	mov	r0, sp
 80a0a18:	f001 fdf5 	bl	80a2606 <_ZN6StringC1ERKS_>
class StringSumHelper : public String
 80a0a1c:	4628      	mov	r0, r5
 80a0a1e:	f001 fd69 	bl	80a24f4 <_ZN6StringD1Ev>
 80a0a22:	4620      	mov	r0, r4
 80a0a24:	f001 fd66 	bl	80a24f4 <_ZN6StringD1Ev>
 80a0a28:	4620      	mov	r0, r4
 80a0a2a:	f001 fc97 	bl	80a235c <spark_deviceID>
	StringSumHelper(const String &s) : String(s) {}
 80a0a2e:	4621      	mov	r1, r4
 80a0a30:	4628      	mov	r0, r5
 80a0a32:	f001 fde8 	bl	80a2606 <_ZN6StringC1ERKS_>
        String hook_error = System.deviceID() + "/hook-error/" + event;
 80a0a36:	4918      	ldr	r1, [pc, #96]	; (80a0a98 <_ZN13Google_OAuth219subscribe_device_toERK6String+0xbc>)
 80a0a38:	4628      	mov	r0, r5
 80a0a3a:	f001 fe3e 	bl	80a26ba <_ZplRK15StringSumHelperPKc>
 80a0a3e:	4641      	mov	r1, r8
 80a0a40:	f001 fe2f 	bl	80a26a2 <_ZplRK15StringSumHelperRK6String>
 80a0a44:	4601      	mov	r1, r0
 80a0a46:	a804      	add	r0, sp, #16
 80a0a48:	f001 fddd 	bl	80a2606 <_ZN6StringC1ERKS_>
class StringSumHelper : public String
 80a0a4c:	4628      	mov	r0, r5
 80a0a4e:	f001 fd51 	bl	80a24f4 <_ZN6StringD1Ev>
 80a0a52:	4620      	mov	r0, r4
 80a0a54:	f001 fd4e 	bl	80a24f4 <_ZN6StringD1Ev>
        Particle.subscribe(hook_reponse, &Google_OAuth2::response_handler, this, MY_DEVICES);
 80a0a58:	4b10      	ldr	r3, [pc, #64]	; (80a0a9c <_ZN13Google_OAuth219subscribe_device_toERK6String+0xc0>)
 80a0a5a:	9800      	ldr	r0, [sp, #0]
 80a0a5c:	e9cd 3708 	strd	r3, r7, [sp, #32]
 80a0a60:	4633      	mov	r3, r6
 80a0a62:	e895 0006 	ldmia.w	r5, {r1, r2}
 80a0a66:	f7ff ff73 	bl	80a0950 <_ZN10CloudClass9subscribeI13Google_OAuth2EEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0.constprop.0>
        Particle.subscribe(hook_error, &Google_OAuth2::error_handler, this, MY_DEVICES);
 80a0a6a:	4b0d      	ldr	r3, [pc, #52]	; (80a0aa0 <_ZN13Google_OAuth219subscribe_device_toERK6String+0xc4>)
 80a0a6c:	9804      	ldr	r0, [sp, #16]
 80a0a6e:	e9cd 370c 	strd	r3, r7, [sp, #48]	; 0x30
 80a0a72:	4633      	mov	r3, r6
 80a0a74:	e894 0006 	ldmia.w	r4, {r1, r2}
 80a0a78:	f7ff ff6a 	bl	80a0950 <_ZN10CloudClass9subscribeI13Google_OAuth2EEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0.constprop.0>
        is_device_subscribed = true;
 80a0a7c:	2301      	movs	r3, #1
        String hook_error = System.deviceID() + "/hook-error/" + event;
 80a0a7e:	a804      	add	r0, sp, #16
        is_device_subscribed = true;
 80a0a80:	f886 32c0 	strb.w	r3, [r6, #704]	; 0x2c0
        String hook_error = System.deviceID() + "/hook-error/" + event;
 80a0a84:	f001 fd36 	bl	80a24f4 <_ZN6StringD1Ev>
        String hook_reponse = System.deviceID() + "/hook-response/" + event;
 80a0a88:	4668      	mov	r0, sp
 80a0a8a:	f001 fd33 	bl	80a24f4 <_ZN6StringD1Ev>
}
 80a0a8e:	b010      	add	sp, #64	; 0x40
 80a0a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0a94:	080a6baf 	.word	0x080a6baf
 80a0a98:	080a6bbf 	.word	0x080a6bbf
 80a0a9c:	080a0601 	.word	0x080a0601
 80a0aa0:	080a07c1 	.word	0x080a07c1

080a0aa4 <_ZN13Google_OAuth24loopEv>:
{
 80a0aa4:	b510      	push	{r4, lr}
 80a0aa6:	4604      	mov	r4, r0
 80a0aa8:	b08c      	sub	sp, #48	; 0x30
    String data;
 80a0aaa:	4987      	ldr	r1, [pc, #540]	; (80a0cc8 <_ZN13Google_OAuth24loopEv+0x224>)
 80a0aac:	a804      	add	r0, sp, #16
 80a0aae:	f001 fd6b 	bl	80a2588 <_ZN6StringC1EPKc>
    switch (state)
 80a0ab2:	f894 32be 	ldrb.w	r3, [r4, #702]	; 0x2be
 80a0ab6:	2b04      	cmp	r3, #4
 80a0ab8:	f200 80f6 	bhi.w	80a0ca8 <_ZN13Google_OAuth24loopEv+0x204>
 80a0abc:	e8df f013 	tbh	[pc, r3, lsl #1]
 80a0ac0:	003e0005 	.word	0x003e0005
 80a0ac4:	00de009a 	.word	0x00de009a
 80a0ac8:	00c6      	.short	0x00c6
            subscribe_device_to(EVENT_REQ_USER_CODE);
 80a0aca:	4620      	mov	r0, r4
 80a0acc:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 80a0ad0:	f7ff ff84 	bl	80a09dc <_ZN13Google_OAuth219subscribe_device_toERK6String>
            data = String::format("{\"client_id\":\"%s\"}", CLIENT_ID.c_str());
 80a0ad4:	f8d4 223c 	ldr.w	r2, [r4, #572]	; 0x23c
 80a0ad8:	497c      	ldr	r1, [pc, #496]	; (80a0ccc <_ZN13Google_OAuth24loopEv+0x228>)
 80a0ada:	a808      	add	r0, sp, #32
 80a0adc:	f001 fe88 	bl	80a27f0 <_ZN6String6formatEPKcz>
 80a0ae0:	a908      	add	r1, sp, #32
 80a0ae2:	a804      	add	r0, sp, #16
 80a0ae4:	f001 fd9a 	bl	80a261c <_ZN6StringaSEOS_>
 80a0ae8:	a808      	add	r0, sp, #32
 80a0aea:	f001 fd03 	bl	80a24f4 <_ZN6StringD1Ev>
 80a0aee:	4b78      	ldr	r3, [pc, #480]	; (80a0cd0 <_ZN13Google_OAuth24loopEv+0x22c>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a0af0:	9a04      	ldr	r2, [sp, #16]
 80a0af2:	781b      	ldrb	r3, [r3, #0]
 80a0af4:	f8d4 120c 	ldr.w	r1, [r4, #524]	; 0x20c
 80a0af8:	f88d 3000 	strb.w	r3, [sp]
 80a0afc:	a808      	add	r0, sp, #32
 80a0afe:	233c      	movs	r3, #60	; 0x3c
 80a0b00:	f002 fb08 	bl	80a3114 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a0b04:	a809      	add	r0, sp, #36	; 0x24
 80a0b06:	f7ff fc26 	bl	80a0356 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            Serial.println("User code request sent!");
 80a0b0a:	f002 fd39 	bl	80a3580 <_Z16_fetch_usbserialv>
 80a0b0e:	4971      	ldr	r1, [pc, #452]	; (80a0cd4 <_ZN13Google_OAuth24loopEv+0x230>)
 80a0b10:	f001 fecb 	bl	80a28aa <_ZN5Print7printlnEPKc>
            DEBUG_PRINT("User code request sent!");
 80a0b14:	496f      	ldr	r1, [pc, #444]	; (80a0cd4 <_ZN13Google_OAuth24loopEv+0x230>)
            DEBUG_PRINT("Refresh token request sent");
 80a0b16:	a808      	add	r0, sp, #32
 80a0b18:	f001 fe6a 	bl	80a27f0 <_ZN6String6formatEPKcz>
 80a0b1c:	9908      	ldr	r1, [sp, #32]
 80a0b1e:	a802      	add	r0, sp, #8
 80a0b20:	f7ff fb26 	bl	80a0170 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>
 80a0b24:	a803      	add	r0, sp, #12
 80a0b26:	f7ff fc16 	bl	80a0356 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0b2a:	a808      	add	r0, sp, #32
 80a0b2c:	f001 fce2 	bl	80a24f4 <_ZN6StringD1Ev>
    last_state = state;
 80a0b30:	f894 32be 	ldrb.w	r3, [r4, #702]	; 0x2be
 80a0b34:	f884 32bf 	strb.w	r3, [r4, #703]	; 0x2bf
    state = new_state;
 80a0b38:	2304      	movs	r3, #4
 80a0b3a:	e03b      	b.n	80a0bb4 <_ZN13Google_OAuth24loopEv+0x110>
 80a0b3c:	f001 fa38 	bl	80a1fb0 <HAL_Timer_Get_Milli_Seconds>
            if (millis() > (polling_time + polling_rate * 2))
 80a0b40:	f8b4 22bc 	ldrh.w	r2, [r4, #700]	; 0x2bc
 80a0b44:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 80a0b48:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80a0b4c:	4283      	cmp	r3, r0
 80a0b4e:	d233      	bcs.n	80a0bb8 <_ZN13Google_OAuth24loopEv+0x114>
 80a0b50:	f001 fa2e 	bl	80a1fb0 <HAL_Timer_Get_Milli_Seconds>
                polling_time = millis();
 80a0b54:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
                if (time_left())
 80a0b58:	4620      	mov	r0, r4
 80a0b5a:	f7ff fb81 	bl	80a0260 <_ZN13Google_OAuth29time_leftEv>
 80a0b5e:	b380      	cbz	r0, 80a0bc2 <_ZN13Google_OAuth24loopEv+0x11e>
                    subscribe_device_to(EVENT_POLL_AUTH);
 80a0b60:	4620      	mov	r0, r4
 80a0b62:	f504 7107 	add.w	r1, r4, #540	; 0x21c
 80a0b66:	f7ff ff39 	bl	80a09dc <_ZN13Google_OAuth219subscribe_device_toERK6String>
                    data = String::format("{\"client_id\":\"%s\",\"client_secret\":\"%s\",\"code\":\"%s\"}",
 80a0b6a:	f8d4 325c 	ldr.w	r3, [r4, #604]	; 0x25c
 80a0b6e:	f8d4 223c 	ldr.w	r2, [r4, #572]	; 0x23c
 80a0b72:	4959      	ldr	r1, [pc, #356]	; (80a0cd8 <_ZN13Google_OAuth24loopEv+0x234>)
 80a0b74:	9300      	str	r3, [sp, #0]
 80a0b76:	a808      	add	r0, sp, #32
 80a0b78:	f8d4 324c 	ldr.w	r3, [r4, #588]	; 0x24c
 80a0b7c:	f001 fe38 	bl	80a27f0 <_ZN6String6formatEPKcz>
                                        CLIENT_ID.c_str(), CLIENT_SECRET.c_str(), device_code.c_str());
 80a0b80:	a908      	add	r1, sp, #32
 80a0b82:	a804      	add	r0, sp, #16
 80a0b84:	f001 fd4a 	bl	80a261c <_ZN6StringaSEOS_>
 80a0b88:	a808      	add	r0, sp, #32
 80a0b8a:	f001 fcb3 	bl	80a24f4 <_ZN6StringD1Ev>
 80a0b8e:	4b50      	ldr	r3, [pc, #320]	; (80a0cd0 <_ZN13Google_OAuth24loopEv+0x22c>)
 80a0b90:	9a04      	ldr	r2, [sp, #16]
 80a0b92:	781b      	ldrb	r3, [r3, #0]
 80a0b94:	f8d4 121c 	ldr.w	r1, [r4, #540]	; 0x21c
 80a0b98:	f88d 3000 	strb.w	r3, [sp]
 80a0b9c:	a808      	add	r0, sp, #32
 80a0b9e:	233c      	movs	r3, #60	; 0x3c
 80a0ba0:	f002 fab8 	bl	80a3114 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a0ba4:	a809      	add	r0, sp, #36	; 0x24
 80a0ba6:	f7ff fbd6 	bl	80a0356 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    last_state = state;
 80a0baa:	f894 32be 	ldrb.w	r3, [r4, #702]	; 0x2be
 80a0bae:	f884 32bf 	strb.w	r3, [r4, #703]	; 0x2bf
    state = new_state;
 80a0bb2:	2301      	movs	r3, #1
 80a0bb4:	f884 32be 	strb.w	r3, [r4, #702]	; 0x2be
    String data;
 80a0bb8:	a804      	add	r0, sp, #16
 80a0bba:	f001 fc9b 	bl	80a24f4 <_ZN6StringD1Ev>
}
 80a0bbe:	b00c      	add	sp, #48	; 0x30
 80a0bc0:	bd10      	pop	{r4, pc}
                    Serial.println("Error: User code has expired.");
 80a0bc2:	f002 fcdd 	bl	80a3580 <_Z16_fetch_usbserialv>
 80a0bc6:	4945      	ldr	r1, [pc, #276]	; (80a0cdc <_ZN13Google_OAuth24loopEv+0x238>)
 80a0bc8:	f001 fe6f 	bl	80a28aa <_ZN5Print7printlnEPKc>
                    DEBUG_PRINT("Error: User code has expired.");
 80a0bcc:	4943      	ldr	r1, [pc, #268]	; (80a0cdc <_ZN13Google_OAuth24loopEv+0x238>)
 80a0bce:	a808      	add	r0, sp, #32
 80a0bd0:	f001 fe0e 	bl	80a27f0 <_ZN6String6formatEPKcz>
 80a0bd4:	9908      	ldr	r1, [sp, #32]
 80a0bd6:	a802      	add	r0, sp, #8
 80a0bd8:	f7ff faca 	bl	80a0170 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>
 80a0bdc:	a803      	add	r0, sp, #12
 80a0bde:	f7ff fbba 	bl	80a0356 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0be2:	a808      	add	r0, sp, #32
 80a0be4:	f001 fc86 	bl	80a24f4 <_ZN6StringD1Ev>
    last_state = state;
 80a0be8:	f894 32be 	ldrb.w	r3, [r4, #702]	; 0x2be
 80a0bec:	f884 32bf 	strb.w	r3, [r4, #703]	; 0x2bf
    state = new_state;
 80a0bf0:	2305      	movs	r3, #5
 80a0bf2:	e7df      	b.n	80a0bb4 <_ZN13Google_OAuth24loopEv+0x110>
            subscribe_device_to(EVENT_REFRESH_TOKEN);
 80a0bf4:	4620      	mov	r0, r4
 80a0bf6:	f504 710b 	add.w	r1, r4, #556	; 0x22c
 80a0bfa:	f7ff feef 	bl	80a09dc <_ZN13Google_OAuth219subscribe_device_toERK6String>
            data = String::format("{\"refresh_token\":\"%s\",\"client_id\":\"%s\",\"client_secret\":\"%s\"}",
 80a0bfe:	f8d4 324c 	ldr.w	r3, [r4, #588]	; 0x24c
 80a0c02:	f8d4 229c 	ldr.w	r2, [r4, #668]	; 0x29c
 80a0c06:	4936      	ldr	r1, [pc, #216]	; (80a0ce0 <_ZN13Google_OAuth24loopEv+0x23c>)
 80a0c08:	9300      	str	r3, [sp, #0]
 80a0c0a:	a808      	add	r0, sp, #32
 80a0c0c:	f8d4 323c 	ldr.w	r3, [r4, #572]	; 0x23c
 80a0c10:	f001 fdee 	bl	80a27f0 <_ZN6String6formatEPKcz>
                                refresh_token.c_str(), CLIENT_ID.c_str(), CLIENT_SECRET.c_str());
 80a0c14:	a908      	add	r1, sp, #32
 80a0c16:	a804      	add	r0, sp, #16
 80a0c18:	f001 fd00 	bl	80a261c <_ZN6StringaSEOS_>
 80a0c1c:	a808      	add	r0, sp, #32
 80a0c1e:	f001 fc69 	bl	80a24f4 <_ZN6StringD1Ev>
 80a0c22:	4b2b      	ldr	r3, [pc, #172]	; (80a0cd0 <_ZN13Google_OAuth24loopEv+0x22c>)
 80a0c24:	9a04      	ldr	r2, [sp, #16]
 80a0c26:	781b      	ldrb	r3, [r3, #0]
 80a0c28:	f8d4 122c 	ldr.w	r1, [r4, #556]	; 0x22c
 80a0c2c:	f88d 3000 	strb.w	r3, [sp]
 80a0c30:	a808      	add	r0, sp, #32
 80a0c32:	233c      	movs	r3, #60	; 0x3c
 80a0c34:	f002 fa6e 	bl	80a3114 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a0c38:	a809      	add	r0, sp, #36	; 0x24
 80a0c3a:	f7ff fb8c 	bl	80a0356 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            Serial.println("Refresh token request sent");
 80a0c3e:	f002 fc9f 	bl	80a3580 <_Z16_fetch_usbserialv>
 80a0c42:	4928      	ldr	r1, [pc, #160]	; (80a0ce4 <_ZN13Google_OAuth24loopEv+0x240>)
 80a0c44:	f001 fe31 	bl	80a28aa <_ZN5Print7printlnEPKc>
            DEBUG_PRINT("Refresh token request sent");
 80a0c48:	4926      	ldr	r1, [pc, #152]	; (80a0ce4 <_ZN13Google_OAuth24loopEv+0x240>)
 80a0c4a:	e764      	b.n	80a0b16 <_ZN13Google_OAuth24loopEv+0x72>
            Serial.println("Waiting: OAuth2 response...");
 80a0c4c:	f002 fc98 	bl	80a3580 <_Z16_fetch_usbserialv>
 80a0c50:	4925      	ldr	r1, [pc, #148]	; (80a0ce8 <_ZN13Google_OAuth24loopEv+0x244>)
 80a0c52:	f001 fe2a 	bl	80a28aa <_ZN5Print7printlnEPKc>
            DEBUG_PRINT("Waiting: OAuth2 response...");            
 80a0c56:	a808      	add	r0, sp, #32
 80a0c58:	4923      	ldr	r1, [pc, #140]	; (80a0ce8 <_ZN13Google_OAuth24loopEv+0x244>)
 80a0c5a:	f001 fdc9 	bl	80a27f0 <_ZN6String6formatEPKcz>
 80a0c5e:	9908      	ldr	r1, [sp, #32]
 80a0c60:	a802      	add	r0, sp, #8
 80a0c62:	f7ff fa85 	bl	80a0170 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>
 80a0c66:	a803      	add	r0, sp, #12
 80a0c68:	f7ff fb75 	bl	80a0356 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0c6c:	a808      	add	r0, sp, #32
 80a0c6e:	f001 fc41 	bl	80a24f4 <_ZN6StringD1Ev>
            delay(5000);
 80a0c72:	f241 3088 	movw	r0, #5000	; 0x1388
 80a0c76:	f002 f823 	bl	80a2cc0 <delay>
            break;
 80a0c7a:	e79d      	b.n	80a0bb8 <_ZN13Google_OAuth24loopEv+0x114>
                delay(1000);
 80a0c7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a0c80:	f002 f81e 	bl	80a2cc0 <delay>
                DEBUG_PRINT("Device Authorized!");
 80a0c84:	a808      	add	r0, sp, #32
 80a0c86:	4919      	ldr	r1, [pc, #100]	; (80a0cec <_ZN13Google_OAuth24loopEv+0x248>)
 80a0c88:	f001 fdb2 	bl	80a27f0 <_ZN6String6formatEPKcz>
 80a0c8c:	9908      	ldr	r1, [sp, #32]
 80a0c8e:	a802      	add	r0, sp, #8
 80a0c90:	f7ff fa6e 	bl	80a0170 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>
 80a0c94:	a803      	add	r0, sp, #12
 80a0c96:	f7ff fb5e 	bl	80a0356 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0c9a:	a808      	add	r0, sp, #32
 80a0c9c:	f001 fc2a 	bl	80a24f4 <_ZN6StringD1Ev>
                read_token();
 80a0ca0:	4620      	mov	r0, r4
 80a0ca2:	f7ff fb28 	bl	80a02f6 <_ZN13Google_OAuth210read_tokenEv>
            break;
 80a0ca6:	e787      	b.n	80a0bb8 <_ZN13Google_OAuth24loopEv+0x114>
            DEBUG_PRINT("Loop: OAuth2_State Not Set!!!");
 80a0ca8:	a808      	add	r0, sp, #32
 80a0caa:	4911      	ldr	r1, [pc, #68]	; (80a0cf0 <_ZN13Google_OAuth24loopEv+0x24c>)
 80a0cac:	f001 fda0 	bl	80a27f0 <_ZN6String6formatEPKcz>
 80a0cb0:	9908      	ldr	r1, [sp, #32]
 80a0cb2:	a802      	add	r0, sp, #8
 80a0cb4:	f7ff fa5c 	bl	80a0170 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>
 80a0cb8:	a803      	add	r0, sp, #12
 80a0cba:	f7ff fb4c 	bl	80a0356 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0cbe:	a808      	add	r0, sp, #32
 80a0cc0:	f001 fc18 	bl	80a24f4 <_ZN6StringD1Ev>
            break;
 80a0cc4:	e778      	b.n	80a0bb8 <_ZN13Google_OAuth24loopEv+0x114>
 80a0cc6:	bf00      	nop
 80a0cc8:	080a6ac2 	.word	0x080a6ac2
 80a0ccc:	080a6bcc 	.word	0x080a6bcc
 80a0cd0:	20000245 	.word	0x20000245
 80a0cd4:	080a6bdf 	.word	0x080a6bdf
 80a0cd8:	080a6bf7 	.word	0x080a6bf7
 80a0cdc:	080a6c2b 	.word	0x080a6c2b
 80a0ce0:	080a6c49 	.word	0x080a6c49
 80a0ce4:	080a6c86 	.word	0x080a6c86
 80a0ce8:	080a6ca1 	.word	0x080a6ca1
 80a0cec:	080a6cbd 	.word	0x080a6cbd
 80a0cf0:	080a6cd0 	.word	0x080a6cd0

080a0cf4 <_GLOBAL__sub_I__ZN13Google_OAuth2C2ERK6StringS2_>:
        val_(val) {
 80a0cf4:	2200      	movs	r2, #0
 80a0cf6:	4b03      	ldr	r3, [pc, #12]	; (80a0d04 <_GLOBAL__sub_I__ZN13Google_OAuth2C2ERK6StringS2_+0x10>)
 80a0cf8:	701a      	strb	r2, [r3, #0]
 80a0cfa:	2201      	movs	r2, #1
 80a0cfc:	4b02      	ldr	r3, [pc, #8]	; (80a0d08 <_GLOBAL__sub_I__ZN13Google_OAuth2C2ERK6StringS2_+0x14>)
 80a0cfe:	701a      	strb	r2, [r3, #0]
}
 80a0d00:	4770      	bx	lr
 80a0d02:	bf00      	nop
 80a0d04:	20000244 	.word	0x20000244
 80a0d08:	20000245 	.word	0x20000245

080a0d0c <_ZNSt14_Function_base13_Base_managerISt5_BindIFM15Google_CalendarFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
	  switch (__op)
 80a0d0c:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a0d0e:	b538      	push	{r3, r4, r5, lr}
 80a0d10:	4604      	mov	r4, r0
	  switch (__op)
 80a0d12:	d007      	beq.n	80a0d24 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM15Google_CalendarFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x18>
 80a0d14:	2a03      	cmp	r2, #3
 80a0d16:	d011      	beq.n	80a0d3c <_ZNSt14_Function_base13_Base_managerISt5_BindIFM15Google_CalendarFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x30>
 80a0d18:	2a01      	cmp	r2, #1
 80a0d1a:	d101      	bne.n	80a0d20 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM15Google_CalendarFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80a0d1c:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
 80a0d1e:	6023      	str	r3, [r4, #0]
	}
 80a0d20:	2000      	movs	r0, #0
 80a0d22:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80a0d24:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
 80a0d26:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a0d28:	f7ff f9b5 	bl	80a0096 <_Znwj>
 80a0d2c:	4603      	mov	r3, r0
 80a0d2e:	2800      	cmp	r0, #0
 80a0d30:	d0f5      	beq.n	80a0d1e <_ZNSt14_Function_base13_Base_managerISt5_BindIFM15Google_CalendarFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
 80a0d32:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80a0d36:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80a0d3a:	e7f0      	b.n	80a0d1e <_ZNSt14_Function_base13_Base_managerISt5_BindIFM15Google_CalendarFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
	  delete __victim._M_access<_Functor*>();
 80a0d3c:	6800      	ldr	r0, [r0, #0]
 80a0d3e:	2800      	cmp	r0, #0
 80a0d40:	d0ee      	beq.n	80a0d20 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM15Google_CalendarFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>
 80a0d42:	210c      	movs	r1, #12
 80a0d44:	f002 ff0d 	bl	80a3b62 <_ZdlPvj>
 80a0d48:	e7ea      	b.n	80a0d20 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM15Google_CalendarFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>

080a0d4a <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM15Google_CalendarFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE9_M_invokeERKSt9_Any_dataOS1_SH_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a0d4a:	b470      	push	{r4, r5, r6}
	    return __source._M_access<_Functor*>();
 80a0d4c:	6803      	ldr	r3, [r0, #0]
	  return std::__invoke(_M_f,
 80a0d4e:	6809      	ldr	r1, [r1, #0]
 80a0d50:	685c      	ldr	r4, [r3, #4]
 80a0d52:	689d      	ldr	r5, [r3, #8]
 80a0d54:	1066      	asrs	r6, r4, #1
 80a0d56:	eb05 0064 	add.w	r0, r5, r4, asr #1
 80a0d5a:	07e4      	lsls	r4, r4, #31
 80a0d5c:	bf48      	it	mi
 80a0d5e:	59ac      	ldrmi	r4, [r5, r6]
 80a0d60:	681b      	ldr	r3, [r3, #0]
 80a0d62:	6812      	ldr	r2, [r2, #0]
 80a0d64:	bf48      	it	mi
 80a0d66:	58e3      	ldrmi	r3, [r4, r3]
      }
 80a0d68:	bc70      	pop	{r4, r5, r6}
 80a0d6a:	4718      	bx	r3

080a0d6c <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>:
inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
 80a0d6c:	b513      	push	{r0, r1, r4, lr}
 80a0d6e:	4604      	mov	r4, r0
 80a0d70:	4b05      	ldr	r3, [pc, #20]	; (80a0d88 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0+0x1c>)
 80a0d72:	460a      	mov	r2, r1
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 80a0d74:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a0d76:	4905      	ldr	r1, [pc, #20]	; (80a0d8c <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0+0x20>)
 80a0d78:	f88d 3000 	strb.w	r3, [sp]
 80a0d7c:	233c      	movs	r3, #60	; 0x3c
 80a0d7e:	f002 f9c9 	bl	80a3114 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
}
 80a0d82:	4620      	mov	r0, r4
 80a0d84:	b002      	add	sp, #8
 80a0d86:	bd10      	pop	{r4, pc}
 80a0d88:	20000246 	.word	0x20000246
 80a0d8c:	080a6978 	.word	0x080a6978

080a0d90 <_ZN15Google_CalendarC1ERK6StringRKa>:
//!                        as ID.
//!	@param[in] time_zone User time zone. It should be the same as the one use
//!                      in the Google Calendar app.
//
//*****************************************************************************
Google_Calendar::Google_Calendar(const String &calendar_id, const int8_t &time_zone)
 80a0d90:	b538      	push	{r3, r4, r5, lr}
 80a0d92:	4615      	mov	r5, r2
 80a0d94:	4604      	mov	r4, r0
    : CALENDAR_ID(calendar_id), TIME_ZONE(time_zone)
 80a0d96:	3004      	adds	r0, #4
 80a0d98:	f001 fc35 	bl	80a2606 <_ZN6StringC1ERKS_>
 80a0d9c:	782b      	ldrb	r3, [r5, #0]
 80a0d9e:	4d0f      	ldr	r5, [pc, #60]	; (80a0ddc <_ZN15Google_CalendarC1ERK6StringRKa+0x4c>)
 80a0da0:	7523      	strb	r3, [r4, #20]
 80a0da2:	4b0f      	ldr	r3, [pc, #60]	; (80a0de0 <_ZN15Google_CalendarC1ERK6StringRKa+0x50>)
 80a0da4:	490f      	ldr	r1, [pc, #60]	; (80a0de4 <_ZN15Google_CalendarC1ERK6StringRKa+0x54>)
 80a0da6:	61a3      	str	r3, [r4, #24]
 80a0da8:	f104 001c 	add.w	r0, r4, #28
 80a0dac:	f001 fbec 	bl	80a2588 <_ZN6StringC1EPKc>
 80a0db0:	4629      	mov	r1, r5
 80a0db2:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80a0db6:	f001 fbe7 	bl	80a2588 <_ZN6StringC1EPKc>
 80a0dba:	4629      	mov	r1, r5
 80a0dbc:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80a0dc0:	f001 fbe2 	bl	80a2588 <_ZN6StringC1EPKc>
 80a0dc4:	4629      	mov	r1, r5
 80a0dc6:	f104 006c 	add.w	r0, r4, #108	; 0x6c
 80a0dca:	f001 fbdd 	bl	80a2588 <_ZN6StringC1EPKc>
{
    callback = nullptr; 
 80a0dce:	2300      	movs	r3, #0
    event_pending = false;
}
 80a0dd0:	4620      	mov	r0, r4
    callback = nullptr; 
 80a0dd2:	6023      	str	r3, [r4, #0]
    event_pending = false;
 80a0dd4:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
}
 80a0dd8:	bd38      	pop	{r3, r4, r5, pc}
 80a0dda:	bf00      	nop
 80a0ddc:	080a6ac2 	.word	0x080a6ac2
 80a0de0:	006ddd00 	.word	0x006ddd00
 80a0de4:	080a6eee 	.word	0x080a6eee

080a0de8 <_ZN15Google_Calendar6failedEv>:
//! @return false if did not fail, true if failed.
//
//*****************************************************************************
bool Google_Calendar::failed(void)
{
    return http_status_code != HTTP_OK;
 80a0de8:	f8b0 007c 	ldrh.w	r0, [r0, #124]	; 0x7c
}
 80a0dec:	38c8      	subs	r0, #200	; 0xc8
 80a0dee:	bf18      	it	ne
 80a0df0:	2001      	movne	r0, #1
 80a0df2:	4770      	bx	lr

080a0df4 <_ZN15Google_Calendar16is_event_pendingEv>:
//
//*****************************************************************************
bool Google_Calendar::is_event_pending(void)
{
    return event_pending;
}
 80a0df4:	f890 0068 	ldrb.w	r0, [r0, #104]	; 0x68
 80a0df8:	4770      	bx	lr

080a0dfa <_ZN15Google_Calendar15get_event_titleEv>:
{
    return event_end_datetime;
}

String Google_Calendar::get_event_title(void)
{
 80a0dfa:	b510      	push	{r4, lr}
 80a0dfc:	4604      	mov	r4, r0
    return event_title;
 80a0dfe:	313c      	adds	r1, #60	; 0x3c
 80a0e00:	f001 fc01 	bl	80a2606 <_ZN6StringC1ERKS_>
}
 80a0e04:	4620      	mov	r0, r4
 80a0e06:	bd10      	pop	{r4, pc}

080a0e08 <_ZN15Google_Calendar7publishERK13Google_OAuth2>:
{
 80a0e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int16_t index = 0, last_index = 0;
 80a0e0c:	2500      	movs	r5, #0
{
 80a0e0e:	b0a3      	sub	sp, #140	; 0x8c
 80a0e10:	4604      	mov	r4, r0
 80a0e12:	9102      	str	r1, [sp, #8]
    int16_t index = 0, last_index = 0;
 80a0e14:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a0e18:	f8ad 501e 	strh.w	r5, [sp, #30]
         */
        String format(time_t t, const char* format_spec=NULL);

        inline String format(const char* format_spec=NULL)
        {
            return format(now(), format_spec);
 80a0e1c:	f001 fef1 	bl	80a2c02 <_ZN9TimeClass3nowEv>
 80a0e20:	f8df b1d8 	ldr.w	fp, [pc, #472]	; 80a0ffc <_ZN15Google_Calendar7publishERK13Google_OAuth2+0x1f4>
    String date = split_string(date_time, 'T', index, last_index);
 80a0e24:	f10d 061e 	add.w	r6, sp, #30
 80a0e28:	4602      	mov	r2, r0
 80a0e2a:	4659      	mov	r1, fp
 80a0e2c:	17c3      	asrs	r3, r0, #31
 80a0e2e:	9500      	str	r5, [sp, #0]
 80a0e30:	a80a      	add	r0, sp, #40	; 0x28
 80a0e32:	f001 fe87 	bl	80a2b44 <_ZN9TimeClass6formatExPKc>
 80a0e36:	ab07      	add	r3, sp, #28
 80a0e38:	2254      	movs	r2, #84	; 0x54
 80a0e3a:	a90a      	add	r1, sp, #40	; 0x28
 80a0e3c:	a80e      	add	r0, sp, #56	; 0x38
 80a0e3e:	9600      	str	r6, [sp, #0]
 80a0e40:	f7ff f937 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
    String time = split_string(date_time, date_time.charAt(19), index, last_index);
 80a0e44:	2113      	movs	r1, #19
 80a0e46:	a80a      	add	r0, sp, #40	; 0x28
 80a0e48:	f001 fc88 	bl	80a275c <_ZNK6String6charAtEj>
    String time_min = date + "T";
 80a0e4c:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 80a1000 <_ZN15Google_Calendar7publishERK13Google_OAuth2+0x1f8>
    String time = split_string(date_time, date_time.charAt(19), index, last_index);
 80a0e50:	4602      	mov	r2, r0
 80a0e52:	ab07      	add	r3, sp, #28
 80a0e54:	a90a      	add	r1, sp, #40	; 0x28
 80a0e56:	a812      	add	r0, sp, #72	; 0x48
 80a0e58:	9600      	str	r6, [sp, #0]
 80a0e5a:	f7ff f92a 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
	StringSumHelper(const String &s) : String(s) {}
 80a0e5e:	a90e      	add	r1, sp, #56	; 0x38
 80a0e60:	a81e      	add	r0, sp, #120	; 0x78
 80a0e62:	f001 fbd0 	bl	80a2606 <_ZN6StringC1ERKS_>
    String time_min = date + "T";
 80a0e66:	4651      	mov	r1, sl
 80a0e68:	a81e      	add	r0, sp, #120	; 0x78
 80a0e6a:	f001 fc26 	bl	80a26ba <_ZplRK15StringSumHelperPKc>
 80a0e6e:	4601      	mov	r1, r0
 80a0e70:	a816      	add	r0, sp, #88	; 0x58
 80a0e72:	f001 fbc8 	bl	80a2606 <_ZN6StringC1ERKS_>
    time_min += time + "-07:00";
 80a0e76:	f8df 918c 	ldr.w	r9, [pc, #396]	; 80a1004 <_ZN15Google_Calendar7publishERK13Google_OAuth2+0x1fc>
class StringSumHelper : public String
 80a0e7a:	a81e      	add	r0, sp, #120	; 0x78
 80a0e7c:	f001 fb3a 	bl	80a24f4 <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
 80a0e80:	a912      	add	r1, sp, #72	; 0x48
 80a0e82:	a81e      	add	r0, sp, #120	; 0x78
 80a0e84:	f001 fbbf 	bl	80a2606 <_ZN6StringC1ERKS_>
 80a0e88:	4649      	mov	r1, r9
 80a0e8a:	a81e      	add	r0, sp, #120	; 0x78
 80a0e8c:	f001 fc15 	bl	80a26ba <_ZplRK15StringSumHelperPKc>
 80a0e90:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80a0e92:	a816      	add	r0, sp, #88	; 0x58
 80a0e94:	f001 fbf2 	bl	80a267c <_ZN6String6concatERKS_>
class StringSumHelper : public String
 80a0e98:	a81e      	add	r0, sp, #120	; 0x78
 80a0e9a:	f001 fb2b 	bl	80a24f4 <_ZN6StringD1Ev>
    time_t raw_time = unix_time(Time.year(), Time.month(), Time.day(), 
 80a0e9e:	f001 fef9 	bl	80a2c94 <_ZN9TimeClass4yearEv>
 80a0ea2:	4607      	mov	r7, r0
 80a0ea4:	f001 feee 	bl	80a2c84 <_ZN9TimeClass5monthEv>
 80a0ea8:	4680      	mov	r8, r0
 80a0eaa:	f001 fedf 	bl	80a2c6c <_ZN9TimeClass3dayEv>
 80a0eae:	9005      	str	r0, [sp, #20]
 80a0eb0:	f001 feb8 	bl	80a2c24 <_ZN9TimeClass4hourEv>
 80a0eb4:	9004      	str	r0, [sp, #16]
 80a0eb6:	f001 fec1 	bl	80a2c3c <_ZN9TimeClass6minuteEv>
 80a0eba:	9003      	str	r0, [sp, #12]
 80a0ebc:	f001 feca 	bl	80a2c54 <_ZN9TimeClass6secondEv>
 80a0ec0:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80a0ec4:	9903      	ldr	r1, [sp, #12]
 80a0ec6:	9001      	str	r0, [sp, #4]
 80a0ec8:	9100      	str	r1, [sp, #0]
 80a0eca:	4638      	mov	r0, r7
 80a0ecc:	4641      	mov	r1, r8
 80a0ece:	f7ff f90a 	bl	80a00e6 <_Z9unix_timeiiiiii>
 80a0ed2:	4607      	mov	r7, r0
    Time.zone(+0);
 80a0ed4:	2000      	movs	r0, #0
    time_t raw_time = unix_time(Time.year(), Time.month(), Time.day(), 
 80a0ed6:	4688      	mov	r8, r1
    Time.zone(+0);
 80a0ed8:	f001 fd72 	bl	80a29c0 <_ZN9TimeClass4zoneEf>
    date_time = Time.format(raw_time + (SEARCH_TIME/1000));
 80a0edc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0ee0:	69a2      	ldr	r2, [r4, #24]
 80a0ee2:	a81e      	add	r0, sp, #120	; 0x78
 80a0ee4:	fb92 f2f3 	sdiv	r2, r2, r3
 80a0ee8:	4611      	mov	r1, r2
 80a0eea:	18ba      	adds	r2, r7, r2
 80a0eec:	eb48 73e1 	adc.w	r3, r8, r1, asr #31
 80a0ef0:	9500      	str	r5, [sp, #0]
 80a0ef2:	4659      	mov	r1, fp
    index = 0, last_index = 0;
 80a0ef4:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a0ef8:	f8ad 501e 	strh.w	r5, [sp, #30]
    date_time = Time.format(raw_time + (SEARCH_TIME/1000));
 80a0efc:	f001 fe22 	bl	80a2b44 <_ZN9TimeClass6formatExPKc>
 80a0f00:	a91e      	add	r1, sp, #120	; 0x78
 80a0f02:	a80a      	add	r0, sp, #40	; 0x28
 80a0f04:	f001 fb8a 	bl	80a261c <_ZN6StringaSEOS_>
 80a0f08:	a81e      	add	r0, sp, #120	; 0x78
 80a0f0a:	f001 faf3 	bl	80a24f4 <_ZN6StringD1Ev>
    date = split_string(date_time, 'T', index, last_index);
 80a0f0e:	ab07      	add	r3, sp, #28
 80a0f10:	2254      	movs	r2, #84	; 0x54
 80a0f12:	a90a      	add	r1, sp, #40	; 0x28
 80a0f14:	a81e      	add	r0, sp, #120	; 0x78
 80a0f16:	9600      	str	r6, [sp, #0]
 80a0f18:	f7ff f8cb 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
 80a0f1c:	a91e      	add	r1, sp, #120	; 0x78
 80a0f1e:	a80e      	add	r0, sp, #56	; 0x38
 80a0f20:	f001 fb7c 	bl	80a261c <_ZN6StringaSEOS_>
 80a0f24:	a81e      	add	r0, sp, #120	; 0x78
 80a0f26:	f001 fae5 	bl	80a24f4 <_ZN6StringD1Ev>
    time = split_string(date_time, date_time.charAt(19), index, last_index);
 80a0f2a:	2113      	movs	r1, #19
 80a0f2c:	a80a      	add	r0, sp, #40	; 0x28
 80a0f2e:	f001 fc15 	bl	80a275c <_ZNK6String6charAtEj>
 80a0f32:	ab07      	add	r3, sp, #28
 80a0f34:	4602      	mov	r2, r0
 80a0f36:	a90a      	add	r1, sp, #40	; 0x28
 80a0f38:	a81e      	add	r0, sp, #120	; 0x78
 80a0f3a:	9600      	str	r6, [sp, #0]
 80a0f3c:	f7ff f8b9 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
 80a0f40:	a91e      	add	r1, sp, #120	; 0x78
 80a0f42:	a812      	add	r0, sp, #72	; 0x48
 80a0f44:	f001 fb6a 	bl	80a261c <_ZN6StringaSEOS_>
 80a0f48:	a81e      	add	r0, sp, #120	; 0x78
 80a0f4a:	f001 fad3 	bl	80a24f4 <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
 80a0f4e:	a90e      	add	r1, sp, #56	; 0x38
 80a0f50:	a81e      	add	r0, sp, #120	; 0x78
 80a0f52:	f001 fb58 	bl	80a2606 <_ZN6StringC1ERKS_>
    String time_max = date + "T";
 80a0f56:	4651      	mov	r1, sl
 80a0f58:	a81e      	add	r0, sp, #120	; 0x78
 80a0f5a:	f001 fbae 	bl	80a26ba <_ZplRK15StringSumHelperPKc>
 80a0f5e:	4601      	mov	r1, r0
 80a0f60:	a81a      	add	r0, sp, #104	; 0x68
 80a0f62:	f001 fb50 	bl	80a2606 <_ZN6StringC1ERKS_>
class StringSumHelper : public String
 80a0f66:	a81e      	add	r0, sp, #120	; 0x78
 80a0f68:	f001 fac4 	bl	80a24f4 <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
 80a0f6c:	a912      	add	r1, sp, #72	; 0x48
 80a0f6e:	a81e      	add	r0, sp, #120	; 0x78
 80a0f70:	f001 fb49 	bl	80a2606 <_ZN6StringC1ERKS_>
    time_max += time + "-07:00";
 80a0f74:	4649      	mov	r1, r9
 80a0f76:	a81e      	add	r0, sp, #120	; 0x78
 80a0f78:	f001 fb9f 	bl	80a26ba <_ZplRK15StringSumHelperPKc>
 80a0f7c:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80a0f7e:	a81a      	add	r0, sp, #104	; 0x68
 80a0f80:	f001 fb7c 	bl	80a267c <_ZN6String6concatERKS_>
class StringSumHelper : public String
 80a0f84:	a81e      	add	r0, sp, #120	; 0x78
 80a0f86:	f001 fab5 	bl	80a24f4 <_ZN6StringD1Ev>
    Time.zone(TIME_ZONE);
 80a0f8a:	f994 0014 	ldrsb.w	r0, [r4, #20]
 80a0f8e:	f003 fa97 	bl	80a44c0 <__aeabi_i2f>
 80a0f92:	f001 fd15 	bl	80a29c0 <_ZN9TimeClass4zoneEf>
                                 CALENDAR_ID.c_str(), oauth2.access_token.c_str(), time_min.c_str(), time_max.c_str());
 80a0f96:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80a0f98:	6862      	ldr	r2, [r4, #4]
 80a0f9a:	9301      	str	r3, [sp, #4]
 80a0f9c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80a0f9e:	a81e      	add	r0, sp, #120	; 0x78
 80a0fa0:	9300      	str	r3, [sp, #0]
 80a0fa2:	9b02      	ldr	r3, [sp, #8]
 80a0fa4:	4913      	ldr	r1, [pc, #76]	; (80a0ff4 <_ZN15Google_Calendar7publishERK13Google_OAuth2+0x1ec>)
 80a0fa6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80a0faa:	f001 fc21 	bl	80a27f0 <_ZN6String6formatEPKcz>
 80a0fae:	4b12      	ldr	r3, [pc, #72]	; (80a0ff8 <_ZN15Google_Calendar7publishERK13Google_OAuth2+0x1f0>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a0fb0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80a0fb2:	781b      	ldrb	r3, [r3, #0]
 80a0fb4:	69e1      	ldr	r1, [r4, #28]
 80a0fb6:	f88d 3000 	strb.w	r3, [sp]
 80a0fba:	a808      	add	r0, sp, #32
 80a0fbc:	233c      	movs	r3, #60	; 0x3c
 80a0fbe:	f002 f8a9 	bl	80a3114 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a0fc2:	a809      	add	r0, sp, #36	; 0x24
 80a0fc4:	f7ff f9c7 	bl	80a0356 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0fc8:	a81e      	add	r0, sp, #120	; 0x78
 80a0fca:	f001 fa93 	bl	80a24f4 <_ZN6StringD1Ev>
    String time_max = date + "T";
 80a0fce:	a81a      	add	r0, sp, #104	; 0x68
 80a0fd0:	f001 fa90 	bl	80a24f4 <_ZN6StringD1Ev>
    String time_min = date + "T";
 80a0fd4:	a816      	add	r0, sp, #88	; 0x58
 80a0fd6:	f001 fa8d 	bl	80a24f4 <_ZN6StringD1Ev>
    String time = split_string(date_time, date_time.charAt(19), index, last_index);
 80a0fda:	a812      	add	r0, sp, #72	; 0x48
 80a0fdc:	f001 fa8a 	bl	80a24f4 <_ZN6StringD1Ev>
    String date = split_string(date_time, 'T', index, last_index);
 80a0fe0:	a80e      	add	r0, sp, #56	; 0x38
 80a0fe2:	f001 fa87 	bl	80a24f4 <_ZN6StringD1Ev>
    String date_time = Time.format();
 80a0fe6:	a80a      	add	r0, sp, #40	; 0x28
 80a0fe8:	f001 fa84 	bl	80a24f4 <_ZN6StringD1Ev>
}
 80a0fec:	b023      	add	sp, #140	; 0x8c
 80a0fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0ff2:	bf00      	nop
 80a0ff4:	080a6f04 	.word	0x080a6f04
 80a0ff8:	20000247 	.word	0x20000247
 80a0ffc:	2000063c 	.word	0x2000063c
 80a1000:	080a7775 	.word	0x080a7775
 80a1004:	080a6efd 	.word	0x080a6efd

080a1008 <_ZN15Google_Calendar11print_errorEv>:
{
 80a1008:	b510      	push	{r4, lr}
 80a100a:	4604      	mov	r4, r0
 80a100c:	b086      	sub	sp, #24
    Serial.println(http_error);
 80a100e:	f002 fab7 	bl	80a3580 <_Z16_fetch_usbserialv>
 80a1012:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80a1014:	f001 fc49 	bl	80a28aa <_ZN5Print7printlnEPKc>
    DEBUG_PRINT(http_error);
 80a1018:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80a101a:	a802      	add	r0, sp, #8
 80a101c:	f001 fbe8 	bl	80a27f0 <_ZN6String6formatEPKcz>
 80a1020:	9902      	ldr	r1, [sp, #8]
 80a1022:	4668      	mov	r0, sp
 80a1024:	f7ff fea2 	bl	80a0d6c <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>
 80a1028:	a801      	add	r0, sp, #4
 80a102a:	f7ff f994 	bl	80a0356 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a102e:	a802      	add	r0, sp, #8
 80a1030:	f001 fa60 	bl	80a24f4 <_ZN6StringD1Ev>
}
 80a1034:	b006      	add	sp, #24
 80a1036:	bd10      	pop	{r4, pc}

080a1038 <_ZN15Google_Calendar18get_time_remainingEv>:
int32_t Google_Calendar::get_time_remaining(void) {
 80a1038:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a103c:	b091      	sub	sp, #68	; 0x44
 80a103e:	4604      	mov	r4, r0
    time_t current_time = unix_time(Time.year(), Time.month(), Time.day(),
 80a1040:	f001 fe28 	bl	80a2c94 <_ZN9TimeClass4yearEv>
 80a1044:	4605      	mov	r5, r0
 80a1046:	f001 fe1d 	bl	80a2c84 <_ZN9TimeClass5monthEv>
 80a104a:	4606      	mov	r6, r0
 80a104c:	f001 fe0e 	bl	80a2c6c <_ZN9TimeClass3dayEv>
 80a1050:	4607      	mov	r7, r0
 80a1052:	f001 fde7 	bl	80a2c24 <_ZN9TimeClass4hourEv>
 80a1056:	4680      	mov	r8, r0
 80a1058:	f001 fdf0 	bl	80a2c3c <_ZN9TimeClass6minuteEv>
 80a105c:	4681      	mov	r9, r0
 80a105e:	f001 fdf9 	bl	80a2c54 <_ZN9TimeClass6secondEv>
 80a1062:	4643      	mov	r3, r8
 80a1064:	463a      	mov	r2, r7
 80a1066:	e9cd 9000 	strd	r9, r0, [sp]
 80a106a:	4631      	mov	r1, r6
 80a106c:	4628      	mov	r0, r5
 80a106e:	f7ff f83a 	bl	80a00e6 <_Z9unix_timeiiiiii>
 80a1072:	460b      	mov	r3, r1
    if (is_event_pending()) {
 80a1074:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
    time_t current_time = unix_time(Time.year(), Time.month(), Time.day(),
 80a1078:	4602      	mov	r2, r0
    if (is_event_pending()) {
 80a107a:	2900      	cmp	r1, #0
 80a107c:	d03c      	beq.n	80a10f8 <_ZN15Google_Calendar18get_time_remainingEv+0xc0>
        if ((event_start_datetime <= current_time) && (event_end_datetime >= current_time)) {
 80a107e:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
 80a1082:	4282      	cmp	r2, r0
 80a1084:	eb73 0501 	sbcs.w	r5, r3, r1
 80a1088:	db31      	blt.n	80a10ee <_ZN15Google_Calendar18get_time_remainingEv+0xb6>
 80a108a:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
 80a108e:	4290      	cmp	r0, r2
 80a1090:	eb71 0503 	sbcs.w	r5, r1, r3
 80a1094:	db2d      	blt.n	80a10f2 <_ZN15Google_Calendar18get_time_remainingEv+0xba>
            time_left = current_time - event_end_datetime;
 80a1096:	1a12      	subs	r2, r2, r0
            time_left = event_start_datetime - current_time;
 80a1098:	6622      	str	r2, [r4, #96]	; 0x60
    int hours = abs(time_left) / 3600;
 80a109a:	f44f 6261 	mov.w	r2, #3600	; 0xe10

  using ::abs;

#ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  inline long
  abs(long __i) { return __builtin_labs(__i); }
 80a109e:	6e21      	ldr	r1, [r4, #96]	; 0x60
    int seconds = (abs(time_left) - (hours * 3600) - (minutes * 60));
 80a10a0:	f06f 003b 	mvn.w	r0, #59	; 0x3b
 80a10a4:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
 80a10a8:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
    int hours = abs(time_left) / 3600;
 80a10ac:	fbb3 f2f2 	udiv	r2, r3, r2
    int minutes = (abs(time_left) - (hours * 3600) )/ 60;
 80a10b0:	4914      	ldr	r1, [pc, #80]	; (80a1104 <_ZN15Google_Calendar18get_time_remainingEv+0xcc>)
 80a10b2:	fb01 3102 	mla	r1, r1, r2, r3
 80a10b6:	233c      	movs	r3, #60	; 0x3c
 80a10b8:	fb91 f3f3 	sdiv	r3, r1, r3
    int seconds = (abs(time_left) - (hours * 3600) - (minutes * 60));
 80a10bc:	fb00 1103 	mla	r1, r0, r3, r1
    sprintf(statusText, "Time left: %d:%02d:%02d", hours , minutes, seconds);
 80a10c0:	a808      	add	r0, sp, #32
 80a10c2:	9100      	str	r1, [sp, #0]
 80a10c4:	4910      	ldr	r1, [pc, #64]	; (80a1108 <_ZN15Google_Calendar18get_time_remainingEv+0xd0>)
 80a10c6:	f001 f991 	bl	80a23ec <sprintf>
    DEBUG_PRINT(statusText);
 80a10ca:	a908      	add	r1, sp, #32
 80a10cc:	a804      	add	r0, sp, #16
 80a10ce:	f001 fb8f 	bl	80a27f0 <_ZN6String6formatEPKcz>
 80a10d2:	9904      	ldr	r1, [sp, #16]
 80a10d4:	a802      	add	r0, sp, #8
 80a10d6:	f7ff fe49 	bl	80a0d6c <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>
 80a10da:	a803      	add	r0, sp, #12
 80a10dc:	f7ff f93b 	bl	80a0356 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a10e0:	a804      	add	r0, sp, #16
 80a10e2:	f001 fa07 	bl	80a24f4 <_ZN6StringD1Ev>
}
 80a10e6:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80a10e8:	b011      	add	sp, #68	; 0x44
 80a10ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            time_left = event_start_datetime - current_time;
 80a10ee:	1a82      	subs	r2, r0, r2
 80a10f0:	e7d2      	b.n	80a1098 <_ZN15Google_Calendar18get_time_remainingEv+0x60>
            time_left = 0;
 80a10f2:	2300      	movs	r3, #0
        time_left = SEARCH_TIME / 1000 ;
 80a10f4:	6623      	str	r3, [r4, #96]	; 0x60
 80a10f6:	e7d0      	b.n	80a109a <_ZN15Google_Calendar18get_time_remainingEv+0x62>
 80a10f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a10fc:	69a3      	ldr	r3, [r4, #24]
 80a10fe:	fb93 f3f2 	sdiv	r3, r3, r2
 80a1102:	e7f7      	b.n	80a10f4 <_ZN15Google_Calendar18get_time_remainingEv+0xbc>
 80a1104:	fffff1f0 	.word	0xfffff1f0
 80a1108:	080a6f4d 	.word	0x080a6f4d

080a110c <_ZN15Google_Calendar16convert_datetimeE6String>:

time_t Google_Calendar::convert_datetime(String event_date_time) {
    //  The event start date and time is a string RFC3339 timestamp.
    //  i.e. 2011-06-03T10:00:00-07:00.
    //  It is splited and converted into a unix timestamp.
    int16_t index = 0, last_index = 0;
 80a110c:	2300      	movs	r3, #0
time_t Google_Calendar::convert_datetime(String event_date_time) {
 80a110e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1112:	b095      	sub	sp, #84	; 0x54
    int year = split_string(event_date_time, '-', index, last_index).toInt();
 80a1114:	f10d 0516 	add.w	r5, sp, #22
 80a1118:	222d      	movs	r2, #45	; 0x2d
    int16_t index = 0, last_index = 0;
 80a111a:	f8ad 3014 	strh.w	r3, [sp, #20]
 80a111e:	f8ad 3016 	strh.w	r3, [sp, #22]
    int year = split_string(event_date_time, '-', index, last_index).toInt();
 80a1122:	9500      	str	r5, [sp, #0]
 80a1124:	ab05      	add	r3, sp, #20
 80a1126:	a80c      	add	r0, sp, #48	; 0x30
time_t Google_Calendar::convert_datetime(String event_date_time) {
 80a1128:	460c      	mov	r4, r1
    int year = split_string(event_date_time, '-', index, last_index).toInt();
 80a112a:	f7fe ffc2 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
 80a112e:	a80c      	add	r0, sp, #48	; 0x30
 80a1130:	f001 fb58 	bl	80a27e4 <_ZNK6String5toIntEv>
 80a1134:	4606      	mov	r6, r0
 80a1136:	a80c      	add	r0, sp, #48	; 0x30
 80a1138:	f001 f9dc 	bl	80a24f4 <_ZN6StringD1Ev>
    int month = split_string(event_date_time, '-', index, last_index).toInt();
 80a113c:	4621      	mov	r1, r4
 80a113e:	ab05      	add	r3, sp, #20
 80a1140:	222d      	movs	r2, #45	; 0x2d
 80a1142:	9500      	str	r5, [sp, #0]
 80a1144:	a80c      	add	r0, sp, #48	; 0x30
 80a1146:	f7fe ffb4 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
 80a114a:	a80c      	add	r0, sp, #48	; 0x30
 80a114c:	f001 fb4a 	bl	80a27e4 <_ZNK6String5toIntEv>
 80a1150:	4607      	mov	r7, r0
 80a1152:	a80c      	add	r0, sp, #48	; 0x30
 80a1154:	f001 f9ce 	bl	80a24f4 <_ZN6StringD1Ev>
    int day = split_string(event_date_time, 'T', index, last_index).toInt();
 80a1158:	4621      	mov	r1, r4
 80a115a:	ab05      	add	r3, sp, #20
 80a115c:	2254      	movs	r2, #84	; 0x54
 80a115e:	9500      	str	r5, [sp, #0]
 80a1160:	a80c      	add	r0, sp, #48	; 0x30
 80a1162:	f7fe ffa6 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
 80a1166:	a80c      	add	r0, sp, #48	; 0x30
 80a1168:	f001 fb3c 	bl	80a27e4 <_ZNK6String5toIntEv>
 80a116c:	4680      	mov	r8, r0
 80a116e:	a80c      	add	r0, sp, #48	; 0x30
 80a1170:	f001 f9c0 	bl	80a24f4 <_ZN6StringD1Ev>
    int hour = split_string(event_date_time, ':', index, last_index).toInt();
 80a1174:	4621      	mov	r1, r4
 80a1176:	ab05      	add	r3, sp, #20
 80a1178:	223a      	movs	r2, #58	; 0x3a
 80a117a:	9500      	str	r5, [sp, #0]
 80a117c:	a80c      	add	r0, sp, #48	; 0x30
 80a117e:	f7fe ff98 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
 80a1182:	a80c      	add	r0, sp, #48	; 0x30
 80a1184:	f001 fb2e 	bl	80a27e4 <_ZNK6String5toIntEv>
 80a1188:	4681      	mov	r9, r0
 80a118a:	a80c      	add	r0, sp, #48	; 0x30
 80a118c:	f001 f9b2 	bl	80a24f4 <_ZN6StringD1Ev>
    int min = split_string(event_date_time, ':', index, last_index).toInt();
 80a1190:	ab05      	add	r3, sp, #20
 80a1192:	223a      	movs	r2, #58	; 0x3a
 80a1194:	4621      	mov	r1, r4
 80a1196:	9500      	str	r5, [sp, #0]
 80a1198:	a80c      	add	r0, sp, #48	; 0x30
 80a119a:	f7fe ff8a 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
 80a119e:	a80c      	add	r0, sp, #48	; 0x30
 80a11a0:	f001 fb20 	bl	80a27e4 <_ZNK6String5toIntEv>
 80a11a4:	4682      	mov	sl, r0
 80a11a6:	a80c      	add	r0, sp, #48	; 0x30
 80a11a8:	f001 f9a4 	bl	80a24f4 <_ZN6StringD1Ev>
    int sec = split_string(event_date_time, event_date_time.charAt(19), index, last_index).toInt();
 80a11ac:	2113      	movs	r1, #19
 80a11ae:	4620      	mov	r0, r4
 80a11b0:	f001 fad4 	bl	80a275c <_ZNK6String6charAtEj>
 80a11b4:	4621      	mov	r1, r4
 80a11b6:	4602      	mov	r2, r0
 80a11b8:	ab05      	add	r3, sp, #20
 80a11ba:	9500      	str	r5, [sp, #0]
 80a11bc:	a80c      	add	r0, sp, #48	; 0x30
 80a11be:	f7fe ff78 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
 80a11c2:	a80c      	add	r0, sp, #48	; 0x30
 80a11c4:	f001 fb0e 	bl	80a27e4 <_ZNK6String5toIntEv>
 80a11c8:	4604      	mov	r4, r0
 80a11ca:	a80c      	add	r0, sp, #48	; 0x30
 80a11cc:	f001 f992 	bl	80a24f4 <_ZN6StringD1Ev>
    time_t event_time = unix_time(year, month, day, hour, min, sec);
 80a11d0:	464b      	mov	r3, r9
 80a11d2:	4642      	mov	r2, r8
 80a11d4:	4639      	mov	r1, r7
 80a11d6:	4630      	mov	r0, r6
 80a11d8:	e9cd a400 	strd	sl, r4, [sp]
 80a11dc:	f7fe ff83 	bl	80a00e6 <_Z9unix_timeiiiiii>
 80a11e0:	4683      	mov	fp, r0
 80a11e2:	460d      	mov	r5, r1
    //  Change to UTC+0:00 since the unix timestamp already considers the user time zone.
    char  statusText[32];
    sprintf(statusText, "%d-%d-%d %d:%02d:%02d", year,month,day,hour,min,sec);
 80a11e4:	463b      	mov	r3, r7
 80a11e6:	4632      	mov	r2, r6
 80a11e8:	490f      	ldr	r1, [pc, #60]	; (80a1228 <_ZN15Google_Calendar16convert_datetimeE6String+0x11c>)
 80a11ea:	e9cd a402 	strd	sl, r4, [sp, #8]
 80a11ee:	e9cd 8900 	strd	r8, r9, [sp]
 80a11f2:	a80c      	add	r0, sp, #48	; 0x30
 80a11f4:	f001 f8fa 	bl	80a23ec <sprintf>
    delay(1000);
 80a11f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a11fc:	f001 fd60 	bl	80a2cc0 <delay>
    DEBUG_PRINT(statusText);
 80a1200:	a90c      	add	r1, sp, #48	; 0x30
 80a1202:	a808      	add	r0, sp, #32
 80a1204:	f001 faf4 	bl	80a27f0 <_ZN6String6formatEPKcz>
 80a1208:	9908      	ldr	r1, [sp, #32]
 80a120a:	a806      	add	r0, sp, #24
 80a120c:	f7ff fdae 	bl	80a0d6c <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>
 80a1210:	a807      	add	r0, sp, #28
 80a1212:	f7ff f8a0 	bl	80a0356 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1216:	a808      	add	r0, sp, #32
 80a1218:	f001 f96c 	bl	80a24f4 <_ZN6StringD1Ev>
    return event_time;
}
 80a121c:	4658      	mov	r0, fp
 80a121e:	4629      	mov	r1, r5
 80a1220:	b015      	add	sp, #84	; 0x54
 80a1222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1226:	bf00      	nop
 80a1228:	080a6f65 	.word	0x080a6f65

080a122c <_ZN15Google_Calendar6parserEPKcS1_>:
{
 80a122c:	b5f0      	push	{r4, r5, r6, r7, lr}
    int16_t index = 0, last_index = 0;
 80a122e:	2600      	movs	r6, #0
{
 80a1230:	460d      	mov	r5, r1
 80a1232:	b09d      	sub	sp, #116	; 0x74
    String str_data = String(data);
 80a1234:	4611      	mov	r1, r2
{
 80a1236:	4604      	mov	r4, r0
    String str_data = String(data);
 80a1238:	a804      	add	r0, sp, #16
    int16_t index = 0, last_index = 0;
 80a123a:	f8ad 600c 	strh.w	r6, [sp, #12]
 80a123e:	f8ad 600e 	strh.w	r6, [sp, #14]
    String str_data = String(data);
 80a1242:	f001 f9a1 	bl	80a2588 <_ZN6StringC1EPKc>
    String str_event = String(event);
 80a1246:	4629      	mov	r1, r5
 80a1248:	a808      	add	r0, sp, #32
 80a124a:	f001 f99d 	bl	80a2588 <_ZN6StringC1EPKc>
    String event_start;
 80a124e:	4957      	ldr	r1, [pc, #348]	; (80a13ac <_ZN15Google_Calendar6parserEPKcS1_+0x180>)
 80a1250:	a80c      	add	r0, sp, #48	; 0x30
 80a1252:	f001 f999 	bl	80a2588 <_ZN6StringC1EPKc>
    split_string(str_event, '/', index, last_index); // skip deviceID.
 80a1256:	f10d 050e 	add.w	r5, sp, #14
    String event_end; 
 80a125a:	4954      	ldr	r1, [pc, #336]	; (80a13ac <_ZN15Google_Calendar6parserEPKcS1_+0x180>)
 80a125c:	a810      	add	r0, sp, #64	; 0x40
 80a125e:	f001 f993 	bl	80a2588 <_ZN6StringC1EPKc>
    split_string(str_event, '/', index, last_index); // skip deviceID.
 80a1262:	222f      	movs	r2, #47	; 0x2f
 80a1264:	ab03      	add	r3, sp, #12
 80a1266:	a908      	add	r1, sp, #32
 80a1268:	a818      	add	r0, sp, #96	; 0x60
 80a126a:	9500      	str	r5, [sp, #0]
 80a126c:	f7fe ff21 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
 80a1270:	a818      	add	r0, sp, #96	; 0x60
 80a1272:	f001 f93f 	bl	80a24f4 <_ZN6StringD1Ev>
    String hook = split_string(str_event, '/', index, last_index);
 80a1276:	a908      	add	r1, sp, #32
 80a1278:	a814      	add	r0, sp, #80	; 0x50
 80a127a:	222f      	movs	r2, #47	; 0x2f
 80a127c:	9500      	str	r5, [sp, #0]
 80a127e:	ab03      	add	r3, sp, #12
 80a1280:	f7fe ff17 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
    if (hook.equals("hook-response"))
 80a1284:	494a      	ldr	r1, [pc, #296]	; (80a13b0 <_ZN15Google_Calendar6parserEPKcS1_+0x184>)
 80a1286:	a814      	add	r0, sp, #80	; 0x50
    index = 0, last_index = 0;
 80a1288:	f8ad 600c 	strh.w	r6, [sp, #12]
 80a128c:	f8ad 600e 	strh.w	r6, [sp, #14]
    if (hook.equals("hook-response"))
 80a1290:	f001 fa49 	bl	80a2726 <_ZNK6String6equalsEPKc>
 80a1294:	2800      	cmp	r0, #0
 80a1296:	d073      	beq.n	80a1380 <_ZN15Google_Calendar6parserEPKcS1_+0x154>
        if (str_data.equals("~~~"))
 80a1298:	4946      	ldr	r1, [pc, #280]	; (80a13b4 <_ZN15Google_Calendar6parserEPKcS1_+0x188>)
 80a129a:	a804      	add	r0, sp, #16
 80a129c:	f001 fa43 	bl	80a2726 <_ZNK6String6equalsEPKc>
 80a12a0:	4607      	mov	r7, r0
 80a12a2:	b1a8      	cbz	r0, 80a12d0 <_ZN15Google_Calendar6parserEPKcS1_+0xa4>
            event_pending = false;
 80a12a4:	f884 6068 	strb.w	r6, [r4, #104]	; 0x68
        http_status_code = HTTP_OK;
 80a12a8:	23c8      	movs	r3, #200	; 0xc8
 80a12aa:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
    String hook = split_string(str_event, '/', index, last_index);
 80a12ae:	a814      	add	r0, sp, #80	; 0x50
 80a12b0:	f001 f920 	bl	80a24f4 <_ZN6StringD1Ev>
    String event_end; 
 80a12b4:	a810      	add	r0, sp, #64	; 0x40
 80a12b6:	f001 f91d 	bl	80a24f4 <_ZN6StringD1Ev>
    String event_start;
 80a12ba:	a80c      	add	r0, sp, #48	; 0x30
 80a12bc:	f001 f91a 	bl	80a24f4 <_ZN6StringD1Ev>
    String str_event = String(event);
 80a12c0:	a808      	add	r0, sp, #32
 80a12c2:	f001 f917 	bl	80a24f4 <_ZN6StringD1Ev>
    String str_data = String(data);
 80a12c6:	a804      	add	r0, sp, #16
 80a12c8:	f001 f914 	bl	80a24f4 <_ZN6StringD1Ev>
}
 80a12cc:	b01d      	add	sp, #116	; 0x74
 80a12ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
            event_title = split_string(str_data, '~', index, last_index);;
 80a12d0:	227e      	movs	r2, #126	; 0x7e
 80a12d2:	ab03      	add	r3, sp, #12
 80a12d4:	a904      	add	r1, sp, #16
 80a12d6:	a818      	add	r0, sp, #96	; 0x60
 80a12d8:	9500      	str	r5, [sp, #0]
 80a12da:	f7fe feea 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
 80a12de:	a918      	add	r1, sp, #96	; 0x60
 80a12e0:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80a12e4:	f001 f99a 	bl	80a261c <_ZN6StringaSEOS_>
 80a12e8:	a818      	add	r0, sp, #96	; 0x60
 80a12ea:	f001 f903 	bl	80a24f4 <_ZN6StringD1Ev>
            event_start = split_string(str_data, '~', index, last_index);;
 80a12ee:	227e      	movs	r2, #126	; 0x7e
 80a12f0:	ab03      	add	r3, sp, #12
 80a12f2:	a904      	add	r1, sp, #16
 80a12f4:	a818      	add	r0, sp, #96	; 0x60
 80a12f6:	9500      	str	r5, [sp, #0]
 80a12f8:	f7fe fedb 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
 80a12fc:	a918      	add	r1, sp, #96	; 0x60
 80a12fe:	a80c      	add	r0, sp, #48	; 0x30
 80a1300:	f001 f98c 	bl	80a261c <_ZN6StringaSEOS_>
 80a1304:	a818      	add	r0, sp, #96	; 0x60
 80a1306:	f001 f8f5 	bl	80a24f4 <_ZN6StringD1Ev>
            event_end = split_string(str_data, '~', index, last_index);;
 80a130a:	227e      	movs	r2, #126	; 0x7e
 80a130c:	ab03      	add	r3, sp, #12
 80a130e:	a904      	add	r1, sp, #16
 80a1310:	a818      	add	r0, sp, #96	; 0x60
 80a1312:	9500      	str	r5, [sp, #0]
 80a1314:	f7fe fecd 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
 80a1318:	a918      	add	r1, sp, #96	; 0x60
 80a131a:	a810      	add	r0, sp, #64	; 0x40
 80a131c:	f001 f97e 	bl	80a261c <_ZN6StringaSEOS_>
 80a1320:	a818      	add	r0, sp, #96	; 0x60
 80a1322:	f001 f8e7 	bl	80a24f4 <_ZN6StringD1Ev>
            event_location = split_string(str_data, '\0', index, last_index);
 80a1326:	ab03      	add	r3, sp, #12
 80a1328:	463a      	mov	r2, r7
 80a132a:	a904      	add	r1, sp, #16
 80a132c:	a818      	add	r0, sp, #96	; 0x60
 80a132e:	9500      	str	r5, [sp, #0]
 80a1330:	f7fe febf 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
 80a1334:	a918      	add	r1, sp, #96	; 0x60
 80a1336:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80a133a:	f001 f96f 	bl	80a261c <_ZN6StringaSEOS_>
 80a133e:	a818      	add	r0, sp, #96	; 0x60
 80a1340:	f001 f8d8 	bl	80a24f4 <_ZN6StringD1Ev>
            event_start_datetime = convert_datetime(event_start);
 80a1344:	a90c      	add	r1, sp, #48	; 0x30
 80a1346:	a818      	add	r0, sp, #96	; 0x60
 80a1348:	f001 f95d 	bl	80a2606 <_ZN6StringC1ERKS_>
 80a134c:	4620      	mov	r0, r4
 80a134e:	a918      	add	r1, sp, #96	; 0x60
 80a1350:	f7ff fedc 	bl	80a110c <_ZN15Google_Calendar16convert_datetimeE6String>
 80a1354:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
 80a1358:	a818      	add	r0, sp, #96	; 0x60
 80a135a:	f001 f8cb 	bl	80a24f4 <_ZN6StringD1Ev>
            event_end_datetime = convert_datetime(event_end); 
 80a135e:	a910      	add	r1, sp, #64	; 0x40
 80a1360:	a818      	add	r0, sp, #96	; 0x60
 80a1362:	f001 f950 	bl	80a2606 <_ZN6StringC1ERKS_>
 80a1366:	4620      	mov	r0, r4
 80a1368:	a918      	add	r1, sp, #96	; 0x60
 80a136a:	f7ff fecf 	bl	80a110c <_ZN15Google_Calendar16convert_datetimeE6String>
 80a136e:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
 80a1372:	a818      	add	r0, sp, #96	; 0x60
 80a1374:	f001 f8be 	bl	80a24f4 <_ZN6StringD1Ev>
            event_pending = true;
 80a1378:	2301      	movs	r3, #1
 80a137a:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 80a137e:	e793      	b.n	80a12a8 <_ZN15Google_Calendar6parserEPKcS1_+0x7c>
    else if (hook.equals("hook-error"))
 80a1380:	490d      	ldr	r1, [pc, #52]	; (80a13b8 <_ZN15Google_Calendar6parserEPKcS1_+0x18c>)
 80a1382:	a814      	add	r0, sp, #80	; 0x50
 80a1384:	f001 f9cf 	bl	80a2726 <_ZNK6String6equalsEPKc>
 80a1388:	2800      	cmp	r0, #0
 80a138a:	d090      	beq.n	80a12ae <_ZN15Google_Calendar6parserEPKcS1_+0x82>
        http_status_code = str_data.substring(13, 16).toInt();
 80a138c:	2310      	movs	r3, #16
 80a138e:	220d      	movs	r2, #13
 80a1390:	eb0d 0103 	add.w	r1, sp, r3
 80a1394:	a818      	add	r0, sp, #96	; 0x60
 80a1396:	f001 fa03 	bl	80a27a0 <_ZNK6String9substringEjj>
 80a139a:	a818      	add	r0, sp, #96	; 0x60
 80a139c:	f001 fa22 	bl	80a27e4 <_ZNK6String5toIntEv>
 80a13a0:	f8a4 007c 	strh.w	r0, [r4, #124]	; 0x7c
 80a13a4:	a818      	add	r0, sp, #96	; 0x60
 80a13a6:	f001 f8a5 	bl	80a24f4 <_ZN6StringD1Ev>
 80a13aa:	e780      	b.n	80a12ae <_ZN15Google_Calendar6parserEPKcS1_+0x82>
 80a13ac:	080a6ac2 	.word	0x080a6ac2
 80a13b0:	080a69e5 	.word	0x080a69e5
 80a13b4:	080a6f7b 	.word	0x080a6f7b
 80a13b8:	080a69f3 	.word	0x080a69f3

080a13bc <_ZN15Google_Calendar16response_handlerEPKcS1_>:
{
 80a13bc:	b510      	push	{r4, lr}
 80a13be:	4604      	mov	r4, r0
    parser(event, data);
 80a13c0:	f7ff ff34 	bl	80a122c <_ZN15Google_Calendar6parserEPKcS1_>
    (*callback)();
 80a13c4:	6823      	ldr	r3, [r4, #0]
}
 80a13c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    (*callback)();
 80a13ca:	4718      	bx	r3

080a13cc <_ZN15Google_Calendar13error_handlerEPKcS1_>:
{
 80a13cc:	b530      	push	{r4, r5, lr}
 80a13ce:	4604      	mov	r4, r0
 80a13d0:	b085      	sub	sp, #20
    parser(event, data);
 80a13d2:	f7ff ff2b 	bl	80a122c <_ZN15Google_Calendar6parserEPKcS1_>
    http_error = String::format("\r\nHTTP ERROR - %d", http_status_code);
 80a13d6:	f104 056c 	add.w	r5, r4, #108	; 0x6c
 80a13da:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
 80a13de:	4668      	mov	r0, sp
 80a13e0:	4910      	ldr	r1, [pc, #64]	; (80a1424 <_ZN15Google_Calendar13error_handlerEPKcS1_+0x58>)
 80a13e2:	f001 fa05 	bl	80a27f0 <_ZN6String6formatEPKcz>
 80a13e6:	4669      	mov	r1, sp
 80a13e8:	4628      	mov	r0, r5
 80a13ea:	f001 f917 	bl	80a261c <_ZN6StringaSEOS_>
 80a13ee:	4668      	mov	r0, sp
 80a13f0:	f001 f880 	bl	80a24f4 <_ZN6StringD1Ev>
    if (http_status_code == HTTP_BAD_REQUEST)
 80a13f4:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 80a13f8:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80a13fc:	d107      	bne.n	80a140e <_ZN15Google_Calendar13error_handlerEPKcS1_+0x42>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 80a13fe:	490a      	ldr	r1, [pc, #40]	; (80a1428 <_ZN15Google_Calendar13error_handlerEPKcS1_+0x5c>)
 80a1400:	4628      	mov	r0, r5
 80a1402:	f001 f93f 	bl	80a2684 <_ZN6String6concatEPKc>
    (*callback)();
 80a1406:	6823      	ldr	r3, [r4, #0]
 80a1408:	4798      	blx	r3
}
 80a140a:	b005      	add	sp, #20
 80a140c:	bd30      	pop	{r4, r5, pc}
    else if (http_status_code == HTTP_UNAUTHORIZED)
 80a140e:	f240 1291 	movw	r2, #401	; 0x191
 80a1412:	4293      	cmp	r3, r2
 80a1414:	d101      	bne.n	80a141a <_ZN15Google_Calendar13error_handlerEPKcS1_+0x4e>
 80a1416:	4905      	ldr	r1, [pc, #20]	; (80a142c <_ZN15Google_Calendar13error_handlerEPKcS1_+0x60>)
 80a1418:	e7f2      	b.n	80a1400 <_ZN15Google_Calendar13error_handlerEPKcS1_+0x34>
    else if (http_status_code == HTTP_NOT_FOUND)
 80a141a:	f5b3 7fca 	cmp.w	r3, #404	; 0x194
 80a141e:	d1f2      	bne.n	80a1406 <_ZN15Google_Calendar13error_handlerEPKcS1_+0x3a>
 80a1420:	4903      	ldr	r1, [pc, #12]	; (80a1430 <_ZN15Google_Calendar13error_handlerEPKcS1_+0x64>)
 80a1422:	e7ed      	b.n	80a1400 <_ZN15Google_Calendar13error_handlerEPKcS1_+0x34>
 80a1424:	080a6af9 	.word	0x080a6af9
 80a1428:	080a6f7f 	.word	0x080a6f7f
 80a142c:	080a6fca 	.word	0x080a6fca
 80a1430:	080a6fe8 	.word	0x080a6fe8

080a1434 <_ZN10CloudClass9subscribeI15Google_CalendarEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0.constprop.0>:
    bool subscribe(const char *eventName, void (T::*handler)(const char *, const char *), T *instance, Spark_Subscription_Scope_TypeDef scope)
 80a1434:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1436:	461f      	mov	r7, r3
    _Function_base() : _M_manager(nullptr) { }
 80a1438:	2300      	movs	r3, #0
 80a143a:	b091      	sub	sp, #68	; 0x44
 80a143c:	ad02      	add	r5, sp, #8
 80a143e:	e885 0006 	stmia.w	r5, {r1, r2}
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a1442:	ac05      	add	r4, sp, #20
 80a1444:	4606      	mov	r6, r0
 80a1446:	e895 0003 	ldmia.w	r5, {r0, r1}
 80a144a:	e884 0005 	stmia.w	r4, {r0, r2}
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a144e:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
 80a1450:	930a      	str	r3, [sp, #40]	; 0x28
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1452:	f7fe fe20 	bl	80a0096 <_Znwj>
 80a1456:	4602      	mov	r2, r0
 80a1458:	b120      	cbz	r0, 80a1464 <_ZN10CloudClass9subscribeI15Google_CalendarEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0.constprop.0+0x30>
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
 80a145a:	e894 0003 	ldmia.w	r4, {r0, r1}
 80a145e:	e882 0003 	stmia.w	r2, {r0, r1}
 80a1462:	6097      	str	r7, [r2, #8]
	    _M_invoker = &_My_handler::_M_invoke;
 80a1464:	4b13      	ldr	r3, [pc, #76]	; (80a14b4 <_ZN10CloudClass9subscribeI15Google_CalendarEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0.constprop.0+0x80>)
        return subscribe_wiring(eventName, handler, scope);
 80a1466:	a908      	add	r1, sp, #32
 80a1468:	930b      	str	r3, [sp, #44]	; 0x2c
	    _M_manager = &_My_handler::_M_manager;
 80a146a:	4b13      	ldr	r3, [pc, #76]	; (80a14b8 <_ZN10CloudClass9subscribeI15Google_CalendarEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0.constprop.0+0x84>)
 80a146c:	a80c      	add	r0, sp, #48	; 0x30
 80a146e:	930a      	str	r3, [sp, #40]	; 0x28
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1470:	9208      	str	r2, [sp, #32]
 80a1472:	f7ff fa5d 	bl	80a0930 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
        if (handler) // if the call-wrapper has wrapped a callable object
 80a1476:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80a1478:	b94b      	cbnz	r3, 80a148e <_ZN10CloudClass9subscribeI15Google_CalendarEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0.constprop.0+0x5a>
        bool success = false;
 80a147a:	2400      	movs	r4, #0
    class function<_Res(_ArgTypes...)>
 80a147c:	a80c      	add	r0, sp, #48	; 0x30
 80a147e:	f7fe fe89 	bl	80a0194 <_ZNSt14_Function_baseD1Ev>
 80a1482:	a808      	add	r0, sp, #32
 80a1484:	f7fe fe86 	bl	80a0194 <_ZNSt14_Function_baseD1Ev>
    }
 80a1488:	4620      	mov	r0, r4
 80a148a:	b011      	add	sp, #68	; 0x44
 80a148c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            auto wrapper = new wiring_event_handler_t(handler);
 80a148e:	2010      	movs	r0, #16
 80a1490:	f7fe fe01 	bl	80a0096 <_Znwj>
 80a1494:	4604      	mov	r4, r0
 80a1496:	2800      	cmp	r0, #0
 80a1498:	d0ef      	beq.n	80a147a <_ZN10CloudClass9subscribeI15Google_CalendarEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0.constprop.0+0x46>
 80a149a:	a90c      	add	r1, sp, #48	; 0x30
 80a149c:	f7ff fa48 	bl	80a0930 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
                success = spark_subscribe(eventName, (EventHandler)call_wiring_event_handler, wrapper, scope, deviceID, NULL);
 80a14a0:	2300      	movs	r3, #0
 80a14a2:	4622      	mov	r2, r4
 80a14a4:	4630      	mov	r0, r6
 80a14a6:	e9cd 3300 	strd	r3, r3, [sp]
 80a14aa:	4904      	ldr	r1, [pc, #16]	; (80a14bc <_ZN10CloudClass9subscribeI15Google_CalendarEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0.constprop.0+0x88>)
 80a14ac:	f000 ff66 	bl	80a237c <spark_subscribe>
 80a14b0:	4604      	mov	r4, r0
 80a14b2:	e7e3      	b.n	80a147c <_ZN10CloudClass9subscribeI15Google_CalendarEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0.constprop.0+0x48>
 80a14b4:	080a0d4b 	.word	0x080a0d4b
 80a14b8:	080a0d0d 	.word	0x080a0d0d
 80a14bc:	080a2f13 	.word	0x080a2f13

080a14c0 <_ZN15Google_Calendar9subscribeEPFvvE>:
{
 80a14c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    this->callback = callback;
 80a14c2:	4607      	mov	r7, r0
{
 80a14c4:	b091      	sub	sp, #68	; 0x44
 80a14c6:	ad08      	add	r5, sp, #32
	StringSumHelper(const String &s) : String(s) {}
 80a14c8:	ac0c      	add	r4, sp, #48	; 0x30
    this->callback = callback;
 80a14ca:	f847 1b1c 	str.w	r1, [r7], #28
{
 80a14ce:	4606      	mov	r6, r0
 80a14d0:	4628      	mov	r0, r5
 80a14d2:	f000 ff43 	bl	80a235c <spark_deviceID>
 80a14d6:	4629      	mov	r1, r5
 80a14d8:	4620      	mov	r0, r4
 80a14da:	f001 f894 	bl	80a2606 <_ZN6StringC1ERKS_>
    String hook_reponse = System.deviceID() + "/hook-response/" + WEBHOOK_EVENT_NAME;
 80a14de:	4620      	mov	r0, r4
 80a14e0:	4921      	ldr	r1, [pc, #132]	; (80a1568 <_ZN15Google_Calendar9subscribeEPFvvE+0xa8>)
 80a14e2:	f001 f8ea 	bl	80a26ba <_ZplRK15StringSumHelperPKc>
 80a14e6:	4639      	mov	r1, r7
 80a14e8:	f001 f8db 	bl	80a26a2 <_ZplRK15StringSumHelperRK6String>
 80a14ec:	4601      	mov	r1, r0
 80a14ee:	4668      	mov	r0, sp
 80a14f0:	f001 f889 	bl	80a2606 <_ZN6StringC1ERKS_>
class StringSumHelper : public String
 80a14f4:	4620      	mov	r0, r4
 80a14f6:	f000 fffd 	bl	80a24f4 <_ZN6StringD1Ev>
 80a14fa:	4628      	mov	r0, r5
 80a14fc:	f000 fffa 	bl	80a24f4 <_ZN6StringD1Ev>
 80a1500:	4628      	mov	r0, r5
 80a1502:	f000 ff2b 	bl	80a235c <spark_deviceID>
	StringSumHelper(const String &s) : String(s) {}
 80a1506:	4629      	mov	r1, r5
 80a1508:	4620      	mov	r0, r4
 80a150a:	f001 f87c 	bl	80a2606 <_ZN6StringC1ERKS_>
    String hook_error = System.deviceID() + "/hook-error/" + WEBHOOK_EVENT_NAME;
 80a150e:	4620      	mov	r0, r4
 80a1510:	4916      	ldr	r1, [pc, #88]	; (80a156c <_ZN15Google_Calendar9subscribeEPFvvE+0xac>)
 80a1512:	f001 f8d2 	bl	80a26ba <_ZplRK15StringSumHelperPKc>
 80a1516:	4639      	mov	r1, r7
 80a1518:	f001 f8c3 	bl	80a26a2 <_ZplRK15StringSumHelperRK6String>
    Particle.subscribe(hook_reponse, &Google_Calendar::response_handler, this, MY_DEVICES);
 80a151c:	2700      	movs	r7, #0
    String hook_error = System.deviceID() + "/hook-error/" + WEBHOOK_EVENT_NAME;
 80a151e:	4601      	mov	r1, r0
 80a1520:	a804      	add	r0, sp, #16
 80a1522:	f001 f870 	bl	80a2606 <_ZN6StringC1ERKS_>
class StringSumHelper : public String
 80a1526:	4620      	mov	r0, r4
 80a1528:	f000 ffe4 	bl	80a24f4 <_ZN6StringD1Ev>
 80a152c:	4628      	mov	r0, r5
 80a152e:	f000 ffe1 	bl	80a24f4 <_ZN6StringD1Ev>
    Particle.subscribe(hook_reponse, &Google_Calendar::response_handler, this, MY_DEVICES);
 80a1532:	4b0f      	ldr	r3, [pc, #60]	; (80a1570 <_ZN15Google_Calendar9subscribeEPFvvE+0xb0>)
 80a1534:	9709      	str	r7, [sp, #36]	; 0x24
 80a1536:	9308      	str	r3, [sp, #32]
 80a1538:	e895 0006 	ldmia.w	r5, {r1, r2}
 80a153c:	4633      	mov	r3, r6
 80a153e:	9800      	ldr	r0, [sp, #0]
 80a1540:	f7ff ff78 	bl	80a1434 <_ZN10CloudClass9subscribeI15Google_CalendarEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0.constprop.0>
    Particle.subscribe(hook_error, &Google_Calendar::error_handler, this, MY_DEVICES);
 80a1544:	4b0b      	ldr	r3, [pc, #44]	; (80a1574 <_ZN15Google_Calendar9subscribeEPFvvE+0xb4>)
 80a1546:	9804      	ldr	r0, [sp, #16]
 80a1548:	e9cd 370c 	strd	r3, r7, [sp, #48]	; 0x30
 80a154c:	4633      	mov	r3, r6
 80a154e:	e894 0006 	ldmia.w	r4, {r1, r2}
 80a1552:	f7ff ff6f 	bl	80a1434 <_ZN10CloudClass9subscribeI15Google_CalendarEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0.constprop.0>
    String hook_error = System.deviceID() + "/hook-error/" + WEBHOOK_EVENT_NAME;
 80a1556:	a804      	add	r0, sp, #16
 80a1558:	f000 ffcc 	bl	80a24f4 <_ZN6StringD1Ev>
    String hook_reponse = System.deviceID() + "/hook-response/" + WEBHOOK_EVENT_NAME;
 80a155c:	4668      	mov	r0, sp
 80a155e:	f000 ffc9 	bl	80a24f4 <_ZN6StringD1Ev>
}
 80a1562:	b011      	add	sp, #68	; 0x44
 80a1564:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1566:	bf00      	nop
 80a1568:	080a6baf 	.word	0x080a6baf
 80a156c:	080a6bbf 	.word	0x080a6bbf
 80a1570:	080a13bd 	.word	0x080a13bd
 80a1574:	080a13cd 	.word	0x080a13cd

080a1578 <_GLOBAL__sub_I__ZN15Google_CalendarC2ERK6StringRKa>:
        val_(val) {
 80a1578:	2200      	movs	r2, #0
 80a157a:	4b03      	ldr	r3, [pc, #12]	; (80a1588 <_GLOBAL__sub_I__ZN15Google_CalendarC2ERK6StringRKa+0x10>)
 80a157c:	701a      	strb	r2, [r3, #0]
 80a157e:	2201      	movs	r2, #1
 80a1580:	4b02      	ldr	r3, [pc, #8]	; (80a158c <_GLOBAL__sub_I__ZN15Google_CalendarC2ERK6StringRKa+0x14>)
 80a1582:	701a      	strb	r2, [r3, #0]
}
 80a1584:	4770      	bx	lr
 80a1586:	bf00      	nop
 80a1588:	20000246 	.word	0x20000246
 80a158c:	20000247 	.word	0x20000247

080a1590 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>:
inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
 80a1590:	b513      	push	{r0, r1, r4, lr}
 80a1592:	4604      	mov	r4, r0
 80a1594:	4b05      	ldr	r3, [pc, #20]	; (80a15ac <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0+0x1c>)
 80a1596:	460a      	mov	r2, r1
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 80a1598:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a159a:	4905      	ldr	r1, [pc, #20]	; (80a15b0 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0+0x20>)
 80a159c:	f88d 3000 	strb.w	r3, [sp]
 80a15a0:	233c      	movs	r3, #60	; 0x3c
 80a15a2:	f001 fdb7 	bl	80a3114 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
}
 80a15a6:	4620      	mov	r0, r4
 80a15a8:	b002      	add	sp, #8
 80a15aa:	bd10      	pop	{r4, pc}
 80a15ac:	20000248 	.word	0x20000248
 80a15b0:	080a6978 	.word	0x080a6978

080a15b4 <_ZN13Relay_Control13process_eventE6String>:
   
    DEBUG_PRINT("Relay Setup Complete")

}
void Relay_Control::process_event(String event_title)
{
 80a15b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a15b6:	460d      	mov	r5, r1
 80a15b8:	4604      	mov	r4, r0



    if (event_title.indexOf("Veg") > -1) {
 80a15ba:	4917      	ldr	r1, [pc, #92]	; (80a1618 <_ZN13Relay_Control13process_eventE6String+0x64>)
 80a15bc:	4668      	mov	r0, sp
 80a15be:	f000 ffe3 	bl	80a2588 <_ZN6StringC1EPKc>
 80a15c2:	4669      	mov	r1, sp
 80a15c4:	4628      	mov	r0, r5
 80a15c6:	f001 f8e8 	bl	80a279a <_ZNK6String7indexOfERKS_>
 80a15ca:	4606      	mov	r6, r0
 80a15cc:	43f6      	mvns	r6, r6
 80a15ce:	4668      	mov	r0, sp
 80a15d0:	0ff6      	lsrs	r6, r6, #31
 80a15d2:	f000 ff8f 	bl	80a24f4 <_ZN6StringD1Ev>
 80a15d6:	7126      	strb	r6, [r4, #4]
        relay1 = true;
    } else {
        relay1 = false;
    }
    
    if (event_title.indexOf("Tom") > -1) {
 80a15d8:	4668      	mov	r0, sp
 80a15da:	4910      	ldr	r1, [pc, #64]	; (80a161c <_ZN13Relay_Control13process_eventE6String+0x68>)
 80a15dc:	f000 ffd4 	bl	80a2588 <_ZN6StringC1EPKc>
 80a15e0:	4669      	mov	r1, sp
 80a15e2:	4628      	mov	r0, r5
 80a15e4:	f001 f8d9 	bl	80a279a <_ZNK6String7indexOfERKS_>
 80a15e8:	4606      	mov	r6, r0
 80a15ea:	43f6      	mvns	r6, r6
 80a15ec:	4668      	mov	r0, sp
 80a15ee:	0ff6      	lsrs	r6, r6, #31
 80a15f0:	f000 ff80 	bl	80a24f4 <_ZN6StringD1Ev>
        relay2 = true;
    } else {
        relay2 = false;
    }
    
    if (event_title.indexOf("Fro") > -1) {
 80a15f4:	4668      	mov	r0, sp
 80a15f6:	490a      	ldr	r1, [pc, #40]	; (80a1620 <_ZN13Relay_Control13process_eventE6String+0x6c>)
 80a15f8:	7166      	strb	r6, [r4, #5]
 80a15fa:	f000 ffc5 	bl	80a2588 <_ZN6StringC1EPKc>
 80a15fe:	4669      	mov	r1, sp
 80a1600:	4628      	mov	r0, r5
 80a1602:	f001 f8ca 	bl	80a279a <_ZNK6String7indexOfERKS_>
 80a1606:	4605      	mov	r5, r0
 80a1608:	4668      	mov	r0, sp
 80a160a:	43ed      	mvns	r5, r5
 80a160c:	f000 ff72 	bl	80a24f4 <_ZN6StringD1Ev>
 80a1610:	0fed      	lsrs	r5, r5, #31
 80a1612:	71a5      	strb	r5, [r4, #6]
        relay3 = true;
    } else {
        relay3 = false;
    }
    
}
 80a1614:	b004      	add	sp, #16
 80a1616:	bd70      	pop	{r4, r5, r6, pc}
 80a1618:	080a7006 	.word	0x080a7006
 80a161c:	080a700a 	.word	0x080a700a
 80a1620:	080a700e 	.word	0x080a700e

080a1624 <_ZN13Relay_Control12setup_relaysEv>:
void Relay_Control::setup_relays()  {
 80a1624:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    pinMode(RELAY1PIN, OUTPUT);
 80a1626:	2101      	movs	r1, #1
 80a1628:	2004      	movs	r0, #4
 80a162a:	f002 f9fd 	bl	80a3a28 <pinMode>
    pinMode(RELAY2PIN, OUTPUT);
 80a162e:	2101      	movs	r1, #1
 80a1630:	2005      	movs	r0, #5
 80a1632:	f002 f9f9 	bl	80a3a28 <pinMode>
    pinMode(RELAY3PIN, OUTPUT);
 80a1636:	2101      	movs	r1, #1
 80a1638:	2006      	movs	r0, #6
 80a163a:	f002 f9f5 	bl	80a3a28 <pinMode>
    pinMode(RELAY4PIN, OUTPUT);
 80a163e:	2101      	movs	r1, #1
 80a1640:	2007      	movs	r0, #7
 80a1642:	f002 f9f1 	bl	80a3a28 <pinMode>
    digitalWrite(RELAY1PIN, HIGH);
 80a1646:	2101      	movs	r1, #1
 80a1648:	2004      	movs	r0, #4
 80a164a:	f002 f9fe 	bl	80a3a4a <digitalWrite>
    digitalWrite(RELAY2PIN, HIGH);
 80a164e:	2101      	movs	r1, #1
 80a1650:	2005      	movs	r0, #5
 80a1652:	f002 f9fa 	bl	80a3a4a <digitalWrite>
    digitalWrite(RELAY3PIN, HIGH); 
 80a1656:	2101      	movs	r1, #1
 80a1658:	2006      	movs	r0, #6
 80a165a:	f002 f9f6 	bl	80a3a4a <digitalWrite>
    digitalWrite(RELAY4PIN, HIGH);
 80a165e:	2101      	movs	r1, #1
 80a1660:	2007      	movs	r0, #7
 80a1662:	f002 f9f2 	bl	80a3a4a <digitalWrite>
    DEBUG_PRINT("Relay Setup Complete")
 80a1666:	a802      	add	r0, sp, #8
 80a1668:	4907      	ldr	r1, [pc, #28]	; (80a1688 <_ZN13Relay_Control12setup_relaysEv+0x64>)
 80a166a:	f001 f8c1 	bl	80a27f0 <_ZN6String6formatEPKcz>
 80a166e:	9902      	ldr	r1, [sp, #8]
 80a1670:	4668      	mov	r0, sp
 80a1672:	f7ff ff8d 	bl	80a1590 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>
 80a1676:	a801      	add	r0, sp, #4
 80a1678:	f7fe fe6d 	bl	80a0356 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a167c:	a802      	add	r0, sp, #8
 80a167e:	f000 ff39 	bl	80a24f4 <_ZN6StringD1Ev>
}
 80a1682:	b007      	add	sp, #28
 80a1684:	f85d fb04 	ldr.w	pc, [sp], #4
 80a1688:	080a7012 	.word	0x080a7012

080a168c <_ZN13Relay_ControlC1ERKa>:
    : TIME_ZONE(time_zone)
 80a168c:	780b      	ldrb	r3, [r1, #0]
Relay_Control::Relay_Control(const int8_t &time_zone)
 80a168e:	b510      	push	{r4, lr}
    : TIME_ZONE(time_zone)
 80a1690:	7003      	strb	r3, [r0, #0]
Relay_Control::Relay_Control(const int8_t &time_zone)
 80a1692:	4604      	mov	r4, r0
    setup_relays();
 80a1694:	f7ff ffc6 	bl	80a1624 <_ZN13Relay_Control12setup_relaysEv>
    relay1_LastState = false;
 80a1698:	2300      	movs	r3, #0
}
 80a169a:	4620      	mov	r0, r4
    lastUpdateTime = 0;
 80a169c:	e9c4 3301 	strd	r3, r3, [r4, #4]
    relay1_LastState = false;
 80a16a0:	7063      	strb	r3, [r4, #1]
    relay2_LastState = false;
 80a16a2:	8063      	strh	r3, [r4, #2]
}
 80a16a4:	bd10      	pop	{r4, pc}
	...

080a16a8 <_ZN13Relay_Control10relay_loopEv>:
}



void Relay_Control::relay_loop()
{
 80a16a8:	b510      	push	{r4, lr}
        relay1
 80a16aa:	7903      	ldrb	r3, [r0, #4]


    timerState = relay1TimerActive();  //State Change method this block
    if(timerState != relay1_LastState)  {
 80a16ac:	7842      	ldrb	r2, [r0, #1]
{
 80a16ae:	4604      	mov	r4, r0
    if(timerState != relay1_LastState)  {
 80a16b0:	429a      	cmp	r2, r3
{
 80a16b2:	b086      	sub	sp, #24
    timerState = relay1TimerActive();  //State Change method this block
 80a16b4:	71c3      	strb	r3, [r0, #7]
    if(timerState != relay1_LastState)  {
 80a16b6:	d01a      	beq.n	80a16ee <_ZN13Relay_Control10relay_loopEv+0x46>
        delay(1000);
 80a16b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a16bc:	f001 fb00 	bl	80a2cc0 <delay>
        if(timerState)  {
 80a16c0:	79e3      	ldrb	r3, [r4, #7]
 80a16c2:	2b00      	cmp	r3, #0
 80a16c4:	d054      	beq.n	80a1770 <_ZN13Relay_Control10relay_loopEv+0xc8>
            digitalWrite(RELAY1PIN, LOW);
 80a16c6:	2100      	movs	r1, #0
 80a16c8:	2004      	movs	r0, #4
 80a16ca:	f002 f9be 	bl	80a3a4a <digitalWrite>
            DEBUG_PRINT("relay1 = ON");
 80a16ce:	4931      	ldr	r1, [pc, #196]	; (80a1794 <_ZN13Relay_Control10relay_loopEv+0xec>)
        } else  {
            digitalWrite(RELAY1PIN, HIGH);
            DEBUG_PRINT("relay1 = OFF");
 80a16d0:	a802      	add	r0, sp, #8
 80a16d2:	f001 f88d 	bl	80a27f0 <_ZN6String6formatEPKcz>
 80a16d6:	9902      	ldr	r1, [sp, #8]
 80a16d8:	4668      	mov	r0, sp
 80a16da:	f7ff ff59 	bl	80a1590 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>
 80a16de:	a801      	add	r0, sp, #4
 80a16e0:	f7fe fe39 	bl	80a0356 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a16e4:	a802      	add	r0, sp, #8
 80a16e6:	f000 ff05 	bl	80a24f4 <_ZN6StringD1Ev>
        }
        relay1_LastState = timerState;
 80a16ea:	79e3      	ldrb	r3, [r4, #7]
 80a16ec:	7063      	strb	r3, [r4, #1]
        relay2 
 80a16ee:	7963      	ldrb	r3, [r4, #5]
    }
    
    timerState = relay2TimerActive();  //State Change method this block
    if(timerState != relay2_LastState) {
 80a16f0:	78a2      	ldrb	r2, [r4, #2]
    timerState = relay2TimerActive();  //State Change method this block
 80a16f2:	71e3      	strb	r3, [r4, #7]
    if(timerState != relay2_LastState) {
 80a16f4:	429a      	cmp	r2, r3
 80a16f6:	d01a      	beq.n	80a172e <_ZN13Relay_Control10relay_loopEv+0x86>
        delay(1000);
 80a16f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a16fc:	f001 fae0 	bl	80a2cc0 <delay>
        if(timerState) {
 80a1700:	79e3      	ldrb	r3, [r4, #7]
 80a1702:	2b00      	cmp	r3, #0
 80a1704:	d03a      	beq.n	80a177c <_ZN13Relay_Control10relay_loopEv+0xd4>
            digitalWrite(RELAY2PIN, LOW);
 80a1706:	2100      	movs	r1, #0
 80a1708:	2005      	movs	r0, #5
 80a170a:	f002 f99e 	bl	80a3a4a <digitalWrite>
            DEBUG_PRINT("relay2 = ON");
 80a170e:	4922      	ldr	r1, [pc, #136]	; (80a1798 <_ZN13Relay_Control10relay_loopEv+0xf0>)
        } else {
            digitalWrite(RELAY2PIN, HIGH);
            DEBUG_PRINT("relay2 = OFF");
 80a1710:	a802      	add	r0, sp, #8
 80a1712:	f001 f86d 	bl	80a27f0 <_ZN6String6formatEPKcz>
 80a1716:	9902      	ldr	r1, [sp, #8]
 80a1718:	4668      	mov	r0, sp
 80a171a:	f7ff ff39 	bl	80a1590 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>
 80a171e:	a801      	add	r0, sp, #4
 80a1720:	f7fe fe19 	bl	80a0356 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1724:	a802      	add	r0, sp, #8
 80a1726:	f000 fee5 	bl	80a24f4 <_ZN6StringD1Ev>
        }
        relay2_LastState = timerState;
 80a172a:	79e3      	ldrb	r3, [r4, #7]
 80a172c:	70a3      	strb	r3, [r4, #2]
        relay3
 80a172e:	79a3      	ldrb	r3, [r4, #6]
    }
    
    timerState = relay3TimerActive();  //State Change method this block
    if(timerState != relay3_LastState) {
 80a1730:	78e2      	ldrb	r2, [r4, #3]
    timerState = relay3TimerActive();  //State Change method this block
 80a1732:	71e3      	strb	r3, [r4, #7]
    if(timerState != relay3_LastState) {
 80a1734:	429a      	cmp	r2, r3
 80a1736:	d019      	beq.n	80a176c <_ZN13Relay_Control10relay_loopEv+0xc4>
        delay(1000);
 80a1738:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a173c:	f001 fac0 	bl	80a2cc0 <delay>
        if(timerState) {
 80a1740:	79e3      	ldrb	r3, [r4, #7]
 80a1742:	b30b      	cbz	r3, 80a1788 <_ZN13Relay_Control10relay_loopEv+0xe0>
            digitalWrite(RELAY3PIN, LOW);
 80a1744:	2100      	movs	r1, #0
 80a1746:	2006      	movs	r0, #6
 80a1748:	f002 f97f 	bl	80a3a4a <digitalWrite>
            DEBUG_PRINT("relay3 = ON");
 80a174c:	4913      	ldr	r1, [pc, #76]	; (80a179c <_ZN13Relay_Control10relay_loopEv+0xf4>)
        } else {
            digitalWrite(RELAY3PIN, HIGH);
            DEBUG_PRINT("relay3 = OFF");
 80a174e:	a802      	add	r0, sp, #8
 80a1750:	f001 f84e 	bl	80a27f0 <_ZN6String6formatEPKcz>
 80a1754:	9902      	ldr	r1, [sp, #8]
 80a1756:	4668      	mov	r0, sp
 80a1758:	f7ff ff1a 	bl	80a1590 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>
 80a175c:	a801      	add	r0, sp, #4
 80a175e:	f7fe fdfa 	bl	80a0356 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1762:	a802      	add	r0, sp, #8
 80a1764:	f000 fec6 	bl	80a24f4 <_ZN6StringD1Ev>
        }
        relay3_LastState = timerState;
 80a1768:	79e3      	ldrb	r3, [r4, #7]
 80a176a:	70e3      	strb	r3, [r4, #3]
    } 

}
 80a176c:	b006      	add	sp, #24
 80a176e:	bd10      	pop	{r4, pc}
            digitalWrite(RELAY1PIN, HIGH);
 80a1770:	2101      	movs	r1, #1
 80a1772:	2004      	movs	r0, #4
 80a1774:	f002 f969 	bl	80a3a4a <digitalWrite>
            DEBUG_PRINT("relay1 = OFF");
 80a1778:	4909      	ldr	r1, [pc, #36]	; (80a17a0 <_ZN13Relay_Control10relay_loopEv+0xf8>)
 80a177a:	e7a9      	b.n	80a16d0 <_ZN13Relay_Control10relay_loopEv+0x28>
            digitalWrite(RELAY2PIN, HIGH);
 80a177c:	2101      	movs	r1, #1
 80a177e:	2005      	movs	r0, #5
 80a1780:	f002 f963 	bl	80a3a4a <digitalWrite>
            DEBUG_PRINT("relay2 = OFF");
 80a1784:	4907      	ldr	r1, [pc, #28]	; (80a17a4 <_ZN13Relay_Control10relay_loopEv+0xfc>)
 80a1786:	e7c3      	b.n	80a1710 <_ZN13Relay_Control10relay_loopEv+0x68>
            digitalWrite(RELAY3PIN, HIGH);
 80a1788:	2101      	movs	r1, #1
 80a178a:	2006      	movs	r0, #6
 80a178c:	f002 f95d 	bl	80a3a4a <digitalWrite>
            DEBUG_PRINT("relay3 = OFF");
 80a1790:	4905      	ldr	r1, [pc, #20]	; (80a17a8 <_ZN13Relay_Control10relay_loopEv+0x100>)
 80a1792:	e7dc      	b.n	80a174e <_ZN13Relay_Control10relay_loopEv+0xa6>
 80a1794:	080a7027 	.word	0x080a7027
 80a1798:	080a7040 	.word	0x080a7040
 80a179c:	080a7059 	.word	0x080a7059
 80a17a0:	080a7033 	.word	0x080a7033
 80a17a4:	080a704c 	.word	0x080a704c
 80a17a8:	080a7065 	.word	0x080a7065

080a17ac <_ZN13Relay_Control13control_relayEib>:
    switch (relay_num)
 80a17ac:	2903      	cmp	r1, #3
 80a17ae:	d806      	bhi.n	80a17be <_ZN13Relay_Control13control_relayEib+0x12>
 80a17b0:	e8df f001 	tbb	[pc, r1]
 80a17b4:	09070402 	.word	0x09070402
            relay2 = state;
 80a17b8:	7142      	strb	r2, [r0, #5]
            relay3 = state;
 80a17ba:	7182      	strb	r2, [r0, #6]
            relay1 = state;
 80a17bc:	7102      	strb	r2, [r0, #4]
    relay_loop();
 80a17be:	f7ff bf73 	b.w	80a16a8 <_ZN13Relay_Control10relay_loopEv>
            relay2 = state;
 80a17c2:	7142      	strb	r2, [r0, #5]
            break;
 80a17c4:	e7fb      	b.n	80a17be <_ZN13Relay_Control13control_relayEib+0x12>
            relay3 = state;
 80a17c6:	7182      	strb	r2, [r0, #6]
            break;
 80a17c8:	e7f9      	b.n	80a17be <_ZN13Relay_Control13control_relayEib+0x12>
	...

080a17cc <_ZN13Relay_Control15turn_off_relaysEv>:
void Relay_Control::turn_off_relays() {
 80a17cc:	b510      	push	{r4, lr}
 80a17ce:	4604      	mov	r4, r0
 80a17d0:	b086      	sub	sp, #24
    delay(1000);
 80a17d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a17d6:	f001 fa73 	bl	80a2cc0 <delay>
    DEBUG_PRINT("Turning off relays");
 80a17da:	a802      	add	r0, sp, #8
 80a17dc:	490a      	ldr	r1, [pc, #40]	; (80a1808 <_ZN13Relay_Control15turn_off_relaysEv+0x3c>)
 80a17de:	f001 f807 	bl	80a27f0 <_ZN6String6formatEPKcz>
 80a17e2:	9902      	ldr	r1, [sp, #8]
 80a17e4:	4668      	mov	r0, sp
 80a17e6:	f7ff fed3 	bl	80a1590 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>
 80a17ea:	a801      	add	r0, sp, #4
 80a17ec:	f7fe fdb3 	bl	80a0356 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a17f0:	a802      	add	r0, sp, #8
 80a17f2:	f000 fe7f 	bl	80a24f4 <_ZN6StringD1Ev>
            relay1 = state;
 80a17f6:	2300      	movs	r3, #0
    relay_loop();
 80a17f8:	4620      	mov	r0, r4
            relay1 = state;
 80a17fa:	80a3      	strh	r3, [r4, #4]
            relay3 = state;
 80a17fc:	71a3      	strb	r3, [r4, #6]
    relay_loop();
 80a17fe:	f7ff ff53 	bl	80a16a8 <_ZN13Relay_Control10relay_loopEv>
}
 80a1802:	b006      	add	sp, #24
 80a1804:	bd10      	pop	{r4, pc}
 80a1806:	bf00      	nop
 80a1808:	080a7072 	.word	0x080a7072

080a180c <_GLOBAL__sub_I__ZN13Relay_ControlC2ERKa>:
        val_(val) {
 80a180c:	2200      	movs	r2, #0
 80a180e:	4b01      	ldr	r3, [pc, #4]	; (80a1814 <_GLOBAL__sub_I__ZN13Relay_ControlC2ERKa+0x8>)
 80a1810:	701a      	strb	r2, [r3, #0]
}
 80a1812:	4770      	bx	lr
 80a1814:	20000248 	.word	0x20000248

080a1818 <_ZN10CloudClass22update_string_variableEPKc18Spark_Data_TypeDefPKvPv>:
    }
 80a1818:	6810      	ldr	r0, [r2, #0]
 80a181a:	4770      	bx	lr

080a181c <_ZN15Google_CalendarD1Ev>:
//! It requires an OAuth2.0 access token to perfom the HTTP requests.
//!
//! Source: https://developers.google.com/calendar/v3/reference/events/list
//
//*****************************************************************************
class Google_Calendar
 80a181c:	b510      	push	{r4, lr}
 80a181e:	4604      	mov	r4, r0
 80a1820:	306c      	adds	r0, #108	; 0x6c
 80a1822:	f000 fe67 	bl	80a24f4 <_ZN6StringD1Ev>
 80a1826:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80a182a:	f000 fe63 	bl	80a24f4 <_ZN6StringD1Ev>
 80a182e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80a1832:	f000 fe5f 	bl	80a24f4 <_ZN6StringD1Ev>
 80a1836:	f104 001c 	add.w	r0, r4, #28
 80a183a:	f000 fe5b 	bl	80a24f4 <_ZN6StringD1Ev>
 80a183e:	1d20      	adds	r0, r4, #4
 80a1840:	f000 fe58 	bl	80a24f4 <_ZN6StringD1Ev>
 80a1844:	4620      	mov	r0, r4
 80a1846:	bd10      	pop	{r4, pc}

080a1848 <_ZN13Google_OAuth2D1Ev>:
class Google_OAuth2
 80a1848:	b510      	push	{r4, lr}
 80a184a:	4604      	mov	r4, r0
 80a184c:	f500 7031 	add.w	r0, r0, #708	; 0x2c4
 80a1850:	f000 fe50 	bl	80a24f4 <_ZN6StringD1Ev>
 80a1854:	f504 7027 	add.w	r0, r4, #668	; 0x29c
 80a1858:	f000 fe4c 	bl	80a24f4 <_ZN6StringD1Ev>
 80a185c:	f504 7023 	add.w	r0, r4, #652	; 0x28c
 80a1860:	f000 fe48 	bl	80a24f4 <_ZN6StringD1Ev>
 80a1864:	f504 701f 	add.w	r0, r4, #636	; 0x27c
 80a1868:	f000 fe44 	bl	80a24f4 <_ZN6StringD1Ev>
 80a186c:	f504 701b 	add.w	r0, r4, #620	; 0x26c
 80a1870:	f000 fe40 	bl	80a24f4 <_ZN6StringD1Ev>
 80a1874:	f504 7017 	add.w	r0, r4, #604	; 0x25c
 80a1878:	f000 fe3c 	bl	80a24f4 <_ZN6StringD1Ev>
 80a187c:	f504 7013 	add.w	r0, r4, #588	; 0x24c
 80a1880:	f000 fe38 	bl	80a24f4 <_ZN6StringD1Ev>
 80a1884:	f504 700f 	add.w	r0, r4, #572	; 0x23c
 80a1888:	f000 fe34 	bl	80a24f4 <_ZN6StringD1Ev>
 80a188c:	f504 700b 	add.w	r0, r4, #556	; 0x22c
 80a1890:	f000 fe30 	bl	80a24f4 <_ZN6StringD1Ev>
 80a1894:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 80a1898:	f000 fe2c 	bl	80a24f4 <_ZN6StringD1Ev>
 80a189c:	f504 7003 	add.w	r0, r4, #524	; 0x20c
 80a18a0:	f000 fe28 	bl	80a24f4 <_ZN6StringD1Ev>
 80a18a4:	4620      	mov	r0, r4
 80a18a6:	bd10      	pop	{r4, pc}

080a18a8 <_Z8relay_on6String>:
int read_calendar(String cmd) {
    if (cmd.toInt() > 0) change_app_stage_to(App_Stage::CALENDAR);
    return 0;
}

int relay_on(String cmd) {
 80a18a8:	b508      	push	{r3, lr}
    Control.control_relay(cmd.toInt(), true);
 80a18aa:	f000 ff9b 	bl	80a27e4 <_ZNK6String5toIntEv>
 80a18ae:	2201      	movs	r2, #1
 80a18b0:	4601      	mov	r1, r0
 80a18b2:	4802      	ldr	r0, [pc, #8]	; (80a18bc <_Z8relay_on6String+0x14>)
 80a18b4:	f7ff ff7a 	bl	80a17ac <_ZN13Relay_Control13control_relayEib>
    return 0;
}
 80a18b8:	2000      	movs	r0, #0
 80a18ba:	bd08      	pop	{r3, pc}
 80a18bc:	200002d0 	.word	0x200002d0

080a18c0 <_Z9relay_off6String>:

int relay_off(String cmd) {
 80a18c0:	b508      	push	{r3, lr}
    Control.control_relay(cmd.toInt(), false);
 80a18c2:	f000 ff8f 	bl	80a27e4 <_ZNK6String5toIntEv>
 80a18c6:	2200      	movs	r2, #0
 80a18c8:	4601      	mov	r1, r0
 80a18ca:	4802      	ldr	r0, [pc, #8]	; (80a18d4 <_Z9relay_off6String+0x14>)
 80a18cc:	f7ff ff6e 	bl	80a17ac <_ZN13Relay_Control13control_relayEib>
    return 0;
}
 80a18d0:	2000      	movs	r0, #0
 80a18d2:	bd08      	pop	{r3, pc}
 80a18d4:	200002d0 	.word	0x200002d0

080a18d8 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>:
inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
 80a18d8:	b513      	push	{r0, r1, r4, lr}
 80a18da:	4604      	mov	r4, r0
 80a18dc:	4b05      	ldr	r3, [pc, #20]	; (80a18f4 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0+0x1c>)
 80a18de:	460a      	mov	r2, r1
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 80a18e0:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a18e2:	4905      	ldr	r1, [pc, #20]	; (80a18f8 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0+0x20>)
 80a18e4:	f88d 3000 	strb.w	r3, [sp]
 80a18e8:	233c      	movs	r3, #60	; 0x3c
 80a18ea:	f001 fc13 	bl	80a3114 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
}
 80a18ee:	4620      	mov	r0, r4
 80a18f0:	b002      	add	sp, #8
 80a18f2:	bd10      	pop	{r4, pc}
 80a18f4:	200005d4 	.word	0x200005d4
 80a18f8:	080a6978 	.word	0x080a6978

080a18fc <_Z21update_time_remainingm>:

void update_time_remaining(unsigned long now) {
 80a18fc:	b507      	push	{r0, r1, r2, lr}
                                            
    unsigned long msecs_till_action = polling_rate - (now - polling_time) ;
 80a18fe:	4b0f      	ldr	r3, [pc, #60]	; (80a193c <_Z21update_time_remainingm+0x40>)
 80a1900:	4a0f      	ldr	r2, [pc, #60]	; (80a1940 <_Z21update_time_remainingm+0x44>)
 80a1902:	681b      	ldr	r3, [r3, #0]
 80a1904:	6812      	ldr	r2, [r2, #0]
    int hours = msecs_till_action / 1000 / 3600;
    int minutes = (msecs_till_action / 1000 - (hours * 3600) )/ 60;
 80a1906:	f44f 6161 	mov.w	r1, #3600	; 0xe10
    unsigned long msecs_till_action = polling_rate - (now - polling_time) ;
 80a190a:	4413      	add	r3, r2
 80a190c:	1a18      	subs	r0, r3, r0
    int minutes = (msecs_till_action / 1000 - (hours * 3600) )/ 60;
 80a190e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    int hours = msecs_till_action / 1000 / 3600;
 80a1912:	4a0c      	ldr	r2, [pc, #48]	; (80a1944 <_Z21update_time_remainingm+0x48>)
 80a1914:	fbb0 f2f2 	udiv	r2, r0, r2
    int minutes = (msecs_till_action / 1000 - (hours * 3600) )/ 60;
 80a1918:	fbb0 f0f3 	udiv	r0, r0, r3
 80a191c:	fb01 0012 	mls	r0, r1, r2, r0
 80a1920:	213c      	movs	r1, #60	; 0x3c
 80a1922:	fbb0 f3f1 	udiv	r3, r0, r1
    int seconds = (msecs_till_action / 1000 - (hours * 3600) - (minutes * 60));
 80a1926:	fb01 0113 	mls	r1, r1, r3, r0
    sprintf(timeRemaining, "%d:%02d:%02d", hours , minutes, seconds);
 80a192a:	4807      	ldr	r0, [pc, #28]	; (80a1948 <_Z21update_time_remainingm+0x4c>)
 80a192c:	9100      	str	r1, [sp, #0]
 80a192e:	4907      	ldr	r1, [pc, #28]	; (80a194c <_Z21update_time_remainingm+0x50>)
 80a1930:	f000 fd5c 	bl	80a23ec <sprintf>
}
 80a1934:	b003      	add	sp, #12
 80a1936:	f85d fb04 	ldr.w	pc, [sp], #4
 80a193a:	bf00      	nop
 80a193c:	20000604 	.word	0x20000604
 80a1940:	20000600 	.word	0x20000600
 80a1944:	0036ee80 	.word	0x0036ee80
 80a1948:	20000608 	.word	0x20000608
 80a194c:	080a6f58 	.word	0x080a6f58

080a1950 <_Z17print_event_statev>:
//!
//! @return None. 
//
//*****************************************************************************
void print_event_state(void)
{
 80a1950:	b510      	push	{r4, lr}
    if (event_state == Event_State::PUBLISHING)
 80a1952:	4b11      	ldr	r3, [pc, #68]	; (80a1998 <_Z17print_event_statev+0x48>)
 80a1954:	781a      	ldrb	r2, [r3, #0]
 80a1956:	461c      	mov	r4, r3
 80a1958:	b95a      	cbnz	r2, 80a1972 <_Z17print_event_statev+0x22>
    {
        switch (app_stage)
 80a195a:	4b10      	ldr	r3, [pc, #64]	; (80a199c <_Z17print_event_statev+0x4c>)
 80a195c:	781b      	ldrb	r3, [r3, #0]
 80a195e:	2b01      	cmp	r3, #1
 80a1960:	d104      	bne.n	80a196c <_Z17print_event_statev+0x1c>
        {

        case App_Stage::CALENDAR:
            Serial.println("Calendar event published!");
 80a1962:	f001 fe0d 	bl	80a3580 <_Z16_fetch_usbserialv>
 80a1966:	490e      	ldr	r1, [pc, #56]	; (80a19a0 <_Z17print_event_statev+0x50>)
 80a1968:	f000 ff9f 	bl	80a28aa <_ZN5Print7printlnEPKc>
            break;

        default:
            break;
        }
        event_state = Event_State::WAIT_FOR_RESPONSE;
 80a196c:	2301      	movs	r3, #1
 80a196e:	7023      	strb	r3, [r4, #0]
    //  to enable a new event to be published. 
    else if (event_state == Event_State::COMPLETED)
    {
        event_state = Event_State::PUBLISHING;
    }
}
 80a1970:	bd10      	pop	{r4, pc}
    else if (event_state == Event_State::WAIT_FOR_RESPONSE)
 80a1972:	2a01      	cmp	r2, #1
 80a1974:	d10a      	bne.n	80a198c <_Z17print_event_statev+0x3c>
        Serial.println("waiting: calendar api response...");
 80a1976:	f001 fe03 	bl	80a3580 <_Z16_fetch_usbserialv>
 80a197a:	490a      	ldr	r1, [pc, #40]	; (80a19a4 <_Z17print_event_statev+0x54>)
 80a197c:	f000 ff95 	bl	80a28aa <_ZN5Print7printlnEPKc>
}
 80a1980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        delay(1000);
 80a1984:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a1988:	f001 b99a 	b.w	80a2cc0 <delay>
    else if (event_state == Event_State::COMPLETED)
 80a198c:	2a02      	cmp	r2, #2
        event_state = Event_State::PUBLISHING;
 80a198e:	bf04      	itt	eq
 80a1990:	2200      	moveq	r2, #0
 80a1992:	701a      	strbeq	r2, [r3, #0]
}
 80a1994:	e7ec      	b.n	80a1970 <_Z17print_event_statev+0x20>
 80a1996:	bf00      	nop
 80a1998:	200005fc 	.word	0x200005fc
 80a199c:	200005e8 	.word	0x200005e8
 80a19a0:	080a7085 	.word	0x080a7085
 80a19a4:	080a709f 	.word	0x080a709f

080a19a8 <_Z15print_app_errorv>:
//!
//! @return None. 
//
//*****************************************************************************
void print_app_error(void)
{
 80a19a8:	b508      	push	{r3, lr}
    switch (last_app_stage)
 80a19aa:	4b09      	ldr	r3, [pc, #36]	; (80a19d0 <_Z15print_app_errorv+0x28>)
 80a19ac:	781b      	ldrb	r3, [r3, #0]
 80a19ae:	b13b      	cbz	r3, 80a19c0 <_Z15print_app_errorv+0x18>
 80a19b0:	2b01      	cmp	r3, #1
 80a19b2:	d009      	beq.n	80a19c8 <_Z15print_app_errorv+0x20>
            
        default:
            break;
    }
    delay(1000);
}
 80a19b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(1000);
 80a19b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a19bc:	f001 b980 	b.w	80a2cc0 <delay>
            OAuth2.print_error();
 80a19c0:	4804      	ldr	r0, [pc, #16]	; (80a19d4 <_Z15print_app_errorv+0x2c>)
 80a19c2:	f7fe ff9b 	bl	80a08fc <_ZN13Google_OAuth211print_errorEv>
            break;
 80a19c6:	e7f5      	b.n	80a19b4 <_Z15print_app_errorv+0xc>
            Calendar.print_error();
 80a19c8:	4803      	ldr	r0, [pc, #12]	; (80a19d8 <_Z15print_app_errorv+0x30>)
 80a19ca:	f7ff fb1d 	bl	80a1008 <_ZN15Google_Calendar11print_errorEv>
            break;
 80a19ce:	e7f1      	b.n	80a19b4 <_Z15print_app_errorv+0xc>
 80a19d0:	200005fd 	.word	0x200005fd
 80a19d4:	200002dc 	.word	0x200002dc
 80a19d8:	20000250 	.word	0x20000250

080a19dc <_Z19change_app_stage_to9App_Stage>:
{
 80a19dc:	b510      	push	{r4, lr}
 80a19de:	4604      	mov	r4, r0
 80a19e0:	b088      	sub	sp, #32
 80a19e2:	2805      	cmp	r0, #5
 80a19e4:	d834      	bhi.n	80a1a50 <_Z19change_app_stage_to9App_Stage+0x74>
 80a19e6:	e8df f000 	tbb	[pc, r0]
 80a19ea:	1a03      	.short	0x1a03
 80a19ec:	62604633 	.word	0x62604633
            DEBUG_PRINT("Stage changed to: OAUTH2");
 80a19f0:	495a      	ldr	r1, [pc, #360]	; (80a1b5c <_Z19change_app_stage_to9App_Stage+0x180>)
 80a19f2:	a804      	add	r0, sp, #16
 80a19f4:	f000 fefc 	bl	80a27f0 <_ZN6String6formatEPKcz>
 80a19f8:	9904      	ldr	r1, [sp, #16]
 80a19fa:	4668      	mov	r0, sp
 80a19fc:	f7ff ff6c 	bl	80a18d8 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>
 80a1a00:	a801      	add	r0, sp, #4
 80a1a02:	f7fe fca8 	bl	80a0356 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1a06:	a804      	add	r0, sp, #16
 80a1a08:	f000 fd74 	bl	80a24f4 <_ZN6StringD1Ev>
            polling_rate = 1000;
 80a1a0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a1a10:	4b53      	ldr	r3, [pc, #332]	; (80a1b60 <_Z19change_app_stage_to9App_Stage+0x184>)
 80a1a12:	601a      	str	r2, [r3, #0]
 80a1a14:	f000 facc 	bl	80a1fb0 <HAL_Timer_Get_Milli_Seconds>
            polling_time = millis();
 80a1a18:	4b52      	ldr	r3, [pc, #328]	; (80a1b64 <_Z19change_app_stage_to9App_Stage+0x188>)
 80a1a1a:	6018      	str	r0, [r3, #0]
            break;
 80a1a1c:	e018      	b.n	80a1a50 <_Z19change_app_stage_to9App_Stage+0x74>
            DEBUG_PRINT("Stage: CALENDAR");
 80a1a1e:	4952      	ldr	r1, [pc, #328]	; (80a1b68 <_Z19change_app_stage_to9App_Stage+0x18c>)
 80a1a20:	a804      	add	r0, sp, #16
 80a1a22:	f000 fee5 	bl	80a27f0 <_ZN6String6formatEPKcz>
 80a1a26:	9904      	ldr	r1, [sp, #16]
 80a1a28:	4668      	mov	r0, sp
 80a1a2a:	f7ff ff55 	bl	80a18d8 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>
 80a1a2e:	a801      	add	r0, sp, #4
 80a1a30:	f7fe fc91 	bl	80a0356 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1a34:	a804      	add	r0, sp, #16
 80a1a36:	f000 fd5d 	bl	80a24f4 <_ZN6StringD1Ev>
            polling_rate = 1000;
 80a1a3a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a1a3e:	4b48      	ldr	r3, [pc, #288]	; (80a1b60 <_Z19change_app_stage_to9App_Stage+0x184>)
 80a1a40:	601a      	str	r2, [r3, #0]
 80a1a42:	f000 fab5 	bl	80a1fb0 <HAL_Timer_Get_Milli_Seconds>
            polling_time = millis();
 80a1a46:	4b47      	ldr	r3, [pc, #284]	; (80a1b64 <_Z19change_app_stage_to9App_Stage+0x188>)
 80a1a48:	6018      	str	r0, [r3, #0]
            Calendar.print_error();
 80a1a4a:	4848      	ldr	r0, [pc, #288]	; (80a1b6c <_Z19change_app_stage_to9App_Stage+0x190>)
 80a1a4c:	f7ff fadc 	bl	80a1008 <_ZN15Google_Calendar11print_errorEv>
    last_app_stage = app_stage;
 80a1a50:	4b47      	ldr	r3, [pc, #284]	; (80a1b70 <_Z19change_app_stage_to9App_Stage+0x194>)
 80a1a52:	4a48      	ldr	r2, [pc, #288]	; (80a1b74 <_Z19change_app_stage_to9App_Stage+0x198>)
 80a1a54:	7819      	ldrb	r1, [r3, #0]
    app_stage = new_stage;
 80a1a56:	701c      	strb	r4, [r3, #0]
    last_app_stage = app_stage;
 80a1a58:	7011      	strb	r1, [r2, #0]
    event_state = Event_State::COMPLETED;     
 80a1a5a:	2202      	movs	r2, #2
 80a1a5c:	4b46      	ldr	r3, [pc, #280]	; (80a1b78 <_Z19change_app_stage_to9App_Stage+0x19c>)
        spark_unsubscribe(NULL);
 80a1a5e:	2000      	movs	r0, #0
 80a1a60:	701a      	strb	r2, [r3, #0]
 80a1a62:	f000 fc93 	bl	80a238c <spark_unsubscribe>
    if (new_stage == App_Stage::CALENDAR)
 80a1a66:	2c01      	cmp	r4, #1
 80a1a68:	d15a      	bne.n	80a1b20 <_Z19change_app_stage_to9App_Stage+0x144>
        Calendar.subscribe(calendar_handler);
 80a1a6a:	4944      	ldr	r1, [pc, #272]	; (80a1b7c <_Z19change_app_stage_to9App_Stage+0x1a0>)
 80a1a6c:	483f      	ldr	r0, [pc, #252]	; (80a1b6c <_Z19change_app_stage_to9App_Stage+0x190>)
 80a1a6e:	f7ff fd27 	bl	80a14c0 <_ZN15Google_Calendar9subscribeEPFvvE>
}
 80a1a72:	b008      	add	sp, #32
 80a1a74:	bd10      	pop	{r4, pc}
            DEBUG_PRINT("Stage: WAITING");
 80a1a76:	4942      	ldr	r1, [pc, #264]	; (80a1b80 <_Z19change_app_stage_to9App_Stage+0x1a4>)
            DEBUG_PRINT("Stage: PENDING");
 80a1a78:	a804      	add	r0, sp, #16
 80a1a7a:	f000 feb9 	bl	80a27f0 <_ZN6String6formatEPKcz>
 80a1a7e:	9904      	ldr	r1, [sp, #16]
 80a1a80:	4668      	mov	r0, sp
 80a1a82:	f7ff ff29 	bl	80a18d8 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>
 80a1a86:	a801      	add	r0, sp, #4
 80a1a88:	f7fe fc65 	bl	80a0356 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1a8c:	a804      	add	r0, sp, #16
 80a1a8e:	f000 fd31 	bl	80a24f4 <_ZN6StringD1Ev>
            Control.turn_off_relays();
 80a1a92:	483c      	ldr	r0, [pc, #240]	; (80a1b84 <_Z19change_app_stage_to9App_Stage+0x1a8>)
 80a1a94:	f7ff fe9a 	bl	80a17cc <_ZN13Relay_Control15turn_off_relaysEv>
            polling_rate = Calendar.get_time_remaining() * 1000 ;
 80a1a98:	4834      	ldr	r0, [pc, #208]	; (80a1b6c <_Z19change_app_stage_to9App_Stage+0x190>)
 80a1a9a:	f7ff facd 	bl	80a1038 <_ZN15Google_Calendar18get_time_remainingEv>
 80a1a9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1aa2:	4343      	muls	r3, r0
            polling_rate = abs(Calendar.get_time_remaining() * 1000);
 80a1aa4:	4a2e      	ldr	r2, [pc, #184]	; (80a1b60 <_Z19change_app_stage_to9App_Stage+0x184>)
 80a1aa6:	6013      	str	r3, [r2, #0]
 80a1aa8:	e7b4      	b.n	80a1a14 <_Z19change_app_stage_to9App_Stage+0x38>
            DEBUG_PRINT("Stage: PENDING");
 80a1aaa:	4937      	ldr	r1, [pc, #220]	; (80a1b88 <_Z19change_app_stage_to9App_Stage+0x1ac>)
 80a1aac:	e7e4      	b.n	80a1a78 <_Z19change_app_stage_to9App_Stage+0x9c>
            DEBUG_PRINT("Stage: ACTIVE");
 80a1aae:	4937      	ldr	r1, [pc, #220]	; (80a1b8c <_Z19change_app_stage_to9App_Stage+0x1b0>)
 80a1ab0:	a804      	add	r0, sp, #16
 80a1ab2:	f000 fe9d 	bl	80a27f0 <_ZN6String6formatEPKcz>
 80a1ab6:	9904      	ldr	r1, [sp, #16]
 80a1ab8:	4668      	mov	r0, sp
 80a1aba:	f7ff ff0d 	bl	80a18d8 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>
 80a1abe:	a801      	add	r0, sp, #4
 80a1ac0:	f7fe fc49 	bl	80a0356 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1ac4:	a804      	add	r0, sp, #16
 80a1ac6:	f000 fd15 	bl	80a24f4 <_ZN6StringD1Ev>
            Control.process_event(Calendar.get_event_title());
 80a1aca:	4928      	ldr	r1, [pc, #160]	; (80a1b6c <_Z19change_app_stage_to9App_Stage+0x190>)
 80a1acc:	a804      	add	r0, sp, #16
 80a1ace:	f7ff f994 	bl	80a0dfa <_ZN15Google_Calendar15get_event_titleEv>
 80a1ad2:	a904      	add	r1, sp, #16
 80a1ad4:	482b      	ldr	r0, [pc, #172]	; (80a1b84 <_Z19change_app_stage_to9App_Stage+0x1a8>)
 80a1ad6:	f7ff fd6d 	bl	80a15b4 <_ZN13Relay_Control13process_eventE6String>
 80a1ada:	a804      	add	r0, sp, #16
 80a1adc:	f000 fd0a 	bl	80a24f4 <_ZN6StringD1Ev>
	StringSumHelper(const char *p) : String(p) {}
 80a1ae0:	492b      	ldr	r1, [pc, #172]	; (80a1b90 <_Z19change_app_stage_to9App_Stage+0x1b4>)
 80a1ae2:	a804      	add	r0, sp, #16
 80a1ae4:	f000 fd50 	bl	80a2588 <_ZN6StringC1EPKc>
            currentState = "Actve: " + Calendar.get_event_title();
 80a1ae8:	4668      	mov	r0, sp
 80a1aea:	4920      	ldr	r1, [pc, #128]	; (80a1b6c <_Z19change_app_stage_to9App_Stage+0x190>)
 80a1aec:	f7ff f985 	bl	80a0dfa <_ZN15Google_Calendar15get_event_titleEv>
 80a1af0:	4669      	mov	r1, sp
 80a1af2:	a804      	add	r0, sp, #16
 80a1af4:	f000 fdd5 	bl	80a26a2 <_ZplRK15StringSumHelperRK6String>
 80a1af8:	4601      	mov	r1, r0
 80a1afa:	4826      	ldr	r0, [pc, #152]	; (80a1b94 <_Z19change_app_stage_to9App_Stage+0x1b8>)
 80a1afc:	f000 fd74 	bl	80a25e8 <_ZN6StringaSERKS_>
 80a1b00:	4668      	mov	r0, sp
 80a1b02:	f000 fcf7 	bl	80a24f4 <_ZN6StringD1Ev>
class StringSumHelper : public String
 80a1b06:	a804      	add	r0, sp, #16
 80a1b08:	f000 fcf4 	bl	80a24f4 <_ZN6StringD1Ev>
            polling_rate = abs(Calendar.get_time_remaining() * 1000);
 80a1b0c:	4817      	ldr	r0, [pc, #92]	; (80a1b6c <_Z19change_app_stage_to9App_Stage+0x190>)
 80a1b0e:	f7ff fa93 	bl	80a1038 <_ZN15Google_Calendar18get_time_remainingEv>
 80a1b12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1b16:	4343      	muls	r3, r0
 80a1b18:	2b00      	cmp	r3, #0
 80a1b1a:	bfb8      	it	lt
 80a1b1c:	425b      	neglt	r3, r3
 80a1b1e:	e7c1      	b.n	80a1aa4 <_Z19change_app_stage_to9App_Stage+0xc8>
    else if (new_stage == App_Stage::FAILED)
 80a1b20:	2c02      	cmp	r4, #2
 80a1b22:	d1a6      	bne.n	80a1a72 <_Z19change_app_stage_to9App_Stage+0x96>
        Control.turn_off_relays();
 80a1b24:	4817      	ldr	r0, [pc, #92]	; (80a1b84 <_Z19change_app_stage_to9App_Stage+0x1a8>)
 80a1b26:	f7ff fe51 	bl	80a17cc <_ZN13Relay_Control15turn_off_relaysEv>
        Serial.println("App Stage Failure");
 80a1b2a:	f001 fd29 	bl	80a3580 <_Z16_fetch_usbserialv>
 80a1b2e:	491a      	ldr	r1, [pc, #104]	; (80a1b98 <_Z19change_app_stage_to9App_Stage+0x1bc>)
 80a1b30:	f000 febb 	bl	80a28aa <_ZN5Print7printlnEPKc>
        delay(1000);
 80a1b34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a1b38:	f001 f8c2 	bl	80a2cc0 <delay>
        DEBUG_PRINT("App Stage Failure");
 80a1b3c:	a804      	add	r0, sp, #16
 80a1b3e:	4916      	ldr	r1, [pc, #88]	; (80a1b98 <_Z19change_app_stage_to9App_Stage+0x1bc>)
 80a1b40:	f000 fe56 	bl	80a27f0 <_ZN6String6formatEPKcz>
 80a1b44:	4668      	mov	r0, sp
 80a1b46:	9904      	ldr	r1, [sp, #16]
 80a1b48:	f7ff fec6 	bl	80a18d8 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>
 80a1b4c:	a801      	add	r0, sp, #4
 80a1b4e:	f7fe fc02 	bl	80a0356 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1b52:	a804      	add	r0, sp, #16
 80a1b54:	f000 fcce 	bl	80a24f4 <_ZN6StringD1Ev>
}
 80a1b58:	e78b      	b.n	80a1a72 <_Z19change_app_stage_to9App_Stage+0x96>
 80a1b5a:	bf00      	nop
 80a1b5c:	080a70c1 	.word	0x080a70c1
 80a1b60:	20000600 	.word	0x20000600
 80a1b64:	20000604 	.word	0x20000604
 80a1b68:	080a70da 	.word	0x080a70da
 80a1b6c:	20000250 	.word	0x20000250
 80a1b70:	200005e8 	.word	0x200005e8
 80a1b74:	200005fd 	.word	0x200005fd
 80a1b78:	200005fc 	.word	0x200005fc
 80a1b7c:	080a1dd1 	.word	0x080a1dd1
 80a1b80:	080a70ea 	.word	0x080a70ea
 80a1b84:	200002d0 	.word	0x200002d0
 80a1b88:	080a70f9 	.word	0x080a70f9
 80a1b8c:	080a7108 	.word	0x080a7108
 80a1b90:	080a7116 	.word	0x080a7116
 80a1b94:	200005ec 	.word	0x200005ec
 80a1b98:	080a711e 	.word	0x080a711e

080a1b9c <_Z13read_calendar6String>:
int read_calendar(String cmd) {
 80a1b9c:	b508      	push	{r3, lr}
    if (cmd.toInt() > 0) change_app_stage_to(App_Stage::CALENDAR);
 80a1b9e:	f000 fe21 	bl	80a27e4 <_ZNK6String5toIntEv>
 80a1ba2:	2800      	cmp	r0, #0
 80a1ba4:	dd02      	ble.n	80a1bac <_Z13read_calendar6String+0x10>
 80a1ba6:	2001      	movs	r0, #1
 80a1ba8:	f7ff ff18 	bl	80a19dc <_Z19change_app_stage_to9App_Stage>
}
 80a1bac:	2000      	movs	r0, #0
 80a1bae:	bd08      	pop	{r3, pc}

080a1bb0 <_Z11oauth2_loopv>:
{
 80a1bb0:	b508      	push	{r3, lr}
    OAuth2.loop();
 80a1bb2:	480b      	ldr	r0, [pc, #44]	; (80a1be0 <_Z11oauth2_loopv+0x30>)
 80a1bb4:	f7fe ff76 	bl	80a0aa4 <_ZN13Google_OAuth24loopEv>
    if (OAuth2.authorized())
 80a1bb8:	4809      	ldr	r0, [pc, #36]	; (80a1be0 <_Z11oauth2_loopv+0x30>)
 80a1bba:	f7fe fb6d 	bl	80a0298 <_ZN13Google_OAuth210authorizedEv>
 80a1bbe:	b140      	cbz	r0, 80a1bd2 <_Z11oauth2_loopv+0x22>
        if (last_app_stage == App_Stage::CALENDAR)
 80a1bc0:	4b08      	ldr	r3, [pc, #32]	; (80a1be4 <_Z11oauth2_loopv+0x34>)
 80a1bc2:	7818      	ldrb	r0, [r3, #0]
 80a1bc4:	2801      	cmp	r0, #1
            change_app_stage_to(App_Stage::WAITING);
 80a1bc6:	bf18      	it	ne
 80a1bc8:	2003      	movne	r0, #3
}
 80a1bca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        change_app_stage_to(App_Stage::FAILED);
 80a1bce:	f7ff bf05 	b.w	80a19dc <_Z19change_app_stage_to9App_Stage>
    else if (OAuth2.failed())
 80a1bd2:	4803      	ldr	r0, [pc, #12]	; (80a1be0 <_Z11oauth2_loopv+0x30>)
 80a1bd4:	f7fe fb66 	bl	80a02a4 <_ZN13Google_OAuth26failedEv>
 80a1bd8:	b108      	cbz	r0, 80a1bde <_Z11oauth2_loopv+0x2e>
        change_app_stage_to(App_Stage::FAILED);
 80a1bda:	2002      	movs	r0, #2
 80a1bdc:	e7f5      	b.n	80a1bca <_Z11oauth2_loopv+0x1a>
}
 80a1bde:	bd08      	pop	{r3, pc}
 80a1be0:	200002dc 	.word	0x200002dc
 80a1be4:	200005fd 	.word	0x200005fd

080a1be8 <_Z13calendar_loopv>:
{
 80a1be8:	b508      	push	{r3, lr}
    if (event_state == Event_State::PUBLISHING)
 80a1bea:	4b09      	ldr	r3, [pc, #36]	; (80a1c10 <_Z13calendar_loopv+0x28>)
 80a1bec:	781b      	ldrb	r3, [r3, #0]
 80a1bee:	b93b      	cbnz	r3, 80a1c00 <_Z13calendar_loopv+0x18>
        if (OAuth2.is_token_valid())
 80a1bf0:	4808      	ldr	r0, [pc, #32]	; (80a1c14 <_Z13calendar_loopv+0x2c>)
 80a1bf2:	f7fe fe65 	bl	80a08c0 <_ZN13Google_OAuth214is_token_validEv>
 80a1bf6:	b138      	cbz	r0, 80a1c08 <_Z13calendar_loopv+0x20>
            Calendar.publish(OAuth2);
 80a1bf8:	4906      	ldr	r1, [pc, #24]	; (80a1c14 <_Z13calendar_loopv+0x2c>)
 80a1bfa:	4807      	ldr	r0, [pc, #28]	; (80a1c18 <_Z13calendar_loopv+0x30>)
 80a1bfc:	f7ff f904 	bl	80a0e08 <_ZN15Google_Calendar7publishERK13Google_OAuth2>
}
 80a1c00:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    print_event_state();
 80a1c04:	f7ff bea4 	b.w	80a1950 <_Z17print_event_statev>
            change_app_stage_to(App_Stage::OAUTH2);
 80a1c08:	f7ff fee8 	bl	80a19dc <_Z19change_app_stage_to9App_Stage>
 80a1c0c:	e7f8      	b.n	80a1c00 <_Z13calendar_loopv+0x18>
 80a1c0e:	bf00      	nop
 80a1c10:	200005fc 	.word	0x200005fc
 80a1c14:	200002dc 	.word	0x200002dc
 80a1c18:	20000250 	.word	0x20000250

080a1c1c <setup>:
{
 80a1c1c:	b510      	push	{r4, lr}
 80a1c1e:	b086      	sub	sp, #24
    Serial.begin();
 80a1c20:	f001 fcae 	bl	80a3580 <_Z16_fetch_usbserialv>
 80a1c24:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a1c28:	f001 fc9e 	bl	80a3568 <_ZN9USBSerial5beginEl>
    Time.zone(TIME_ZONE);
 80a1c2c:	4826      	ldr	r0, [pc, #152]	; (80a1cc8 <setup+0xac>)
 80a1c2e:	f000 fec7 	bl	80a29c0 <_ZN9TimeClass4zoneEf>
    Time.setFormat(TIME_FORMAT_ISO8601_FULL);
 80a1c32:	4b26      	ldr	r3, [pc, #152]	; (80a1ccc <setup+0xb0>)
        return register_function(call_raw_user_function, (void*)func, funcKey);
 80a1c34:	4926      	ldr	r1, [pc, #152]	; (80a1cd0 <setup+0xb4>)
        }

        void setFormat(const char* format)
        {
            this->format_spec = format;
 80a1c36:	681a      	ldr	r2, [r3, #0]
 80a1c38:	4b26      	ldr	r3, [pc, #152]	; (80a1cd4 <setup+0xb8>)
 80a1c3a:	4827      	ldr	r0, [pc, #156]	; (80a1cd8 <setup+0xbc>)
 80a1c3c:	601a      	str	r2, [r3, #0]
 80a1c3e:	4a27      	ldr	r2, [pc, #156]	; (80a1cdc <setup+0xc0>)
 80a1c40:	f001 f975 	bl	80a2f2e <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
        spark_variable_t extra = {};
 80a1c44:	2400      	movs	r4, #0
        extra.size = sizeof(extra);
 80a1c46:	230c      	movs	r3, #12
        spark_variable_t extra = {};
 80a1c48:	9402      	str	r4, [sp, #8]
        extra.size = sizeof(extra);
 80a1c4a:	f8ad 3008 	strh.w	r3, [sp, #8]
        extra.update = update_string_variable;
 80a1c4e:	4b24      	ldr	r3, [pc, #144]	; (80a1ce0 <setup+0xc4>)
        return spark_variable(varKey, userVar, CloudVariableTypeString::TYPE_ID, &extra);
 80a1c50:	2204      	movs	r2, #4
 80a1c52:	4924      	ldr	r1, [pc, #144]	; (80a1ce4 <setup+0xc8>)
        extra.update = update_string_variable;
 80a1c54:	9303      	str	r3, [sp, #12]
        return spark_variable(varKey, userVar, CloudVariableTypeString::TYPE_ID, &extra);
 80a1c56:	4824      	ldr	r0, [pc, #144]	; (80a1ce8 <setup+0xcc>)
 80a1c58:	ab02      	add	r3, sp, #8
        spark_variable_t extra = {};
 80a1c5a:	9404      	str	r4, [sp, #16]
        return spark_variable(varKey, userVar, CloudVariableTypeString::TYPE_ID, &extra);
 80a1c5c:	f000 fb5e 	bl	80a231c <spark_variable>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
 80a1c60:	4623      	mov	r3, r4
 80a1c62:	2204      	movs	r2, #4
 80a1c64:	4921      	ldr	r1, [pc, #132]	; (80a1cec <setup+0xd0>)
 80a1c66:	4822      	ldr	r0, [pc, #136]	; (80a1cf0 <setup+0xd4>)
 80a1c68:	f000 fb58 	bl	80a231c <spark_variable>
        return register_function(call_raw_user_function, (void*)func, funcKey);
 80a1c6c:	4a21      	ldr	r2, [pc, #132]	; (80a1cf4 <setup+0xd8>)
 80a1c6e:	4922      	ldr	r1, [pc, #136]	; (80a1cf8 <setup+0xdc>)
 80a1c70:	4819      	ldr	r0, [pc, #100]	; (80a1cd8 <setup+0xbc>)
 80a1c72:	f001 f95c 	bl	80a2f2e <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80a1c76:	4a21      	ldr	r2, [pc, #132]	; (80a1cfc <setup+0xe0>)
 80a1c78:	4921      	ldr	r1, [pc, #132]	; (80a1d00 <setup+0xe4>)
 80a1c7a:	4817      	ldr	r0, [pc, #92]	; (80a1cd8 <setup+0xbc>)
 80a1c7c:	f001 f957 	bl	80a2f2e <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
    OAuth2.start();
 80a1c80:	4820      	ldr	r0, [pc, #128]	; (80a1d04 <setup+0xe8>)
 80a1c82:	f7fe fb7f 	bl	80a0384 <_ZN13Google_OAuth25startEv>
    if (OAuth2.authenticated()) 
 80a1c86:	481f      	ldr	r0, [pc, #124]	; (80a1d04 <setup+0xe8>)
 80a1c88:	f7fe fb00 	bl	80a028c <_ZN13Google_OAuth213authenticatedEv>
 80a1c8c:	b198      	cbz	r0, 80a1cb6 <setup+0x9a>
        Serial.println("Oauth2 already authenicated");
 80a1c8e:	f001 fc77 	bl	80a3580 <_Z16_fetch_usbserialv>
 80a1c92:	491d      	ldr	r1, [pc, #116]	; (80a1d08 <setup+0xec>)
 80a1c94:	f000 fe09 	bl	80a28aa <_ZN5Print7printlnEPKc>
        DEBUG_PRINT("Oauth2 already authenicated");
 80a1c98:	491b      	ldr	r1, [pc, #108]	; (80a1d08 <setup+0xec>)
 80a1c9a:	a802      	add	r0, sp, #8
 80a1c9c:	f000 fda8 	bl	80a27f0 <_ZN6String6formatEPKcz>
 80a1ca0:	9902      	ldr	r1, [sp, #8]
 80a1ca2:	4668      	mov	r0, sp
 80a1ca4:	f7ff fe18 	bl	80a18d8 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>
 80a1ca8:	a801      	add	r0, sp, #4
 80a1caa:	f7fe fb54 	bl	80a0356 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1cae:	a802      	add	r0, sp, #8
 80a1cb0:	f000 fc20 	bl	80a24f4 <_ZN6StringD1Ev>
        change_app_stage_to(App_Stage::CALENDAR);
 80a1cb4:	2001      	movs	r0, #1
       change_app_stage_to(App_Stage::OAUTH2);
 80a1cb6:	f7ff fe91 	bl	80a19dc <_Z19change_app_stage_to9App_Stage>
 80a1cba:	f000 f979 	bl	80a1fb0 <HAL_Timer_Get_Milli_Seconds>
    polling_time = millis();
 80a1cbe:	4b13      	ldr	r3, [pc, #76]	; (80a1d0c <setup+0xf0>)
 80a1cc0:	6018      	str	r0, [r3, #0]
}
 80a1cc2:	b006      	add	sp, #24
 80a1cc4:	bd10      	pop	{r4, pc}
 80a1cc6:	bf00      	nop
 80a1cc8:	c0e00000 	.word	0xc0e00000
 80a1ccc:	20000004 	.word	0x20000004
 80a1cd0:	080a1b9d 	.word	0x080a1b9d
 80a1cd4:	20000640 	.word	0x20000640
 80a1cd8:	080a2ee7 	.word	0x080a2ee7
 80a1cdc:	080a7130 	.word	0x080a7130
 80a1ce0:	080a1819 	.word	0x080a1819
 80a1ce4:	200005ec 	.word	0x200005ec
 80a1ce8:	080a7147 	.word	0x080a7147
 80a1cec:	20000608 	.word	0x20000608
 80a1cf0:	080a7155 	.word	0x080a7155
 80a1cf4:	080a7164 	.word	0x080a7164
 80a1cf8:	080a18a9 	.word	0x080a18a9
 80a1cfc:	080a7175 	.word	0x080a7175
 80a1d00:	080a18c1 	.word	0x080a18c1
 80a1d04:	200002dc 	.word	0x200002dc
 80a1d08:	080a7187 	.word	0x080a7187
 80a1d0c:	20000604 	.word	0x20000604

080a1d10 <loop>:
{
 80a1d10:	b510      	push	{r4, lr}
 80a1d12:	b086      	sub	sp, #24
 80a1d14:	f000 f94c 	bl	80a1fb0 <HAL_Timer_Get_Milli_Seconds>
 80a1d18:	4604      	mov	r4, r0
    update_time_remaining(now);
 80a1d1a:	f7ff fdef 	bl	80a18fc <_Z21update_time_remainingm>
    unsigned long elapsed = now - polling_time; //will always be positive
 80a1d1e:	4b26      	ldr	r3, [pc, #152]	; (80a1db8 <loop+0xa8>)
    if (elapsed <= polling_rate) {
 80a1d20:	4a26      	ldr	r2, [pc, #152]	; (80a1dbc <loop+0xac>)
    unsigned long elapsed = now - polling_time; //will always be positive
 80a1d22:	6818      	ldr	r0, [r3, #0]
    if (elapsed <= polling_rate) {
 80a1d24:	6812      	ldr	r2, [r2, #0]
    unsigned long elapsed = now - polling_time; //will always be positive
 80a1d26:	1a24      	subs	r4, r4, r0
    if (elapsed <= polling_rate) {
 80a1d28:	42a2      	cmp	r2, r4
 80a1d2a:	461c      	mov	r4, r3
 80a1d2c:	4b24      	ldr	r3, [pc, #144]	; (80a1dc0 <loop+0xb0>)
        switch (app_stage)
 80a1d2e:	781b      	ldrb	r3, [r3, #0]
    if (elapsed <= polling_rate) {
 80a1d30:	d32b      	bcc.n	80a1d8a <loop+0x7a>
        switch (app_stage)
 80a1d32:	2b02      	cmp	r3, #2
 80a1d34:	d00b      	beq.n	80a1d4e <loop+0x3e>
 80a1d36:	3b03      	subs	r3, #3
 80a1d38:	2b02      	cmp	r3, #2
 80a1d3a:	d802      	bhi.n	80a1d42 <loop+0x32>
                Control.relay_loop();
 80a1d3c:	4821      	ldr	r0, [pc, #132]	; (80a1dc4 <loop+0xb4>)
 80a1d3e:	f7ff fcb3 	bl	80a16a8 <_ZN13Relay_Control10relay_loopEv>
        delay(1000);
 80a1d42:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a1d46:	f000 ffbb 	bl	80a2cc0 <delay>
}
 80a1d4a:	b006      	add	sp, #24
 80a1d4c:	bd10      	pop	{r4, pc}
                Control.turn_off_relays();
 80a1d4e:	481d      	ldr	r0, [pc, #116]	; (80a1dc4 <loop+0xb4>)
 80a1d50:	f7ff fd3c 	bl	80a17cc <_ZN13Relay_Control15turn_off_relaysEv>
                delay(1000);
 80a1d54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a1d58:	f000 ffb2 	bl	80a2cc0 <delay>
                DEBUG_PRINT("Press Reset Button");
 80a1d5c:	a802      	add	r0, sp, #8
 80a1d5e:	491a      	ldr	r1, [pc, #104]	; (80a1dc8 <loop+0xb8>)
 80a1d60:	f000 fd46 	bl	80a27f0 <_ZN6String6formatEPKcz>
 80a1d64:	9902      	ldr	r1, [sp, #8]
 80a1d66:	4668      	mov	r0, sp
 80a1d68:	f7ff fdb6 	bl	80a18d8 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>
 80a1d6c:	a801      	add	r0, sp, #4
 80a1d6e:	f7fe faf2 	bl	80a0356 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1d72:	a802      	add	r0, sp, #8
 80a1d74:	f000 fbbe 	bl	80a24f4 <_ZN6StringD1Ev>
                delay(15 * 60 * 1000);
 80a1d78:	4814      	ldr	r0, [pc, #80]	; (80a1dcc <loop+0xbc>)
 80a1d7a:	f000 ffa1 	bl	80a2cc0 <delay>
                print_app_error();
 80a1d7e:	f7ff fe13 	bl	80a19a8 <_Z15print_app_errorv>
                Control.turn_off_relays();
 80a1d82:	4810      	ldr	r0, [pc, #64]	; (80a1dc4 <loop+0xb4>)
 80a1d84:	f7ff fd22 	bl	80a17cc <_ZN13Relay_Control15turn_off_relaysEv>
 80a1d88:	e7d8      	b.n	80a1d3c <loop+0x2c>
        switch (app_stage)
 80a1d8a:	2b05      	cmp	r3, #5
 80a1d8c:	d806      	bhi.n	80a1d9c <loop+0x8c>
 80a1d8e:	e8df f003 	tbb	[pc, r3]
 80a1d92:	0903      	.short	0x0903
 80a1d94:	0c100c05 	.word	0x0c100c05
                oauth2_loop();
 80a1d98:	f7ff ff0a 	bl	80a1bb0 <_Z11oauth2_loopv>
 80a1d9c:	f000 f908 	bl	80a1fb0 <HAL_Timer_Get_Milli_Seconds>
        polling_time = millis();
 80a1da0:	6020      	str	r0, [r4, #0]
}
 80a1da2:	e7d2      	b.n	80a1d4a <loop+0x3a>
                calendar_loop();
 80a1da4:	f7ff ff20 	bl	80a1be8 <_Z13calendar_loopv>
                break;
 80a1da8:	e7f8      	b.n	80a1d9c <loop+0x8c>
                change_app_stage_to(App_Stage::CALENDAR); 
 80a1daa:	2001      	movs	r0, #1
                change_app_stage_to(App_Stage::ACTIVE); 
 80a1dac:	f7ff fe16 	bl	80a19dc <_Z19change_app_stage_to9App_Stage>
                break;
 80a1db0:	e7f4      	b.n	80a1d9c <loop+0x8c>
                change_app_stage_to(App_Stage::ACTIVE); 
 80a1db2:	2005      	movs	r0, #5
 80a1db4:	e7fa      	b.n	80a1dac <loop+0x9c>
 80a1db6:	bf00      	nop
 80a1db8:	20000604 	.word	0x20000604
 80a1dbc:	20000600 	.word	0x20000600
 80a1dc0:	200005e8 	.word	0x200005e8
 80a1dc4:	200002d0 	.word	0x200002d0
 80a1dc8:	080a71a3 	.word	0x080a71a3
 80a1dcc:	000dbba0 	.word	0x000dbba0

080a1dd0 <_Z16calendar_handlerv>:
{
 80a1dd0:	b500      	push	{lr}
    if (!Calendar.failed())
 80a1dd2:	4827      	ldr	r0, [pc, #156]	; (80a1e70 <_Z16calendar_handlerv+0xa0>)
{
 80a1dd4:	b089      	sub	sp, #36	; 0x24
    if (!Calendar.failed())
 80a1dd6:	f7ff f807 	bl	80a0de8 <_ZN15Google_Calendar6failedEv>
 80a1dda:	2800      	cmp	r0, #0
 80a1ddc:	d143      	bne.n	80a1e66 <_Z16calendar_handlerv+0x96>
        if (Calendar.is_event_pending())
 80a1dde:	4824      	ldr	r0, [pc, #144]	; (80a1e70 <_Z16calendar_handlerv+0xa0>)
 80a1de0:	f7ff f808 	bl	80a0df4 <_ZN15Google_Calendar16is_event_pendingEv>
 80a1de4:	b328      	cbz	r0, 80a1e32 <_Z16calendar_handlerv+0x62>
            if ((Calendar.get_time_remaining() * 1000) < 0) {
 80a1de6:	4822      	ldr	r0, [pc, #136]	; (80a1e70 <_Z16calendar_handlerv+0xa0>)
 80a1de8:	f7ff f926 	bl	80a1038 <_ZN15Google_Calendar18get_time_remainingEv>
 80a1dec:	2800      	cmp	r0, #0
 80a1dee:	da1b      	bge.n	80a1e28 <_Z16calendar_handlerv+0x58>
                change_app_stage_to(App_Stage::ACTIVE);
 80a1df0:	2005      	movs	r0, #5
 80a1df2:	f7ff fdf3 	bl	80a19dc <_Z19change_app_stage_to9App_Stage>
	StringSumHelper(const char *p) : String(p) {}
 80a1df6:	491f      	ldr	r1, [pc, #124]	; (80a1e74 <_Z16calendar_handlerv+0xa4>)
 80a1df8:	4668      	mov	r0, sp
 80a1dfa:	f000 fbc5 	bl	80a2588 <_ZN6StringC1EPKc>
                currentState = "Pending: " + Calendar.get_event_title();
 80a1dfe:	491c      	ldr	r1, [pc, #112]	; (80a1e70 <_Z16calendar_handlerv+0xa0>)
 80a1e00:	a804      	add	r0, sp, #16
 80a1e02:	f7fe fffa 	bl	80a0dfa <_ZN15Google_Calendar15get_event_titleEv>
 80a1e06:	a904      	add	r1, sp, #16
 80a1e08:	4668      	mov	r0, sp
 80a1e0a:	f000 fc4a 	bl	80a26a2 <_ZplRK15StringSumHelperRK6String>
 80a1e0e:	4601      	mov	r1, r0
 80a1e10:	4819      	ldr	r0, [pc, #100]	; (80a1e78 <_Z16calendar_handlerv+0xa8>)
 80a1e12:	f000 fbe9 	bl	80a25e8 <_ZN6StringaSERKS_>
 80a1e16:	a804      	add	r0, sp, #16
 80a1e18:	f000 fb6c 	bl	80a24f4 <_ZN6StringD1Ev>
class StringSumHelper : public String
 80a1e1c:	4668      	mov	r0, sp
 80a1e1e:	f000 fb69 	bl	80a24f4 <_ZN6StringD1Ev>
}
 80a1e22:	b009      	add	sp, #36	; 0x24
 80a1e24:	f85d fb04 	ldr.w	pc, [sp], #4
                change_app_stage_to(App_Stage::PENDING);
 80a1e28:	2004      	movs	r0, #4
 80a1e2a:	f7ff fdd7 	bl	80a19dc <_Z19change_app_stage_to9App_Stage>
	StringSumHelper(const char *p) : String(p) {}
 80a1e2e:	4913      	ldr	r1, [pc, #76]	; (80a1e7c <_Z16calendar_handlerv+0xac>)
 80a1e30:	e7e2      	b.n	80a1df8 <_Z16calendar_handlerv+0x28>
            delay(1000);
 80a1e32:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a1e36:	f000 ff43 	bl	80a2cc0 <delay>
            DEBUG_PRINT("No pending events!");
 80a1e3a:	a804      	add	r0, sp, #16
 80a1e3c:	4910      	ldr	r1, [pc, #64]	; (80a1e80 <_Z16calendar_handlerv+0xb0>)
 80a1e3e:	f000 fcd7 	bl	80a27f0 <_ZN6String6formatEPKcz>
 80a1e42:	9904      	ldr	r1, [sp, #16]
 80a1e44:	4668      	mov	r0, sp
 80a1e46:	f7ff fd47 	bl	80a18d8 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>
 80a1e4a:	a801      	add	r0, sp, #4
 80a1e4c:	f7fe fa83 	bl	80a0356 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1e50:	a804      	add	r0, sp, #16
 80a1e52:	f000 fb4f 	bl	80a24f4 <_ZN6StringD1Ev>
            change_app_stage_to(App_Stage::WAITING);
 80a1e56:	2003      	movs	r0, #3
 80a1e58:	f7ff fdc0 	bl	80a19dc <_Z19change_app_stage_to9App_Stage>
            currentState = "Waiting";
 80a1e5c:	4909      	ldr	r1, [pc, #36]	; (80a1e84 <_Z16calendar_handlerv+0xb4>)
 80a1e5e:	4806      	ldr	r0, [pc, #24]	; (80a1e78 <_Z16calendar_handlerv+0xa8>)
 80a1e60:	f000 fbe4 	bl	80a262c <_ZN6StringaSEPKc>
 80a1e64:	e7dd      	b.n	80a1e22 <_Z16calendar_handlerv+0x52>
        change_app_stage_to(App_Stage::FAILED);
 80a1e66:	2002      	movs	r0, #2
 80a1e68:	f7ff fdb8 	bl	80a19dc <_Z19change_app_stage_to9App_Stage>
}
 80a1e6c:	e7d9      	b.n	80a1e22 <_Z16calendar_handlerv+0x52>
 80a1e6e:	bf00      	nop
 80a1e70:	20000250 	.word	0x20000250
 80a1e74:	080a7116 	.word	0x080a7116
 80a1e78:	200005ec 	.word	0x200005ec
 80a1e7c:	080a71b6 	.word	0x080a71b6
 80a1e80:	080a71c0 	.word	0x080a71c0
 80a1e84:	080a71d3 	.word	0x080a71d3

080a1e88 <_GLOBAL__sub_I_app_stage>:
        val_(val) {
 80a1e88:	2200      	movs	r2, #0
}
 80a1e8a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a1e8e:	4b27      	ldr	r3, [pc, #156]	; (80a1f2c <_GLOBAL__sub_I_app_stage+0xa4>)
//DONT FORGET TO UPDATE DEVICE ID IN INTEGRATIONS IF YOU CHANGE DEVICES
//const String CLIENT_ID = "355382188119-4iank2rp1g9e0e0blv0dklnodo6tbcqr.apps.googleusercontent.com";  
//const String CLIENT_SECRET = "NTt_Pz5oeh2K_jSBq8j1k2aW";  

//active (irrigrator)
const String CLIENT_ID = "355382188119-102htvfiinqdc0pse0e09uqkv68l3j67.apps.googleusercontent.com";  
 80a1e90:	4f27      	ldr	r7, [pc, #156]	; (80a1f30 <_GLOBAL__sub_I_app_stage+0xa8>)
 80a1e92:	4c28      	ldr	r4, [pc, #160]	; (80a1f34 <_GLOBAL__sub_I_app_stage+0xac>)
 80a1e94:	4d28      	ldr	r5, [pc, #160]	; (80a1f38 <_GLOBAL__sub_I_app_stage+0xb0>)
 80a1e96:	701a      	strb	r2, [r3, #0]
const String CLIENT_SECRET = "A1f4r3HoBPF-XxzReyNYENEo";
 80a1e98:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 80a1f64 <_GLOBAL__sub_I_app_stage+0xdc>
const String CLIENT_ID = "355382188119-102htvfiinqdc0pse0e09uqkv68l3j67.apps.googleusercontent.com";  
 80a1e9c:	4638      	mov	r0, r7
 80a1e9e:	4927      	ldr	r1, [pc, #156]	; (80a1f3c <_GLOBAL__sub_I_app_stage+0xb4>)
 80a1ea0:	f000 fb72 	bl	80a2588 <_ZN6StringC1EPKc>
 80a1ea4:	4622      	mov	r2, r4
 80a1ea6:	4629      	mov	r1, r5
 80a1ea8:	4638      	mov	r0, r7
 80a1eaa:	f001 fe55 	bl	80a3b58 <__aeabi_atexit>

const String CALENDAR_ID = "1g30g95aegj1fpo3t4p7nehhsk@group.calendar.google.com"; 
 80a1eae:	4e24      	ldr	r6, [pc, #144]	; (80a1f40 <_GLOBAL__sub_I_app_stage+0xb8>)
const String CLIENT_SECRET = "A1f4r3HoBPF-XxzReyNYENEo";
 80a1eb0:	4640      	mov	r0, r8
 80a1eb2:	4924      	ldr	r1, [pc, #144]	; (80a1f44 <_GLOBAL__sub_I_app_stage+0xbc>)
 80a1eb4:	f000 fb68 	bl	80a2588 <_ZN6StringC1EPKc>
 80a1eb8:	4622      	mov	r2, r4
 80a1eba:	4629      	mov	r1, r5
 80a1ebc:	4640      	mov	r0, r8
 80a1ebe:	f001 fe4b 	bl	80a3b58 <__aeabi_atexit>
//
//	The following are global objects for the DFPlayer and Google classes.
//
//*****************************************************************************

Google_OAuth2 OAuth2(CLIENT_ID, CLIENT_SECRET);
 80a1ec2:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 80a1f68 <_GLOBAL__sub_I_app_stage+0xe0>
const String CALENDAR_ID = "1g30g95aegj1fpo3t4p7nehhsk@group.calendar.google.com"; 
 80a1ec6:	4630      	mov	r0, r6
 80a1ec8:	491f      	ldr	r1, [pc, #124]	; (80a1f48 <_GLOBAL__sub_I_app_stage+0xc0>)
 80a1eca:	f000 fb5d 	bl	80a2588 <_ZN6StringC1EPKc>
 80a1ece:	4622      	mov	r2, r4
 80a1ed0:	4629      	mov	r1, r5
 80a1ed2:	4630      	mov	r0, r6
 80a1ed4:	f001 fe40 	bl	80a3b58 <__aeabi_atexit>
Google_OAuth2 OAuth2(CLIENT_ID, CLIENT_SECRET);
 80a1ed8:	4642      	mov	r2, r8
 80a1eda:	4639      	mov	r1, r7
Google_Calendar Calendar(CALENDAR_ID, TIME_ZONE);
 80a1edc:	f8df 808c 	ldr.w	r8, [pc, #140]	; 80a1f6c <_GLOBAL__sub_I_app_stage+0xe4>
 80a1ee0:	4f1a      	ldr	r7, [pc, #104]	; (80a1f4c <_GLOBAL__sub_I_app_stage+0xc4>)
Google_OAuth2 OAuth2(CLIENT_ID, CLIENT_SECRET);
 80a1ee2:	4648      	mov	r0, r9
 80a1ee4:	f7fe f960 	bl	80a01a8 <_ZN13Google_OAuth2C1ERK6StringS2_>
 80a1ee8:	4622      	mov	r2, r4
 80a1eea:	4648      	mov	r0, r9
 80a1eec:	4918      	ldr	r1, [pc, #96]	; (80a1f50 <_GLOBAL__sub_I_app_stage+0xc8>)
 80a1eee:	f001 fe33 	bl	80a3b58 <__aeabi_atexit>
Google_Calendar Calendar(CALENDAR_ID, TIME_ZONE);
 80a1ef2:	463a      	mov	r2, r7
 80a1ef4:	4631      	mov	r1, r6
 80a1ef6:	4640      	mov	r0, r8
 80a1ef8:	f7fe ff4a 	bl	80a0d90 <_ZN15Google_CalendarC1ERK6StringRKa>
 80a1efc:	4622      	mov	r2, r4
 80a1efe:	4640      	mov	r0, r8
 80a1f00:	4914      	ldr	r1, [pc, #80]	; (80a1f54 <_GLOBAL__sub_I_app_stage+0xcc>)
 80a1f02:	f001 fe29 	bl	80a3b58 <__aeabi_atexit>
String currentState;
 80a1f06:	4e14      	ldr	r6, [pc, #80]	; (80a1f58 <_GLOBAL__sub_I_app_stage+0xd0>)
Relay_Control Control(TIME_ZONE);
 80a1f08:	4639      	mov	r1, r7
 80a1f0a:	4814      	ldr	r0, [pc, #80]	; (80a1f5c <_GLOBAL__sub_I_app_stage+0xd4>)
 80a1f0c:	f7ff fbbe 	bl	80a168c <_ZN13Relay_ControlC1ERKa>
    bool clearCredentials(void) {
        return network_clear_credentials(*this, 0, NULL, NULL);
    }

    int selectAntenna(WLanSelectAntenna_TypeDef antenna) {
        return wlan_select_antenna(antenna);
 80a1f10:	2001      	movs	r0, #1
 80a1f12:	f000 f957 	bl	80a21c4 <wlan_select_antenna>
 80a1f16:	4630      	mov	r0, r6
 80a1f18:	4911      	ldr	r1, [pc, #68]	; (80a1f60 <_GLOBAL__sub_I_app_stage+0xd8>)
 80a1f1a:	f000 fb35 	bl	80a2588 <_ZN6StringC1EPKc>
 80a1f1e:	4622      	mov	r2, r4
 80a1f20:	4629      	mov	r1, r5
 80a1f22:	4630      	mov	r0, r6
}
 80a1f24:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
String currentState;
 80a1f28:	f001 be16 	b.w	80a3b58 <__aeabi_atexit>
 80a1f2c:	200005d4 	.word	0x200005d4
 80a1f30:	200005d8 	.word	0x200005d8
 80a1f34:	20000240 	.word	0x20000240
 80a1f38:	080a24f5 	.word	0x080a24f5
 80a1f3c:	080a71db 	.word	0x080a71db
 80a1f40:	200005b4 	.word	0x200005b4
 80a1f44:	080a7224 	.word	0x080a7224
 80a1f48:	080a723d 	.word	0x080a723d
 80a1f4c:	080a7272 	.word	0x080a7272
 80a1f50:	080a1849 	.word	0x080a1849
 80a1f54:	080a181d 	.word	0x080a181d
 80a1f58:	200005ec 	.word	0x200005ec
 80a1f5c:	200002d0 	.word	0x200002d0
 80a1f60:	080a6ac2 	.word	0x080a6ac2
 80a1f64:	200005c4 	.word	0x200005c4
 80a1f68:	200002dc 	.word	0x200002dc
 80a1f6c:	20000250 	.word	0x20000250

080a1f70 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a1f70:	b508      	push	{r3, lr}
 80a1f72:	4b02      	ldr	r3, [pc, #8]	; (80a1f7c <HAL_Pin_Mode+0xc>)
 80a1f74:	681b      	ldr	r3, [r3, #0]
 80a1f76:	689b      	ldr	r3, [r3, #8]
 80a1f78:	9301      	str	r3, [sp, #4]
 80a1f7a:	bd08      	pop	{r3, pc}
 80a1f7c:	080601b0 	.word	0x080601b0

080a1f80 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a1f80:	b508      	push	{r3, lr}
 80a1f82:	4b02      	ldr	r3, [pc, #8]	; (80a1f8c <HAL_Get_Pin_Mode+0xc>)
 80a1f84:	681b      	ldr	r3, [r3, #0]
 80a1f86:	68db      	ldr	r3, [r3, #12]
 80a1f88:	9301      	str	r3, [sp, #4]
 80a1f8a:	bd08      	pop	{r3, pc}
 80a1f8c:	080601b0 	.word	0x080601b0

080a1f90 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a1f90:	b508      	push	{r3, lr}
 80a1f92:	4b02      	ldr	r3, [pc, #8]	; (80a1f9c <HAL_GPIO_Write+0xc>)
 80a1f94:	681b      	ldr	r3, [r3, #0]
 80a1f96:	691b      	ldr	r3, [r3, #16]
 80a1f98:	9301      	str	r3, [sp, #4]
 80a1f9a:	bd08      	pop	{r3, pc}
 80a1f9c:	080601b0 	.word	0x080601b0

080a1fa0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a1fa0:	b508      	push	{r3, lr}
 80a1fa2:	4b02      	ldr	r3, [pc, #8]	; (80a1fac <HAL_RNG_GetRandomNumber+0xc>)
 80a1fa4:	681b      	ldr	r3, [r3, #0]
 80a1fa6:	685b      	ldr	r3, [r3, #4]
 80a1fa8:	9301      	str	r3, [sp, #4]
 80a1faa:	bd08      	pop	{r3, pc}
 80a1fac:	0806019c 	.word	0x0806019c

080a1fb0 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a1fb0:	b508      	push	{r3, lr}
 80a1fb2:	4b02      	ldr	r3, [pc, #8]	; (80a1fbc <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a1fb4:	681b      	ldr	r3, [r3, #0]
 80a1fb6:	695b      	ldr	r3, [r3, #20]
 80a1fb8:	9301      	str	r3, [sp, #4]
 80a1fba:	bd08      	pop	{r3, pc}
 80a1fbc:	0806019c 	.word	0x0806019c

080a1fc0 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
 80a1fc0:	b508      	push	{r3, lr}
 80a1fc2:	4b02      	ldr	r3, [pc, #8]	; (80a1fcc <HAL_EEPROM_Init+0xc>)
 80a1fc4:	681b      	ldr	r3, [r3, #0]
 80a1fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a1fc8:	9301      	str	r3, [sp, #4]
 80a1fca:	bd08      	pop	{r3, pc}
 80a1fcc:	0806019c 	.word	0x0806019c

080a1fd0 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
 80a1fd0:	b508      	push	{r3, lr}
 80a1fd2:	4b02      	ldr	r3, [pc, #8]	; (80a1fdc <HAL_EEPROM_Get+0xc>)
 80a1fd4:	681b      	ldr	r3, [r3, #0]
 80a1fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1fd8:	9301      	str	r3, [sp, #4]
 80a1fda:	bd08      	pop	{r3, pc}
 80a1fdc:	0806019c 	.word	0x0806019c

080a1fe0 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
 80a1fe0:	b508      	push	{r3, lr}
 80a1fe2:	4b02      	ldr	r3, [pc, #8]	; (80a1fec <HAL_EEPROM_Put+0xc>)
 80a1fe4:	681b      	ldr	r3, [r3, #0]
 80a1fe6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1fe8:	9301      	str	r3, [sp, #4]
 80a1fea:	bd08      	pop	{r3, pc}
 80a1fec:	0806019c 	.word	0x0806019c

080a1ff0 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
 80a1ff0:	b508      	push	{r3, lr}
 80a1ff2:	4b02      	ldr	r3, [pc, #8]	; (80a1ffc <hal_rtc_time_is_valid+0xc>)
 80a1ff4:	681b      	ldr	r3, [r3, #0]
 80a1ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a1ff8:	9301      	str	r3, [sp, #4]
 80a1ffa:	bd08      	pop	{r3, pc}
 80a1ffc:	0806019c 	.word	0x0806019c

080a2000 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
 80a2000:	b508      	push	{r3, lr}
 80a2002:	4b02      	ldr	r3, [pc, #8]	; (80a200c <hal_rtc_get_time+0xc>)
 80a2004:	681b      	ldr	r3, [r3, #0]
 80a2006:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a2008:	9301      	str	r3, [sp, #4]
 80a200a:	bd08      	pop	{r3, pc}
 80a200c:	0806019c 	.word	0x0806019c

080a2010 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a2010:	b508      	push	{r3, lr}
 80a2012:	4b02      	ldr	r3, [pc, #8]	; (80a201c <os_mutex_recursive_create+0xc>)
 80a2014:	681b      	ldr	r3, [r3, #0]
 80a2016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a2018:	9301      	str	r3, [sp, #4]
 80a201a:	bd08      	pop	{r3, pc}
 80a201c:	080601d0 	.word	0x080601d0

080a2020 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a2020:	b508      	push	{r3, lr}
 80a2022:	4b02      	ldr	r3, [pc, #8]	; (80a202c <os_mutex_recursive_destroy+0xc>)
 80a2024:	681b      	ldr	r3, [r3, #0]
 80a2026:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a2028:	9301      	str	r3, [sp, #4]
 80a202a:	bd08      	pop	{r3, pc}
 80a202c:	080601d0 	.word	0x080601d0

080a2030 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80a2030:	b508      	push	{r3, lr}
 80a2032:	4b02      	ldr	r3, [pc, #8]	; (80a203c <hal_usart_init+0xc>)
 80a2034:	681b      	ldr	r3, [r3, #0]
 80a2036:	699b      	ldr	r3, [r3, #24]
 80a2038:	9301      	str	r3, [sp, #4]
 80a203a:	bd08      	pop	{r3, pc}
 80a203c:	080601c4 	.word	0x080601c4

080a2040 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a2040:	b508      	push	{r3, lr}
 80a2042:	4b02      	ldr	r3, [pc, #8]	; (80a204c <hal_usart_write+0xc>)
 80a2044:	681b      	ldr	r3, [r3, #0]
 80a2046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a2048:	9301      	str	r3, [sp, #4]
 80a204a:	bd08      	pop	{r3, pc}
 80a204c:	080601c4 	.word	0x080601c4

080a2050 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a2050:	b508      	push	{r3, lr}
 80a2052:	4b02      	ldr	r3, [pc, #8]	; (80a205c <hal_usart_available+0xc>)
 80a2054:	681b      	ldr	r3, [r3, #0]
 80a2056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a2058:	9301      	str	r3, [sp, #4]
 80a205a:	bd08      	pop	{r3, pc}
 80a205c:	080601c4 	.word	0x080601c4

080a2060 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a2060:	b508      	push	{r3, lr}
 80a2062:	4b02      	ldr	r3, [pc, #8]	; (80a206c <hal_usart_read+0xc>)
 80a2064:	681b      	ldr	r3, [r3, #0]
 80a2066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a2068:	9301      	str	r3, [sp, #4]
 80a206a:	bd08      	pop	{r3, pc}
 80a206c:	080601c4 	.word	0x080601c4

080a2070 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a2070:	b508      	push	{r3, lr}
 80a2072:	4b02      	ldr	r3, [pc, #8]	; (80a207c <hal_usart_peek+0xc>)
 80a2074:	681b      	ldr	r3, [r3, #0]
 80a2076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2078:	9301      	str	r3, [sp, #4]
 80a207a:	bd08      	pop	{r3, pc}
 80a207c:	080601c4 	.word	0x080601c4

080a2080 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a2080:	b508      	push	{r3, lr}
 80a2082:	4b02      	ldr	r3, [pc, #8]	; (80a208c <hal_usart_flush+0xc>)
 80a2084:	681b      	ldr	r3, [r3, #0]
 80a2086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a2088:	9301      	str	r3, [sp, #4]
 80a208a:	bd08      	pop	{r3, pc}
 80a208c:	080601c4 	.word	0x080601c4

080a2090 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a2090:	b508      	push	{r3, lr}
 80a2092:	4b02      	ldr	r3, [pc, #8]	; (80a209c <hal_usart_is_enabled+0xc>)
 80a2094:	681b      	ldr	r3, [r3, #0]
 80a2096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a2098:	9301      	str	r3, [sp, #4]
 80a209a:	bd08      	pop	{r3, pc}
 80a209c:	080601c4 	.word	0x080601c4

080a20a0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a20a0:	b508      	push	{r3, lr}
 80a20a2:	4b02      	ldr	r3, [pc, #8]	; (80a20ac <hal_usart_available_data_for_write+0xc>)
 80a20a4:	681b      	ldr	r3, [r3, #0]
 80a20a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a20a8:	9301      	str	r3, [sp, #4]
 80a20aa:	bd08      	pop	{r3, pc}
 80a20ac:	080601c4 	.word	0x080601c4

080a20b0 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a20b0:	b508      	push	{r3, lr}
 80a20b2:	4b02      	ldr	r3, [pc, #8]	; (80a20bc <hal_i2c_write+0xc>)
 80a20b4:	681b      	ldr	r3, [r3, #0]
 80a20b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a20b8:	9301      	str	r3, [sp, #4]
 80a20ba:	bd08      	pop	{r3, pc}
 80a20bc:	080601ac 	.word	0x080601ac

080a20c0 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a20c0:	b508      	push	{r3, lr}
 80a20c2:	4b02      	ldr	r3, [pc, #8]	; (80a20cc <hal_i2c_available+0xc>)
 80a20c4:	681b      	ldr	r3, [r3, #0]
 80a20c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a20c8:	9301      	str	r3, [sp, #4]
 80a20ca:	bd08      	pop	{r3, pc}
 80a20cc:	080601ac 	.word	0x080601ac

080a20d0 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a20d0:	b508      	push	{r3, lr}
 80a20d2:	4b02      	ldr	r3, [pc, #8]	; (80a20dc <hal_i2c_read+0xc>)
 80a20d4:	681b      	ldr	r3, [r3, #0]
 80a20d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a20d8:	9301      	str	r3, [sp, #4]
 80a20da:	bd08      	pop	{r3, pc}
 80a20dc:	080601ac 	.word	0x080601ac

080a20e0 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a20e0:	b508      	push	{r3, lr}
 80a20e2:	4b02      	ldr	r3, [pc, #8]	; (80a20ec <hal_i2c_peek+0xc>)
 80a20e4:	681b      	ldr	r3, [r3, #0]
 80a20e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a20e8:	9301      	str	r3, [sp, #4]
 80a20ea:	bd08      	pop	{r3, pc}
 80a20ec:	080601ac 	.word	0x080601ac

080a20f0 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a20f0:	b508      	push	{r3, lr}
 80a20f2:	4b02      	ldr	r3, [pc, #8]	; (80a20fc <hal_i2c_flush+0xc>)
 80a20f4:	681b      	ldr	r3, [r3, #0]
 80a20f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a20f8:	9301      	str	r3, [sp, #4]
 80a20fa:	bd08      	pop	{r3, pc}
 80a20fc:	080601ac 	.word	0x080601ac

080a2100 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a2100:	b508      	push	{r3, lr}
 80a2102:	4b02      	ldr	r3, [pc, #8]	; (80a210c <hal_i2c_is_enabled+0xc>)
 80a2104:	681b      	ldr	r3, [r3, #0]
 80a2106:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a2108:	9301      	str	r3, [sp, #4]
 80a210a:	bd08      	pop	{r3, pc}
 80a210c:	080601ac 	.word	0x080601ac

080a2110 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a2110:	b508      	push	{r3, lr}
 80a2112:	4b03      	ldr	r3, [pc, #12]	; (80a2120 <hal_i2c_init+0x10>)
 80a2114:	681b      	ldr	r3, [r3, #0]
 80a2116:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a211a:	9301      	str	r3, [sp, #4]
 80a211c:	bd08      	pop	{r3, pc}
 80a211e:	0000      	.short	0x0000
 80a2120:	080601ac 	.word	0x080601ac

080a2124 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a2124:	b508      	push	{r3, lr}
 80a2126:	4b02      	ldr	r3, [pc, #8]	; (80a2130 <hal_spi_init+0xc>)
 80a2128:	681b      	ldr	r3, [r3, #0]
 80a212a:	69db      	ldr	r3, [r3, #28]
 80a212c:	9301      	str	r3, [sp, #4]
 80a212e:	bd08      	pop	{r3, pc}
 80a2130:	080601b4 	.word	0x080601b4

080a2134 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a2134:	b508      	push	{r3, lr}
 80a2136:	4b02      	ldr	r3, [pc, #8]	; (80a2140 <hal_spi_is_enabled+0xc>)
 80a2138:	681b      	ldr	r3, [r3, #0]
 80a213a:	6a1b      	ldr	r3, [r3, #32]
 80a213c:	9301      	str	r3, [sp, #4]
 80a213e:	bd08      	pop	{r3, pc}
 80a2140:	080601b4 	.word	0x080601b4

080a2144 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a2144:	b508      	push	{r3, lr}
 80a2146:	4b02      	ldr	r3, [pc, #8]	; (80a2150 <HAL_USB_USART_Init+0xc>)
 80a2148:	681b      	ldr	r3, [r3, #0]
 80a214a:	681b      	ldr	r3, [r3, #0]
 80a214c:	9301      	str	r3, [sp, #4]
 80a214e:	bd08      	pop	{r3, pc}
 80a2150:	080601d8 	.word	0x080601d8

080a2154 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a2154:	b508      	push	{r3, lr}
 80a2156:	4b02      	ldr	r3, [pc, #8]	; (80a2160 <HAL_USB_USART_Begin+0xc>)
 80a2158:	681b      	ldr	r3, [r3, #0]
 80a215a:	685b      	ldr	r3, [r3, #4]
 80a215c:	9301      	str	r3, [sp, #4]
 80a215e:	bd08      	pop	{r3, pc}
 80a2160:	080601d8 	.word	0x080601d8

080a2164 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a2164:	b508      	push	{r3, lr}
 80a2166:	4b02      	ldr	r3, [pc, #8]	; (80a2170 <HAL_USB_USART_Available_Data+0xc>)
 80a2168:	681b      	ldr	r3, [r3, #0]
 80a216a:	691b      	ldr	r3, [r3, #16]
 80a216c:	9301      	str	r3, [sp, #4]
 80a216e:	bd08      	pop	{r3, pc}
 80a2170:	080601d8 	.word	0x080601d8

080a2174 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a2174:	b508      	push	{r3, lr}
 80a2176:	4b02      	ldr	r3, [pc, #8]	; (80a2180 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a2178:	681b      	ldr	r3, [r3, #0]
 80a217a:	695b      	ldr	r3, [r3, #20]
 80a217c:	9301      	str	r3, [sp, #4]
 80a217e:	bd08      	pop	{r3, pc}
 80a2180:	080601d8 	.word	0x080601d8

080a2184 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a2184:	b508      	push	{r3, lr}
 80a2186:	4b02      	ldr	r3, [pc, #8]	; (80a2190 <HAL_USB_USART_Receive_Data+0xc>)
 80a2188:	681b      	ldr	r3, [r3, #0]
 80a218a:	699b      	ldr	r3, [r3, #24]
 80a218c:	9301      	str	r3, [sp, #4]
 80a218e:	bd08      	pop	{r3, pc}
 80a2190:	080601d8 	.word	0x080601d8

080a2194 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a2194:	b508      	push	{r3, lr}
 80a2196:	4b02      	ldr	r3, [pc, #8]	; (80a21a0 <HAL_USB_USART_Send_Data+0xc>)
 80a2198:	681b      	ldr	r3, [r3, #0]
 80a219a:	69db      	ldr	r3, [r3, #28]
 80a219c:	9301      	str	r3, [sp, #4]
 80a219e:	bd08      	pop	{r3, pc}
 80a21a0:	080601d8 	.word	0x080601d8

080a21a4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a21a4:	b508      	push	{r3, lr}
 80a21a6:	4b02      	ldr	r3, [pc, #8]	; (80a21b0 <HAL_USB_USART_Flush_Data+0xc>)
 80a21a8:	681b      	ldr	r3, [r3, #0]
 80a21aa:	6a1b      	ldr	r3, [r3, #32]
 80a21ac:	9301      	str	r3, [sp, #4]
 80a21ae:	bd08      	pop	{r3, pc}
 80a21b0:	080601d8 	.word	0x080601d8

080a21b4 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a21b4:	b508      	push	{r3, lr}
 80a21b6:	4b02      	ldr	r3, [pc, #8]	; (80a21c0 <inet_gethostbyname+0xc>)
 80a21b8:	681b      	ldr	r3, [r3, #0]
 80a21ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a21bc:	9301      	str	r3, [sp, #4]
 80a21be:	bd08      	pop	{r3, pc}
 80a21c0:	080601c0 	.word	0x080601c0

080a21c4 <wlan_select_antenna>:
DYNALIB_FN(19, hal_wlan, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(20, hal_wlan, wlan_select_antenna, int(WLanSelectAntenna_TypeDef))
 80a21c4:	b508      	push	{r3, lr}
 80a21c6:	4b02      	ldr	r3, [pc, #8]	; (80a21d0 <wlan_select_antenna+0xc>)
 80a21c8:	681b      	ldr	r3, [r3, #0]
 80a21ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80a21cc:	9301      	str	r3, [sp, #4]
 80a21ce:	bd08      	pop	{r3, pc}
 80a21d0:	080601c0 	.word	0x080601c0

080a21d4 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80a21d4:	b508      	push	{r3, lr}
 80a21d6:	4b02      	ldr	r3, [pc, #8]	; (80a21e0 <system_mode+0xc>)
 80a21d8:	681b      	ldr	r3, [r3, #0]
 80a21da:	681b      	ldr	r3, [r3, #0]
 80a21dc:	9301      	str	r3, [sp, #4]
 80a21de:	bd08      	pop	{r3, pc}
 80a21e0:	080601a4 	.word	0x080601a4

080a21e4 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a21e4:	b508      	push	{r3, lr}
 80a21e6:	4b02      	ldr	r3, [pc, #8]	; (80a21f0 <set_system_mode+0xc>)
 80a21e8:	681b      	ldr	r3, [r3, #0]
 80a21ea:	685b      	ldr	r3, [r3, #4]
 80a21ec:	9301      	str	r3, [sp, #4]
 80a21ee:	bd08      	pop	{r3, pc}
 80a21f0:	080601a4 	.word	0x080601a4

080a21f4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a21f4:	b508      	push	{r3, lr}
 80a21f6:	4b02      	ldr	r3, [pc, #8]	; (80a2200 <system_delay_ms+0xc>)
 80a21f8:	681b      	ldr	r3, [r3, #0]
 80a21fa:	695b      	ldr	r3, [r3, #20]
 80a21fc:	9301      	str	r3, [sp, #4]
 80a21fe:	bd08      	pop	{r3, pc}
 80a2200:	080601a4 	.word	0x080601a4

080a2204 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a2204:	b508      	push	{r3, lr}
 80a2206:	4b02      	ldr	r3, [pc, #8]	; (80a2210 <application_thread_current+0xc>)
 80a2208:	681b      	ldr	r3, [r3, #0]
 80a220a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a220c:	9301      	str	r3, [sp, #4]
 80a220e:	bd08      	pop	{r3, pc}
 80a2210:	080601a4 	.word	0x080601a4

080a2214 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a2214:	b508      	push	{r3, lr}
 80a2216:	4b02      	ldr	r3, [pc, #8]	; (80a2220 <application_thread_invoke+0xc>)
 80a2218:	681b      	ldr	r3, [r3, #0]
 80a221a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a221c:	9301      	str	r3, [sp, #4]
 80a221e:	bd08      	pop	{r3, pc}
 80a2220:	080601a4 	.word	0x080601a4

080a2224 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80a2224:	b508      	push	{r3, lr}
 80a2226:	4b02      	ldr	r3, [pc, #8]	; (80a2230 <system_thread_get_state+0xc>)
 80a2228:	681b      	ldr	r3, [r3, #0]
 80a222a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a222c:	9301      	str	r3, [sp, #4]
 80a222e:	bd08      	pop	{r3, pc}
 80a2230:	080601a4 	.word	0x080601a4

080a2234 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a2234:	b508      	push	{r3, lr}
 80a2236:	4b03      	ldr	r3, [pc, #12]	; (80a2244 <system_ctrl_set_app_request_handler+0x10>)
 80a2238:	681b      	ldr	r3, [r3, #0]
 80a223a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a223e:	9301      	str	r3, [sp, #4]
 80a2240:	bd08      	pop	{r3, pc}
 80a2242:	0000      	.short	0x0000
 80a2244:	080601a4 	.word	0x080601a4

080a2248 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a2248:	b508      	push	{r3, lr}
 80a224a:	4b03      	ldr	r3, [pc, #12]	; (80a2258 <system_ctrl_set_result+0x10>)
 80a224c:	681b      	ldr	r3, [r3, #0]
 80a224e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a2252:	9301      	str	r3, [sp, #4]
 80a2254:	bd08      	pop	{r3, pc}
 80a2256:	0000      	.short	0x0000
 80a2258:	080601a4 	.word	0x080601a4

080a225c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a225c:	b508      	push	{r3, lr}
 80a225e:	4b02      	ldr	r3, [pc, #8]	; (80a2268 <network_connect+0xc>)
 80a2260:	681b      	ldr	r3, [r3, #0]
 80a2262:	685b      	ldr	r3, [r3, #4]
 80a2264:	9301      	str	r3, [sp, #4]
 80a2266:	bd08      	pop	{r3, pc}
 80a2268:	080601c8 	.word	0x080601c8

080a226c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a226c:	b508      	push	{r3, lr}
 80a226e:	4b02      	ldr	r3, [pc, #8]	; (80a2278 <network_connecting+0xc>)
 80a2270:	681b      	ldr	r3, [r3, #0]
 80a2272:	689b      	ldr	r3, [r3, #8]
 80a2274:	9301      	str	r3, [sp, #4]
 80a2276:	bd08      	pop	{r3, pc}
 80a2278:	080601c8 	.word	0x080601c8

080a227c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a227c:	b508      	push	{r3, lr}
 80a227e:	4b02      	ldr	r3, [pc, #8]	; (80a2288 <network_disconnect+0xc>)
 80a2280:	681b      	ldr	r3, [r3, #0]
 80a2282:	68db      	ldr	r3, [r3, #12]
 80a2284:	9301      	str	r3, [sp, #4]
 80a2286:	bd08      	pop	{r3, pc}
 80a2288:	080601c8 	.word	0x080601c8

080a228c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a228c:	b508      	push	{r3, lr}
 80a228e:	4b02      	ldr	r3, [pc, #8]	; (80a2298 <network_ready+0xc>)
 80a2290:	681b      	ldr	r3, [r3, #0]
 80a2292:	691b      	ldr	r3, [r3, #16]
 80a2294:	9301      	str	r3, [sp, #4]
 80a2296:	bd08      	pop	{r3, pc}
 80a2298:	080601c8 	.word	0x080601c8

080a229c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a229c:	b508      	push	{r3, lr}
 80a229e:	4b02      	ldr	r3, [pc, #8]	; (80a22a8 <network_on+0xc>)
 80a22a0:	681b      	ldr	r3, [r3, #0]
 80a22a2:	695b      	ldr	r3, [r3, #20]
 80a22a4:	9301      	str	r3, [sp, #4]
 80a22a6:	bd08      	pop	{r3, pc}
 80a22a8:	080601c8 	.word	0x080601c8

080a22ac <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a22ac:	b508      	push	{r3, lr}
 80a22ae:	4b02      	ldr	r3, [pc, #8]	; (80a22b8 <network_off+0xc>)
 80a22b0:	681b      	ldr	r3, [r3, #0]
 80a22b2:	699b      	ldr	r3, [r3, #24]
 80a22b4:	9301      	str	r3, [sp, #4]
 80a22b6:	bd08      	pop	{r3, pc}
 80a22b8:	080601c8 	.word	0x080601c8

080a22bc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a22bc:	b508      	push	{r3, lr}
 80a22be:	4b02      	ldr	r3, [pc, #8]	; (80a22c8 <network_listen+0xc>)
 80a22c0:	681b      	ldr	r3, [r3, #0]
 80a22c2:	69db      	ldr	r3, [r3, #28]
 80a22c4:	9301      	str	r3, [sp, #4]
 80a22c6:	bd08      	pop	{r3, pc}
 80a22c8:	080601c8 	.word	0x080601c8

080a22cc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a22cc:	b508      	push	{r3, lr}
 80a22ce:	4b02      	ldr	r3, [pc, #8]	; (80a22d8 <network_listening+0xc>)
 80a22d0:	681b      	ldr	r3, [r3, #0]
 80a22d2:	6a1b      	ldr	r3, [r3, #32]
 80a22d4:	9301      	str	r3, [sp, #4]
 80a22d6:	bd08      	pop	{r3, pc}
 80a22d8:	080601c8 	.word	0x080601c8

080a22dc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a22dc:	b508      	push	{r3, lr}
 80a22de:	4b02      	ldr	r3, [pc, #8]	; (80a22e8 <network_set_listen_timeout+0xc>)
 80a22e0:	681b      	ldr	r3, [r3, #0]
 80a22e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a22e4:	9301      	str	r3, [sp, #4]
 80a22e6:	bd08      	pop	{r3, pc}
 80a22e8:	080601c8 	.word	0x080601c8

080a22ec <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a22ec:	b508      	push	{r3, lr}
 80a22ee:	4b02      	ldr	r3, [pc, #8]	; (80a22f8 <network_get_listen_timeout+0xc>)
 80a22f0:	681b      	ldr	r3, [r3, #0]
 80a22f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a22f4:	9301      	str	r3, [sp, #4]
 80a22f6:	bd08      	pop	{r3, pc}
 80a22f8:	080601c8 	.word	0x080601c8

080a22fc <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a22fc:	b508      	push	{r3, lr}
 80a22fe:	4b02      	ldr	r3, [pc, #8]	; (80a2308 <network_is_on+0xc>)
 80a2300:	681b      	ldr	r3, [r3, #0]
 80a2302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a2304:	9301      	str	r3, [sp, #4]
 80a2306:	bd08      	pop	{r3, pc}
 80a2308:	080601c8 	.word	0x080601c8

080a230c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a230c:	b508      	push	{r3, lr}
 80a230e:	4b02      	ldr	r3, [pc, #8]	; (80a2318 <network_is_off+0xc>)
 80a2310:	681b      	ldr	r3, [r3, #0]
 80a2312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a2314:	9301      	str	r3, [sp, #4]
 80a2316:	bd08      	pop	{r3, pc}
 80a2318:	080601c8 	.word	0x080601c8

080a231c <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 80a231c:	b508      	push	{r3, lr}
 80a231e:	4b02      	ldr	r3, [pc, #8]	; (80a2328 <spark_variable+0xc>)
 80a2320:	681b      	ldr	r3, [r3, #0]
 80a2322:	681b      	ldr	r3, [r3, #0]
 80a2324:	9301      	str	r3, [sp, #4]
 80a2326:	bd08      	pop	{r3, pc}
 80a2328:	080601cc 	.word	0x080601cc

080a232c <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 80a232c:	b508      	push	{r3, lr}
 80a232e:	4b02      	ldr	r3, [pc, #8]	; (80a2338 <spark_function+0xc>)
 80a2330:	681b      	ldr	r3, [r3, #0]
 80a2332:	685b      	ldr	r3, [r3, #4]
 80a2334:	9301      	str	r3, [sp, #4]
 80a2336:	bd08      	pop	{r3, pc}
 80a2338:	080601cc 	.word	0x080601cc

080a233c <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a233c:	b508      	push	{r3, lr}
 80a233e:	4b02      	ldr	r3, [pc, #8]	; (80a2348 <spark_process+0xc>)
 80a2340:	681b      	ldr	r3, [r3, #0]
 80a2342:	689b      	ldr	r3, [r3, #8]
 80a2344:	9301      	str	r3, [sp, #4]
 80a2346:	bd08      	pop	{r3, pc}
 80a2348:	080601cc 	.word	0x080601cc

080a234c <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a234c:	b508      	push	{r3, lr}
 80a234e:	4b02      	ldr	r3, [pc, #8]	; (80a2358 <spark_cloud_flag_connected+0xc>)
 80a2350:	681b      	ldr	r3, [r3, #0]
 80a2352:	695b      	ldr	r3, [r3, #20]
 80a2354:	9301      	str	r3, [sp, #4]
 80a2356:	bd08      	pop	{r3, pc}
 80a2358:	080601cc 	.word	0x080601cc

080a235c <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
 80a235c:	b508      	push	{r3, lr}
 80a235e:	4b02      	ldr	r3, [pc, #8]	; (80a2368 <spark_deviceID+0xc>)
 80a2360:	681b      	ldr	r3, [r3, #0]
 80a2362:	69db      	ldr	r3, [r3, #28]
 80a2364:	9301      	str	r3, [sp, #4]
 80a2366:	bd08      	pop	{r3, pc}
 80a2368:	080601cc 	.word	0x080601cc

080a236c <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a236c:	b508      	push	{r3, lr}
 80a236e:	4b02      	ldr	r3, [pc, #8]	; (80a2378 <spark_send_event+0xc>)
 80a2370:	681b      	ldr	r3, [r3, #0]
 80a2372:	6a1b      	ldr	r3, [r3, #32]
 80a2374:	9301      	str	r3, [sp, #4]
 80a2376:	bd08      	pop	{r3, pc}
 80a2378:	080601cc 	.word	0x080601cc

080a237c <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
 80a237c:	b508      	push	{r3, lr}
 80a237e:	4b02      	ldr	r3, [pc, #8]	; (80a2388 <spark_subscribe+0xc>)
 80a2380:	681b      	ldr	r3, [r3, #0]
 80a2382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a2384:	9301      	str	r3, [sp, #4]
 80a2386:	bd08      	pop	{r3, pc}
 80a2388:	080601cc 	.word	0x080601cc

080a238c <spark_unsubscribe>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
 80a238c:	b508      	push	{r3, lr}
 80a238e:	4b02      	ldr	r3, [pc, #8]	; (80a2398 <spark_unsubscribe+0xc>)
 80a2390:	681b      	ldr	r3, [r3, #0]
 80a2392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a2394:	9301      	str	r3, [sp, #4]
 80a2396:	bd08      	pop	{r3, pc}
 80a2398:	080601cc 	.word	0x080601cc

080a239c <spark_sync_time_pending>:
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 80a239c:	b508      	push	{r3, lr}
 80a239e:	4b02      	ldr	r3, [pc, #8]	; (80a23a8 <spark_sync_time_pending+0xc>)
 80a23a0:	681b      	ldr	r3, [r3, #0]
 80a23a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a23a4:	9301      	str	r3, [sp, #4]
 80a23a6:	bd08      	pop	{r3, pc}
 80a23a8:	080601cc 	.word	0x080601cc

080a23ac <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a23ac:	b508      	push	{r3, lr}
 80a23ae:	4b02      	ldr	r3, [pc, #8]	; (80a23b8 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a23b0:	681b      	ldr	r3, [r3, #0]
 80a23b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a23b4:	9301      	str	r3, [sp, #4]
 80a23b6:	bd08      	pop	{r3, pc}
 80a23b8:	080601cc 	.word	0x080601cc

080a23bc <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a23bc:	b508      	push	{r3, lr}
 80a23be:	4b02      	ldr	r3, [pc, #8]	; (80a23c8 <malloc+0xc>)
 80a23c0:	681b      	ldr	r3, [r3, #0]
 80a23c2:	681b      	ldr	r3, [r3, #0]
 80a23c4:	9301      	str	r3, [sp, #4]
 80a23c6:	bd08      	pop	{r3, pc}
 80a23c8:	080601a0 	.word	0x080601a0

080a23cc <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a23cc:	b508      	push	{r3, lr}
 80a23ce:	4b02      	ldr	r3, [pc, #8]	; (80a23d8 <free+0xc>)
 80a23d0:	681b      	ldr	r3, [r3, #0]
 80a23d2:	685b      	ldr	r3, [r3, #4]
 80a23d4:	9301      	str	r3, [sp, #4]
 80a23d6:	bd08      	pop	{r3, pc}
 80a23d8:	080601a0 	.word	0x080601a0

080a23dc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a23dc:	b508      	push	{r3, lr}
 80a23de:	4b02      	ldr	r3, [pc, #8]	; (80a23e8 <realloc+0xc>)
 80a23e0:	681b      	ldr	r3, [r3, #0]
 80a23e2:	689b      	ldr	r3, [r3, #8]
 80a23e4:	9301      	str	r3, [sp, #4]
 80a23e6:	bd08      	pop	{r3, pc}
 80a23e8:	080601a0 	.word	0x080601a0

080a23ec <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
 80a23ec:	b508      	push	{r3, lr}
 80a23ee:	4b02      	ldr	r3, [pc, #8]	; (80a23f8 <sprintf+0xc>)
 80a23f0:	681b      	ldr	r3, [r3, #0]
 80a23f2:	68db      	ldr	r3, [r3, #12]
 80a23f4:	9301      	str	r3, [sp, #4]
 80a23f6:	bd08      	pop	{r3, pc}
 80a23f8:	080601a0 	.word	0x080601a0

080a23fc <siprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 80a23fc:	b508      	push	{r3, lr}
 80a23fe:	4b02      	ldr	r3, [pc, #8]	; (80a2408 <siprintf+0xc>)
 80a2400:	681b      	ldr	r3, [r3, #0]
 80a2402:	691b      	ldr	r3, [r3, #16]
 80a2404:	9301      	str	r3, [sp, #4]
 80a2406:	bd08      	pop	{r3, pc}
 80a2408:	080601a0 	.word	0x080601a0

080a240c <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 80a240c:	b508      	push	{r3, lr}
 80a240e:	4b02      	ldr	r3, [pc, #8]	; (80a2418 <siscanf+0xc>)
 80a2410:	681b      	ldr	r3, [r3, #0]
 80a2412:	699b      	ldr	r3, [r3, #24]
 80a2414:	9301      	str	r3, [sp, #4]
 80a2416:	bd08      	pop	{r3, pc}
 80a2418:	080601a0 	.word	0x080601a0

080a241c <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 80a241c:	b508      	push	{r3, lr}
 80a241e:	4b02      	ldr	r3, [pc, #8]	; (80a2428 <snprintf+0xc>)
 80a2420:	681b      	ldr	r3, [r3, #0]
 80a2422:	69db      	ldr	r3, [r3, #28]
 80a2424:	9301      	str	r3, [sp, #4]
 80a2426:	bd08      	pop	{r3, pc}
 80a2428:	080601a0 	.word	0x080601a0

080a242c <sniprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
 80a242c:	b508      	push	{r3, lr}
 80a242e:	4b02      	ldr	r3, [pc, #8]	; (80a2438 <sniprintf+0xc>)
 80a2430:	681b      	ldr	r3, [r3, #0]
 80a2432:	6a1b      	ldr	r3, [r3, #32]
 80a2434:	9301      	str	r3, [sp, #4]
 80a2436:	bd08      	pop	{r3, pc}
 80a2438:	080601a0 	.word	0x080601a0

080a243c <vsnprintf>:
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a243c:	b508      	push	{r3, lr}
 80a243e:	4b02      	ldr	r3, [pc, #8]	; (80a2448 <vsnprintf+0xc>)
 80a2440:	681b      	ldr	r3, [r3, #0]
 80a2442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a2444:	9301      	str	r3, [sp, #4]
 80a2446:	bd08      	pop	{r3, pc}
 80a2448:	080601a0 	.word	0x080601a0

080a244c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a244c:	b508      	push	{r3, lr}
 80a244e:	4b02      	ldr	r3, [pc, #8]	; (80a2458 <abort+0xc>)
 80a2450:	681b      	ldr	r3, [r3, #0]
 80a2452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a2454:	9301      	str	r3, [sp, #4]
 80a2456:	bd08      	pop	{r3, pc}
 80a2458:	080601a0 	.word	0x080601a0

080a245c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a245c:	b508      	push	{r3, lr}
 80a245e:	4b02      	ldr	r3, [pc, #8]	; (80a2468 <_malloc_r+0xc>)
 80a2460:	681b      	ldr	r3, [r3, #0]
 80a2462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2464:	9301      	str	r3, [sp, #4]
 80a2466:	bd08      	pop	{r3, pc}
 80a2468:	080601a0 	.word	0x080601a0

080a246c <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a246c:	b508      	push	{r3, lr}
 80a246e:	4b02      	ldr	r3, [pc, #8]	; (80a2478 <newlib_impure_ptr_callback+0xc>)
 80a2470:	681b      	ldr	r3, [r3, #0]
 80a2472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a2474:	9301      	str	r3, [sp, #4]
 80a2476:	bd08      	pop	{r3, pc}
 80a2478:	080601a0 	.word	0x080601a0

080a247c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a247c:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a247e:	2600      	movs	r6, #0
 80a2480:	4604      	mov	r4, r0
 80a2482:	460d      	mov	r5, r1
 80a2484:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a2488:	f7ff fdc2 	bl	80a2010 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a248c:	4628      	mov	r0, r5
    _spi = spi;
 80a248e:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a2490:	f7ff fe48 	bl	80a2124 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a2494:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a2496:	6066      	str	r6, [r4, #4]
}
 80a2498:	bd70      	pop	{r4, r5, r6, pc}

080a249a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80a249a:	b510      	push	{r4, lr}
 80a249c:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a249e:	6800      	ldr	r0, [r0, #0]
 80a24a0:	b118      	cbz	r0, 80a24aa <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
 80a24a2:	f7ff ff93 	bl	80a23cc <free>
            wakeupSource_ = nullptr;
 80a24a6:	2300      	movs	r3, #0
 80a24a8:	6023      	str	r3, [r4, #0]
        }
    }
 80a24aa:	bd10      	pop	{r4, pc}

080a24ac <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a24ac:	b510      	push	{r4, lr}
 80a24ae:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
 80a24b0:	f7ff fff3 	bl	80a249a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
 80a24b4:	4620      	mov	r0, r4
 80a24b6:	bd10      	pop	{r4, pc}

080a24b8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a24b8:	2202      	movs	r2, #2
              error_(SYSTEM_ERROR_NONE) {
 80a24ba:	2000      	movs	r0, #0
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a24bc:	b510      	push	{r4, lr}
 80a24be:	4b08      	ldr	r3, [pc, #32]	; (80a24e0 <_GLOBAL__sub_I_System+0x28>)
 80a24c0:	4c08      	ldr	r4, [pc, #32]	; (80a24e4 <_GLOBAL__sub_I_System+0x2c>)
 80a24c2:	601a      	str	r2, [r3, #0]
    SleepResult() {}
 80a24c4:	4b08      	ldr	r3, [pc, #32]	; (80a24e8 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
 80a24c6:	6020      	str	r0, [r4, #0]
 80a24c8:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
 80a24ca:	71a0      	strb	r0, [r4, #6]
 80a24cc:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a24ce:	f7ff fe89 	bl	80a21e4 <set_system_mode>
SystemClass System;
 80a24d2:	4620      	mov	r0, r4
 80a24d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
 80a24d8:	4a04      	ldr	r2, [pc, #16]	; (80a24ec <_GLOBAL__sub_I_System+0x34>)
 80a24da:	4905      	ldr	r1, [pc, #20]	; (80a24f0 <_GLOBAL__sub_I_System+0x38>)
 80a24dc:	f001 bb3c 	b.w	80a3b58 <__aeabi_atexit>
 80a24e0:	20000634 	.word	0x20000634
 80a24e4:	20000628 	.word	0x20000628
 80a24e8:	ffff0000 	.word	0xffff0000
 80a24ec:	20000240 	.word	0x20000240
 80a24f0:	080a24ad 	.word	0x080a24ad

080a24f4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a24f4:	b510      	push	{r4, lr}
 80a24f6:	4604      	mov	r4, r0
{
	free(buffer);
 80a24f8:	6800      	ldr	r0, [r0, #0]
 80a24fa:	f7ff ff67 	bl	80a23cc <free>
}
 80a24fe:	4620      	mov	r0, r4
 80a2500:	bd10      	pop	{r4, pc}

080a2502 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a2502:	b510      	push	{r4, lr}
 80a2504:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a2506:	6800      	ldr	r0, [r0, #0]
 80a2508:	b108      	cbz	r0, 80a250e <_ZN6String10invalidateEv+0xc>
 80a250a:	f7ff ff5f 	bl	80a23cc <free>
	buffer = NULL;
 80a250e:	2300      	movs	r3, #0
	capacity = len = 0;
 80a2510:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 80a2514:	6023      	str	r3, [r4, #0]
}
 80a2516:	bd10      	pop	{r4, pc}

080a2518 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a2518:	b538      	push	{r3, r4, r5, lr}
 80a251a:	4604      	mov	r4, r0
 80a251c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a251e:	6800      	ldr	r0, [r0, #0]
 80a2520:	3101      	adds	r1, #1
 80a2522:	f7ff ff5b 	bl	80a23dc <realloc>
	if (newbuffer) {
 80a2526:	b110      	cbz	r0, 80a252e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a2528:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80a252c:	2001      	movs	r0, #1
	}
	return 0;
}
 80a252e:	bd38      	pop	{r3, r4, r5, pc}

080a2530 <_ZN6String7reserveEj>:
{
 80a2530:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a2532:	6803      	ldr	r3, [r0, #0]
{
 80a2534:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a2536:	b123      	cbz	r3, 80a2542 <_ZN6String7reserveEj+0x12>
 80a2538:	6843      	ldr	r3, [r0, #4]
 80a253a:	428b      	cmp	r3, r1
 80a253c:	d301      	bcc.n	80a2542 <_ZN6String7reserveEj+0x12>
 80a253e:	2001      	movs	r0, #1
}
 80a2540:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80a2542:	4620      	mov	r0, r4
 80a2544:	f7ff ffe8 	bl	80a2518 <_ZN6String12changeBufferEj>
 80a2548:	2800      	cmp	r0, #0
 80a254a:	d0f9      	beq.n	80a2540 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80a254c:	68a3      	ldr	r3, [r4, #8]
 80a254e:	2b00      	cmp	r3, #0
 80a2550:	d1f5      	bne.n	80a253e <_ZN6String7reserveEj+0xe>
 80a2552:	6822      	ldr	r2, [r4, #0]
 80a2554:	7013      	strb	r3, [r2, #0]
 80a2556:	e7f2      	b.n	80a253e <_ZN6String7reserveEj+0xe>

080a2558 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a2558:	b570      	push	{r4, r5, r6, lr}
 80a255a:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a255c:	4611      	mov	r1, r2
{
 80a255e:	4604      	mov	r4, r0
 80a2560:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a2562:	f7ff ffe5 	bl	80a2530 <_ZN6String7reserveEj>
 80a2566:	b920      	cbnz	r0, 80a2572 <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 80a2568:	4620      	mov	r0, r4
 80a256a:	f7ff ffca 	bl	80a2502 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 80a256e:	4620      	mov	r0, r4
 80a2570:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 80a2572:	462a      	mov	r2, r5
 80a2574:	4631      	mov	r1, r6
 80a2576:	6820      	ldr	r0, [r4, #0]
	len = length;
 80a2578:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a257a:	f002 fc81 	bl	80a4e80 <memcpy>
	buffer[len] = 0;
 80a257e:	2100      	movs	r1, #0
 80a2580:	6822      	ldr	r2, [r4, #0]
 80a2582:	68a3      	ldr	r3, [r4, #8]
 80a2584:	54d1      	strb	r1, [r2, r3]
	return *this;
 80a2586:	e7f2      	b.n	80a256e <_ZN6String4copyEPKcj+0x16>

080a2588 <_ZN6StringC1EPKc>:
String::String(const char *cstr)
 80a2588:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 80a258a:	2300      	movs	r3, #0
String::String(const char *cstr)
 80a258c:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a258e:	460d      	mov	r5, r1
	capacity = 0;
 80a2590:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a2594:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a2596:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 80a2598:	b139      	cbz	r1, 80a25aa <_ZN6StringC1EPKc+0x22>
 80a259a:	4608      	mov	r0, r1
 80a259c:	f003 fcc8 	bl	80a5f30 <strlen>
 80a25a0:	4629      	mov	r1, r5
 80a25a2:	4602      	mov	r2, r0
 80a25a4:	4620      	mov	r0, r4
 80a25a6:	f7ff ffd7 	bl	80a2558 <_ZN6String4copyEPKcj>
}
 80a25aa:	4620      	mov	r0, r4
 80a25ac:	bd38      	pop	{r3, r4, r5, pc}

080a25ae <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 80a25ae:	b538      	push	{r3, r4, r5, lr}
 80a25b0:	4605      	mov	r5, r0
	if (buffer) {
 80a25b2:	6800      	ldr	r0, [r0, #0]
{
 80a25b4:	460c      	mov	r4, r1
	if (buffer) {
 80a25b6:	b168      	cbz	r0, 80a25d4 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
 80a25b8:	686a      	ldr	r2, [r5, #4]
 80a25ba:	688b      	ldr	r3, [r1, #8]
 80a25bc:	429a      	cmp	r2, r3
 80a25be:	d307      	bcc.n	80a25d0 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
 80a25c0:	6809      	ldr	r1, [r1, #0]
 80a25c2:	f002 ff2e 	bl	80a5422 <strcpy>
			len = rhs.len;
 80a25c6:	68a3      	ldr	r3, [r4, #8]
 80a25c8:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 80a25ca:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 80a25cc:	60a3      	str	r3, [r4, #8]
}
 80a25ce:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 80a25d0:	f7ff fefc 	bl	80a23cc <free>
	buffer = rhs.buffer;
 80a25d4:	6823      	ldr	r3, [r4, #0]
 80a25d6:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 80a25d8:	6863      	ldr	r3, [r4, #4]
 80a25da:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 80a25dc:	68a3      	ldr	r3, [r4, #8]
 80a25de:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 80a25e0:	2300      	movs	r3, #0
	rhs.capacity = 0;
 80a25e2:	e9c4 3300 	strd	r3, r3, [r4]
 80a25e6:	e7f1      	b.n	80a25cc <_ZN6String4moveERS_+0x1e>

080a25e8 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a25e8:	4288      	cmp	r0, r1
{
 80a25ea:	b510      	push	{r4, lr}
 80a25ec:	460b      	mov	r3, r1
 80a25ee:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a25f0:	d004      	beq.n	80a25fc <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a25f2:	6809      	ldr	r1, [r1, #0]
 80a25f4:	b121      	cbz	r1, 80a2600 <_ZN6StringaSERKS_+0x18>
 80a25f6:	689a      	ldr	r2, [r3, #8]
 80a25f8:	f7ff ffae 	bl	80a2558 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a25fc:	4620      	mov	r0, r4
 80a25fe:	bd10      	pop	{r4, pc}
	else invalidate();
 80a2600:	f7ff ff7f 	bl	80a2502 <_ZN6String10invalidateEv>
 80a2604:	e7fa      	b.n	80a25fc <_ZN6StringaSERKS_+0x14>

080a2606 <_ZN6StringC1ERKS_>:
	buffer = NULL;
 80a2606:	2300      	movs	r3, #0
String::String(const String &value)
 80a2608:	b510      	push	{r4, lr}
 80a260a:	4604      	mov	r4, r0
	capacity = 0;
 80a260c:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a2610:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a2612:	7303      	strb	r3, [r0, #12]
	*this = value;
 80a2614:	f7ff ffe8 	bl	80a25e8 <_ZN6StringaSERKS_>
}
 80a2618:	4620      	mov	r0, r4
 80a261a:	bd10      	pop	{r4, pc}

080a261c <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
 80a261c:	4288      	cmp	r0, r1
{
 80a261e:	b510      	push	{r4, lr}
 80a2620:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
 80a2622:	d001      	beq.n	80a2628 <_ZN6StringaSEOS_+0xc>
 80a2624:	f7ff ffc3 	bl	80a25ae <_ZN6String4moveERS_>
	return *this;
}
 80a2628:	4620      	mov	r0, r4
 80a262a:	bd10      	pop	{r4, pc}

080a262c <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a262c:	b538      	push	{r3, r4, r5, lr}
 80a262e:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a2630:	460c      	mov	r4, r1
 80a2632:	b149      	cbz	r1, 80a2648 <_ZN6StringaSEPKc+0x1c>
 80a2634:	4608      	mov	r0, r1
 80a2636:	f003 fc7b 	bl	80a5f30 <strlen>
 80a263a:	4621      	mov	r1, r4
 80a263c:	4602      	mov	r2, r0
 80a263e:	4628      	mov	r0, r5
 80a2640:	f7ff ff8a 	bl	80a2558 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a2644:	4628      	mov	r0, r5
 80a2646:	bd38      	pop	{r3, r4, r5, pc}
	else invalidate();
 80a2648:	f7ff ff5b 	bl	80a2502 <_ZN6String10invalidateEv>
 80a264c:	e7fa      	b.n	80a2644 <_ZN6StringaSEPKc+0x18>

080a264e <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 80a264e:	b570      	push	{r4, r5, r6, lr}
 80a2650:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 80a2652:	460e      	mov	r6, r1
 80a2654:	b909      	cbnz	r1, 80a265a <_ZN6String6concatEPKcj+0xc>
 80a2656:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 80a2658:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 80a265a:	b16a      	cbz	r2, 80a2678 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
 80a265c:	6884      	ldr	r4, [r0, #8]
 80a265e:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
 80a2660:	4621      	mov	r1, r4
 80a2662:	f7ff ff65 	bl	80a2530 <_ZN6String7reserveEj>
 80a2666:	2800      	cmp	r0, #0
 80a2668:	d0f5      	beq.n	80a2656 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 80a266a:	6828      	ldr	r0, [r5, #0]
 80a266c:	68ab      	ldr	r3, [r5, #8]
 80a266e:	4631      	mov	r1, r6
 80a2670:	4418      	add	r0, r3
 80a2672:	f002 fed6 	bl	80a5422 <strcpy>
	len = newlen;
 80a2676:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
 80a2678:	2001      	movs	r0, #1
 80a267a:	e7ed      	b.n	80a2658 <_ZN6String6concatEPKcj+0xa>

080a267c <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
 80a267c:	688a      	ldr	r2, [r1, #8]
 80a267e:	6809      	ldr	r1, [r1, #0]
 80a2680:	f7ff bfe5 	b.w	80a264e <_ZN6String6concatEPKcj>

080a2684 <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
 80a2684:	b538      	push	{r3, r4, r5, lr}
 80a2686:	4605      	mov	r5, r0
	if (!cstr) return 0;
 80a2688:	460c      	mov	r4, r1
	return concat(cstr, strlen(cstr));
}
 80a268a:	4608      	mov	r0, r1
	if (!cstr) return 0;
 80a268c:	b141      	cbz	r1, 80a26a0 <_ZN6String6concatEPKc+0x1c>
	return concat(cstr, strlen(cstr));
 80a268e:	f003 fc4f 	bl	80a5f30 <strlen>
 80a2692:	4621      	mov	r1, r4
 80a2694:	4602      	mov	r2, r0
 80a2696:	4628      	mov	r0, r5
}
 80a2698:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return concat(cstr, strlen(cstr));
 80a269c:	f7ff bfd7 	b.w	80a264e <_ZN6String6concatEPKcj>
}
 80a26a0:	bd38      	pop	{r3, r4, r5, pc}

080a26a2 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80a26a2:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a26a4:	688a      	ldr	r2, [r1, #8]
 80a26a6:	6809      	ldr	r1, [r1, #0]
{
 80a26a8:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a26aa:	f7ff ffd0 	bl	80a264e <_ZN6String6concatEPKcj>
 80a26ae:	b910      	cbnz	r0, 80a26b6 <_ZplRK15StringSumHelperRK6String+0x14>
 80a26b0:	4620      	mov	r0, r4
 80a26b2:	f7ff ff26 	bl	80a2502 <_ZN6String10invalidateEv>
	return a;
}
 80a26b6:	4620      	mov	r0, r4
 80a26b8:	bd10      	pop	{r4, pc}

080a26ba <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 80a26ba:	b538      	push	{r3, r4, r5, lr}
 80a26bc:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 80a26be:	460d      	mov	r5, r1
 80a26c0:	b921      	cbnz	r1, 80a26cc <_ZplRK15StringSumHelperPKc+0x12>
 80a26c2:	4620      	mov	r0, r4
 80a26c4:	f7ff ff1d 	bl	80a2502 <_ZN6String10invalidateEv>
	return a;
}
 80a26c8:	4620      	mov	r0, r4
 80a26ca:	bd38      	pop	{r3, r4, r5, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 80a26cc:	4608      	mov	r0, r1
 80a26ce:	f003 fc2f 	bl	80a5f30 <strlen>
 80a26d2:	4629      	mov	r1, r5
 80a26d4:	4602      	mov	r2, r0
 80a26d6:	4620      	mov	r0, r4
 80a26d8:	f7ff ffb9 	bl	80a264e <_ZN6String6concatEPKcj>
 80a26dc:	2800      	cmp	r0, #0
 80a26de:	d0f0      	beq.n	80a26c2 <_ZplRK15StringSumHelperPKc+0x8>
 80a26e0:	e7f2      	b.n	80a26c8 <_ZplRK15StringSumHelperPKc+0xe>

080a26e2 <_ZNK6String9compareToERKS_>:
/*********************************************/
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
 80a26e2:	4602      	mov	r2, r0
	if (!buffer || !s.buffer) {
 80a26e4:	6800      	ldr	r0, [r0, #0]
{
 80a26e6:	460b      	mov	r3, r1
 80a26e8:	6809      	ldr	r1, [r1, #0]
	if (!buffer || !s.buffer) {
 80a26ea:	b158      	cbz	r0, 80a2704 <_ZNK6String9compareToERKS_+0x22>
 80a26ec:	b941      	cbnz	r1, 80a2700 <_ZNK6String9compareToERKS_+0x1e>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
 80a26ee:	6891      	ldr	r1, [r2, #8]
 80a26f0:	b151      	cbz	r1, 80a2708 <_ZNK6String9compareToERKS_+0x26>
 80a26f2:	7800      	ldrb	r0, [r0, #0]
 80a26f4:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
 80a26f6:	6898      	ldr	r0, [r3, #8]
 80a26f8:	b138      	cbz	r0, 80a270a <_ZNK6String9compareToERKS_+0x28>
 80a26fa:	7809      	ldrb	r1, [r1, #0]
 80a26fc:	4248      	negs	r0, r1
 80a26fe:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
 80a2700:	f002 be85 	b.w	80a540e <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
 80a2704:	2900      	cmp	r1, #0
 80a2706:	d1f6      	bne.n	80a26f6 <_ZNK6String9compareToERKS_+0x14>
		return 0;
 80a2708:	4608      	mov	r0, r1
}
 80a270a:	4770      	bx	lr

080a270c <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
 80a270c:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
 80a270e:	6882      	ldr	r2, [r0, #8]
 80a2710:	688b      	ldr	r3, [r1, #8]
 80a2712:	429a      	cmp	r2, r3
 80a2714:	d105      	bne.n	80a2722 <_ZNK6String6equalsERKS_+0x16>
 80a2716:	f7ff ffe4 	bl	80a26e2 <_ZNK6String9compareToERKS_>
 80a271a:	fab0 f080 	clz	r0, r0
 80a271e:	0940      	lsrs	r0, r0, #5
}
 80a2720:	bd08      	pop	{r3, pc}
	return (len == s2.len && compareTo(s2) == 0);
 80a2722:	2000      	movs	r0, #0
 80a2724:	e7fc      	b.n	80a2720 <_ZNK6String6equalsERKS_+0x14>

080a2726 <_ZNK6String6equalsEPKc>:

unsigned char String::equals(const char *cstr) const
{
 80a2726:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a2728:	6882      	ldr	r2, [r0, #8]
 80a272a:	b93a      	cbnz	r2, 80a273c <_ZNK6String6equalsEPKc+0x16>
 80a272c:	b121      	cbz	r1, 80a2738 <_ZNK6String6equalsEPKc+0x12>
 80a272e:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
 80a2730:	fab0 f080 	clz	r0, r0
 80a2734:	0940      	lsrs	r0, r0, #5
 80a2736:	e000      	b.n	80a273a <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a2738:	2001      	movs	r0, #1
}
 80a273a:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 80a273c:	6800      	ldr	r0, [r0, #0]
 80a273e:	b909      	cbnz	r1, 80a2744 <_ZNK6String6equalsEPKc+0x1e>
 80a2740:	7800      	ldrb	r0, [r0, #0]
 80a2742:	e7f5      	b.n	80a2730 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
 80a2744:	f002 fe63 	bl	80a540e <strcmp>
 80a2748:	e7f2      	b.n	80a2730 <_ZNK6String6equalsEPKc+0xa>

080a274a <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
 80a274a:	6883      	ldr	r3, [r0, #8]
 80a274c:	428b      	cmp	r3, r1
 80a274e:	d903      	bls.n	80a2758 <_ZNK6StringixEj+0xe>
 80a2750:	6800      	ldr	r0, [r0, #0]
 80a2752:	b110      	cbz	r0, 80a275a <_ZNK6StringixEj+0x10>
	return buffer[index];
 80a2754:	5c40      	ldrb	r0, [r0, r1]
 80a2756:	4770      	bx	lr
	if (index >= len || !buffer) return 0;
 80a2758:	2000      	movs	r0, #0
}
 80a275a:	4770      	bx	lr

080a275c <_ZNK6String6charAtEj>:
	return operator[](loc);
 80a275c:	f7ff bff5 	b.w	80a274a <_ZNK6StringixEj>

080a2760 <_ZNK6String7indexOfEcj>:
{
	return indexOf(c, 0);
}

int String::indexOf( char ch, unsigned int fromIndex ) const
{
 80a2760:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
 80a2762:	6883      	ldr	r3, [r0, #8]
 80a2764:	4293      	cmp	r3, r2
 80a2766:	d906      	bls.n	80a2776 <_ZNK6String7indexOfEcj+0x16>
	const char* temp = strchr(buffer + fromIndex, ch);
 80a2768:	6804      	ldr	r4, [r0, #0]
 80a276a:	18a0      	adds	r0, r4, r2
 80a276c:	f002 fe42 	bl	80a53f4 <strchr>
	if (temp == NULL) return -1;
 80a2770:	b108      	cbz	r0, 80a2776 <_ZNK6String7indexOfEcj+0x16>
	return temp - buffer;
 80a2772:	1b00      	subs	r0, r0, r4
}
 80a2774:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
 80a2776:	f04f 30ff 	mov.w	r0, #4294967295
 80a277a:	e7fb      	b.n	80a2774 <_ZNK6String7indexOfEcj+0x14>

080a277c <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
 80a277c:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
 80a277e:	6883      	ldr	r3, [r0, #8]
 80a2780:	4293      	cmp	r3, r2
 80a2782:	d907      	bls.n	80a2794 <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
 80a2784:	6804      	ldr	r4, [r0, #0]
 80a2786:	6809      	ldr	r1, [r1, #0]
 80a2788:	18a0      	adds	r0, r4, r2
 80a278a:	f003 fbfe 	bl	80a5f8a <strstr>
	if (found == NULL) return -1;
 80a278e:	b108      	cbz	r0, 80a2794 <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
 80a2790:	1b00      	subs	r0, r0, r4
}
 80a2792:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
 80a2794:	f04f 30ff 	mov.w	r0, #4294967295
 80a2798:	e7fb      	b.n	80a2792 <_ZNK6String7indexOfERKS_j+0x16>

080a279a <_ZNK6String7indexOfERKS_>:
	return indexOf(s2, 0);
 80a279a:	2200      	movs	r2, #0
 80a279c:	f7ff bfee 	b.w	80a277c <_ZNK6String7indexOfERKS_j>

080a27a0 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 80a27a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a27a2:	461d      	mov	r5, r3
	if (left > right) {
 80a27a4:	429a      	cmp	r2, r3
 80a27a6:	bf88      	it	hi
 80a27a8:	4613      	movhi	r3, r2
{
 80a27aa:	460f      	mov	r7, r1
 80a27ac:	4614      	mov	r4, r2
	if (left > right) {
 80a27ae:	bf88      	it	hi
 80a27b0:	462c      	movhi	r4, r5
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 80a27b2:	490b      	ldr	r1, [pc, #44]	; (80a27e0 <_ZNK6String9substringEjj+0x40>)
	if (left > right) {
 80a27b4:	bf88      	it	hi
 80a27b6:	461d      	movhi	r5, r3
{
 80a27b8:	4606      	mov	r6, r0
	String out;
 80a27ba:	f7ff fee5 	bl	80a2588 <_ZN6StringC1EPKc>
	if (left > len) return out;
 80a27be:	68ba      	ldr	r2, [r7, #8]
 80a27c0:	42a2      	cmp	r2, r4
 80a27c2:	d30a      	bcc.n	80a27da <_ZNK6String9substringEjj+0x3a>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
 80a27c4:	6839      	ldr	r1, [r7, #0]
 80a27c6:	42aa      	cmp	r2, r5
 80a27c8:	bf94      	ite	ls
 80a27ca:	ebc4 0202 	rsbls	r2, r4, r2
 80a27ce:	ebc4 0205 	rsbhi	r2, r4, r5
 80a27d2:	4630      	mov	r0, r6
 80a27d4:	4421      	add	r1, r4
 80a27d6:	f7ff febf 	bl	80a2558 <_ZN6String4copyEPKcj>
	return out;
}
 80a27da:	4630      	mov	r0, r6
 80a27dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a27de:	bf00      	nop
 80a27e0:	080a6ac2 	.word	0x080a6ac2

080a27e4 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
 80a27e4:	6800      	ldr	r0, [r0, #0]
 80a27e6:	b108      	cbz	r0, 80a27ec <_ZNK6String5toIntEv+0x8>
 80a27e8:	f002 ba42 	b.w	80a4c70 <atol>
	return 0;
}
 80a27ec:	4770      	bx	lr
	...

080a27f0 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
 80a27f0:	b40e      	push	{r1, r2, r3}
 80a27f2:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
 80a27f4:	ad09      	add	r5, sp, #36	; 0x24
 80a27f6:	f855 7b04 	ldr.w	r7, [r5], #4
 80a27fa:	4604      	mov	r4, r0
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 80a27fc:	462b      	mov	r3, r5
 80a27fe:	463a      	mov	r2, r7
 80a2800:	2105      	movs	r1, #5
 80a2802:	a802      	add	r0, sp, #8
    va_start(marker, fmt);
 80a2804:	9501      	str	r5, [sp, #4]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 80a2806:	f7ff fe19 	bl	80a243c <vsnprintf>
 80a280a:	4606      	mov	r6, r0
    va_end(marker);

    String result;
 80a280c:	490b      	ldr	r1, [pc, #44]	; (80a283c <_ZN6String6formatEPKcz+0x4c>)
 80a280e:	4620      	mov	r0, r4
 80a2810:	f7ff feba 	bl	80a2588 <_ZN6StringC1EPKc>
    result.reserve(n);  // internally adds +1 for null terminator
 80a2814:	4631      	mov	r1, r6
 80a2816:	4620      	mov	r0, r4
 80a2818:	f7ff fe8a 	bl	80a2530 <_ZN6String7reserveEj>
    if (result.buffer) {
 80a281c:	6820      	ldr	r0, [r4, #0]
 80a281e:	b130      	cbz	r0, 80a282e <_ZN6String6formatEPKcz+0x3e>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 80a2820:	462b      	mov	r3, r5
 80a2822:	463a      	mov	r2, r7
 80a2824:	1c71      	adds	r1, r6, #1
        va_start(marker, fmt);
 80a2826:	9501      	str	r5, [sp, #4]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 80a2828:	f7ff fe08 	bl	80a243c <vsnprintf>
        va_end(marker);
        result.len = n;
 80a282c:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
 80a282e:	4620      	mov	r0, r4
 80a2830:	b004      	add	sp, #16
 80a2832:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80a2836:	b003      	add	sp, #12
 80a2838:	4770      	bx	lr
 80a283a:	bf00      	nop
 80a283c:	080a6ac2 	.word	0x080a6ac2

080a2840 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a2840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2842:	4606      	mov	r6, r0
 80a2844:	460d      	mov	r5, r1
  size_t n = 0;
 80a2846:	2400      	movs	r4, #0
 80a2848:	188f      	adds	r7, r1, r2
  while (size--) {
 80a284a:	42bd      	cmp	r5, r7
 80a284c:	d00c      	beq.n	80a2868 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a284e:	6833      	ldr	r3, [r6, #0]
 80a2850:	4630      	mov	r0, r6
 80a2852:	689b      	ldr	r3, [r3, #8]
 80a2854:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a2858:	4798      	blx	r3
     if (chunk>=0)
 80a285a:	1e03      	subs	r3, r0, #0
 80a285c:	db01      	blt.n	80a2862 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a285e:	441c      	add	r4, r3
  while (size--) {
 80a2860:	e7f3      	b.n	80a284a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a2862:	2c00      	cmp	r4, #0
 80a2864:	bf08      	it	eq
 80a2866:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a2868:	4620      	mov	r0, r4
 80a286a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a286c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a286c:	b570      	push	{r4, r5, r6, lr}
 80a286e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a2870:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a2872:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a2874:	b149      	cbz	r1, 80a288a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a2876:	f003 fb5b 	bl	80a5f30 <strlen>
 80a287a:	682b      	ldr	r3, [r5, #0]
 80a287c:	4602      	mov	r2, r0
 80a287e:	4621      	mov	r1, r4
 80a2880:	4628      	mov	r0, r5
    }
 80a2882:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a2886:	68db      	ldr	r3, [r3, #12]
 80a2888:	4718      	bx	r3
    }
 80a288a:	bd70      	pop	{r4, r5, r6, pc}

080a288c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a288c:	6803      	ldr	r3, [r0, #0]
 80a288e:	689b      	ldr	r3, [r3, #8]
 80a2890:	4718      	bx	r3

080a2892 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a2892:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a2894:	210d      	movs	r1, #13
{
 80a2896:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a2898:	f7ff fff8 	bl	80a288c <_ZN5Print5printEc>
  n += print('\n');
 80a289c:	210a      	movs	r1, #10
  size_t n = print('\r');
 80a289e:	4604      	mov	r4, r0
  n += print('\n');
 80a28a0:	4628      	mov	r0, r5
 80a28a2:	f7ff fff3 	bl	80a288c <_ZN5Print5printEc>
  return n;
}
 80a28a6:	4420      	add	r0, r4
 80a28a8:	bd38      	pop	{r3, r4, r5, pc}

080a28aa <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a28aa:	b538      	push	{r3, r4, r5, lr}
 80a28ac:	4605      	mov	r5, r0
  return write(str);
 80a28ae:	f7ff ffdd 	bl	80a286c <_ZN5Print5writeEPKc>
 80a28b2:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 80a28b4:	4628      	mov	r0, r5
 80a28b6:	f7ff ffec 	bl	80a2892 <_ZN5Print7printlnEv>
  return n;
}
 80a28ba:	4420      	add	r0, r4
 80a28bc:	bd38      	pop	{r3, r4, r5, pc}

080a28be <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a28be:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a28c0:	2a01      	cmp	r2, #1
 80a28c2:	bf98      	it	ls
 80a28c4:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a28c6:	b530      	push	{r4, r5, lr}
 80a28c8:	b08b      	sub	sp, #44	; 0x2c
 80a28ca:	460c      	mov	r4, r1
  *str = '\0';
 80a28cc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a28d0:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a28d2:	4625      	mov	r5, r4
 80a28d4:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a28d8:	fb04 5312 	mls	r3, r4, r2, r5
 80a28dc:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a28de:	2b09      	cmp	r3, #9
 80a28e0:	bf94      	ite	ls
 80a28e2:	3330      	addls	r3, #48	; 0x30
 80a28e4:	3337      	addhi	r3, #55	; 0x37
 80a28e6:	b2db      	uxtb	r3, r3
  } while(n);
 80a28e8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a28ea:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a28ee:	d9f0      	bls.n	80a28d2 <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a28f0:	f7ff ffbc 	bl	80a286c <_ZN5Print5writeEPKc>
}
 80a28f4:	b00b      	add	sp, #44	; 0x2c
 80a28f6:	bd30      	pop	{r4, r5, pc}

080a28f8 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a28f8:	2300      	movs	r3, #0
 80a28fa:	6840      	ldr	r0, [r0, #4]
 80a28fc:	461a      	mov	r2, r3
 80a28fe:	4619      	mov	r1, r3
 80a2900:	f7ff bccc 	b.w	80a229c <network_on>

080a2904 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
 80a2904:	680b      	ldr	r3, [r1, #0]
 80a2906:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
 80a2908:	b113      	cbz	r3, 80a2910 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
 80a290a:	685a      	ldr	r2, [r3, #4]
 80a290c:	3201      	adds	r2, #1
 80a290e:	605a      	str	r2, [r3, #4]
      }
 80a2910:	4770      	bx	lr
	...

080a2914 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a2914:	4b01      	ldr	r3, [pc, #4]	; (80a291c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a2916:	4a02      	ldr	r2, [pc, #8]	; (80a2920 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a2918:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a291a:	4770      	bx	lr
 80a291c:	20000638 	.word	0x20000638
 80a2920:	080a7273 	.word	0x080a7273

080a2924 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 80a2924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
 80a2928:	4a15      	ldr	r2, [pc, #84]	; (80a2980 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 80a292a:	f8df 8060 	ldr.w	r8, [pc, #96]	; 80a298c <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
 80a292e:	e9d2 3200 	ldrd	r3, r2, [r2]
 80a2932:	18c0      	adds	r0, r0, r3
 80a2934:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
 80a2938:	4a12      	ldr	r2, [pc, #72]	; (80a2984 <_ZL22Refresh_UnixTime_Cachex+0x60>)
{
 80a293a:	b08c      	sub	sp, #48	; 0x30
    unix_time += dst_current_cache;
 80a293c:	e9d2 3200 	ldrd	r3, r2, [r2]
 80a2940:	18c6      	adds	r6, r0, r3
 80a2942:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
 80a2946:	e9d8 2300 	ldrd	r2, r3, [r8]
 80a294a:	42bb      	cmp	r3, r7
 80a294c:	bf08      	it	eq
 80a294e:	42b2      	cmpeq	r2, r6
 80a2950:	d013      	beq.n	80a297a <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
 80a2952:	a903      	add	r1, sp, #12
 80a2954:	4668      	mov	r0, sp
 80a2956:	e9cd 6700 	strd	r6, r7, [sp]
 80a295a:	f002 f99b 	bl	80a4c94 <localtime_r>
	calendar_time.tm_year += 1900;
 80a295e:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a2960:	4d09      	ldr	r5, [pc, #36]	; (80a2988 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
 80a2962:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a2966:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
 80a2968:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a296a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a296c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a296e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a2970:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 80a2972:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a2976:	6823      	ldr	r3, [r4, #0]
 80a2978:	602b      	str	r3, [r5, #0]
    }
}
 80a297a:	b00c      	add	sp, #48	; 0x30
 80a297c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a2980:	20000670 	.word	0x20000670
 80a2984:	20000668 	.word	0x20000668
 80a2988:	20000644 	.word	0x20000644
 80a298c:	20000678 	.word	0x20000678

080a2990 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
 80a2990:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a2992:	2000      	movs	r0, #0
 80a2994:	f7ff fd02 	bl	80a239c <spark_sync_time_pending>
 80a2998:	b128      	cbz	r0, 80a29a6 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a299a:	f7ff fcd7 	bl	80a234c <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a299e:	f080 0001 	eor.w	r0, r0, #1
 80a29a2:	b2c0      	uxtb	r0, r0
    }
 80a29a4:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a29a6:	2001      	movs	r0, #1
 80a29a8:	e7fc      	b.n	80a29a4 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

080a29ac <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
 80a29ac:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 80a29ae:	f7ff ffb9 	bl	80a2924 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
 80a29b2:	4b02      	ldr	r3, [pc, #8]	; (80a29bc <_ZN9TimeClass5monthEx+0x10>)
 80a29b4:	6918      	ldr	r0, [r3, #16]
}
 80a29b6:	3001      	adds	r0, #1
 80a29b8:	bd08      	pop	{r3, pc}
 80a29ba:	bf00      	nop
 80a29bc:	20000644 	.word	0x20000644

080a29c0 <_ZN9TimeClass4zoneEf>:
	return now() + time_zone_cache + dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 80a29c0:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 80a29c2:	490a      	ldr	r1, [pc, #40]	; (80a29ec <_ZN9TimeClass4zoneEf+0x2c>)
{
 80a29c4:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 80a29c6:	f001 ff6d 	bl	80a48a4 <__aeabi_fcmplt>
 80a29ca:	b968      	cbnz	r0, 80a29e8 <_ZN9TimeClass4zoneEf+0x28>
 80a29cc:	4620      	mov	r0, r4
 80a29ce:	4908      	ldr	r1, [pc, #32]	; (80a29f0 <_ZN9TimeClass4zoneEf+0x30>)
 80a29d0:	f001 ff86 	bl	80a48e0 <__aeabi_fcmpgt>
 80a29d4:	b940      	cbnz	r0, 80a29e8 <_ZN9TimeClass4zoneEf+0x28>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 80a29d6:	4907      	ldr	r1, [pc, #28]	; (80a29f4 <_ZN9TimeClass4zoneEf+0x34>)
 80a29d8:	4620      	mov	r0, r4
 80a29da:	f001 fdc5 	bl	80a4568 <__aeabi_fmul>
 80a29de:	f001 ff89 	bl	80a48f4 <__aeabi_f2lz>
 80a29e2:	4b05      	ldr	r3, [pc, #20]	; (80a29f8 <_ZN9TimeClass4zoneEf+0x38>)
 80a29e4:	e9c3 0100 	strd	r0, r1, [r3]
}
 80a29e8:	bd10      	pop	{r4, pc}
 80a29ea:	bf00      	nop
 80a29ec:	c1400000 	.word	0xc1400000
 80a29f0:	41600000 	.word	0x41600000
 80a29f4:	45610000 	.word	0x45610000
 80a29f8:	20000670 	.word	0x20000670

080a29fc <_ZN9TimeClass7timeStrEx>:
    }
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 80a29fc:	b530      	push	{r4, r5, lr}
 80a29fe:	4604      	mov	r4, r0
    t += time_zone_cache;
 80a2a00:	4818      	ldr	r0, [pc, #96]	; (80a2a64 <_ZN9TimeClass7timeStrEx+0x68>)
{
 80a2a02:	b093      	sub	sp, #76	; 0x4c
    t += time_zone_cache;
 80a2a04:	e9d0 1000 	ldrd	r1, r0, [r0]
 80a2a08:	1852      	adds	r2, r2, r1
 80a2a0a:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
 80a2a0e:	4816      	ldr	r0, [pc, #88]	; (80a2a68 <_ZN9TimeClass7timeStrEx+0x6c>)
    struct tm calendar_time = {};
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
 80a2a10:	2500      	movs	r5, #0
    t += dst_current_cache;
 80a2a12:	e9d0 1000 	ldrd	r1, r0, [r0]
 80a2a16:	1852      	adds	r2, r2, r1
 80a2a18:	eb40 0303 	adc.w	r3, r0, r3
 80a2a1c:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
 80a2a20:	2224      	movs	r2, #36	; 0x24
 80a2a22:	2100      	movs	r1, #0
 80a2a24:	eb0d 0002 	add.w	r0, sp, r2
 80a2a28:	f002 fa38 	bl	80a4e9c <memset>
    localtime_r(&t, &calendar_time);
 80a2a2c:	a909      	add	r1, sp, #36	; 0x24
 80a2a2e:	4668      	mov	r0, sp
 80a2a30:	f002 f930 	bl	80a4c94 <localtime_r>
    char ascstr[26] = {};
 80a2a34:	2216      	movs	r2, #22
 80a2a36:	4629      	mov	r1, r5
 80a2a38:	a803      	add	r0, sp, #12
 80a2a3a:	9502      	str	r5, [sp, #8]
 80a2a3c:	f002 fa2e 	bl	80a4e9c <memset>
    asctime_r(&calendar_time, ascstr);
 80a2a40:	a902      	add	r1, sp, #8
 80a2a42:	a809      	add	r0, sp, #36	; 0x24
 80a2a44:	f002 f8ee 	bl	80a4c24 <asctime_r>
    int len = strlen(ascstr);
 80a2a48:	a802      	add	r0, sp, #8
 80a2a4a:	f003 fa71 	bl	80a5f30 <strlen>
    ascstr[len-1] = 0; // remove final newline
 80a2a4e:	ab12      	add	r3, sp, #72	; 0x48
 80a2a50:	4418      	add	r0, r3
 80a2a52:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
 80a2a56:	a902      	add	r1, sp, #8
 80a2a58:	4620      	mov	r0, r4
 80a2a5a:	f7ff fd95 	bl	80a2588 <_ZN6StringC1EPKc>
}
 80a2a5e:	4620      	mov	r0, r4
 80a2a60:	b013      	add	sp, #76	; 0x4c
 80a2a62:	bd30      	pop	{r4, r5, pc}
 80a2a64:	20000670 	.word	0x20000670
 80a2a68:	20000668 	.word	0x20000668

080a2a6c <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 80a2a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a2a70:	b0a5      	sub	sp, #148	; 0x94
 80a2a72:	4607      	mov	r7, r0
 80a2a74:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 80a2a76:	a814      	add	r0, sp, #80	; 0x50
{
 80a2a78:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 80a2a7a:	223f      	movs	r2, #63	; 0x3f
{
 80a2a7c:	461d      	mov	r5, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 80a2a7e:	f003 fa71 	bl	80a5f64 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 80a2a82:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 80a2a84:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 80a2a86:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 80a2a8a:	f003 fa51 	bl	80a5f30 <strlen>
 80a2a8e:	4604      	mov	r4, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
 80a2a90:	bb5d      	cbnz	r5, 80a2aea <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7e>
        strcpy(time_zone_str, "Z");
 80a2a92:	492a      	ldr	r1, [pc, #168]	; (80a2b3c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
 80a2a94:	a803      	add	r0, sp, #12
 80a2a96:	f002 fcc4 	bl	80a5422 <strcpy>
{
 80a2a9a:	2500      	movs	r5, #0
 80a2a9c:	ae14      	add	r6, sp, #80	; 0x50
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 80a2a9e:	f104 3bff 	add.w	fp, r4, #4294967295
 80a2aa2:	45ab      	cmp	fp, r5
 80a2aa4:	d936      	bls.n	80a2b14 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa8>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
 80a2aa6:	46b1      	mov	r9, r6
 80a2aa8:	f819 3b01 	ldrb.w	r3, [r9], #1
 80a2aac:	f105 0a01 	add.w	sl, r5, #1
 80a2ab0:	2b25      	cmp	r3, #37	; 0x25
 80a2ab2:	d117      	bne.n	80a2ae4 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
 80a2ab4:	7873      	ldrb	r3, [r6, #1]
 80a2ab6:	2b7a      	cmp	r3, #122	; 0x7a
 80a2ab8:	d114      	bne.n	80a2ae4 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
        {
            size_t tzlen = strlen(time_zone_str);
 80a2aba:	a803      	add	r0, sp, #12
 80a2abc:	f003 fa38 	bl	80a5f30 <strlen>
 80a2ac0:	4604      	mov	r4, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
 80a2ac2:	ab14      	add	r3, sp, #80	; 0x50
 80a2ac4:	1828      	adds	r0, r5, r0
 80a2ac6:	4418      	add	r0, r3
 80a2ac8:	ebab 0205 	sub.w	r2, fp, r5
 80a2acc:	1cb1      	adds	r1, r6, #2
 80a2ace:	f002 f9d7 	bl	80a4e80 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
 80a2ad2:	4622      	mov	r2, r4
 80a2ad4:	a903      	add	r1, sp, #12
 80a2ad6:	4630      	mov	r0, r6
 80a2ad8:	f002 f9d2 	bl	80a4e80 <memcpy>
            len = strlen(format_str);
 80a2adc:	a814      	add	r0, sp, #80	; 0x50
 80a2ade:	f003 fa27 	bl	80a5f30 <strlen>
 80a2ae2:	4604      	mov	r4, r0
    for (size_t i=0; i<len-1; i++)
 80a2ae4:	464e      	mov	r6, r9
 80a2ae6:	4655      	mov	r5, sl
 80a2ae8:	e7d9      	b.n	80a2a9e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
 80a2aea:	213c      	movs	r1, #60	; 0x3c
 80a2aec:	fb95 f3f1 	sdiv	r3, r5, r1
 80a2af0:	2b00      	cmp	r3, #0
 80a2af2:	bfb8      	it	lt
 80a2af4:	425b      	neglt	r3, r3
 80a2af6:	fbb3 f2f1 	udiv	r2, r3, r1
 80a2afa:	fb01 3312 	mls	r3, r1, r2, r3
 80a2afe:	9300      	str	r3, [sp, #0]
 80a2b00:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80a2b04:	2110      	movs	r1, #16
 80a2b06:	fb95 f3f3 	sdiv	r3, r5, r3
 80a2b0a:	4a0d      	ldr	r2, [pc, #52]	; (80a2b40 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd4>)
 80a2b0c:	a803      	add	r0, sp, #12
 80a2b0e:	f7ff fc85 	bl	80a241c <snprintf>
 80a2b12:	e7c2      	b.n	80a2a9a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
 80a2b14:	2100      	movs	r1, #0
 80a2b16:	222e      	movs	r2, #46	; 0x2e
 80a2b18:	a808      	add	r0, sp, #32
 80a2b1a:	9107      	str	r1, [sp, #28]
 80a2b1c:	f002 f9be 	bl	80a4e9c <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
 80a2b20:	4643      	mov	r3, r8
 80a2b22:	aa14      	add	r2, sp, #80	; 0x50
 80a2b24:	2132      	movs	r1, #50	; 0x32
 80a2b26:	a807      	add	r0, sp, #28
 80a2b28:	f003 f9f8 	bl	80a5f1c <strftime>
    return String(buf);
 80a2b2c:	4638      	mov	r0, r7
 80a2b2e:	a907      	add	r1, sp, #28
 80a2b30:	f7ff fd2a 	bl	80a2588 <_ZN6StringC1EPKc>
}
 80a2b34:	4638      	mov	r0, r7
 80a2b36:	b025      	add	sp, #148	; 0x94
 80a2b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2b3c:	080a7771 	.word	0x080a7771
 80a2b40:	080a7277 	.word	0x080a7277

080a2b44 <_ZN9TimeClass6formatExPKc>:
{
 80a2b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2b46:	b08d      	sub	sp, #52	; 0x34
 80a2b48:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80a2b4a:	4604      	mov	r4, r0
 80a2b4c:	e9cd 2300 	strd	r2, r3, [sp]
    if (format_spec == nullptr)
 80a2b50:	b915      	cbnz	r5, 80a2b58 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
 80a2b52:	4b19      	ldr	r3, [pc, #100]	; (80a2bb8 <_ZN9TimeClass6formatExPKc+0x74>)
 80a2b54:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
 80a2b56:	b12d      	cbz	r5, 80a2b64 <_ZN9TimeClass6formatExPKc+0x20>
 80a2b58:	4b18      	ldr	r3, [pc, #96]	; (80a2bbc <_ZN9TimeClass6formatExPKc+0x78>)
 80a2b5a:	4628      	mov	r0, r5
 80a2b5c:	6819      	ldr	r1, [r3, #0]
 80a2b5e:	f002 fc56 	bl	80a540e <strcmp>
 80a2b62:	b938      	cbnz	r0, 80a2b74 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
 80a2b64:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a2b68:	4620      	mov	r0, r4
 80a2b6a:	f7ff ff47 	bl	80a29fc <_ZN9TimeClass7timeStrEx>
}
 80a2b6e:	4620      	mov	r0, r4
 80a2b70:	b00d      	add	sp, #52	; 0x34
 80a2b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
 80a2b74:	9900      	ldr	r1, [sp, #0]
 80a2b76:	4e12      	ldr	r6, [pc, #72]	; (80a2bc0 <_ZN9TimeClass6formatExPKc+0x7c>)
    t += dst_current_cache;
 80a2b78:	4f12      	ldr	r7, [pc, #72]	; (80a2bc4 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
 80a2b7a:	e9d6 3200 	ldrd	r3, r2, [r6]
 80a2b7e:	185b      	adds	r3, r3, r1
 80a2b80:	9901      	ldr	r1, [sp, #4]
 80a2b82:	eb41 0202 	adc.w	r2, r1, r2
    t += dst_current_cache;
 80a2b86:	e9d7 0100 	ldrd	r0, r1, [r7]
 80a2b8a:	181b      	adds	r3, r3, r0
 80a2b8c:	eb41 0202 	adc.w	r2, r1, r2
 80a2b90:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
 80a2b94:	2100      	movs	r1, #0
 80a2b96:	2224      	movs	r2, #36	; 0x24
 80a2b98:	a803      	add	r0, sp, #12
 80a2b9a:	f002 f97f 	bl	80a4e9c <memset>
    localtime_r(&t, &calendar_time);
 80a2b9e:	a903      	add	r1, sp, #12
 80a2ba0:	4668      	mov	r0, sp
 80a2ba2:	f002 f877 	bl	80a4c94 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
 80a2ba6:	6832      	ldr	r2, [r6, #0]
 80a2ba8:	683b      	ldr	r3, [r7, #0]
 80a2baa:	4620      	mov	r0, r4
 80a2bac:	4413      	add	r3, r2
 80a2bae:	a903      	add	r1, sp, #12
 80a2bb0:	462a      	mov	r2, r5
 80a2bb2:	f7ff ff5b 	bl	80a2a6c <_ZN9TimeClass14timeFormatImplEP2tmPKci>
 80a2bb6:	e7da      	b.n	80a2b6e <_ZN9TimeClass6formatExPKc+0x2a>
 80a2bb8:	20000640 	.word	0x20000640
 80a2bbc:	20000000 	.word	0x20000000
 80a2bc0:	20000670 	.word	0x20000670
 80a2bc4:	20000668 	.word	0x20000668

080a2bc8 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
 80a2bc8:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
 80a2bca:	2000      	movs	r0, #0
 80a2bcc:	f7ff fa10 	bl	80a1ff0 <hal_rtc_time_is_valid>
    if (rtcstate)
 80a2bd0:	4604      	mov	r4, r0
 80a2bd2:	b9a0      	cbnz	r0, 80a2bfe <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80a2bd4:	f7ff fafe 	bl	80a21d4 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80a2bd8:	2801      	cmp	r0, #1
 80a2bda:	d110      	bne.n	80a2bfe <_ZN9TimeClass7isValidEv+0x36>
 80a2bdc:	4620      	mov	r0, r4
 80a2bde:	f7ff fb21 	bl	80a2224 <system_thread_get_state>
 80a2be2:	b960      	cbnz	r0, 80a2bfe <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
 80a2be4:	f7ff fed4 	bl	80a2990 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a2be8:	b910      	cbnz	r0, 80a2bf0 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
 80a2bea:	f7ff fba7 	bl	80a233c <spark_process>
        while (_while() && !_condition()) {
 80a2bee:	e7f9      	b.n	80a2be4 <_ZN9TimeClass7isValidEv+0x1c>
 80a2bf0:	f7ff fece 	bl	80a2990 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
 80a2bf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
 80a2bf8:	2000      	movs	r0, #0
 80a2bfa:	f7ff b9f9 	b.w	80a1ff0 <hal_rtc_time_is_valid>
}
 80a2bfe:	4620      	mov	r0, r4
 80a2c00:	bd10      	pop	{r4, pc}

080a2c02 <_ZN9TimeClass3nowEv>:
{
 80a2c02:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
 80a2c04:	f7ff ffe0 	bl	80a2bc8 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
 80a2c08:	2210      	movs	r2, #16
 80a2c0a:	2100      	movs	r1, #0
 80a2c0c:	4668      	mov	r0, sp
 80a2c0e:	f002 f945 	bl	80a4e9c <memset>
    hal_rtc_get_time(&tv, nullptr);
 80a2c12:	2100      	movs	r1, #0
 80a2c14:	4668      	mov	r0, sp
 80a2c16:	f7ff f9f3 	bl	80a2000 <hal_rtc_get_time>
}
 80a2c1a:	9800      	ldr	r0, [sp, #0]
 80a2c1c:	b005      	add	sp, #20
 80a2c1e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a2c24 <_ZN9TimeClass4hourEv>:
{
 80a2c24:	b508      	push	{r3, lr}
	return hour(now());
 80a2c26:	f7ff ffec 	bl	80a2c02 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 80a2c2a:	17c1      	asrs	r1, r0, #31
 80a2c2c:	f7ff fe7a 	bl	80a2924 <_ZL22Refresh_UnixTime_Cachex>
}
 80a2c30:	4b01      	ldr	r3, [pc, #4]	; (80a2c38 <_ZN9TimeClass4hourEv+0x14>)
 80a2c32:	6898      	ldr	r0, [r3, #8]
 80a2c34:	bd08      	pop	{r3, pc}
 80a2c36:	bf00      	nop
 80a2c38:	20000644 	.word	0x20000644

080a2c3c <_ZN9TimeClass6minuteEv>:
{
 80a2c3c:	b508      	push	{r3, lr}
	return minute(now());
 80a2c3e:	f7ff ffe0 	bl	80a2c02 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 80a2c42:	17c1      	asrs	r1, r0, #31
 80a2c44:	f7ff fe6e 	bl	80a2924 <_ZL22Refresh_UnixTime_Cachex>
}
 80a2c48:	4b01      	ldr	r3, [pc, #4]	; (80a2c50 <_ZN9TimeClass6minuteEv+0x14>)
 80a2c4a:	6858      	ldr	r0, [r3, #4]
 80a2c4c:	bd08      	pop	{r3, pc}
 80a2c4e:	bf00      	nop
 80a2c50:	20000644 	.word	0x20000644

080a2c54 <_ZN9TimeClass6secondEv>:
{
 80a2c54:	b508      	push	{r3, lr}
	return second(now());
 80a2c56:	f7ff ffd4 	bl	80a2c02 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 80a2c5a:	17c1      	asrs	r1, r0, #31
 80a2c5c:	f7ff fe62 	bl	80a2924 <_ZL22Refresh_UnixTime_Cachex>
}
 80a2c60:	4b01      	ldr	r3, [pc, #4]	; (80a2c68 <_ZN9TimeClass6secondEv+0x14>)
 80a2c62:	6818      	ldr	r0, [r3, #0]
 80a2c64:	bd08      	pop	{r3, pc}
 80a2c66:	bf00      	nop
 80a2c68:	20000644 	.word	0x20000644

080a2c6c <_ZN9TimeClass3dayEv>:
{
 80a2c6c:	b508      	push	{r3, lr}
	return day(now());
 80a2c6e:	f7ff ffc8 	bl	80a2c02 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 80a2c72:	17c1      	asrs	r1, r0, #31
 80a2c74:	f7ff fe56 	bl	80a2924 <_ZL22Refresh_UnixTime_Cachex>
}
 80a2c78:	4b01      	ldr	r3, [pc, #4]	; (80a2c80 <_ZN9TimeClass3dayEv+0x14>)
 80a2c7a:	68d8      	ldr	r0, [r3, #12]
 80a2c7c:	bd08      	pop	{r3, pc}
 80a2c7e:	bf00      	nop
 80a2c80:	20000644 	.word	0x20000644

080a2c84 <_ZN9TimeClass5monthEv>:
{
 80a2c84:	b508      	push	{r3, lr}
	return month(now());
 80a2c86:	f7ff ffbc 	bl	80a2c02 <_ZN9TimeClass3nowEv>
}
 80a2c8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
 80a2c8e:	17c1      	asrs	r1, r0, #31
 80a2c90:	f7ff be8c 	b.w	80a29ac <_ZN9TimeClass5monthEx>

080a2c94 <_ZN9TimeClass4yearEv>:
{
 80a2c94:	b508      	push	{r3, lr}
	return year(now());
 80a2c96:	f7ff ffb4 	bl	80a2c02 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 80a2c9a:	17c1      	asrs	r1, r0, #31
 80a2c9c:	f7ff fe42 	bl	80a2924 <_ZL22Refresh_UnixTime_Cachex>
}
 80a2ca0:	4b01      	ldr	r3, [pc, #4]	; (80a2ca8 <_ZN9TimeClass4yearEv+0x14>)
 80a2ca2:	6958      	ldr	r0, [r3, #20]
 80a2ca4:	bd08      	pop	{r3, pc}
 80a2ca6:	bf00      	nop
 80a2ca8:	20000644 	.word	0x20000644

080a2cac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a2cac:	4b02      	ldr	r3, [pc, #8]	; (80a2cb8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a2cae:	681a      	ldr	r2, [r3, #0]
 80a2cb0:	4b02      	ldr	r3, [pc, #8]	; (80a2cbc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a2cb2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a2cb4:	4770      	bx	lr
 80a2cb6:	bf00      	nop
 80a2cb8:	20000000 	.word	0x20000000
 80a2cbc:	20000640 	.word	0x20000640

080a2cc0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a2cc0:	2100      	movs	r1, #0
 80a2cc2:	f7ff ba97 	b.w	80a21f4 <system_delay_ms>

080a2cc6 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a2cc6:	b510      	push	{r4, lr}
 80a2cc8:	4604      	mov	r4, r0
 80a2cca:	f7fd fa63 	bl	80a0194 <_ZNSt14_Function_baseD1Ev>
 80a2cce:	4620      	mov	r0, r4
 80a2cd0:	bd10      	pop	{r4, pc}

080a2cd2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
 80a2cd2:	b513      	push	{r0, r1, r4, lr}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2cd4:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 80a2cd6:	460b      	mov	r3, r1
 80a2cd8:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2cda:	c803      	ldmia	r0, {r0, r1}
 80a2cdc:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a2ce0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a2ce4:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a2ce8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80a2cec:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a2cf0:	b002      	add	sp, #8
 80a2cf2:	bd10      	pop	{r4, pc}

080a2cf4 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 80a2cf4:	2300      	movs	r3, #0
 80a2cf6:	4803      	ldr	r0, [pc, #12]	; (80a2d04 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a2cf8:	4a03      	ldr	r2, [pc, #12]	; (80a2d08 <_GLOBAL__sub_I_RGB+0x14>)
 80a2cfa:	4904      	ldr	r1, [pc, #16]	; (80a2d0c <_GLOBAL__sub_I_RGB+0x18>)
 80a2cfc:	6083      	str	r3, [r0, #8]
 80a2cfe:	f000 bf2b 	b.w	80a3b58 <__aeabi_atexit>
 80a2d02:	bf00      	nop
 80a2d04:	20000680 	.word	0x20000680
 80a2d08:	20000240 	.word	0x20000240
 80a2d0c:	080a2cc7 	.word	0x080a2cc7

080a2d10 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a2d10:	4b01      	ldr	r3, [pc, #4]	; (80a2d18 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a2d12:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a2d14:	4770      	bx	lr
 80a2d16:	bf00      	nop
 80a2d18:	20000008 	.word	0x20000008

080a2d1c <serialEventRun>:
{
 80a2d1c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a2d1e:	4b13      	ldr	r3, [pc, #76]	; (80a2d6c <serialEventRun+0x50>)
 80a2d20:	b143      	cbz	r3, 80a2d34 <serialEventRun+0x18>
 80a2d22:	f000 fc2d 	bl	80a3580 <_Z16_fetch_usbserialv>
 80a2d26:	6803      	ldr	r3, [r0, #0]
 80a2d28:	691b      	ldr	r3, [r3, #16]
 80a2d2a:	4798      	blx	r3
 80a2d2c:	2800      	cmp	r0, #0
 80a2d2e:	dd01      	ble.n	80a2d34 <serialEventRun+0x18>
        serialEvent();
 80a2d30:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a2d34:	4b0e      	ldr	r3, [pc, #56]	; (80a2d70 <serialEventRun+0x54>)
 80a2d36:	b143      	cbz	r3, 80a2d4a <serialEventRun+0x2e>
 80a2d38:	f000 fccc 	bl	80a36d4 <_Z22__fetch_global_Serial1v>
 80a2d3c:	6803      	ldr	r3, [r0, #0]
 80a2d3e:	691b      	ldr	r3, [r3, #16]
 80a2d40:	4798      	blx	r3
 80a2d42:	2800      	cmp	r0, #0
 80a2d44:	dd01      	ble.n	80a2d4a <serialEventRun+0x2e>
        serialEvent1();
 80a2d46:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a2d4a:	4b0a      	ldr	r3, [pc, #40]	; (80a2d74 <serialEventRun+0x58>)
 80a2d4c:	b10b      	cbz	r3, 80a2d52 <serialEventRun+0x36>
 80a2d4e:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a2d52:	4b09      	ldr	r3, [pc, #36]	; (80a2d78 <serialEventRun+0x5c>)
 80a2d54:	b143      	cbz	r3, 80a2d68 <serialEventRun+0x4c>
 80a2d56:	f000 fc43 	bl	80a35e0 <_Z17_fetch_usbserial1v>
 80a2d5a:	6803      	ldr	r3, [r0, #0]
 80a2d5c:	691b      	ldr	r3, [r3, #16]
 80a2d5e:	4798      	blx	r3
 80a2d60:	2800      	cmp	r0, #0
 80a2d62:	dd01      	ble.n	80a2d68 <serialEventRun+0x4c>
        usbSerialEvent1();
 80a2d64:	f3af 8000 	nop.w
}
 80a2d68:	bd08      	pop	{r3, pc}
 80a2d6a:	bf00      	nop
	...

080a2d7c <_post_loop>:
{
 80a2d7c:	b508      	push	{r3, lr}
	serialEventRun();
 80a2d7e:	f7ff ffcd 	bl	80a2d1c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a2d82:	f7ff f915 	bl	80a1fb0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a2d86:	4b01      	ldr	r3, [pc, #4]	; (80a2d8c <_post_loop+0x10>)
 80a2d88:	6018      	str	r0, [r3, #0]
}
 80a2d8a:	bd08      	pop	{r3, pc}
 80a2d8c:	20000708 	.word	0x20000708

080a2d90 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a2d90:	4802      	ldr	r0, [pc, #8]	; (80a2d9c <_Z33system_initialize_user_backup_ramv+0xc>)
 80a2d92:	4a03      	ldr	r2, [pc, #12]	; (80a2da0 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a2d94:	4903      	ldr	r1, [pc, #12]	; (80a2da4 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a2d96:	1a12      	subs	r2, r2, r0
 80a2d98:	f002 b872 	b.w	80a4e80 <memcpy>
 80a2d9c:	40024000 	.word	0x40024000
 80a2da0:	40024004 	.word	0x40024004
 80a2da4:	080a78f8 	.word	0x080a78f8

080a2da8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2da8:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a2daa:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2dac:	461a      	mov	r2, r3
 80a2dae:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2db2:	9300      	str	r3, [sp, #0]
 80a2db4:	f7ff fa48 	bl	80a2248 <system_ctrl_set_result>
}
 80a2db8:	b003      	add	sp, #12
 80a2dba:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a2dc0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a2dc0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a2dc2:	8843      	ldrh	r3, [r0, #2]
 80a2dc4:	2b0a      	cmp	r3, #10
 80a2dc6:	d008      	beq.n	80a2dda <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a2dc8:	2b50      	cmp	r3, #80	; 0x50
 80a2dca:	d10b      	bne.n	80a2de4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a2dcc:	4b09      	ldr	r3, [pc, #36]	; (80a2df4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a2dce:	681b      	ldr	r3, [r3, #0]
 80a2dd0:	b14b      	cbz	r3, 80a2de6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a2dd2:	b003      	add	sp, #12
 80a2dd4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a2dd8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a2dda:	f7ff ffe5 	bl	80a2da8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a2dde:	b003      	add	sp, #12
 80a2de0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2de4:	2300      	movs	r3, #0
 80a2de6:	461a      	mov	r2, r3
 80a2de8:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2dec:	9300      	str	r3, [sp, #0]
 80a2dee:	f7ff fa2b 	bl	80a2248 <system_ctrl_set_result>
}
 80a2df2:	e7f4      	b.n	80a2dde <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a2df4:	20000694 	.word	0x20000694

080a2df8 <module_user_init_hook>:
{
 80a2df8:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a2dfa:	4c12      	ldr	r4, [pc, #72]	; (80a2e44 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a2dfc:	2100      	movs	r1, #0
 80a2dfe:	4812      	ldr	r0, [pc, #72]	; (80a2e48 <module_user_init_hook+0x50>)
 80a2e00:	f7ff fb34 	bl	80a246c <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a2e04:	4d11      	ldr	r5, [pc, #68]	; (80a2e4c <module_user_init_hook+0x54>)
 80a2e06:	6823      	ldr	r3, [r4, #0]
 80a2e08:	42ab      	cmp	r3, r5
 80a2e0a:	bf0c      	ite	eq
 80a2e0c:	2201      	moveq	r2, #1
 80a2e0e:	2200      	movne	r2, #0
 80a2e10:	4b0f      	ldr	r3, [pc, #60]	; (80a2e50 <module_user_init_hook+0x58>)
 80a2e12:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a2e14:	d002      	beq.n	80a2e1c <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
 80a2e16:	f7ff ffbb 	bl	80a2d90 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a2e1a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a2e1c:	f7ff f8c0 	bl	80a1fa0 <HAL_RNG_GetRandomNumber>
 80a2e20:	4604      	mov	r4, r0
    srand(seed);
 80a2e22:	f002 fac3 	bl	80a53ac <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a2e26:	4b0b      	ldr	r3, [pc, #44]	; (80a2e54 <module_user_init_hook+0x5c>)
 80a2e28:	b113      	cbz	r3, 80a2e30 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
 80a2e2a:	4620      	mov	r0, r4
 80a2e2c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a2e30:	2100      	movs	r1, #0
 80a2e32:	4808      	ldr	r0, [pc, #32]	; (80a2e54 <module_user_init_hook+0x5c>)
 80a2e34:	f7ff faba 	bl	80a23ac <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a2e38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a2e3c:	2100      	movs	r1, #0
 80a2e3e:	4806      	ldr	r0, [pc, #24]	; (80a2e58 <module_user_init_hook+0x60>)
 80a2e40:	f7ff b9f8 	b.w	80a2234 <system_ctrl_set_app_request_handler>
 80a2e44:	40024000 	.word	0x40024000
 80a2e48:	080a2d11 	.word	0x080a2d11
 80a2e4c:	9a271c1e 	.word	0x9a271c1e
 80a2e50:	20000690 	.word	0x20000690
 80a2e54:	00000000 	.word	0x00000000
 80a2e58:	080a2dc1 	.word	0x080a2dc1

080a2e5c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a2e5c:	4770      	bx	lr

080a2e5e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 80a2e5e:	2000      	movs	r0, #0
 80a2e60:	4770      	bx	lr

080a2e62 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a2e62:	b510      	push	{r4, lr}
 80a2e64:	4604      	mov	r4, r0
 80a2e66:	2110      	movs	r1, #16
 80a2e68:	f000 fe7b 	bl	80a3b62 <_ZdlPvj>
 80a2e6c:	4620      	mov	r0, r4
 80a2e6e:	bd10      	pop	{r4, pc}

080a2e70 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80a2e70:	b508      	push	{r3, lr}
      { delete this; }
 80a2e72:	f7ff fff6 	bl	80a2e62 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a2e76:	bd08      	pop	{r3, pc}

080a2e78 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a2e78:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a2e7a:	b530      	push	{r4, r5, lr}
        type_(type) {
 80a2e7c:	f64f 749c 	movw	r4, #65436	; 0xff9c
 80a2e80:	6002      	str	r2, [r0, #0]
 80a2e82:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a2e84:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2e86:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a2e88:	680c      	ldr	r4, [r1, #0]
 80a2e8a:	8085      	strh	r5, [r0, #4]
 80a2e8c:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2e8e:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a2e90:	bd30      	pop	{r4, r5, pc}

080a2e92 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a2e92:	b510      	push	{r4, lr}
 80a2e94:	4604      	mov	r4, r0
    free((void*)msg_);
 80a2e96:	6800      	ldr	r0, [r0, #0]
 80a2e98:	f7ff fa98 	bl	80a23cc <free>
}
 80a2e9c:	4620      	mov	r0, r4
 80a2e9e:	bd10      	pop	{r4, pc}

080a2ea0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 80a2ea0:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a2ea2:	68c4      	ldr	r4, [r0, #12]
 80a2ea4:	b1f4      	cbz	r4, 80a2ee4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 80a2ea6:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a2ea8:	2b02      	cmp	r3, #2
 80a2eaa:	d103      	bne.n	80a2eb4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a2eac:	f104 000c 	add.w	r0, r4, #12
 80a2eb0:	f7ff ffef 	bl	80a2e92 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 80a2eb4:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
 80a2eb6:	b135      	cbz	r5, 80a2ec6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
 80a2eb8:	4628      	mov	r0, r5
 80a2eba:	f7fd f96b 	bl	80a0194 <_ZNSt14_Function_baseD1Ev>
 80a2ebe:	2110      	movs	r1, #16
 80a2ec0:	4628      	mov	r0, r5
 80a2ec2:	f000 fe4e 	bl	80a3b62 <_ZdlPvj>
 80a2ec6:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a2ec8:	b135      	cbz	r5, 80a2ed8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a2eca:	4628      	mov	r0, r5
 80a2ecc:	f7fd f962 	bl	80a0194 <_ZNSt14_Function_baseD1Ev>
 80a2ed0:	2110      	movs	r1, #16
 80a2ed2:	4628      	mov	r0, r5
 80a2ed4:	f000 fe45 	bl	80a3b62 <_ZdlPvj>
 80a2ed8:	4620      	mov	r0, r4
 80a2eda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a2ede:	2114      	movs	r1, #20
 80a2ee0:	f000 be3f 	b.w	80a3b62 <_ZdlPvj>
 80a2ee4:	bd38      	pop	{r3, r4, r5, pc}

080a2ee6 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 80a2ee6:	b510      	push	{r4, lr}
 80a2ee8:	b088      	sub	sp, #32
 80a2eea:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a2eec:	4668      	mov	r0, sp
 80a2eee:	f7ff fb4b 	bl	80a2588 <_ZN6StringC1EPKc>
    return (*fn)(p);
 80a2ef2:	4669      	mov	r1, sp
 80a2ef4:	a804      	add	r0, sp, #16
 80a2ef6:	f7ff fb86 	bl	80a2606 <_ZN6StringC1ERKS_>
 80a2efa:	a804      	add	r0, sp, #16
 80a2efc:	47a0      	blx	r4
 80a2efe:	4604      	mov	r4, r0
 80a2f00:	a804      	add	r0, sp, #16
 80a2f02:	f7ff faf7 	bl	80a24f4 <_ZN6StringD1Ev>
    String p(param);
 80a2f06:	4668      	mov	r0, sp
 80a2f08:	f7ff faf4 	bl	80a24f4 <_ZN6StringD1Ev>
}
 80a2f0c:	4620      	mov	r0, r4
 80a2f0e:	b008      	add	sp, #32
 80a2f10:	bd10      	pop	{r4, pc}

080a2f12 <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_>:
    user_std_function_int_str_t* fn = (user_std_function_int_str_t*)(data);
    return (*fn)(String(param));
}

void CloudClass::call_wiring_event_handler(const void* handler_data, const char *event_name, const char *data)
{
 80a2f12:	b507      	push	{r0, r1, r2, lr}
 80a2f14:	e9cd 1200 	strd	r1, r2, [sp]
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a2f18:	6882      	ldr	r2, [r0, #8]
 80a2f1a:	b90a      	cbnz	r2, 80a2f20 <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_+0xe>
	__throw_bad_function_call();
 80a2f1c:	f000 fe25 	bl	80a3b6a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a2f20:	4669      	mov	r1, sp
 80a2f22:	68c3      	ldr	r3, [r0, #12]
 80a2f24:	aa01      	add	r2, sp, #4
 80a2f26:	4798      	blx	r3
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}
 80a2f28:	b003      	add	sp, #12
 80a2f2a:	f85d fb04 	ldr.w	pc, [sp], #4

080a2f2e <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 80a2f2e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 80a2f30:	2300      	movs	r3, #0
         size = sizeof(*this);
 80a2f32:	2410      	movs	r4, #16
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
 80a2f34:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
 80a2f38:	9201      	str	r2, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a2f3a:	4669      	mov	r1, sp
 80a2f3c:	461a      	mov	r2, r3
 80a2f3e:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
 80a2f40:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
 80a2f44:	f8ad 4000 	strh.w	r4, [sp]
 80a2f48:	f7ff f9f0 	bl	80a232c <spark_function>
}
 80a2f4c:	b004      	add	sp, #16
 80a2f4e:	bd10      	pop	{r4, pc}

080a2f50 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a2f50:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a2f52:	460e      	mov	r6, r1
 80a2f54:	4604      	mov	r4, r0
 80a2f56:	f856 3b04 	ldr.w	r3, [r6], #4
 80a2f5a:	460d      	mov	r5, r1
 80a2f5c:	a801      	add	r0, sp, #4
 80a2f5e:	4631      	mov	r1, r6
 80a2f60:	9300      	str	r3, [sp, #0]
 80a2f62:	f7ff fccf 	bl	80a2904 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a2f66:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a2f68:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a2f6a:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 80a2f6c:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a2f6e:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 80a2f70:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 80a2f72:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a2f74:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 80a2f76:	f7fd f9ee 	bl	80a0356 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a2f7a:	4630      	mov	r0, r6
 80a2f7c:	f7fd f9eb 	bl	80a0356 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 80a2f80:	4628      	mov	r0, r5
 80a2f82:	2108      	movs	r1, #8
 80a2f84:	f000 fded 	bl	80a3b62 <_ZdlPvj>
        return p;
    }
 80a2f88:	4620      	mov	r0, r4
 80a2f8a:	b002      	add	sp, #8
 80a2f8c:	bd70      	pop	{r4, r5, r6, pc}

080a2f8e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
 80a2f8e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a2f90:	b510      	push	{r4, lr}
      if (_M_empty())
 80a2f92:	b90a      	cbnz	r2, 80a2f98 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a2f94:	f000 fde9 	bl	80a3b6a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a2f98:	68c3      	ldr	r3, [r0, #12]
    }
 80a2f9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a2f9e:	4718      	bx	r3

080a2fa0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a2fa0:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a2fa2:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80a2fa4:	f100 0110 	add.w	r1, r0, #16
 80a2fa8:	f7ff fff1 	bl	80a2f8e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 80a2fac:	bd08      	pop	{r3, pc}

080a2fae <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 80a2fae:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a2fb0:	b510      	push	{r4, lr}
      if (_M_empty())
 80a2fb2:	b90a      	cbnz	r2, 80a2fb8 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a2fb4:	f000 fdd9 	bl	80a3b6a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a2fb8:	68c3      	ldr	r3, [r0, #12]
    }
 80a2fba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a2fbe:	4718      	bx	r3

080a2fc0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a2fc0:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a2fc2:	6800      	ldr	r0, [r0, #0]
 80a2fc4:	f100 0110 	add.w	r1, r0, #16
 80a2fc8:	f7ff fff1 	bl	80a2fae <_ZNKSt8functionIFvRKbEEclES1_>
      }
 80a2fcc:	bd08      	pop	{r3, pc}
	...

080a2fd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 80a2fd0:	b538      	push	{r3, r4, r5, lr}
 80a2fd2:	2300      	movs	r3, #0
 80a2fd4:	4604      	mov	r4, r0
 80a2fd6:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a2fd8:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 80a2fda:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a2fdc:	f7fd f85b 	bl	80a0096 <_Znwj>
 80a2fe0:	b128      	cbz	r0, 80a2fee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 80a2fe2:	2301      	movs	r3, #1
 80a2fe4:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 80a2fe8:	4b02      	ldr	r3, [pc, #8]	; (80a2ff4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a2fea:	60c5      	str	r5, [r0, #12]
 80a2fec:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a2fee:	6020      	str	r0, [r4, #0]
	}
 80a2ff0:	4620      	mov	r0, r4
 80a2ff2:	bd38      	pop	{r3, r4, r5, pc}
 80a2ff4:	080a72a8 	.word	0x080a72a8

080a2ff8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 80a2ff8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a2ffa:	2300      	movs	r3, #0
 80a2ffc:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 80a2ffe:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a3000:	4604      	mov	r4, r0
 80a3002:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a3004:	b12b      	cbz	r3, 80a3012 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a3006:	2202      	movs	r2, #2
 80a3008:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a300a:	68eb      	ldr	r3, [r5, #12]
 80a300c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a300e:	68ab      	ldr	r3, [r5, #8]
 80a3010:	60a3      	str	r3, [r4, #8]
    }
 80a3012:	4620      	mov	r0, r4
 80a3014:	bd38      	pop	{r3, r4, r5, pc}
	...

080a3018 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 80a3018:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a301a:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a301c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a301e:	4668      	mov	r0, sp
 80a3020:	f7ff ff2a 	bl	80a2e78 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a3024:	f04f 0302 	mov.w	r3, #2
 80a3028:	e8d4 2f4f 	ldrexb	r2, [r4]
 80a302c:	2a00      	cmp	r2, #0
 80a302e:	d103      	bne.n	80a3038 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 80a3030:	e8c4 3f41 	strexb	r1, r3, [r4]
 80a3034:	2900      	cmp	r1, #0
 80a3036:	d1f7      	bne.n	80a3028 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 80a3038:	d125      	bne.n	80a3086 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
 80a303a:	f104 050c 	add.w	r5, r4, #12
 80a303e:	4669      	mov	r1, sp
 80a3040:	4628      	mov	r0, r5
 80a3042:	f7ff ff19 	bl	80a2e78 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 80a3046:	2301      	movs	r3, #1
 80a3048:	f3bf 8f5b 	dmb	ish
 80a304c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a304e:	2000      	movs	r0, #0
 80a3050:	f3bf 8f5b 	dmb	ish
 80a3054:	f104 0308 	add.w	r3, r4, #8
 80a3058:	e853 6f00 	ldrex	r6, [r3]
 80a305c:	e843 0200 	strex	r2, r0, [r3]
 80a3060:	2a00      	cmp	r2, #0
 80a3062:	d1f9      	bne.n	80a3058 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
 80a3064:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a3068:	b16e      	cbz	r6, 80a3086 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
 80a306a:	f7ff f8cb 	bl	80a2204 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a306e:	b178      	cbz	r0, 80a3090 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a3070:	4629      	mov	r1, r5
 80a3072:	4630      	mov	r0, r6
 80a3074:	f7ff ff8b 	bl	80a2f8e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 80a3078:	4630      	mov	r0, r6
 80a307a:	f7fd f88b 	bl	80a0194 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a307e:	2110      	movs	r1, #16
 80a3080:	4630      	mov	r0, r6
 80a3082:	f000 fd6e 	bl	80a3b62 <_ZdlPvj>
        p_->setError(std::move(error));
 80a3086:	4668      	mov	r0, sp
 80a3088:	f7ff ff03 	bl	80a2e92 <_ZN8particle5ErrorD1Ev>
    }
 80a308c:	b009      	add	sp, #36	; 0x24
 80a308e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a3090:	4631      	mov	r1, r6
 80a3092:	a802      	add	r0, sp, #8
 80a3094:	f7ff ffb0 	bl	80a2ff8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a3098:	68e0      	ldr	r0, [r4, #12]
 80a309a:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a309e:	b108      	cbz	r0, 80a30a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
 80a30a0:	f002 f9c8 	bl	80a5434 <strdup>
        type_(type) {
 80a30a4:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a30a6:	2010      	movs	r0, #16
 80a30a8:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a30ac:	f7fc fff3 	bl	80a0096 <_Znwj>
 80a30b0:	4605      	mov	r5, r0
 80a30b2:	b1e8      	cbz	r0, 80a30f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
 80a30b4:	2700      	movs	r7, #0
 80a30b6:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a30b8:	2018      	movs	r0, #24
 80a30ba:	f7fc ffec 	bl	80a0096 <_Znwj>
 80a30be:	4604      	mov	r4, r0
 80a30c0:	b188      	cbz	r0, 80a30e6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
 80a30c2:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a30c4:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a30c6:	a802      	add	r0, sp, #8
 80a30c8:	f7ff fe03 	bl	80a2cd2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a30cc:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a30ce:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a30d0:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a30d2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a30d4:	9204      	str	r2, [sp, #16]
 80a30d6:	68e2      	ldr	r2, [r4, #12]
 80a30d8:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a30da:	60e3      	str	r3, [r4, #12]
 80a30dc:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 80a30e0:	9205      	str	r2, [sp, #20]
 80a30e2:	f7ff fec9 	bl	80a2e78 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 80a30e6:	4b08      	ldr	r3, [pc, #32]	; (80a3108 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a30e8:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a30ea:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a30ec:	4b07      	ldr	r3, [pc, #28]	; (80a310c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
 80a30ee:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 80a30f0:	a806      	add	r0, sp, #24
 80a30f2:	f7ff fece 	bl	80a2e92 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a30f6:	a802      	add	r0, sp, #8
 80a30f8:	f7fd f84c 	bl	80a0194 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a30fc:	2200      	movs	r2, #0
 80a30fe:	4629      	mov	r1, r5
 80a3100:	4803      	ldr	r0, [pc, #12]	; (80a3110 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
 80a3102:	f7ff f887 	bl	80a2214 <application_thread_invoke>
 80a3106:	e7b7      	b.n	80a3078 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
 80a3108:	080a2fa1 	.word	0x080a2fa1
 80a310c:	080a3239 	.word	0x080a3239
 80a3110:	080a3759 	.word	0x080a3759

080a3114 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a3114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a3118:	b08a      	sub	sp, #40	; 0x28
 80a311a:	4605      	mov	r5, r0
 80a311c:	460c      	mov	r4, r1
 80a311e:	4617      	mov	r7, r2
 80a3120:	4698      	mov	r8, r3
 80a3122:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a3126:	f7ff f911 	bl	80a234c <spark_cloud_flag_connected>
 80a312a:	ae07      	add	r6, sp, #28
    if (!connected()) {
 80a312c:	4682      	mov	sl, r0
 80a312e:	bb38      	cbnz	r0, 80a3180 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 80a3130:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a3134:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a3136:	a905      	add	r1, sp, #20
 80a3138:	4630      	mov	r0, r6
 80a313a:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a313e:	f7ff fe9b 	bl	80a2e78 <_ZN8particle5ErrorC1EOS0_>
 80a3142:	2014      	movs	r0, #20
 80a3144:	f7fc ffa7 	bl	80a0096 <_Znwj>
 80a3148:	4604      	mov	r4, r0
 80a314a:	b148      	cbz	r0, 80a3160 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a314c:	2302      	movs	r3, #2
 80a314e:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a3150:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a3152:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a3156:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 80a3158:	4631      	mov	r1, r6
 80a315a:	300c      	adds	r0, #12
 80a315c:	f7ff fe8c 	bl	80a2e78 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a3160:	4628      	mov	r0, r5
	: __shared_count(__p)
 80a3162:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a3164:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 80a3168:	f7ff ff32 	bl	80a2fd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a316c:	4630      	mov	r0, r6
 80a316e:	f7ff fe90 	bl	80a2e92 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a3172:	a805      	add	r0, sp, #20
 80a3174:	f7ff fe8d 	bl	80a2e92 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
 80a3178:	4628      	mov	r0, r5
 80a317a:	b00a      	add	sp, #40	; 0x28
 80a317c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a3180:	230c      	movs	r3, #12
 80a3182:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a3186:	2014      	movs	r0, #20
 80a3188:	e9cd aa08 	strd	sl, sl, [sp, #32]
 80a318c:	9307      	str	r3, [sp, #28]
 80a318e:	f7fc ff82 	bl	80a0096 <_Znwj>
 80a3192:	4601      	mov	r1, r0
 80a3194:	b128      	cbz	r0, 80a31a2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a3196:	e9c0 aa01 	strd	sl, sl, [r0, #4]
 80a319a:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a319e:	f880 a001 	strb.w	sl, [r0, #1]
 80a31a2:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a31a4:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 80a31a6:	f7ff ff13 	bl	80a2fd0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 80a31aa:	4b22      	ldr	r3, [pc, #136]	; (80a3234 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a31ac:	2008      	movs	r0, #8
 80a31ae:	9308      	str	r3, [sp, #32]
 80a31b0:	f7fc ff71 	bl	80a0096 <_Znwj>
 80a31b4:	4682      	mov	sl, r0
 80a31b6:	b128      	cbz	r0, 80a31c4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a31b8:	9b03      	ldr	r3, [sp, #12]
 80a31ba:	a904      	add	r1, sp, #16
 80a31bc:	f840 3b04 	str.w	r3, [r0], #4
 80a31c0:	f7ff fba0 	bl	80a2904 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a31c4:	4642      	mov	r2, r8
 80a31c6:	4639      	mov	r1, r7
 80a31c8:	4620      	mov	r0, r4
 80a31ca:	9600      	str	r6, [sp, #0]
 80a31cc:	fa5f f389 	uxtb.w	r3, r9
    d.handler_data = p.dataPtr();
 80a31d0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a31d4:	f7ff f8ca 	bl	80a236c <spark_send_event>
 80a31d8:	b9b8      	cbnz	r0, 80a320a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
 80a31da:	9b03      	ldr	r3, [sp, #12]
 80a31dc:	785b      	ldrb	r3, [r3, #1]
 80a31de:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a31e2:	b993      	cbnz	r3, 80a320a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
 80a31e4:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 80a31e8:	a905      	add	r1, sp, #20
 80a31ea:	a803      	add	r0, sp, #12
 80a31ec:	9205      	str	r2, [sp, #20]
 80a31ee:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a31f2:	f7ff ff11 	bl	80a3018 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a31f6:	a805      	add	r0, sp, #20
 80a31f8:	f7ff fe4b 	bl	80a2e92 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a31fc:	a805      	add	r0, sp, #20
 80a31fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a3200:	f7ff fea6 	bl	80a2f50 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 80a3204:	a806      	add	r0, sp, #24
 80a3206:	f7fd f8a6 	bl	80a0356 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a320a:	9b03      	ldr	r3, [sp, #12]
 80a320c:	a904      	add	r1, sp, #16
 80a320e:	a806      	add	r0, sp, #24
 80a3210:	9305      	str	r3, [sp, #20]
 80a3212:	f7ff fb77 	bl	80a2904 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a3216:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a3218:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a321a:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 80a321c:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a321e:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 80a3220:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 80a3222:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 80a3224:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 80a3226:	f7fd f896 	bl	80a0356 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a322a:	a804      	add	r0, sp, #16
 80a322c:	f7fd f893 	bl	80a0356 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 80a3230:	e7a2      	b.n	80a3178 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 80a3232:	bf00      	nop
 80a3234:	080a32fd 	.word	0x080a32fd

080a3238 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
 80a3238:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a323a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a323c:	4605      	mov	r5, r0
	  switch (__op)
 80a323e:	d007      	beq.n	80a3250 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
 80a3240:	2a03      	cmp	r2, #3
 80a3242:	d018      	beq.n	80a3276 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
 80a3244:	2a01      	cmp	r2, #1
 80a3246:	d101      	bne.n	80a324c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80a3248:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a324a:	6003      	str	r3, [r0, #0]
	}
 80a324c:	2000      	movs	r0, #0
 80a324e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80a3250:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 80a3252:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a3254:	f7fc ff1f 	bl	80a0096 <_Znwj>
 80a3258:	4604      	mov	r4, r0
 80a325a:	b150      	cbz	r0, 80a3272 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      _Bind(const _Bind&) = default;
 80a325c:	4631      	mov	r1, r6
 80a325e:	f7ff fecb 	bl	80a2ff8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a3262:	6930      	ldr	r0, [r6, #16]
 80a3264:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a3268:	b108      	cbz	r0, 80a326e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 80a326a:	f002 f8e3 	bl	80a5434 <strdup>
        type_(type) {
 80a326e:	6120      	str	r0, [r4, #16]
 80a3270:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 80a3272:	602c      	str	r4, [r5, #0]
	}
 80a3274:	e7ea      	b.n	80a324c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 80a3276:	6804      	ldr	r4, [r0, #0]
 80a3278:	2c00      	cmp	r4, #0
 80a327a:	d0e7      	beq.n	80a324c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
 80a327c:	f104 0010 	add.w	r0, r4, #16
 80a3280:	f7ff fe07 	bl	80a2e92 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a3284:	4620      	mov	r0, r4
 80a3286:	f7fc ff85 	bl	80a0194 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a328a:	2118      	movs	r1, #24
 80a328c:	4620      	mov	r0, r4
 80a328e:	f000 fc68 	bl	80a3b62 <_ZdlPvj>
 80a3292:	e7db      	b.n	80a324c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

080a3294 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 80a3294:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a3296:	2300      	movs	r3, #0
 80a3298:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 80a329a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a329c:	4604      	mov	r4, r0
 80a329e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a32a0:	b12b      	cbz	r3, 80a32ae <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a32a2:	2202      	movs	r2, #2
 80a32a4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a32a6:	68eb      	ldr	r3, [r5, #12]
 80a32a8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a32aa:	68ab      	ldr	r3, [r5, #8]
 80a32ac:	60a3      	str	r3, [r4, #8]
    }
 80a32ae:	4620      	mov	r0, r4
 80a32b0:	bd38      	pop	{r3, r4, r5, pc}

080a32b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
 80a32b2:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a32b4:	b570      	push	{r4, r5, r6, lr}
 80a32b6:	4604      	mov	r4, r0
	  switch (__op)
 80a32b8:	d007      	beq.n	80a32ca <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
 80a32ba:	2a03      	cmp	r2, #3
 80a32bc:	d012      	beq.n	80a32e4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
 80a32be:	2a01      	cmp	r2, #1
 80a32c0:	d101      	bne.n	80a32c6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80a32c2:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a32c4:	6003      	str	r3, [r0, #0]
	}
 80a32c6:	2000      	movs	r0, #0
 80a32c8:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80a32ca:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 80a32cc:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a32ce:	f7fc fee2 	bl	80a0096 <_Znwj>
 80a32d2:	4605      	mov	r5, r0
 80a32d4:	b120      	cbz	r0, 80a32e0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 80a32d6:	4631      	mov	r1, r6
 80a32d8:	f7ff ffdc 	bl	80a3294 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a32dc:	7c33      	ldrb	r3, [r6, #16]
 80a32de:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 80a32e0:	6025      	str	r5, [r4, #0]
	}
 80a32e2:	e7f0      	b.n	80a32c6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 80a32e4:	6804      	ldr	r4, [r0, #0]
 80a32e6:	2c00      	cmp	r4, #0
 80a32e8:	d0ed      	beq.n	80a32c6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
 80a32ea:	4620      	mov	r0, r4
 80a32ec:	f7fc ff52 	bl	80a0194 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a32f0:	2114      	movs	r1, #20
 80a32f2:	4620      	mov	r0, r4
 80a32f4:	f000 fc35 	bl	80a3b62 <_ZdlPvj>
 80a32f8:	e7e5      	b.n	80a32c6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

080a32fc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a32fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a32fe:	4604      	mov	r4, r0
 80a3300:	b089      	sub	sp, #36	; 0x24
 80a3302:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a3304:	a801      	add	r0, sp, #4
 80a3306:	4611      	mov	r1, r2
 80a3308:	f7ff fe22 	bl	80a2f50 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a330c:	b1a4      	cbz	r4, 80a3338 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a330e:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a3310:	b11d      	cbz	r5, 80a331a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 80a3312:	4628      	mov	r0, r5
 80a3314:	f002 f88e 	bl	80a5434 <strdup>
 80a3318:	4605      	mov	r5, r0
 80a331a:	a801      	add	r0, sp, #4
 80a331c:	a903      	add	r1, sp, #12
        type_(type) {
 80a331e:	9503      	str	r5, [sp, #12]
 80a3320:	f8ad 4010 	strh.w	r4, [sp, #16]
 80a3324:	f7ff fe78 	bl	80a3018 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a3328:	a803      	add	r0, sp, #12
 80a332a:	f7ff fdb2 	bl	80a2e92 <_ZN8particle5ErrorD1Ev>
 80a332e:	a802      	add	r0, sp, #8
 80a3330:	f7fd f811 	bl	80a0356 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a3334:	b009      	add	sp, #36	; 0x24
 80a3336:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a3338:	2301      	movs	r3, #1
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a333a:	9d01      	ldr	r5, [sp, #4]
 80a333c:	e8d5 2f4f 	ldrexb	r2, [r5]
 80a3340:	2a00      	cmp	r2, #0
 80a3342:	d103      	bne.n	80a334c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 80a3344:	e8c5 3f41 	strexb	r1, r3, [r5]
 80a3348:	2900      	cmp	r1, #0
 80a334a:	d1f7      	bne.n	80a333c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 80a334c:	d1ef      	bne.n	80a332e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 80a334e:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 80a3350:	f3bf 8f5b 	dmb	ish
 80a3354:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a3356:	f3bf 8f5b 	dmb	ish
 80a335a:	1d2b      	adds	r3, r5, #4
 80a335c:	e853 6f00 	ldrex	r6, [r3]
 80a3360:	e843 4200 	strex	r2, r4, [r3]
 80a3364:	2a00      	cmp	r2, #0
 80a3366:	d1f9      	bne.n	80a335c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
 80a3368:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a336c:	2e00      	cmp	r6, #0
 80a336e:	d0de      	beq.n	80a332e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 80a3370:	4620      	mov	r0, r4
 80a3372:	f7fe ff47 	bl	80a2204 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a3376:	4607      	mov	r7, r0
 80a3378:	b160      	cbz	r0, 80a3394 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a337a:	4630      	mov	r0, r6
 80a337c:	f105 010c 	add.w	r1, r5, #12
 80a3380:	f7ff fe15 	bl	80a2fae <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 80a3384:	4630      	mov	r0, r6
 80a3386:	f7fc ff05 	bl	80a0194 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a338a:	2110      	movs	r1, #16
 80a338c:	4630      	mov	r0, r6
 80a338e:	f000 fbe8 	bl	80a3b62 <_ZdlPvj>
 80a3392:	e7cc      	b.n	80a332e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a3394:	4631      	mov	r1, r6
 80a3396:	a803      	add	r0, sp, #12
 80a3398:	f7ff ff7c 	bl	80a3294 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a339c:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a339e:	2010      	movs	r0, #16
 80a33a0:	f88d 301c 	strb.w	r3, [sp, #28]
 80a33a4:	f7fc fe77 	bl	80a0096 <_Znwj>
 80a33a8:	4605      	mov	r5, r0
 80a33aa:	b1d0      	cbz	r0, 80a33e2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
 80a33ac:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a33ae:	2014      	movs	r0, #20
 80a33b0:	f7fc fe71 	bl	80a0096 <_Znwj>
 80a33b4:	4604      	mov	r4, r0
 80a33b6:	b178      	cbz	r0, 80a33d8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
	std::swap(_M_functor, __x._M_functor);
 80a33b8:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a33ba:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a33bc:	a803      	add	r0, sp, #12
 80a33be:	f7ff fc88 	bl	80a2cd2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a33c2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a33c4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a33c6:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a33c8:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 80a33ca:	9205      	str	r2, [sp, #20]
 80a33cc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a33ce:	60e3      	str	r3, [r4, #12]
 80a33d0:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 80a33d4:	9206      	str	r2, [sp, #24]
 80a33d6:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 80a33d8:	4b06      	ldr	r3, [pc, #24]	; (80a33f4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a33da:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a33dc:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a33de:	4b06      	ldr	r3, [pc, #24]	; (80a33f8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 80a33e0:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 80a33e2:	a803      	add	r0, sp, #12
 80a33e4:	f7fc fed6 	bl	80a0194 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a33e8:	2200      	movs	r2, #0
 80a33ea:	4629      	mov	r1, r5
 80a33ec:	4803      	ldr	r0, [pc, #12]	; (80a33fc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
 80a33ee:	f7fe ff11 	bl	80a2214 <application_thread_invoke>
 80a33f2:	e7c7      	b.n	80a3384 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
 80a33f4:	080a2fc1 	.word	0x080a2fc1
 80a33f8:	080a32b3 	.word	0x080a32b3
 80a33fc:	080a3759 	.word	0x080a3759

080a3400 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a3400:	4770      	bx	lr

080a3402 <_ZN9IPAddressD0Ev>:
 80a3402:	b510      	push	{r4, lr}
 80a3404:	4604      	mov	r4, r0
 80a3406:	2118      	movs	r1, #24
 80a3408:	f000 fbab 	bl	80a3b62 <_ZdlPvj>
 80a340c:	4620      	mov	r0, r4
 80a340e:	bd10      	pop	{r4, pc}

080a3410 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a3410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3412:	460e      	mov	r6, r1
 80a3414:	2400      	movs	r4, #0
 80a3416:	f100 0708 	add.w	r7, r0, #8
 80a341a:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a341c:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a3420:	220a      	movs	r2, #10
 80a3422:	4630      	mov	r0, r6
 80a3424:	f7ff fa4b 	bl	80a28be <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a3428:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a342a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a342c:	d101      	bne.n	80a3432 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a342e:	4620      	mov	r0, r4
 80a3430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a3432:	2c00      	cmp	r4, #0
 80a3434:	d0f2      	beq.n	80a341c <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a3436:	212e      	movs	r1, #46	; 0x2e
 80a3438:	4630      	mov	r0, r6
 80a343a:	f7ff fa27 	bl	80a288c <_ZN5Print5printEc>
 80a343e:	4404      	add	r4, r0
 80a3440:	e7ec      	b.n	80a341c <_ZNK9IPAddress7printToER5Print+0xc>
	...

080a3444 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a3444:	b510      	push	{r4, lr}
 80a3446:	4604      	mov	r4, r0
 80a3448:	4b04      	ldr	r3, [pc, #16]	; (80a345c <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a344a:	2211      	movs	r2, #17
 80a344c:	2100      	movs	r1, #0
 80a344e:	f840 3b04 	str.w	r3, [r0], #4
 80a3452:	f001 fd23 	bl	80a4e9c <memset>
}
 80a3456:	4620      	mov	r0, r4
 80a3458:	bd10      	pop	{r4, pc}
 80a345a:	bf00      	nop
 80a345c:	080a72c4 	.word	0x080a72c4

080a3460 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a3460:	4603      	mov	r3, r0
 80a3462:	4a07      	ldr	r2, [pc, #28]	; (80a3480 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a3464:	b510      	push	{r4, lr}
 80a3466:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a346a:	f101 0210 	add.w	r2, r1, #16
 80a346e:	f851 4b04 	ldr.w	r4, [r1], #4
 80a3472:	4291      	cmp	r1, r2
 80a3474:	f843 4b04 	str.w	r4, [r3], #4
 80a3478:	d1f9      	bne.n	80a346e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a347a:	780a      	ldrb	r2, [r1, #0]
 80a347c:	701a      	strb	r2, [r3, #0]
}
 80a347e:	bd10      	pop	{r4, pc}
 80a3480:	080a72c4 	.word	0x080a72c4

080a3484 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 80a3484:	4a02      	ldr	r2, [pc, #8]	; (80a3490 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = ipv4;
 80a3486:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a348a:	2204      	movs	r2, #4
 80a348c:	7502      	strb	r2, [r0, #20]
}
 80a348e:	4770      	bx	lr
 80a3490:	080a72c4 	.word	0x080a72c4

080a3494 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a3494:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a3496:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a349a:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a349e:	2304      	movs	r3, #4
 80a34a0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a34a4:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a34a8:	6044      	str	r4, [r0, #4]
 80a34aa:	7503      	strb	r3, [r0, #20]
}
 80a34ac:	bd10      	pop	{r4, pc}
	...

080a34b0 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a34b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a34b2:	4d04      	ldr	r5, [pc, #16]	; (80a34c4 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a34b4:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a34b6:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a34ba:	9500      	str	r5, [sp, #0]
 80a34bc:	f7ff ffea 	bl	80a3494 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a34c0:	b003      	add	sp, #12
 80a34c2:	bd30      	pop	{r4, r5, pc}
 80a34c4:	080a72c4 	.word	0x080a72c4

080a34c8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a34c8:	7441      	strb	r1, [r0, #17]
}
 80a34ca:	4770      	bx	lr

080a34cc <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a34cc:	4770      	bx	lr

080a34ce <_ZN9USBSerial4readEv>:
{
 80a34ce:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a34d0:	2100      	movs	r1, #0
 80a34d2:	7c00      	ldrb	r0, [r0, #16]
 80a34d4:	f7fe fe56 	bl	80a2184 <HAL_USB_USART_Receive_Data>
}
 80a34d8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a34dc:	bd08      	pop	{r3, pc}

080a34de <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
 80a34de:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a34e0:	2101      	movs	r1, #1
 80a34e2:	7c00      	ldrb	r0, [r0, #16]
 80a34e4:	f7fe fe4e 	bl	80a2184 <HAL_USB_USART_Receive_Data>
}
 80a34e8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a34ec:	bd08      	pop	{r3, pc}

080a34ee <_ZN9USBSerial17availableForWriteEv>:
{
 80a34ee:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a34f0:	7c00      	ldrb	r0, [r0, #16]
 80a34f2:	f7fe fe3f 	bl	80a2174 <HAL_USB_USART_Available_Data_For_Write>
}
 80a34f6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a34fa:	bd08      	pop	{r3, pc}

080a34fc <_ZN9USBSerial9availableEv>:
{
 80a34fc:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a34fe:	7c00      	ldrb	r0, [r0, #16]
 80a3500:	f7fe fe30 	bl	80a2164 <HAL_USB_USART_Available_Data>
}
 80a3504:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a3508:	bd08      	pop	{r3, pc}

080a350a <_ZN9USBSerial5writeEh>:
{
 80a350a:	b538      	push	{r3, r4, r5, lr}
 80a350c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a350e:	7c00      	ldrb	r0, [r0, #16]
{
 80a3510:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a3512:	f7fe fe2f 	bl	80a2174 <HAL_USB_USART_Available_Data_For_Write>
 80a3516:	2800      	cmp	r0, #0
 80a3518:	dc01      	bgt.n	80a351e <_ZN9USBSerial5writeEh+0x14>
 80a351a:	7c60      	ldrb	r0, [r4, #17]
 80a351c:	b128      	cbz	r0, 80a352a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a351e:	4629      	mov	r1, r5
 80a3520:	7c20      	ldrb	r0, [r4, #16]
 80a3522:	f7fe fe37 	bl	80a2194 <HAL_USB_USART_Send_Data>
 80a3526:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a352a:	bd38      	pop	{r3, r4, r5, pc}

080a352c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a352c:	7c00      	ldrb	r0, [r0, #16]
 80a352e:	f7fe be39 	b.w	80a21a4 <HAL_USB_USART_Flush_Data>

080a3532 <_ZN9USBSerialD0Ev>:
 80a3532:	b510      	push	{r4, lr}
 80a3534:	4604      	mov	r4, r0
 80a3536:	2114      	movs	r1, #20
 80a3538:	f000 fb13 	bl	80a3b62 <_ZdlPvj>
 80a353c:	4620      	mov	r0, r4
 80a353e:	bd10      	pop	{r4, pc}

080a3540 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a3540:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a3542:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a3546:	4604      	mov	r4, r0
 80a3548:	4608      	mov	r0, r1
 80a354a:	2100      	movs	r1, #0
 80a354c:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a3550:	4b04      	ldr	r3, [pc, #16]	; (80a3564 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a3552:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a3554:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a3556:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a3558:	4611      	mov	r1, r2
  _blocking = true;
 80a355a:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a355c:	f7fe fdf2 	bl	80a2144 <HAL_USB_USART_Init>
}
 80a3560:	4620      	mov	r0, r4
 80a3562:	bd10      	pop	{r4, pc}
 80a3564:	080a72d8 	.word	0x080a72d8

080a3568 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a3568:	2200      	movs	r2, #0
 80a356a:	7c00      	ldrb	r0, [r0, #16]
 80a356c:	f7fe bdf2 	b.w	80a2154 <HAL_USB_USART_Begin>

080a3570 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a3570:	b510      	push	{r4, lr}
 80a3572:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a3574:	2214      	movs	r2, #20
 80a3576:	2100      	movs	r1, #0
 80a3578:	f001 fc90 	bl	80a4e9c <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a357c:	4620      	mov	r0, r4
 80a357e:	bd10      	pop	{r4, pc}

080a3580 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a3580:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a3582:	4d0f      	ldr	r5, [pc, #60]	; (80a35c0 <_Z16_fetch_usbserialv+0x40>)
{
 80a3584:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a3586:	a801      	add	r0, sp, #4
 80a3588:	f7ff fff2 	bl	80a3570 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a358c:	7829      	ldrb	r1, [r5, #0]
 80a358e:	f3bf 8f5b 	dmb	ish
 80a3592:	f011 0401 	ands.w	r4, r1, #1
 80a3596:	d110      	bne.n	80a35ba <_Z16_fetch_usbserialv+0x3a>
 80a3598:	4628      	mov	r0, r5
 80a359a:	f7fc fd82 	bl	80a00a2 <__cxa_guard_acquire>
 80a359e:	b160      	cbz	r0, 80a35ba <_Z16_fetch_usbserialv+0x3a>
 80a35a0:	4621      	mov	r1, r4
 80a35a2:	aa01      	add	r2, sp, #4
 80a35a4:	4807      	ldr	r0, [pc, #28]	; (80a35c4 <_Z16_fetch_usbserialv+0x44>)
 80a35a6:	f7ff ffcb 	bl	80a3540 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a35aa:	4628      	mov	r0, r5
 80a35ac:	f7fc fd7e 	bl	80a00ac <__cxa_guard_release>
 80a35b0:	4a05      	ldr	r2, [pc, #20]	; (80a35c8 <_Z16_fetch_usbserialv+0x48>)
 80a35b2:	4906      	ldr	r1, [pc, #24]	; (80a35cc <_Z16_fetch_usbserialv+0x4c>)
 80a35b4:	4803      	ldr	r0, [pc, #12]	; (80a35c4 <_Z16_fetch_usbserialv+0x44>)
 80a35b6:	f000 facf 	bl	80a3b58 <__aeabi_atexit>
	return _usbserial;
}
 80a35ba:	4802      	ldr	r0, [pc, #8]	; (80a35c4 <_Z16_fetch_usbserialv+0x44>)
 80a35bc:	b007      	add	sp, #28
 80a35be:	bd30      	pop	{r4, r5, pc}
 80a35c0:	20000698 	.word	0x20000698
 80a35c4:	200006a0 	.word	0x200006a0
 80a35c8:	20000240 	.word	0x20000240
 80a35cc:	080a34cd 	.word	0x080a34cd

080a35d0 <_Z23acquireUSBSerial1Bufferv>:
 80a35d0:	b510      	push	{r4, lr}
 80a35d2:	4604      	mov	r4, r0
 80a35d4:	2214      	movs	r2, #20
 80a35d6:	2100      	movs	r1, #0
 80a35d8:	f001 fc60 	bl	80a4e9c <memset>
 80a35dc:	4620      	mov	r0, r4
 80a35de:	bd10      	pop	{r4, pc}

080a35e0 <_Z17_fetch_usbserial1v>:

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a35e0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a35e2:	4c0f      	ldr	r4, [pc, #60]	; (80a3620 <_Z17_fetch_usbserial1v+0x40>)
{
 80a35e4:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a35e6:	a801      	add	r0, sp, #4
 80a35e8:	f7ff fff2 	bl	80a35d0 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a35ec:	7823      	ldrb	r3, [r4, #0]
 80a35ee:	f3bf 8f5b 	dmb	ish
 80a35f2:	07db      	lsls	r3, r3, #31
 80a35f4:	d410      	bmi.n	80a3618 <_Z17_fetch_usbserial1v+0x38>
 80a35f6:	4620      	mov	r0, r4
 80a35f8:	f7fc fd53 	bl	80a00a2 <__cxa_guard_acquire>
 80a35fc:	b160      	cbz	r0, 80a3618 <_Z17_fetch_usbserial1v+0x38>
 80a35fe:	2101      	movs	r1, #1
 80a3600:	aa01      	add	r2, sp, #4
 80a3602:	4808      	ldr	r0, [pc, #32]	; (80a3624 <_Z17_fetch_usbserial1v+0x44>)
 80a3604:	f7ff ff9c 	bl	80a3540 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a3608:	4620      	mov	r0, r4
 80a360a:	f7fc fd4f 	bl	80a00ac <__cxa_guard_release>
 80a360e:	4a06      	ldr	r2, [pc, #24]	; (80a3628 <_Z17_fetch_usbserial1v+0x48>)
 80a3610:	4906      	ldr	r1, [pc, #24]	; (80a362c <_Z17_fetch_usbserial1v+0x4c>)
 80a3612:	4804      	ldr	r0, [pc, #16]	; (80a3624 <_Z17_fetch_usbserial1v+0x44>)
 80a3614:	f000 faa0 	bl	80a3b58 <__aeabi_atexit>
  return _usbserial1;
}
 80a3618:	4802      	ldr	r0, [pc, #8]	; (80a3624 <_Z17_fetch_usbserial1v+0x44>)
 80a361a:	b006      	add	sp, #24
 80a361c:	bd10      	pop	{r4, pc}
 80a361e:	bf00      	nop
 80a3620:	2000069c 	.word	0x2000069c
 80a3624:	200006b4 	.word	0x200006b4
 80a3628:	20000240 	.word	0x20000240
 80a362c:	080a34cd 	.word	0x080a34cd

080a3630 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80a3630:	4770      	bx	lr

080a3632 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a3632:	7441      	strb	r1, [r0, #17]
}
 80a3634:	4770      	bx	lr

080a3636 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80a3636:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a3638:	7c00      	ldrb	r0, [r0, #16]
 80a363a:	f7fe fd31 	bl	80a20a0 <hal_usart_available_data_for_write>
}
 80a363e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a3642:	bd08      	pop	{r3, pc}

080a3644 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a3644:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a3646:	7c00      	ldrb	r0, [r0, #16]
 80a3648:	f7fe fd02 	bl	80a2050 <hal_usart_available>
}
 80a364c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a3650:	bd08      	pop	{r3, pc}

080a3652 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a3652:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a3654:	7c00      	ldrb	r0, [r0, #16]
 80a3656:	f7fe fd0b 	bl	80a2070 <hal_usart_peek>
}
 80a365a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a365e:	bd08      	pop	{r3, pc}

080a3660 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a3660:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a3662:	7c00      	ldrb	r0, [r0, #16]
 80a3664:	f7fe fcfc 	bl	80a2060 <hal_usart_read>
}
 80a3668:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a366c:	bd08      	pop	{r3, pc}

080a366e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80a366e:	7c00      	ldrb	r0, [r0, #16]
 80a3670:	f7fe bd06 	b.w	80a2080 <hal_usart_flush>

080a3674 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a3674:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a3676:	7c46      	ldrb	r6, [r0, #17]
{
 80a3678:	4604      	mov	r4, r0
 80a367a:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a367c:	b12e      	cbz	r6, 80a368a <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80a367e:	4629      	mov	r1, r5
 80a3680:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a3682:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a3686:	f7fe bcdb 	b.w	80a2040 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a368a:	7c00      	ldrb	r0, [r0, #16]
 80a368c:	f7fe fd08 	bl	80a20a0 <hal_usart_available_data_for_write>
 80a3690:	2800      	cmp	r0, #0
 80a3692:	dcf4      	bgt.n	80a367e <_ZN11USARTSerial5writeEh+0xa>
}
 80a3694:	4630      	mov	r0, r6
 80a3696:	bd70      	pop	{r4, r5, r6, pc}

080a3698 <_ZN11USARTSerialD0Ev>:
 80a3698:	b510      	push	{r4, lr}
 80a369a:	4604      	mov	r4, r0
 80a369c:	2114      	movs	r1, #20
 80a369e:	f000 fa60 	bl	80a3b62 <_ZdlPvj>
 80a36a2:	4620      	mov	r0, r4
 80a36a4:	bd10      	pop	{r4, pc}
	...

080a36a8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80a36a8:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a36ac:	b510      	push	{r4, lr}
 80a36ae:	4604      	mov	r4, r0
 80a36b0:	4608      	mov	r0, r1
 80a36b2:	4611      	mov	r1, r2
 80a36b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a36b8:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80a36bc:	4a04      	ldr	r2, [pc, #16]	; (80a36d0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80a36be:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a36c0:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80a36c2:	2201      	movs	r2, #1
 80a36c4:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80a36c6:	461a      	mov	r2, r3
 80a36c8:	f7fe fcb2 	bl	80a2030 <hal_usart_init>
}
 80a36cc:	4620      	mov	r0, r4
 80a36ce:	bd10      	pop	{r4, pc}
 80a36d0:	080a7308 	.word	0x080a7308

080a36d4 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a36d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
 80a36d6:	4c1a      	ldr	r4, [pc, #104]	; (80a3740 <_Z22__fetch_global_Serial1v+0x6c>)
 80a36d8:	6826      	ldr	r6, [r4, #0]
 80a36da:	b94e      	cbnz	r6, 80a36f0 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new hal_usart_ring_buffer_t();
 80a36dc:	2084      	movs	r0, #132	; 0x84
 80a36de:	f7fc fcda 	bl	80a0096 <_Znwj>
 80a36e2:	4605      	mov	r5, r0
 80a36e4:	b118      	cbz	r0, 80a36ee <_Z22__fetch_global_Serial1v+0x1a>
 80a36e6:	2284      	movs	r2, #132	; 0x84
 80a36e8:	4631      	mov	r1, r6
 80a36ea:	f001 fbd7 	bl	80a4e9c <memset>
 80a36ee:	6025      	str	r5, [r4, #0]
  }
  if (!serial1_tx_buffer) {
 80a36f0:	4d14      	ldr	r5, [pc, #80]	; (80a3744 <_Z22__fetch_global_Serial1v+0x70>)
 80a36f2:	682f      	ldr	r7, [r5, #0]
 80a36f4:	b94f      	cbnz	r7, 80a370a <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
 80a36f6:	2084      	movs	r0, #132	; 0x84
 80a36f8:	f7fc fccd 	bl	80a0096 <_Znwj>
 80a36fc:	4606      	mov	r6, r0
 80a36fe:	b118      	cbz	r0, 80a3708 <_Z22__fetch_global_Serial1v+0x34>
 80a3700:	2284      	movs	r2, #132	; 0x84
 80a3702:	4639      	mov	r1, r7
 80a3704:	f001 fbca 	bl	80a4e9c <memset>
 80a3708:	602e      	str	r6, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
 80a370a:	4f0f      	ldr	r7, [pc, #60]	; (80a3748 <_Z22__fetch_global_Serial1v+0x74>)
 80a370c:	7839      	ldrb	r1, [r7, #0]
 80a370e:	f3bf 8f5b 	dmb	ish
 80a3712:	f011 0601 	ands.w	r6, r1, #1
 80a3716:	d111      	bne.n	80a373c <_Z22__fetch_global_Serial1v+0x68>
 80a3718:	4638      	mov	r0, r7
 80a371a:	f7fc fcc2 	bl	80a00a2 <__cxa_guard_acquire>
 80a371e:	b168      	cbz	r0, 80a373c <_Z22__fetch_global_Serial1v+0x68>
 80a3720:	4631      	mov	r1, r6
 80a3722:	6822      	ldr	r2, [r4, #0]
 80a3724:	682b      	ldr	r3, [r5, #0]
 80a3726:	4809      	ldr	r0, [pc, #36]	; (80a374c <_Z22__fetch_global_Serial1v+0x78>)
 80a3728:	f7ff ffbe 	bl	80a36a8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80a372c:	4638      	mov	r0, r7
 80a372e:	f7fc fcbd 	bl	80a00ac <__cxa_guard_release>
 80a3732:	4a07      	ldr	r2, [pc, #28]	; (80a3750 <_Z22__fetch_global_Serial1v+0x7c>)
 80a3734:	4907      	ldr	r1, [pc, #28]	; (80a3754 <_Z22__fetch_global_Serial1v+0x80>)
 80a3736:	4805      	ldr	r0, [pc, #20]	; (80a374c <_Z22__fetch_global_Serial1v+0x78>)
 80a3738:	f000 fa0e 	bl	80a3b58 <__aeabi_atexit>
#endif
	return serial1;
}
 80a373c:	4803      	ldr	r0, [pc, #12]	; (80a374c <_Z22__fetch_global_Serial1v+0x78>)
 80a373e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a3740:	200006cc 	.word	0x200006cc
 80a3744:	200006d0 	.word	0x200006d0
 80a3748:	200006c8 	.word	0x200006c8
 80a374c:	200006d4 	.word	0x200006d4
 80a3750:	20000240 	.word	0x20000240
 80a3754:	080a3631 	.word	0x080a3631

080a3758 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a3758:	b510      	push	{r4, lr}
      if (_M_empty())
 80a375a:	6883      	ldr	r3, [r0, #8]
 80a375c:	4604      	mov	r4, r0
 80a375e:	b90b      	cbnz	r3, 80a3764 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a3760:	f000 fa03 	bl	80a3b6a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a3764:	68c3      	ldr	r3, [r0, #12]
 80a3766:	4798      	blx	r3
      if (_M_manager)
 80a3768:	68a3      	ldr	r3, [r4, #8]
 80a376a:	b11b      	cbz	r3, 80a3774 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a376c:	2203      	movs	r2, #3
 80a376e:	4621      	mov	r1, r4
 80a3770:	4620      	mov	r0, r4
 80a3772:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a3774:	4620      	mov	r0, r4
}
 80a3776:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 80a377a:	2110      	movs	r1, #16
 80a377c:	f000 b9f1 	b.w	80a3b62 <_ZdlPvj>

080a3780 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a3780:	4770      	bx	lr

080a3782 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a3782:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3784:	4606      	mov	r6, r0
 80a3786:	4615      	mov	r5, r2
 80a3788:	460c      	mov	r4, r1
 80a378a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a378c:	42bc      	cmp	r4, r7
 80a378e:	d006      	beq.n	80a379e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a3790:	6833      	ldr	r3, [r6, #0]
 80a3792:	4630      	mov	r0, r6
 80a3794:	689b      	ldr	r3, [r3, #8]
 80a3796:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a379a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a379c:	e7f6      	b.n	80a378c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a379e:	4628      	mov	r0, r5
 80a37a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a37a2 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a37a2:	2200      	movs	r2, #0
 80a37a4:	7c00      	ldrb	r0, [r0, #16]
 80a37a6:	f7fe bc83 	b.w	80a20b0 <hal_i2c_write>

080a37aa <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a37aa:	2100      	movs	r1, #0
 80a37ac:	7c00      	ldrb	r0, [r0, #16]
 80a37ae:	f7fe bc87 	b.w	80a20c0 <hal_i2c_available>

080a37b2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a37b2:	2100      	movs	r1, #0
 80a37b4:	7c00      	ldrb	r0, [r0, #16]
 80a37b6:	f7fe bc8b 	b.w	80a20d0 <hal_i2c_read>

080a37ba <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a37ba:	2100      	movs	r1, #0
 80a37bc:	7c00      	ldrb	r0, [r0, #16]
 80a37be:	f7fe bc8f 	b.w	80a20e0 <hal_i2c_peek>

080a37c2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a37c2:	2100      	movs	r1, #0
 80a37c4:	7c00      	ldrb	r0, [r0, #16]
 80a37c6:	f7fe bc93 	b.w	80a20f0 <hal_i2c_flush>

080a37ca <_ZN7TwoWireD0Ev>:
 80a37ca:	b510      	push	{r4, lr}
 80a37cc:	4604      	mov	r4, r0
 80a37ce:	2114      	movs	r1, #20
 80a37d0:	f000 f9c7 	bl	80a3b62 <_ZdlPvj>
 80a37d4:	4620      	mov	r0, r4
 80a37d6:	bd10      	pop	{r4, pc}

080a37d8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a37d8:	b510      	push	{r4, lr}
 80a37da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a37de:	4604      	mov	r4, r0
 80a37e0:	4608      	mov	r0, r1
 80a37e2:	2100      	movs	r1, #0
 80a37e4:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a37e8:	4b03      	ldr	r3, [pc, #12]	; (80a37f8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a37ea:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a37ec:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a37ee:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a37f0:	f7fe fc8e 	bl	80a2110 <hal_i2c_init>
}
 80a37f4:	4620      	mov	r0, r4
 80a37f6:	bd10      	pop	{r4, pc}
 80a37f8:	080a7338 	.word	0x080a7338

080a37fc <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a37fc:	2200      	movs	r2, #0
 80a37fe:	6840      	ldr	r0, [r0, #4]
 80a3800:	4611      	mov	r1, r2
 80a3802:	f7fe bd43 	b.w	80a228c <network_ready>

080a3806 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a3806:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a3808:	4615      	mov	r5, r2
 80a380a:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a380c:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a380e:	460e      	mov	r6, r1
 80a3810:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a3812:	2100      	movs	r1, #0
 80a3814:	a803      	add	r0, sp, #12
 80a3816:	f001 fb41 	bl	80a4e9c <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a381a:	4628      	mov	r0, r5
 80a381c:	f002 fb88 	bl	80a5f30 <strlen>
 80a3820:	2700      	movs	r7, #0
 80a3822:	b281      	uxth	r1, r0
 80a3824:	6873      	ldr	r3, [r6, #4]
 80a3826:	4628      	mov	r0, r5
 80a3828:	9700      	str	r7, [sp, #0]
 80a382a:	aa03      	add	r2, sp, #12
 80a382c:	f7fe fcc2 	bl	80a21b4 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a3830:	b130      	cbz	r0, 80a3840 <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a3832:	4639      	mov	r1, r7
 80a3834:	4620      	mov	r0, r4
 80a3836:	f7ff fe25 	bl	80a3484 <_ZN9IPAddressC1Em>
    }
 80a383a:	4620      	mov	r0, r4
 80a383c:	b009      	add	sp, #36	; 0x24
 80a383e:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a3840:	4620      	mov	r0, r4
 80a3842:	a903      	add	r1, sp, #12
 80a3844:	f7ff fe0c 	bl	80a3460 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a3848:	e7f7      	b.n	80a383a <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a384a <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a384a:	2200      	movs	r2, #0
 80a384c:	6840      	ldr	r0, [r0, #4]
 80a384e:	4611      	mov	r1, r2
 80a3850:	f7fe bd3c 	b.w	80a22cc <network_listening>

080a3854 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a3854:	2200      	movs	r2, #0
 80a3856:	6840      	ldr	r0, [r0, #4]
 80a3858:	4611      	mov	r1, r2
 80a385a:	f7fe bd47 	b.w	80a22ec <network_get_listen_timeout>

080a385e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a385e:	2200      	movs	r2, #0
 80a3860:	6840      	ldr	r0, [r0, #4]
 80a3862:	f7fe bd3b 	b.w	80a22dc <network_set_listen_timeout>

080a3866 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a3866:	2200      	movs	r2, #0
 80a3868:	6840      	ldr	r0, [r0, #4]
 80a386a:	f081 0101 	eor.w	r1, r1, #1
 80a386e:	f7fe bd25 	b.w	80a22bc <network_listen>

080a3872 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a3872:	2300      	movs	r3, #0
 80a3874:	6840      	ldr	r0, [r0, #4]
 80a3876:	461a      	mov	r2, r3
 80a3878:	4619      	mov	r1, r3
 80a387a:	f7fe bd17 	b.w	80a22ac <network_off>

080a387e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a387e:	2200      	movs	r2, #0
 80a3880:	6840      	ldr	r0, [r0, #4]
 80a3882:	4611      	mov	r1, r2
 80a3884:	f7fe bcf2 	b.w	80a226c <network_connecting>

080a3888 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a3888:	2200      	movs	r2, #0
 80a388a:	2102      	movs	r1, #2
 80a388c:	6840      	ldr	r0, [r0, #4]
 80a388e:	f7fe bcf5 	b.w	80a227c <network_disconnect>

080a3892 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a3892:	2300      	movs	r3, #0
 80a3894:	6840      	ldr	r0, [r0, #4]
 80a3896:	461a      	mov	r2, r3
 80a3898:	f7fe bce0 	b.w	80a225c <network_connect>

080a389c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a389c:	2204      	movs	r2, #4
 80a389e:	4b02      	ldr	r3, [pc, #8]	; (80a38a8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a38a0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a38a2:	4a02      	ldr	r2, [pc, #8]	; (80a38ac <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a38a4:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a38a6:	4770      	bx	lr
 80a38a8:	200006e8 	.word	0x200006e8
 80a38ac:	080a7360 	.word	0x080a7360

080a38b0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a38b0:	2300      	movs	r3, #0
 80a38b2:	6840      	ldr	r0, [r0, #4]
 80a38b4:	461a      	mov	r2, r3
 80a38b6:	f7fe bcd1 	b.w	80a225c <network_connect>

080a38ba <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a38ba:	2200      	movs	r2, #0
 80a38bc:	2102      	movs	r1, #2
 80a38be:	6840      	ldr	r0, [r0, #4]
 80a38c0:	f7fe bcdc 	b.w	80a227c <network_disconnect>

080a38c4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a38c4:	2200      	movs	r2, #0
 80a38c6:	6840      	ldr	r0, [r0, #4]
 80a38c8:	4611      	mov	r1, r2
 80a38ca:	f7fe bccf 	b.w	80a226c <network_connecting>

080a38ce <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a38ce:	2200      	movs	r2, #0
 80a38d0:	6840      	ldr	r0, [r0, #4]
 80a38d2:	4611      	mov	r1, r2
 80a38d4:	f7fe bcda 	b.w	80a228c <network_ready>

080a38d8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a38d8:	2300      	movs	r3, #0
 80a38da:	6840      	ldr	r0, [r0, #4]
 80a38dc:	461a      	mov	r2, r3
 80a38de:	4619      	mov	r1, r3
 80a38e0:	f7fe bcdc 	b.w	80a229c <network_on>

080a38e4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a38e4:	2300      	movs	r3, #0
 80a38e6:	6840      	ldr	r0, [r0, #4]
 80a38e8:	461a      	mov	r2, r3
 80a38ea:	4619      	mov	r1, r3
 80a38ec:	f7fe bcde 	b.w	80a22ac <network_off>

080a38f0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a38f0:	2100      	movs	r1, #0
 80a38f2:	6840      	ldr	r0, [r0, #4]
 80a38f4:	f7fe bd02 	b.w	80a22fc <network_is_on>

080a38f8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a38f8:	2100      	movs	r1, #0
 80a38fa:	6840      	ldr	r0, [r0, #4]
 80a38fc:	f7fe bd06 	b.w	80a230c <network_is_off>

080a3900 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a3900:	2200      	movs	r2, #0
 80a3902:	6840      	ldr	r0, [r0, #4]
 80a3904:	f081 0101 	eor.w	r1, r1, #1
 80a3908:	f7fe bcd8 	b.w	80a22bc <network_listen>

080a390c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a390c:	2200      	movs	r2, #0
 80a390e:	6840      	ldr	r0, [r0, #4]
 80a3910:	f7fe bce4 	b.w	80a22dc <network_set_listen_timeout>

080a3914 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a3914:	2200      	movs	r2, #0
 80a3916:	6840      	ldr	r0, [r0, #4]
 80a3918:	4611      	mov	r1, r2
 80a391a:	f7fe bce7 	b.w	80a22ec <network_get_listen_timeout>

080a391e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a391e:	2200      	movs	r2, #0
 80a3920:	6840      	ldr	r0, [r0, #4]
 80a3922:	4611      	mov	r1, r2
 80a3924:	f7fe bcd2 	b.w	80a22cc <network_listening>

080a3928 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a3928:	b570      	push	{r4, r5, r6, lr}
 80a392a:	4615      	mov	r5, r2
 80a392c:	b08e      	sub	sp, #56	; 0x38
 80a392e:	4604      	mov	r4, r0
    IPAddress addr;
 80a3930:	a808      	add	r0, sp, #32
 80a3932:	f7ff fd87 	bl	80a3444 <_ZN9IPAddressC1Ev>
        HAL_IPAddress ip = {};
 80a3936:	2211      	movs	r2, #17
 80a3938:	2100      	movs	r1, #0
 80a393a:	a803      	add	r0, sp, #12
 80a393c:	f001 faae 	bl	80a4e9c <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a3940:	2600      	movs	r6, #0
 80a3942:	4628      	mov	r0, r5
 80a3944:	f002 faf4 	bl	80a5f30 <strlen>
 80a3948:	4b0a      	ldr	r3, [pc, #40]	; (80a3974 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a394a:	9600      	str	r6, [sp, #0]
 80a394c:	b281      	uxth	r1, r0
 80a394e:	685b      	ldr	r3, [r3, #4]
 80a3950:	4628      	mov	r0, r5
 80a3952:	aa03      	add	r2, sp, #12
 80a3954:	f7fe fc2e 	bl	80a21b4 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a3958:	b130      	cbz	r0, 80a3968 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a395a:	4631      	mov	r1, r6
 80a395c:	4620      	mov	r0, r4
 80a395e:	f7ff fd91 	bl	80a3484 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a3962:	4620      	mov	r0, r4
 80a3964:	b00e      	add	sp, #56	; 0x38
 80a3966:	bd70      	pop	{r4, r5, r6, pc}
 80a3968:	4620      	mov	r0, r4
 80a396a:	a903      	add	r1, sp, #12
 80a396c:	f7ff fd78 	bl	80a3460 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a3970:	e7f7      	b.n	80a3962 <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a3972:	bf00      	nop
 80a3974:	200006e8 	.word	0x200006e8

080a3978 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a3978:	4b02      	ldr	r3, [pc, #8]	; (80a3984 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a397a:	4a03      	ldr	r2, [pc, #12]	; (80a3988 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a397c:	601a      	str	r2, [r3, #0]
 80a397e:	2200      	movs	r2, #0
 80a3980:	605a      	str	r2, [r3, #4]

} // spark
 80a3982:	4770      	bx	lr
 80a3984:	200006f0 	.word	0x200006f0
 80a3988:	080a739c 	.word	0x080a739c

080a398c <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(hal_spi_interface_t spi);
  ~SPIClass() = default;
 80a398c:	b510      	push	{r4, lr}
 80a398e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a3990:	6880      	ldr	r0, [r0, #8]
 80a3992:	b108      	cbz	r0, 80a3998 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80a3994:	f7fe fb44 	bl	80a2020 <os_mutex_recursive_destroy>
 80a3998:	4620      	mov	r0, r4
 80a399a:	bd10      	pop	{r4, pc}

080a399c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a399c:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a399e:	b570      	push	{r4, r5, r6, lr}
 80a39a0:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a39a2:	d901      	bls.n	80a39a8 <pinAvailable+0xc>
    return false;
 80a39a4:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a39a6:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a39a8:	f1a0 030d 	sub.w	r3, r0, #13
 80a39ac:	2b02      	cmp	r3, #2
 80a39ae:	d90b      	bls.n	80a39c8 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a39b0:	2801      	cmp	r0, #1
 80a39b2:	d826      	bhi.n	80a3a02 <pinAvailable+0x66>
 80a39b4:	f000 f8a8 	bl	80a3b08 <_Z19__fetch_global_Wirev>
 80a39b8:	2100      	movs	r1, #0
 80a39ba:	7c00      	ldrb	r0, [r0, #16]
 80a39bc:	f7fe fba0 	bl	80a2100 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a39c0:	f080 0001 	eor.w	r0, r0, #1
 80a39c4:	b2c0      	uxtb	r0, r0
 80a39c6:	e7ee      	b.n	80a39a6 <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a39c8:	4e13      	ldr	r6, [pc, #76]	; (80a3a18 <pinAvailable+0x7c>)
 80a39ca:	7831      	ldrb	r1, [r6, #0]
 80a39cc:	f3bf 8f5b 	dmb	ish
 80a39d0:	f011 0501 	ands.w	r5, r1, #1
 80a39d4:	d10f      	bne.n	80a39f6 <pinAvailable+0x5a>
 80a39d6:	4630      	mov	r0, r6
 80a39d8:	f7fc fb63 	bl	80a00a2 <__cxa_guard_acquire>
 80a39dc:	b158      	cbz	r0, 80a39f6 <pinAvailable+0x5a>
 80a39de:	4629      	mov	r1, r5
 80a39e0:	480e      	ldr	r0, [pc, #56]	; (80a3a1c <pinAvailable+0x80>)
 80a39e2:	f7fe fd4b 	bl	80a247c <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a39e6:	4630      	mov	r0, r6
 80a39e8:	f7fc fb60 	bl	80a00ac <__cxa_guard_release>
 80a39ec:	4a0c      	ldr	r2, [pc, #48]	; (80a3a20 <pinAvailable+0x84>)
 80a39ee:	490d      	ldr	r1, [pc, #52]	; (80a3a24 <pinAvailable+0x88>)
 80a39f0:	480a      	ldr	r0, [pc, #40]	; (80a3a1c <pinAvailable+0x80>)
 80a39f2:	f000 f8b1 	bl	80a3b58 <__aeabi_atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a39f6:	4b09      	ldr	r3, [pc, #36]	; (80a3a1c <pinAvailable+0x80>)
 80a39f8:	7818      	ldrb	r0, [r3, #0]
 80a39fa:	f7fe fb9b 	bl	80a2134 <hal_spi_is_enabled>
 80a39fe:	2800      	cmp	r0, #0
 80a3a00:	d1d0      	bne.n	80a39a4 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a3a02:	3c12      	subs	r4, #18
 80a3a04:	2c01      	cmp	r4, #1
 80a3a06:	d805      	bhi.n	80a3a14 <pinAvailable+0x78>
 80a3a08:	f7ff fe64 	bl	80a36d4 <_Z22__fetch_global_Serial1v>
 80a3a0c:	7c00      	ldrb	r0, [r0, #16]
 80a3a0e:	f7fe fb3f 	bl	80a2090 <hal_usart_is_enabled>
 80a3a12:	e7d5      	b.n	80a39c0 <pinAvailable+0x24>
  return true; // 'pin' is available
 80a3a14:	2001      	movs	r0, #1
 80a3a16:	e7c6      	b.n	80a39a6 <pinAvailable+0xa>
 80a3a18:	200006f8 	.word	0x200006f8
 80a3a1c:	200006fc 	.word	0x200006fc
 80a3a20:	20000240 	.word	0x20000240
 80a3a24:	080a398d 	.word	0x080a398d

080a3a28 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a3a28:	2817      	cmp	r0, #23
{
 80a3a2a:	b538      	push	{r3, r4, r5, lr}
 80a3a2c:	4604      	mov	r4, r0
 80a3a2e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a3a30:	d80a      	bhi.n	80a3a48 <pinMode+0x20>
 80a3a32:	29ff      	cmp	r1, #255	; 0xff
 80a3a34:	d008      	beq.n	80a3a48 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a3a36:	f7ff ffb1 	bl	80a399c <pinAvailable>
 80a3a3a:	b128      	cbz	r0, 80a3a48 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a3a3c:	4629      	mov	r1, r5
 80a3a3e:	4620      	mov	r0, r4
}
 80a3a40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a3a44:	f7fe ba94 	b.w	80a1f70 <HAL_Pin_Mode>
}
 80a3a48:	bd38      	pop	{r3, r4, r5, pc}

080a3a4a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a3a4a:	b538      	push	{r3, r4, r5, lr}
 80a3a4c:	4604      	mov	r4, r0
 80a3a4e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a3a50:	f7fe fa96 	bl	80a1f80 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a3a54:	28ff      	cmp	r0, #255	; 0xff
 80a3a56:	d010      	beq.n	80a3a7a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80a3a58:	2806      	cmp	r0, #6
 80a3a5a:	d804      	bhi.n	80a3a66 <digitalWrite+0x1c>
 80a3a5c:	234d      	movs	r3, #77	; 0x4d
 80a3a5e:	fa23 f000 	lsr.w	r0, r3, r0
 80a3a62:	07c3      	lsls	r3, r0, #31
 80a3a64:	d409      	bmi.n	80a3a7a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a3a66:	4620      	mov	r0, r4
 80a3a68:	f7ff ff98 	bl	80a399c <pinAvailable>
 80a3a6c:	b128      	cbz	r0, 80a3a7a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a3a6e:	4629      	mov	r1, r5
 80a3a70:	4620      	mov	r0, r4
}
 80a3a72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80a3a76:	f7fe ba8b 	b.w	80a1f90 <HAL_GPIO_Write>
}
 80a3a7a:	bd38      	pop	{r3, r4, r5, pc}

080a3a7c <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
 80a3a7c:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
 80a3a7e:	4c08      	ldr	r4, [pc, #32]	; (80a3aa0 <_Z21__fetch_global_EEPROMv+0x24>)
 80a3a80:	7823      	ldrb	r3, [r4, #0]
 80a3a82:	f3bf 8f5b 	dmb	ish
 80a3a86:	07db      	lsls	r3, r3, #31
 80a3a88:	d408      	bmi.n	80a3a9c <_Z21__fetch_global_EEPROMv+0x20>
 80a3a8a:	4620      	mov	r0, r4
 80a3a8c:	f7fc fb09 	bl	80a00a2 <__cxa_guard_acquire>
 80a3a90:	b120      	cbz	r0, 80a3a9c <_Z21__fetch_global_EEPROMv+0x20>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
 80a3a92:	f7fe fa95 	bl	80a1fc0 <HAL_EEPROM_Init>
 80a3a96:	4620      	mov	r0, r4
 80a3a98:	f7fc fb08 	bl	80a00ac <__cxa_guard_release>
	return eeprom;
}
 80a3a9c:	4801      	ldr	r0, [pc, #4]	; (80a3aa4 <_Z21__fetch_global_EEPROMv+0x28>)
 80a3a9e:	bd10      	pop	{r4, pc}
 80a3aa0:	2000070c 	.word	0x2000070c
 80a3aa4:	20000710 	.word	0x20000710

080a3aa8 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a3aa8:	2300      	movs	r3, #0
 80a3aaa:	b513      	push	{r0, r1, r4, lr}
 80a3aac:	4c07      	ldr	r4, [pc, #28]	; (80a3acc <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a3aae:	461a      	mov	r2, r3
 80a3ab0:	4619      	mov	r1, r3
 80a3ab2:	4620      	mov	r0, r4
 80a3ab4:	9300      	str	r3, [sp, #0]
 80a3ab6:	f7ff fcfb 	bl	80a34b0 <_ZN9IPAddressC1Ehhhh>
 80a3aba:	4620      	mov	r0, r4
 80a3abc:	4a04      	ldr	r2, [pc, #16]	; (80a3ad0 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a3abe:	4905      	ldr	r1, [pc, #20]	; (80a3ad4 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a3ac0:	b002      	add	sp, #8
 80a3ac2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a3ac6:	f000 b847 	b.w	80a3b58 <__aeabi_atexit>
 80a3aca:	bf00      	nop
 80a3acc:	20000714 	.word	0x20000714
 80a3ad0:	20000240 	.word	0x20000240
 80a3ad4:	080a3401 	.word	0x080a3401

080a3ad8 <_Z17acquireWireBufferv>:
#ifndef SPARK_WIRING_NO_I2C

namespace {

hal_i2c_config_t defaultWireConfig() {
	hal_i2c_config_t config = {
 80a3ad8:	2300      	movs	r3, #0
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
 80a3ada:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a3adc:	2520      	movs	r5, #32
 80a3ade:	8043      	strh	r3, [r0, #2]
 80a3ae0:	2314      	movs	r3, #20
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3ae2:	4e08      	ldr	r6, [pc, #32]	; (80a3b04 <_Z17acquireWireBufferv+0x2c>)
{
 80a3ae4:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a3ae6:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3ae8:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a3aea:	6085      	str	r5, [r0, #8]
 80a3aec:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3aee:	4628      	mov	r0, r5
 80a3af0:	f000 f839 	bl	80a3b66 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3af4:	4631      	mov	r1, r6
	};
 80a3af6:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3af8:	4628      	mov	r0, r5
 80a3afa:	f000 f834 	bl	80a3b66 <_ZnajRKSt9nothrow_t>
	};
 80a3afe:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
 80a3b00:	4620      	mov	r0, r4
 80a3b02:	bd70      	pop	{r4, r5, r6, pc}
 80a3b04:	080a73d0 	.word	0x080a73d0

080a3b08 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a3b08:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a3b0a:	4d0f      	ldr	r5, [pc, #60]	; (80a3b48 <_Z19__fetch_global_Wirev+0x40>)
{
 80a3b0c:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a3b0e:	7829      	ldrb	r1, [r5, #0]
 80a3b10:	f3bf 8f5b 	dmb	ish
 80a3b14:	f011 0401 	ands.w	r4, r1, #1
 80a3b18:	d113      	bne.n	80a3b42 <_Z19__fetch_global_Wirev+0x3a>
 80a3b1a:	4628      	mov	r0, r5
 80a3b1c:	f7fc fac1 	bl	80a00a2 <__cxa_guard_acquire>
 80a3b20:	b178      	cbz	r0, 80a3b42 <_Z19__fetch_global_Wirev+0x3a>
 80a3b22:	a801      	add	r0, sp, #4
 80a3b24:	f7ff ffd8 	bl	80a3ad8 <_Z17acquireWireBufferv>
 80a3b28:	4621      	mov	r1, r4
 80a3b2a:	aa01      	add	r2, sp, #4
 80a3b2c:	4807      	ldr	r0, [pc, #28]	; (80a3b4c <_Z19__fetch_global_Wirev+0x44>)
 80a3b2e:	f7ff fe53 	bl	80a37d8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a3b32:	4628      	mov	r0, r5
 80a3b34:	f7fc faba 	bl	80a00ac <__cxa_guard_release>
 80a3b38:	4a05      	ldr	r2, [pc, #20]	; (80a3b50 <_Z19__fetch_global_Wirev+0x48>)
 80a3b3a:	4906      	ldr	r1, [pc, #24]	; (80a3b54 <_Z19__fetch_global_Wirev+0x4c>)
 80a3b3c:	4803      	ldr	r0, [pc, #12]	; (80a3b4c <_Z19__fetch_global_Wirev+0x44>)
 80a3b3e:	f000 f80b 	bl	80a3b58 <__aeabi_atexit>
	return wire;
}
 80a3b42:	4802      	ldr	r0, [pc, #8]	; (80a3b4c <_Z19__fetch_global_Wirev+0x44>)
 80a3b44:	b007      	add	sp, #28
 80a3b46:	bd30      	pop	{r4, r5, pc}
 80a3b48:	2000072c 	.word	0x2000072c
 80a3b4c:	20000730 	.word	0x20000730
 80a3b50:	20000240 	.word	0x20000240
 80a3b54:	080a3781 	.word	0x080a3781

080a3b58 <__aeabi_atexit>:
 80a3b58:	460b      	mov	r3, r1
 80a3b5a:	4601      	mov	r1, r0
 80a3b5c:	4618      	mov	r0, r3
 80a3b5e:	f001 b88b 	b.w	80a4c78 <__cxa_atexit>

080a3b62 <_ZdlPvj>:
 80a3b62:	f7fc ba9c 	b.w	80a009e <_ZdlPv>

080a3b66 <_ZnajRKSt9nothrow_t>:
 80a3b66:	f7fc ba98 	b.w	80a009a <_Znaj>

080a3b6a <_ZSt25__throw_bad_function_callv>:
 80a3b6a:	b508      	push	{r3, lr}
 80a3b6c:	f7fe fc6e 	bl	80a244c <abort>

080a3b70 <__aeabi_drsub>:
 80a3b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a3b74:	e002      	b.n	80a3b7c <__adddf3>
 80a3b76:	bf00      	nop

080a3b78 <__aeabi_dsub>:
 80a3b78:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a3b7c <__adddf3>:
 80a3b7c:	b530      	push	{r4, r5, lr}
 80a3b7e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a3b82:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a3b86:	ea94 0f05 	teq	r4, r5
 80a3b8a:	bf08      	it	eq
 80a3b8c:	ea90 0f02 	teqeq	r0, r2
 80a3b90:	bf1f      	itttt	ne
 80a3b92:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a3b96:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a3b9a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a3b9e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a3ba2:	f000 80e2 	beq.w	80a3d6a <__adddf3+0x1ee>
 80a3ba6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a3baa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a3bae:	bfb8      	it	lt
 80a3bb0:	426d      	neglt	r5, r5
 80a3bb2:	dd0c      	ble.n	80a3bce <__adddf3+0x52>
 80a3bb4:	442c      	add	r4, r5
 80a3bb6:	ea80 0202 	eor.w	r2, r0, r2
 80a3bba:	ea81 0303 	eor.w	r3, r1, r3
 80a3bbe:	ea82 0000 	eor.w	r0, r2, r0
 80a3bc2:	ea83 0101 	eor.w	r1, r3, r1
 80a3bc6:	ea80 0202 	eor.w	r2, r0, r2
 80a3bca:	ea81 0303 	eor.w	r3, r1, r3
 80a3bce:	2d36      	cmp	r5, #54	; 0x36
 80a3bd0:	bf88      	it	hi
 80a3bd2:	bd30      	pophi	{r4, r5, pc}
 80a3bd4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a3bd8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a3bdc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a3be0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a3be4:	d002      	beq.n	80a3bec <__adddf3+0x70>
 80a3be6:	4240      	negs	r0, r0
 80a3be8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a3bec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a3bf0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a3bf4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a3bf8:	d002      	beq.n	80a3c00 <__adddf3+0x84>
 80a3bfa:	4252      	negs	r2, r2
 80a3bfc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a3c00:	ea94 0f05 	teq	r4, r5
 80a3c04:	f000 80a7 	beq.w	80a3d56 <__adddf3+0x1da>
 80a3c08:	f1a4 0401 	sub.w	r4, r4, #1
 80a3c0c:	f1d5 0e20 	rsbs	lr, r5, #32
 80a3c10:	db0d      	blt.n	80a3c2e <__adddf3+0xb2>
 80a3c12:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a3c16:	fa22 f205 	lsr.w	r2, r2, r5
 80a3c1a:	1880      	adds	r0, r0, r2
 80a3c1c:	f141 0100 	adc.w	r1, r1, #0
 80a3c20:	fa03 f20e 	lsl.w	r2, r3, lr
 80a3c24:	1880      	adds	r0, r0, r2
 80a3c26:	fa43 f305 	asr.w	r3, r3, r5
 80a3c2a:	4159      	adcs	r1, r3
 80a3c2c:	e00e      	b.n	80a3c4c <__adddf3+0xd0>
 80a3c2e:	f1a5 0520 	sub.w	r5, r5, #32
 80a3c32:	f10e 0e20 	add.w	lr, lr, #32
 80a3c36:	2a01      	cmp	r2, #1
 80a3c38:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a3c3c:	bf28      	it	cs
 80a3c3e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a3c42:	fa43 f305 	asr.w	r3, r3, r5
 80a3c46:	18c0      	adds	r0, r0, r3
 80a3c48:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a3c4c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a3c50:	d507      	bpl.n	80a3c62 <__adddf3+0xe6>
 80a3c52:	f04f 0e00 	mov.w	lr, #0
 80a3c56:	f1dc 0c00 	rsbs	ip, ip, #0
 80a3c5a:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a3c5e:	eb6e 0101 	sbc.w	r1, lr, r1
 80a3c62:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a3c66:	d31b      	bcc.n	80a3ca0 <__adddf3+0x124>
 80a3c68:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a3c6c:	d30c      	bcc.n	80a3c88 <__adddf3+0x10c>
 80a3c6e:	0849      	lsrs	r1, r1, #1
 80a3c70:	ea5f 0030 	movs.w	r0, r0, rrx
 80a3c74:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a3c78:	f104 0401 	add.w	r4, r4, #1
 80a3c7c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a3c80:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a3c84:	f080 809a 	bcs.w	80a3dbc <__adddf3+0x240>
 80a3c88:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a3c8c:	bf08      	it	eq
 80a3c8e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a3c92:	f150 0000 	adcs.w	r0, r0, #0
 80a3c96:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a3c9a:	ea41 0105 	orr.w	r1, r1, r5
 80a3c9e:	bd30      	pop	{r4, r5, pc}
 80a3ca0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a3ca4:	4140      	adcs	r0, r0
 80a3ca6:	eb41 0101 	adc.w	r1, r1, r1
 80a3caa:	3c01      	subs	r4, #1
 80a3cac:	bf28      	it	cs
 80a3cae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80a3cb2:	d2e9      	bcs.n	80a3c88 <__adddf3+0x10c>
 80a3cb4:	f091 0f00 	teq	r1, #0
 80a3cb8:	bf04      	itt	eq
 80a3cba:	4601      	moveq	r1, r0
 80a3cbc:	2000      	moveq	r0, #0
 80a3cbe:	fab1 f381 	clz	r3, r1
 80a3cc2:	bf08      	it	eq
 80a3cc4:	3320      	addeq	r3, #32
 80a3cc6:	f1a3 030b 	sub.w	r3, r3, #11
 80a3cca:	f1b3 0220 	subs.w	r2, r3, #32
 80a3cce:	da0c      	bge.n	80a3cea <__adddf3+0x16e>
 80a3cd0:	320c      	adds	r2, #12
 80a3cd2:	dd08      	ble.n	80a3ce6 <__adddf3+0x16a>
 80a3cd4:	f102 0c14 	add.w	ip, r2, #20
 80a3cd8:	f1c2 020c 	rsb	r2, r2, #12
 80a3cdc:	fa01 f00c 	lsl.w	r0, r1, ip
 80a3ce0:	fa21 f102 	lsr.w	r1, r1, r2
 80a3ce4:	e00c      	b.n	80a3d00 <__adddf3+0x184>
 80a3ce6:	f102 0214 	add.w	r2, r2, #20
 80a3cea:	bfd8      	it	le
 80a3cec:	f1c2 0c20 	rsble	ip, r2, #32
 80a3cf0:	fa01 f102 	lsl.w	r1, r1, r2
 80a3cf4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a3cf8:	bfdc      	itt	le
 80a3cfa:	ea41 010c 	orrle.w	r1, r1, ip
 80a3cfe:	4090      	lslle	r0, r2
 80a3d00:	1ae4      	subs	r4, r4, r3
 80a3d02:	bfa2      	ittt	ge
 80a3d04:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a3d08:	4329      	orrge	r1, r5
 80a3d0a:	bd30      	popge	{r4, r5, pc}
 80a3d0c:	ea6f 0404 	mvn.w	r4, r4
 80a3d10:	3c1f      	subs	r4, #31
 80a3d12:	da1c      	bge.n	80a3d4e <__adddf3+0x1d2>
 80a3d14:	340c      	adds	r4, #12
 80a3d16:	dc0e      	bgt.n	80a3d36 <__adddf3+0x1ba>
 80a3d18:	f104 0414 	add.w	r4, r4, #20
 80a3d1c:	f1c4 0220 	rsb	r2, r4, #32
 80a3d20:	fa20 f004 	lsr.w	r0, r0, r4
 80a3d24:	fa01 f302 	lsl.w	r3, r1, r2
 80a3d28:	ea40 0003 	orr.w	r0, r0, r3
 80a3d2c:	fa21 f304 	lsr.w	r3, r1, r4
 80a3d30:	ea45 0103 	orr.w	r1, r5, r3
 80a3d34:	bd30      	pop	{r4, r5, pc}
 80a3d36:	f1c4 040c 	rsb	r4, r4, #12
 80a3d3a:	f1c4 0220 	rsb	r2, r4, #32
 80a3d3e:	fa20 f002 	lsr.w	r0, r0, r2
 80a3d42:	fa01 f304 	lsl.w	r3, r1, r4
 80a3d46:	ea40 0003 	orr.w	r0, r0, r3
 80a3d4a:	4629      	mov	r1, r5
 80a3d4c:	bd30      	pop	{r4, r5, pc}
 80a3d4e:	fa21 f004 	lsr.w	r0, r1, r4
 80a3d52:	4629      	mov	r1, r5
 80a3d54:	bd30      	pop	{r4, r5, pc}
 80a3d56:	f094 0f00 	teq	r4, #0
 80a3d5a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a3d5e:	bf06      	itte	eq
 80a3d60:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a3d64:	3401      	addeq	r4, #1
 80a3d66:	3d01      	subne	r5, #1
 80a3d68:	e74e      	b.n	80a3c08 <__adddf3+0x8c>
 80a3d6a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a3d6e:	bf18      	it	ne
 80a3d70:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a3d74:	d029      	beq.n	80a3dca <__adddf3+0x24e>
 80a3d76:	ea94 0f05 	teq	r4, r5
 80a3d7a:	bf08      	it	eq
 80a3d7c:	ea90 0f02 	teqeq	r0, r2
 80a3d80:	d005      	beq.n	80a3d8e <__adddf3+0x212>
 80a3d82:	ea54 0c00 	orrs.w	ip, r4, r0
 80a3d86:	bf04      	itt	eq
 80a3d88:	4619      	moveq	r1, r3
 80a3d8a:	4610      	moveq	r0, r2
 80a3d8c:	bd30      	pop	{r4, r5, pc}
 80a3d8e:	ea91 0f03 	teq	r1, r3
 80a3d92:	bf1e      	ittt	ne
 80a3d94:	2100      	movne	r1, #0
 80a3d96:	2000      	movne	r0, #0
 80a3d98:	bd30      	popne	{r4, r5, pc}
 80a3d9a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a3d9e:	d105      	bne.n	80a3dac <__adddf3+0x230>
 80a3da0:	0040      	lsls	r0, r0, #1
 80a3da2:	4149      	adcs	r1, r1
 80a3da4:	bf28      	it	cs
 80a3da6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a3daa:	bd30      	pop	{r4, r5, pc}
 80a3dac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a3db0:	bf3c      	itt	cc
 80a3db2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a3db6:	bd30      	popcc	{r4, r5, pc}
 80a3db8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a3dbc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a3dc0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a3dc4:	f04f 0000 	mov.w	r0, #0
 80a3dc8:	bd30      	pop	{r4, r5, pc}
 80a3dca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a3dce:	bf1a      	itte	ne
 80a3dd0:	4619      	movne	r1, r3
 80a3dd2:	4610      	movne	r0, r2
 80a3dd4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a3dd8:	bf1c      	itt	ne
 80a3dda:	460b      	movne	r3, r1
 80a3ddc:	4602      	movne	r2, r0
 80a3dde:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a3de2:	bf06      	itte	eq
 80a3de4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a3de8:	ea91 0f03 	teqeq	r1, r3
 80a3dec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a3df0:	bd30      	pop	{r4, r5, pc}
 80a3df2:	bf00      	nop

080a3df4 <__aeabi_ui2d>:
 80a3df4:	f090 0f00 	teq	r0, #0
 80a3df8:	bf04      	itt	eq
 80a3dfa:	2100      	moveq	r1, #0
 80a3dfc:	4770      	bxeq	lr
 80a3dfe:	b530      	push	{r4, r5, lr}
 80a3e00:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a3e04:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a3e08:	f04f 0500 	mov.w	r5, #0
 80a3e0c:	f04f 0100 	mov.w	r1, #0
 80a3e10:	e750      	b.n	80a3cb4 <__adddf3+0x138>
 80a3e12:	bf00      	nop

080a3e14 <__aeabi_i2d>:
 80a3e14:	f090 0f00 	teq	r0, #0
 80a3e18:	bf04      	itt	eq
 80a3e1a:	2100      	moveq	r1, #0
 80a3e1c:	4770      	bxeq	lr
 80a3e1e:	b530      	push	{r4, r5, lr}
 80a3e20:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a3e24:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a3e28:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a3e2c:	bf48      	it	mi
 80a3e2e:	4240      	negmi	r0, r0
 80a3e30:	f04f 0100 	mov.w	r1, #0
 80a3e34:	e73e      	b.n	80a3cb4 <__adddf3+0x138>
 80a3e36:	bf00      	nop

080a3e38 <__aeabi_f2d>:
 80a3e38:	0042      	lsls	r2, r0, #1
 80a3e3a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a3e3e:	ea4f 0131 	mov.w	r1, r1, rrx
 80a3e42:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a3e46:	bf1f      	itttt	ne
 80a3e48:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a3e4c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a3e50:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a3e54:	4770      	bxne	lr
 80a3e56:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80a3e5a:	bf08      	it	eq
 80a3e5c:	4770      	bxeq	lr
 80a3e5e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80a3e62:	bf04      	itt	eq
 80a3e64:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80a3e68:	4770      	bxeq	lr
 80a3e6a:	b530      	push	{r4, r5, lr}
 80a3e6c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a3e70:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a3e74:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a3e78:	e71c      	b.n	80a3cb4 <__adddf3+0x138>
 80a3e7a:	bf00      	nop

080a3e7c <__aeabi_ul2d>:
 80a3e7c:	ea50 0201 	orrs.w	r2, r0, r1
 80a3e80:	bf08      	it	eq
 80a3e82:	4770      	bxeq	lr
 80a3e84:	b530      	push	{r4, r5, lr}
 80a3e86:	f04f 0500 	mov.w	r5, #0
 80a3e8a:	e00a      	b.n	80a3ea2 <__aeabi_l2d+0x16>

080a3e8c <__aeabi_l2d>:
 80a3e8c:	ea50 0201 	orrs.w	r2, r0, r1
 80a3e90:	bf08      	it	eq
 80a3e92:	4770      	bxeq	lr
 80a3e94:	b530      	push	{r4, r5, lr}
 80a3e96:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a3e9a:	d502      	bpl.n	80a3ea2 <__aeabi_l2d+0x16>
 80a3e9c:	4240      	negs	r0, r0
 80a3e9e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a3ea2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a3ea6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a3eaa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a3eae:	f43f aed8 	beq.w	80a3c62 <__adddf3+0xe6>
 80a3eb2:	f04f 0203 	mov.w	r2, #3
 80a3eb6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a3eba:	bf18      	it	ne
 80a3ebc:	3203      	addne	r2, #3
 80a3ebe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a3ec2:	bf18      	it	ne
 80a3ec4:	3203      	addne	r2, #3
 80a3ec6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a3eca:	f1c2 0320 	rsb	r3, r2, #32
 80a3ece:	fa00 fc03 	lsl.w	ip, r0, r3
 80a3ed2:	fa20 f002 	lsr.w	r0, r0, r2
 80a3ed6:	fa01 fe03 	lsl.w	lr, r1, r3
 80a3eda:	ea40 000e 	orr.w	r0, r0, lr
 80a3ede:	fa21 f102 	lsr.w	r1, r1, r2
 80a3ee2:	4414      	add	r4, r2
 80a3ee4:	e6bd      	b.n	80a3c62 <__adddf3+0xe6>
 80a3ee6:	bf00      	nop

080a3ee8 <__aeabi_dmul>:
 80a3ee8:	b570      	push	{r4, r5, r6, lr}
 80a3eea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a3eee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a3ef2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a3ef6:	bf1d      	ittte	ne
 80a3ef8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a3efc:	ea94 0f0c 	teqne	r4, ip
 80a3f00:	ea95 0f0c 	teqne	r5, ip
 80a3f04:	f000 f8de 	bleq	80a40c4 <__aeabi_dmul+0x1dc>
 80a3f08:	442c      	add	r4, r5
 80a3f0a:	ea81 0603 	eor.w	r6, r1, r3
 80a3f0e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a3f12:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a3f16:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a3f1a:	bf18      	it	ne
 80a3f1c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a3f20:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a3f24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a3f28:	d038      	beq.n	80a3f9c <__aeabi_dmul+0xb4>
 80a3f2a:	fba0 ce02 	umull	ip, lr, r0, r2
 80a3f2e:	f04f 0500 	mov.w	r5, #0
 80a3f32:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a3f36:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a3f3a:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a3f3e:	f04f 0600 	mov.w	r6, #0
 80a3f42:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a3f46:	f09c 0f00 	teq	ip, #0
 80a3f4a:	bf18      	it	ne
 80a3f4c:	f04e 0e01 	orrne.w	lr, lr, #1
 80a3f50:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a3f54:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a3f58:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a3f5c:	d204      	bcs.n	80a3f68 <__aeabi_dmul+0x80>
 80a3f5e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a3f62:	416d      	adcs	r5, r5
 80a3f64:	eb46 0606 	adc.w	r6, r6, r6
 80a3f68:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a3f6c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a3f70:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a3f74:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a3f78:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a3f7c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a3f80:	bf88      	it	hi
 80a3f82:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a3f86:	d81e      	bhi.n	80a3fc6 <__aeabi_dmul+0xde>
 80a3f88:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a3f8c:	bf08      	it	eq
 80a3f8e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a3f92:	f150 0000 	adcs.w	r0, r0, #0
 80a3f96:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a3f9a:	bd70      	pop	{r4, r5, r6, pc}
 80a3f9c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a3fa0:	ea46 0101 	orr.w	r1, r6, r1
 80a3fa4:	ea40 0002 	orr.w	r0, r0, r2
 80a3fa8:	ea81 0103 	eor.w	r1, r1, r3
 80a3fac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a3fb0:	bfc2      	ittt	gt
 80a3fb2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a3fb6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a3fba:	bd70      	popgt	{r4, r5, r6, pc}
 80a3fbc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a3fc0:	f04f 0e00 	mov.w	lr, #0
 80a3fc4:	3c01      	subs	r4, #1
 80a3fc6:	f300 80ab 	bgt.w	80a4120 <__aeabi_dmul+0x238>
 80a3fca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a3fce:	bfde      	ittt	le
 80a3fd0:	2000      	movle	r0, #0
 80a3fd2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a3fd6:	bd70      	pople	{r4, r5, r6, pc}
 80a3fd8:	f1c4 0400 	rsb	r4, r4, #0
 80a3fdc:	3c20      	subs	r4, #32
 80a3fde:	da35      	bge.n	80a404c <__aeabi_dmul+0x164>
 80a3fe0:	340c      	adds	r4, #12
 80a3fe2:	dc1b      	bgt.n	80a401c <__aeabi_dmul+0x134>
 80a3fe4:	f104 0414 	add.w	r4, r4, #20
 80a3fe8:	f1c4 0520 	rsb	r5, r4, #32
 80a3fec:	fa00 f305 	lsl.w	r3, r0, r5
 80a3ff0:	fa20 f004 	lsr.w	r0, r0, r4
 80a3ff4:	fa01 f205 	lsl.w	r2, r1, r5
 80a3ff8:	ea40 0002 	orr.w	r0, r0, r2
 80a3ffc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a4000:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a4004:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a4008:	fa21 f604 	lsr.w	r6, r1, r4
 80a400c:	eb42 0106 	adc.w	r1, r2, r6
 80a4010:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a4014:	bf08      	it	eq
 80a4016:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a401a:	bd70      	pop	{r4, r5, r6, pc}
 80a401c:	f1c4 040c 	rsb	r4, r4, #12
 80a4020:	f1c4 0520 	rsb	r5, r4, #32
 80a4024:	fa00 f304 	lsl.w	r3, r0, r4
 80a4028:	fa20 f005 	lsr.w	r0, r0, r5
 80a402c:	fa01 f204 	lsl.w	r2, r1, r4
 80a4030:	ea40 0002 	orr.w	r0, r0, r2
 80a4034:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a4038:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a403c:	f141 0100 	adc.w	r1, r1, #0
 80a4040:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a4044:	bf08      	it	eq
 80a4046:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a404a:	bd70      	pop	{r4, r5, r6, pc}
 80a404c:	f1c4 0520 	rsb	r5, r4, #32
 80a4050:	fa00 f205 	lsl.w	r2, r0, r5
 80a4054:	ea4e 0e02 	orr.w	lr, lr, r2
 80a4058:	fa20 f304 	lsr.w	r3, r0, r4
 80a405c:	fa01 f205 	lsl.w	r2, r1, r5
 80a4060:	ea43 0302 	orr.w	r3, r3, r2
 80a4064:	fa21 f004 	lsr.w	r0, r1, r4
 80a4068:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a406c:	fa21 f204 	lsr.w	r2, r1, r4
 80a4070:	ea20 0002 	bic.w	r0, r0, r2
 80a4074:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a4078:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a407c:	bf08      	it	eq
 80a407e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a4082:	bd70      	pop	{r4, r5, r6, pc}
 80a4084:	f094 0f00 	teq	r4, #0
 80a4088:	d10f      	bne.n	80a40aa <__aeabi_dmul+0x1c2>
 80a408a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a408e:	0040      	lsls	r0, r0, #1
 80a4090:	eb41 0101 	adc.w	r1, r1, r1
 80a4094:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a4098:	bf08      	it	eq
 80a409a:	3c01      	subeq	r4, #1
 80a409c:	d0f7      	beq.n	80a408e <__aeabi_dmul+0x1a6>
 80a409e:	ea41 0106 	orr.w	r1, r1, r6
 80a40a2:	f095 0f00 	teq	r5, #0
 80a40a6:	bf18      	it	ne
 80a40a8:	4770      	bxne	lr
 80a40aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a40ae:	0052      	lsls	r2, r2, #1
 80a40b0:	eb43 0303 	adc.w	r3, r3, r3
 80a40b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a40b8:	bf08      	it	eq
 80a40ba:	3d01      	subeq	r5, #1
 80a40bc:	d0f7      	beq.n	80a40ae <__aeabi_dmul+0x1c6>
 80a40be:	ea43 0306 	orr.w	r3, r3, r6
 80a40c2:	4770      	bx	lr
 80a40c4:	ea94 0f0c 	teq	r4, ip
 80a40c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a40cc:	bf18      	it	ne
 80a40ce:	ea95 0f0c 	teqne	r5, ip
 80a40d2:	d00c      	beq.n	80a40ee <__aeabi_dmul+0x206>
 80a40d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a40d8:	bf18      	it	ne
 80a40da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a40de:	d1d1      	bne.n	80a4084 <__aeabi_dmul+0x19c>
 80a40e0:	ea81 0103 	eor.w	r1, r1, r3
 80a40e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a40e8:	f04f 0000 	mov.w	r0, #0
 80a40ec:	bd70      	pop	{r4, r5, r6, pc}
 80a40ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a40f2:	bf06      	itte	eq
 80a40f4:	4610      	moveq	r0, r2
 80a40f6:	4619      	moveq	r1, r3
 80a40f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a40fc:	d019      	beq.n	80a4132 <__aeabi_dmul+0x24a>
 80a40fe:	ea94 0f0c 	teq	r4, ip
 80a4102:	d102      	bne.n	80a410a <__aeabi_dmul+0x222>
 80a4104:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a4108:	d113      	bne.n	80a4132 <__aeabi_dmul+0x24a>
 80a410a:	ea95 0f0c 	teq	r5, ip
 80a410e:	d105      	bne.n	80a411c <__aeabi_dmul+0x234>
 80a4110:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a4114:	bf1c      	itt	ne
 80a4116:	4610      	movne	r0, r2
 80a4118:	4619      	movne	r1, r3
 80a411a:	d10a      	bne.n	80a4132 <__aeabi_dmul+0x24a>
 80a411c:	ea81 0103 	eor.w	r1, r1, r3
 80a4120:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a4124:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a4128:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a412c:	f04f 0000 	mov.w	r0, #0
 80a4130:	bd70      	pop	{r4, r5, r6, pc}
 80a4132:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a4136:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a413a:	bd70      	pop	{r4, r5, r6, pc}

080a413c <__aeabi_ddiv>:
 80a413c:	b570      	push	{r4, r5, r6, lr}
 80a413e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a4142:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a4146:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a414a:	bf1d      	ittte	ne
 80a414c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a4150:	ea94 0f0c 	teqne	r4, ip
 80a4154:	ea95 0f0c 	teqne	r5, ip
 80a4158:	f000 f8a7 	bleq	80a42aa <__aeabi_ddiv+0x16e>
 80a415c:	eba4 0405 	sub.w	r4, r4, r5
 80a4160:	ea81 0e03 	eor.w	lr, r1, r3
 80a4164:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a4168:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a416c:	f000 8088 	beq.w	80a4280 <__aeabi_ddiv+0x144>
 80a4170:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a4174:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a4178:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a417c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a4180:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a4184:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a4188:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a418c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a4190:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a4194:	429d      	cmp	r5, r3
 80a4196:	bf08      	it	eq
 80a4198:	4296      	cmpeq	r6, r2
 80a419a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a419e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a41a2:	d202      	bcs.n	80a41aa <__aeabi_ddiv+0x6e>
 80a41a4:	085b      	lsrs	r3, r3, #1
 80a41a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80a41aa:	1ab6      	subs	r6, r6, r2
 80a41ac:	eb65 0503 	sbc.w	r5, r5, r3
 80a41b0:	085b      	lsrs	r3, r3, #1
 80a41b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80a41b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a41ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a41be:	ebb6 0e02 	subs.w	lr, r6, r2
 80a41c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a41c6:	bf22      	ittt	cs
 80a41c8:	1ab6      	subcs	r6, r6, r2
 80a41ca:	4675      	movcs	r5, lr
 80a41cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80a41d0:	085b      	lsrs	r3, r3, #1
 80a41d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80a41d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80a41da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a41de:	bf22      	ittt	cs
 80a41e0:	1ab6      	subcs	r6, r6, r2
 80a41e2:	4675      	movcs	r5, lr
 80a41e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a41e8:	085b      	lsrs	r3, r3, #1
 80a41ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80a41ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80a41f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a41f6:	bf22      	ittt	cs
 80a41f8:	1ab6      	subcs	r6, r6, r2
 80a41fa:	4675      	movcs	r5, lr
 80a41fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a4200:	085b      	lsrs	r3, r3, #1
 80a4202:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4206:	ebb6 0e02 	subs.w	lr, r6, r2
 80a420a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a420e:	bf22      	ittt	cs
 80a4210:	1ab6      	subcs	r6, r6, r2
 80a4212:	4675      	movcs	r5, lr
 80a4214:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a4218:	ea55 0e06 	orrs.w	lr, r5, r6
 80a421c:	d018      	beq.n	80a4250 <__aeabi_ddiv+0x114>
 80a421e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a4222:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a4226:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a422a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a422e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a4232:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a4236:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a423a:	d1c0      	bne.n	80a41be <__aeabi_ddiv+0x82>
 80a423c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a4240:	d10b      	bne.n	80a425a <__aeabi_ddiv+0x11e>
 80a4242:	ea41 0100 	orr.w	r1, r1, r0
 80a4246:	f04f 0000 	mov.w	r0, #0
 80a424a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a424e:	e7b6      	b.n	80a41be <__aeabi_ddiv+0x82>
 80a4250:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a4254:	bf04      	itt	eq
 80a4256:	4301      	orreq	r1, r0
 80a4258:	2000      	moveq	r0, #0
 80a425a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a425e:	bf88      	it	hi
 80a4260:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a4264:	f63f aeaf 	bhi.w	80a3fc6 <__aeabi_dmul+0xde>
 80a4268:	ebb5 0c03 	subs.w	ip, r5, r3
 80a426c:	bf04      	itt	eq
 80a426e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a4272:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a4276:	f150 0000 	adcs.w	r0, r0, #0
 80a427a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a427e:	bd70      	pop	{r4, r5, r6, pc}
 80a4280:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a4284:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a4288:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a428c:	bfc2      	ittt	gt
 80a428e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a4292:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a4296:	bd70      	popgt	{r4, r5, r6, pc}
 80a4298:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a429c:	f04f 0e00 	mov.w	lr, #0
 80a42a0:	3c01      	subs	r4, #1
 80a42a2:	e690      	b.n	80a3fc6 <__aeabi_dmul+0xde>
 80a42a4:	ea45 0e06 	orr.w	lr, r5, r6
 80a42a8:	e68d      	b.n	80a3fc6 <__aeabi_dmul+0xde>
 80a42aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a42ae:	ea94 0f0c 	teq	r4, ip
 80a42b2:	bf08      	it	eq
 80a42b4:	ea95 0f0c 	teqeq	r5, ip
 80a42b8:	f43f af3b 	beq.w	80a4132 <__aeabi_dmul+0x24a>
 80a42bc:	ea94 0f0c 	teq	r4, ip
 80a42c0:	d10a      	bne.n	80a42d8 <__aeabi_ddiv+0x19c>
 80a42c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a42c6:	f47f af34 	bne.w	80a4132 <__aeabi_dmul+0x24a>
 80a42ca:	ea95 0f0c 	teq	r5, ip
 80a42ce:	f47f af25 	bne.w	80a411c <__aeabi_dmul+0x234>
 80a42d2:	4610      	mov	r0, r2
 80a42d4:	4619      	mov	r1, r3
 80a42d6:	e72c      	b.n	80a4132 <__aeabi_dmul+0x24a>
 80a42d8:	ea95 0f0c 	teq	r5, ip
 80a42dc:	d106      	bne.n	80a42ec <__aeabi_ddiv+0x1b0>
 80a42de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a42e2:	f43f aefd 	beq.w	80a40e0 <__aeabi_dmul+0x1f8>
 80a42e6:	4610      	mov	r0, r2
 80a42e8:	4619      	mov	r1, r3
 80a42ea:	e722      	b.n	80a4132 <__aeabi_dmul+0x24a>
 80a42ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a42f0:	bf18      	it	ne
 80a42f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a42f6:	f47f aec5 	bne.w	80a4084 <__aeabi_dmul+0x19c>
 80a42fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a42fe:	f47f af0d 	bne.w	80a411c <__aeabi_dmul+0x234>
 80a4302:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a4306:	f47f aeeb 	bne.w	80a40e0 <__aeabi_dmul+0x1f8>
 80a430a:	e712      	b.n	80a4132 <__aeabi_dmul+0x24a>

080a430c <__aeabi_d2uiz>:
 80a430c:	004a      	lsls	r2, r1, #1
 80a430e:	d211      	bcs.n	80a4334 <__aeabi_d2uiz+0x28>
 80a4310:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a4314:	d211      	bcs.n	80a433a <__aeabi_d2uiz+0x2e>
 80a4316:	d50d      	bpl.n	80a4334 <__aeabi_d2uiz+0x28>
 80a4318:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a431c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a4320:	d40e      	bmi.n	80a4340 <__aeabi_d2uiz+0x34>
 80a4322:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a4326:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a432a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a432e:	fa23 f002 	lsr.w	r0, r3, r2
 80a4332:	4770      	bx	lr
 80a4334:	f04f 0000 	mov.w	r0, #0
 80a4338:	4770      	bx	lr
 80a433a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a433e:	d102      	bne.n	80a4346 <__aeabi_d2uiz+0x3a>
 80a4340:	f04f 30ff 	mov.w	r0, #4294967295
 80a4344:	4770      	bx	lr
 80a4346:	f04f 0000 	mov.w	r0, #0
 80a434a:	4770      	bx	lr

080a434c <__aeabi_frsub>:
 80a434c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a4350:	e002      	b.n	80a4358 <__addsf3>
 80a4352:	bf00      	nop

080a4354 <__aeabi_fsub>:
 80a4354:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a4358 <__addsf3>:
 80a4358:	0042      	lsls	r2, r0, #1
 80a435a:	bf1f      	itttt	ne
 80a435c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a4360:	ea92 0f03 	teqne	r2, r3
 80a4364:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a4368:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a436c:	d06a      	beq.n	80a4444 <__addsf3+0xec>
 80a436e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a4372:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a4376:	bfc1      	itttt	gt
 80a4378:	18d2      	addgt	r2, r2, r3
 80a437a:	4041      	eorgt	r1, r0
 80a437c:	4048      	eorgt	r0, r1
 80a437e:	4041      	eorgt	r1, r0
 80a4380:	bfb8      	it	lt
 80a4382:	425b      	neglt	r3, r3
 80a4384:	2b19      	cmp	r3, #25
 80a4386:	bf88      	it	hi
 80a4388:	4770      	bxhi	lr
 80a438a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a438e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4392:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a4396:	bf18      	it	ne
 80a4398:	4240      	negne	r0, r0
 80a439a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a439e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a43a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a43a6:	bf18      	it	ne
 80a43a8:	4249      	negne	r1, r1
 80a43aa:	ea92 0f03 	teq	r2, r3
 80a43ae:	d03f      	beq.n	80a4430 <__addsf3+0xd8>
 80a43b0:	f1a2 0201 	sub.w	r2, r2, #1
 80a43b4:	fa41 fc03 	asr.w	ip, r1, r3
 80a43b8:	eb10 000c 	adds.w	r0, r0, ip
 80a43bc:	f1c3 0320 	rsb	r3, r3, #32
 80a43c0:	fa01 f103 	lsl.w	r1, r1, r3
 80a43c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a43c8:	d502      	bpl.n	80a43d0 <__addsf3+0x78>
 80a43ca:	4249      	negs	r1, r1
 80a43cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a43d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a43d4:	d313      	bcc.n	80a43fe <__addsf3+0xa6>
 80a43d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a43da:	d306      	bcc.n	80a43ea <__addsf3+0x92>
 80a43dc:	0840      	lsrs	r0, r0, #1
 80a43de:	ea4f 0131 	mov.w	r1, r1, rrx
 80a43e2:	f102 0201 	add.w	r2, r2, #1
 80a43e6:	2afe      	cmp	r2, #254	; 0xfe
 80a43e8:	d251      	bcs.n	80a448e <__addsf3+0x136>
 80a43ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a43ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a43f2:	bf08      	it	eq
 80a43f4:	f020 0001 	biceq.w	r0, r0, #1
 80a43f8:	ea40 0003 	orr.w	r0, r0, r3
 80a43fc:	4770      	bx	lr
 80a43fe:	0049      	lsls	r1, r1, #1
 80a4400:	eb40 0000 	adc.w	r0, r0, r0
 80a4404:	3a01      	subs	r2, #1
 80a4406:	bf28      	it	cs
 80a4408:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80a440c:	d2ed      	bcs.n	80a43ea <__addsf3+0x92>
 80a440e:	fab0 fc80 	clz	ip, r0
 80a4412:	f1ac 0c08 	sub.w	ip, ip, #8
 80a4416:	ebb2 020c 	subs.w	r2, r2, ip
 80a441a:	fa00 f00c 	lsl.w	r0, r0, ip
 80a441e:	bfaa      	itet	ge
 80a4420:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a4424:	4252      	neglt	r2, r2
 80a4426:	4318      	orrge	r0, r3
 80a4428:	bfbc      	itt	lt
 80a442a:	40d0      	lsrlt	r0, r2
 80a442c:	4318      	orrlt	r0, r3
 80a442e:	4770      	bx	lr
 80a4430:	f092 0f00 	teq	r2, #0
 80a4434:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a4438:	bf06      	itte	eq
 80a443a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a443e:	3201      	addeq	r2, #1
 80a4440:	3b01      	subne	r3, #1
 80a4442:	e7b5      	b.n	80a43b0 <__addsf3+0x58>
 80a4444:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a4448:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a444c:	bf18      	it	ne
 80a444e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a4452:	d021      	beq.n	80a4498 <__addsf3+0x140>
 80a4454:	ea92 0f03 	teq	r2, r3
 80a4458:	d004      	beq.n	80a4464 <__addsf3+0x10c>
 80a445a:	f092 0f00 	teq	r2, #0
 80a445e:	bf08      	it	eq
 80a4460:	4608      	moveq	r0, r1
 80a4462:	4770      	bx	lr
 80a4464:	ea90 0f01 	teq	r0, r1
 80a4468:	bf1c      	itt	ne
 80a446a:	2000      	movne	r0, #0
 80a446c:	4770      	bxne	lr
 80a446e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a4472:	d104      	bne.n	80a447e <__addsf3+0x126>
 80a4474:	0040      	lsls	r0, r0, #1
 80a4476:	bf28      	it	cs
 80a4478:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a447c:	4770      	bx	lr
 80a447e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a4482:	bf3c      	itt	cc
 80a4484:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a4488:	4770      	bxcc	lr
 80a448a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a448e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a4492:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4496:	4770      	bx	lr
 80a4498:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a449c:	bf16      	itet	ne
 80a449e:	4608      	movne	r0, r1
 80a44a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a44a4:	4601      	movne	r1, r0
 80a44a6:	0242      	lsls	r2, r0, #9
 80a44a8:	bf06      	itte	eq
 80a44aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a44ae:	ea90 0f01 	teqeq	r0, r1
 80a44b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a44b6:	4770      	bx	lr

080a44b8 <__aeabi_ui2f>:
 80a44b8:	f04f 0300 	mov.w	r3, #0
 80a44bc:	e004      	b.n	80a44c8 <__aeabi_i2f+0x8>
 80a44be:	bf00      	nop

080a44c0 <__aeabi_i2f>:
 80a44c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a44c4:	bf48      	it	mi
 80a44c6:	4240      	negmi	r0, r0
 80a44c8:	ea5f 0c00 	movs.w	ip, r0
 80a44cc:	bf08      	it	eq
 80a44ce:	4770      	bxeq	lr
 80a44d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a44d4:	4601      	mov	r1, r0
 80a44d6:	f04f 0000 	mov.w	r0, #0
 80a44da:	e01c      	b.n	80a4516 <__aeabi_l2f+0x2a>

080a44dc <__aeabi_ul2f>:
 80a44dc:	ea50 0201 	orrs.w	r2, r0, r1
 80a44e0:	bf08      	it	eq
 80a44e2:	4770      	bxeq	lr
 80a44e4:	f04f 0300 	mov.w	r3, #0
 80a44e8:	e00a      	b.n	80a4500 <__aeabi_l2f+0x14>
 80a44ea:	bf00      	nop

080a44ec <__aeabi_l2f>:
 80a44ec:	ea50 0201 	orrs.w	r2, r0, r1
 80a44f0:	bf08      	it	eq
 80a44f2:	4770      	bxeq	lr
 80a44f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a44f8:	d502      	bpl.n	80a4500 <__aeabi_l2f+0x14>
 80a44fa:	4240      	negs	r0, r0
 80a44fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a4500:	ea5f 0c01 	movs.w	ip, r1
 80a4504:	bf02      	ittt	eq
 80a4506:	4684      	moveq	ip, r0
 80a4508:	4601      	moveq	r1, r0
 80a450a:	2000      	moveq	r0, #0
 80a450c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a4510:	bf08      	it	eq
 80a4512:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a4516:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a451a:	fabc f28c 	clz	r2, ip
 80a451e:	3a08      	subs	r2, #8
 80a4520:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a4524:	db10      	blt.n	80a4548 <__aeabi_l2f+0x5c>
 80a4526:	fa01 fc02 	lsl.w	ip, r1, r2
 80a452a:	4463      	add	r3, ip
 80a452c:	fa00 fc02 	lsl.w	ip, r0, r2
 80a4530:	f1c2 0220 	rsb	r2, r2, #32
 80a4534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a4538:	fa20 f202 	lsr.w	r2, r0, r2
 80a453c:	eb43 0002 	adc.w	r0, r3, r2
 80a4540:	bf08      	it	eq
 80a4542:	f020 0001 	biceq.w	r0, r0, #1
 80a4546:	4770      	bx	lr
 80a4548:	f102 0220 	add.w	r2, r2, #32
 80a454c:	fa01 fc02 	lsl.w	ip, r1, r2
 80a4550:	f1c2 0220 	rsb	r2, r2, #32
 80a4554:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a4558:	fa21 f202 	lsr.w	r2, r1, r2
 80a455c:	eb43 0002 	adc.w	r0, r3, r2
 80a4560:	bf08      	it	eq
 80a4562:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a4566:	4770      	bx	lr

080a4568 <__aeabi_fmul>:
 80a4568:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a456c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a4570:	bf1e      	ittt	ne
 80a4572:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a4576:	ea92 0f0c 	teqne	r2, ip
 80a457a:	ea93 0f0c 	teqne	r3, ip
 80a457e:	d06f      	beq.n	80a4660 <__aeabi_fmul+0xf8>
 80a4580:	441a      	add	r2, r3
 80a4582:	ea80 0c01 	eor.w	ip, r0, r1
 80a4586:	0240      	lsls	r0, r0, #9
 80a4588:	bf18      	it	ne
 80a458a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a458e:	d01e      	beq.n	80a45ce <__aeabi_fmul+0x66>
 80a4590:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a4594:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a4598:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a459c:	fba0 3101 	umull	r3, r1, r0, r1
 80a45a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a45a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a45a8:	bf3e      	ittt	cc
 80a45aa:	0049      	lslcc	r1, r1, #1
 80a45ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a45b0:	005b      	lslcc	r3, r3, #1
 80a45b2:	ea40 0001 	orr.w	r0, r0, r1
 80a45b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a45ba:	2afd      	cmp	r2, #253	; 0xfd
 80a45bc:	d81d      	bhi.n	80a45fa <__aeabi_fmul+0x92>
 80a45be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a45c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a45c6:	bf08      	it	eq
 80a45c8:	f020 0001 	biceq.w	r0, r0, #1
 80a45cc:	4770      	bx	lr
 80a45ce:	f090 0f00 	teq	r0, #0
 80a45d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a45d6:	bf08      	it	eq
 80a45d8:	0249      	lsleq	r1, r1, #9
 80a45da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a45de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a45e2:	3a7f      	subs	r2, #127	; 0x7f
 80a45e4:	bfc2      	ittt	gt
 80a45e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a45ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a45ee:	4770      	bxgt	lr
 80a45f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a45f4:	f04f 0300 	mov.w	r3, #0
 80a45f8:	3a01      	subs	r2, #1
 80a45fa:	dc5d      	bgt.n	80a46b8 <__aeabi_fmul+0x150>
 80a45fc:	f112 0f19 	cmn.w	r2, #25
 80a4600:	bfdc      	itt	le
 80a4602:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a4606:	4770      	bxle	lr
 80a4608:	f1c2 0200 	rsb	r2, r2, #0
 80a460c:	0041      	lsls	r1, r0, #1
 80a460e:	fa21 f102 	lsr.w	r1, r1, r2
 80a4612:	f1c2 0220 	rsb	r2, r2, #32
 80a4616:	fa00 fc02 	lsl.w	ip, r0, r2
 80a461a:	ea5f 0031 	movs.w	r0, r1, rrx
 80a461e:	f140 0000 	adc.w	r0, r0, #0
 80a4622:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a4626:	bf08      	it	eq
 80a4628:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a462c:	4770      	bx	lr
 80a462e:	f092 0f00 	teq	r2, #0
 80a4632:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a4636:	bf02      	ittt	eq
 80a4638:	0040      	lsleq	r0, r0, #1
 80a463a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a463e:	3a01      	subeq	r2, #1
 80a4640:	d0f9      	beq.n	80a4636 <__aeabi_fmul+0xce>
 80a4642:	ea40 000c 	orr.w	r0, r0, ip
 80a4646:	f093 0f00 	teq	r3, #0
 80a464a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a464e:	bf02      	ittt	eq
 80a4650:	0049      	lsleq	r1, r1, #1
 80a4652:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a4656:	3b01      	subeq	r3, #1
 80a4658:	d0f9      	beq.n	80a464e <__aeabi_fmul+0xe6>
 80a465a:	ea41 010c 	orr.w	r1, r1, ip
 80a465e:	e78f      	b.n	80a4580 <__aeabi_fmul+0x18>
 80a4660:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a4664:	ea92 0f0c 	teq	r2, ip
 80a4668:	bf18      	it	ne
 80a466a:	ea93 0f0c 	teqne	r3, ip
 80a466e:	d00a      	beq.n	80a4686 <__aeabi_fmul+0x11e>
 80a4670:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a4674:	bf18      	it	ne
 80a4676:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a467a:	d1d8      	bne.n	80a462e <__aeabi_fmul+0xc6>
 80a467c:	ea80 0001 	eor.w	r0, r0, r1
 80a4680:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a4684:	4770      	bx	lr
 80a4686:	f090 0f00 	teq	r0, #0
 80a468a:	bf17      	itett	ne
 80a468c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a4690:	4608      	moveq	r0, r1
 80a4692:	f091 0f00 	teqne	r1, #0
 80a4696:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a469a:	d014      	beq.n	80a46c6 <__aeabi_fmul+0x15e>
 80a469c:	ea92 0f0c 	teq	r2, ip
 80a46a0:	d101      	bne.n	80a46a6 <__aeabi_fmul+0x13e>
 80a46a2:	0242      	lsls	r2, r0, #9
 80a46a4:	d10f      	bne.n	80a46c6 <__aeabi_fmul+0x15e>
 80a46a6:	ea93 0f0c 	teq	r3, ip
 80a46aa:	d103      	bne.n	80a46b4 <__aeabi_fmul+0x14c>
 80a46ac:	024b      	lsls	r3, r1, #9
 80a46ae:	bf18      	it	ne
 80a46b0:	4608      	movne	r0, r1
 80a46b2:	d108      	bne.n	80a46c6 <__aeabi_fmul+0x15e>
 80a46b4:	ea80 0001 	eor.w	r0, r0, r1
 80a46b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a46bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a46c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a46c4:	4770      	bx	lr
 80a46c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a46ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a46ce:	4770      	bx	lr

080a46d0 <__aeabi_fdiv>:
 80a46d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a46d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a46d8:	bf1e      	ittt	ne
 80a46da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a46de:	ea92 0f0c 	teqne	r2, ip
 80a46e2:	ea93 0f0c 	teqne	r3, ip
 80a46e6:	d069      	beq.n	80a47bc <__aeabi_fdiv+0xec>
 80a46e8:	eba2 0203 	sub.w	r2, r2, r3
 80a46ec:	ea80 0c01 	eor.w	ip, r0, r1
 80a46f0:	0249      	lsls	r1, r1, #9
 80a46f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a46f6:	d037      	beq.n	80a4768 <__aeabi_fdiv+0x98>
 80a46f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a46fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a4700:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a4704:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a4708:	428b      	cmp	r3, r1
 80a470a:	bf38      	it	cc
 80a470c:	005b      	lslcc	r3, r3, #1
 80a470e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a4712:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a4716:	428b      	cmp	r3, r1
 80a4718:	bf24      	itt	cs
 80a471a:	1a5b      	subcs	r3, r3, r1
 80a471c:	ea40 000c 	orrcs.w	r0, r0, ip
 80a4720:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a4724:	bf24      	itt	cs
 80a4726:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a472a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a472e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a4732:	bf24      	itt	cs
 80a4734:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a4738:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a473c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a4740:	bf24      	itt	cs
 80a4742:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a4746:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a474a:	011b      	lsls	r3, r3, #4
 80a474c:	bf18      	it	ne
 80a474e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a4752:	d1e0      	bne.n	80a4716 <__aeabi_fdiv+0x46>
 80a4754:	2afd      	cmp	r2, #253	; 0xfd
 80a4756:	f63f af50 	bhi.w	80a45fa <__aeabi_fmul+0x92>
 80a475a:	428b      	cmp	r3, r1
 80a475c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a4760:	bf08      	it	eq
 80a4762:	f020 0001 	biceq.w	r0, r0, #1
 80a4766:	4770      	bx	lr
 80a4768:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a476c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a4770:	327f      	adds	r2, #127	; 0x7f
 80a4772:	bfc2      	ittt	gt
 80a4774:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a4778:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a477c:	4770      	bxgt	lr
 80a477e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4782:	f04f 0300 	mov.w	r3, #0
 80a4786:	3a01      	subs	r2, #1
 80a4788:	e737      	b.n	80a45fa <__aeabi_fmul+0x92>
 80a478a:	f092 0f00 	teq	r2, #0
 80a478e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a4792:	bf02      	ittt	eq
 80a4794:	0040      	lsleq	r0, r0, #1
 80a4796:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a479a:	3a01      	subeq	r2, #1
 80a479c:	d0f9      	beq.n	80a4792 <__aeabi_fdiv+0xc2>
 80a479e:	ea40 000c 	orr.w	r0, r0, ip
 80a47a2:	f093 0f00 	teq	r3, #0
 80a47a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a47aa:	bf02      	ittt	eq
 80a47ac:	0049      	lsleq	r1, r1, #1
 80a47ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a47b2:	3b01      	subeq	r3, #1
 80a47b4:	d0f9      	beq.n	80a47aa <__aeabi_fdiv+0xda>
 80a47b6:	ea41 010c 	orr.w	r1, r1, ip
 80a47ba:	e795      	b.n	80a46e8 <__aeabi_fdiv+0x18>
 80a47bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a47c0:	ea92 0f0c 	teq	r2, ip
 80a47c4:	d108      	bne.n	80a47d8 <__aeabi_fdiv+0x108>
 80a47c6:	0242      	lsls	r2, r0, #9
 80a47c8:	f47f af7d 	bne.w	80a46c6 <__aeabi_fmul+0x15e>
 80a47cc:	ea93 0f0c 	teq	r3, ip
 80a47d0:	f47f af70 	bne.w	80a46b4 <__aeabi_fmul+0x14c>
 80a47d4:	4608      	mov	r0, r1
 80a47d6:	e776      	b.n	80a46c6 <__aeabi_fmul+0x15e>
 80a47d8:	ea93 0f0c 	teq	r3, ip
 80a47dc:	d104      	bne.n	80a47e8 <__aeabi_fdiv+0x118>
 80a47de:	024b      	lsls	r3, r1, #9
 80a47e0:	f43f af4c 	beq.w	80a467c <__aeabi_fmul+0x114>
 80a47e4:	4608      	mov	r0, r1
 80a47e6:	e76e      	b.n	80a46c6 <__aeabi_fmul+0x15e>
 80a47e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a47ec:	bf18      	it	ne
 80a47ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a47f2:	d1ca      	bne.n	80a478a <__aeabi_fdiv+0xba>
 80a47f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a47f8:	f47f af5c 	bne.w	80a46b4 <__aeabi_fmul+0x14c>
 80a47fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a4800:	f47f af3c 	bne.w	80a467c <__aeabi_fmul+0x114>
 80a4804:	e75f      	b.n	80a46c6 <__aeabi_fmul+0x15e>
 80a4806:	bf00      	nop

080a4808 <__gesf2>:
 80a4808:	f04f 3cff 	mov.w	ip, #4294967295
 80a480c:	e006      	b.n	80a481c <__cmpsf2+0x4>
 80a480e:	bf00      	nop

080a4810 <__lesf2>:
 80a4810:	f04f 0c01 	mov.w	ip, #1
 80a4814:	e002      	b.n	80a481c <__cmpsf2+0x4>
 80a4816:	bf00      	nop

080a4818 <__cmpsf2>:
 80a4818:	f04f 0c01 	mov.w	ip, #1
 80a481c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a4820:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a4824:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a4828:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a482c:	bf18      	it	ne
 80a482e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a4832:	d011      	beq.n	80a4858 <__cmpsf2+0x40>
 80a4834:	b001      	add	sp, #4
 80a4836:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a483a:	bf18      	it	ne
 80a483c:	ea90 0f01 	teqne	r0, r1
 80a4840:	bf58      	it	pl
 80a4842:	ebb2 0003 	subspl.w	r0, r2, r3
 80a4846:	bf88      	it	hi
 80a4848:	17c8      	asrhi	r0, r1, #31
 80a484a:	bf38      	it	cc
 80a484c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a4850:	bf18      	it	ne
 80a4852:	f040 0001 	orrne.w	r0, r0, #1
 80a4856:	4770      	bx	lr
 80a4858:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a485c:	d102      	bne.n	80a4864 <__cmpsf2+0x4c>
 80a485e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a4862:	d105      	bne.n	80a4870 <__cmpsf2+0x58>
 80a4864:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a4868:	d1e4      	bne.n	80a4834 <__cmpsf2+0x1c>
 80a486a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a486e:	d0e1      	beq.n	80a4834 <__cmpsf2+0x1c>
 80a4870:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a4874:	4770      	bx	lr
 80a4876:	bf00      	nop

080a4878 <__aeabi_cfrcmple>:
 80a4878:	4684      	mov	ip, r0
 80a487a:	4608      	mov	r0, r1
 80a487c:	4661      	mov	r1, ip
 80a487e:	e7ff      	b.n	80a4880 <__aeabi_cfcmpeq>

080a4880 <__aeabi_cfcmpeq>:
 80a4880:	b50f      	push	{r0, r1, r2, r3, lr}
 80a4882:	f7ff ffc9 	bl	80a4818 <__cmpsf2>
 80a4886:	2800      	cmp	r0, #0
 80a4888:	bf48      	it	mi
 80a488a:	f110 0f00 	cmnmi.w	r0, #0
 80a488e:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a4890 <__aeabi_fcmpeq>:
 80a4890:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4894:	f7ff fff4 	bl	80a4880 <__aeabi_cfcmpeq>
 80a4898:	bf0c      	ite	eq
 80a489a:	2001      	moveq	r0, #1
 80a489c:	2000      	movne	r0, #0
 80a489e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a48a2:	bf00      	nop

080a48a4 <__aeabi_fcmplt>:
 80a48a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a48a8:	f7ff ffea 	bl	80a4880 <__aeabi_cfcmpeq>
 80a48ac:	bf34      	ite	cc
 80a48ae:	2001      	movcc	r0, #1
 80a48b0:	2000      	movcs	r0, #0
 80a48b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a48b6:	bf00      	nop

080a48b8 <__aeabi_fcmple>:
 80a48b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a48bc:	f7ff ffe0 	bl	80a4880 <__aeabi_cfcmpeq>
 80a48c0:	bf94      	ite	ls
 80a48c2:	2001      	movls	r0, #1
 80a48c4:	2000      	movhi	r0, #0
 80a48c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a48ca:	bf00      	nop

080a48cc <__aeabi_fcmpge>:
 80a48cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a48d0:	f7ff ffd2 	bl	80a4878 <__aeabi_cfrcmple>
 80a48d4:	bf94      	ite	ls
 80a48d6:	2001      	movls	r0, #1
 80a48d8:	2000      	movhi	r0, #0
 80a48da:	f85d fb08 	ldr.w	pc, [sp], #8
 80a48de:	bf00      	nop

080a48e0 <__aeabi_fcmpgt>:
 80a48e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a48e4:	f7ff ffc8 	bl	80a4878 <__aeabi_cfrcmple>
 80a48e8:	bf34      	ite	cc
 80a48ea:	2001      	movcc	r0, #1
 80a48ec:	2000      	movcs	r0, #0
 80a48ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80a48f2:	bf00      	nop

080a48f4 <__aeabi_f2lz>:
 80a48f4:	b510      	push	{r4, lr}
 80a48f6:	2100      	movs	r1, #0
 80a48f8:	4604      	mov	r4, r0
 80a48fa:	f7ff ffd3 	bl	80a48a4 <__aeabi_fcmplt>
 80a48fe:	b920      	cbnz	r0, 80a490a <__aeabi_f2lz+0x16>
 80a4900:	4620      	mov	r0, r4
 80a4902:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a4906:	f000 b809 	b.w	80a491c <__aeabi_f2ulz>
 80a490a:	f104 4000 	add.w	r0, r4, #2147483648	; 0x80000000
 80a490e:	f000 f805 	bl	80a491c <__aeabi_f2ulz>
 80a4912:	4240      	negs	r0, r0
 80a4914:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a4918:	bd10      	pop	{r4, pc}
 80a491a:	bf00      	nop

080a491c <__aeabi_f2ulz>:
 80a491c:	b5d0      	push	{r4, r6, r7, lr}
 80a491e:	f7ff fa8b 	bl	80a3e38 <__aeabi_f2d>
 80a4922:	2200      	movs	r2, #0
 80a4924:	4b0b      	ldr	r3, [pc, #44]	; (80a4954 <__aeabi_f2ulz+0x38>)
 80a4926:	4606      	mov	r6, r0
 80a4928:	460f      	mov	r7, r1
 80a492a:	f7ff fadd 	bl	80a3ee8 <__aeabi_dmul>
 80a492e:	f7ff fced 	bl	80a430c <__aeabi_d2uiz>
 80a4932:	4604      	mov	r4, r0
 80a4934:	f7ff fa5e 	bl	80a3df4 <__aeabi_ui2d>
 80a4938:	2200      	movs	r2, #0
 80a493a:	4b07      	ldr	r3, [pc, #28]	; (80a4958 <__aeabi_f2ulz+0x3c>)
 80a493c:	f7ff fad4 	bl	80a3ee8 <__aeabi_dmul>
 80a4940:	4602      	mov	r2, r0
 80a4942:	460b      	mov	r3, r1
 80a4944:	4630      	mov	r0, r6
 80a4946:	4639      	mov	r1, r7
 80a4948:	f7ff f916 	bl	80a3b78 <__aeabi_dsub>
 80a494c:	f7ff fcde 	bl	80a430c <__aeabi_d2uiz>
 80a4950:	4621      	mov	r1, r4
 80a4952:	bdd0      	pop	{r4, r6, r7, pc}
 80a4954:	3df00000 	.word	0x3df00000
 80a4958:	41f00000 	.word	0x41f00000

080a495c <__udivmoddi4>:
 80a495c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a4960:	9e08      	ldr	r6, [sp, #32]
 80a4962:	460d      	mov	r5, r1
 80a4964:	4604      	mov	r4, r0
 80a4966:	468e      	mov	lr, r1
 80a4968:	2b00      	cmp	r3, #0
 80a496a:	f040 8083 	bne.w	80a4a74 <__udivmoddi4+0x118>
 80a496e:	428a      	cmp	r2, r1
 80a4970:	4617      	mov	r7, r2
 80a4972:	d947      	bls.n	80a4a04 <__udivmoddi4+0xa8>
 80a4974:	fab2 f382 	clz	r3, r2
 80a4978:	b14b      	cbz	r3, 80a498e <__udivmoddi4+0x32>
 80a497a:	f1c3 0120 	rsb	r1, r3, #32
 80a497e:	fa05 fe03 	lsl.w	lr, r5, r3
 80a4982:	fa20 f101 	lsr.w	r1, r0, r1
 80a4986:	409f      	lsls	r7, r3
 80a4988:	ea41 0e0e 	orr.w	lr, r1, lr
 80a498c:	409c      	lsls	r4, r3
 80a498e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80a4992:	fbbe fcf8 	udiv	ip, lr, r8
 80a4996:	fa1f f987 	uxth.w	r9, r7
 80a499a:	fb08 e21c 	mls	r2, r8, ip, lr
 80a499e:	fb0c f009 	mul.w	r0, ip, r9
 80a49a2:	0c21      	lsrs	r1, r4, #16
 80a49a4:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80a49a8:	4290      	cmp	r0, r2
 80a49aa:	d90a      	bls.n	80a49c2 <__udivmoddi4+0x66>
 80a49ac:	18ba      	adds	r2, r7, r2
 80a49ae:	f10c 31ff 	add.w	r1, ip, #4294967295
 80a49b2:	f080 8118 	bcs.w	80a4be6 <__udivmoddi4+0x28a>
 80a49b6:	4290      	cmp	r0, r2
 80a49b8:	f240 8115 	bls.w	80a4be6 <__udivmoddi4+0x28a>
 80a49bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80a49c0:	443a      	add	r2, r7
 80a49c2:	1a12      	subs	r2, r2, r0
 80a49c4:	fbb2 f0f8 	udiv	r0, r2, r8
 80a49c8:	fb08 2210 	mls	r2, r8, r0, r2
 80a49cc:	fb00 f109 	mul.w	r1, r0, r9
 80a49d0:	b2a4      	uxth	r4, r4
 80a49d2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a49d6:	42a1      	cmp	r1, r4
 80a49d8:	d909      	bls.n	80a49ee <__udivmoddi4+0x92>
 80a49da:	193c      	adds	r4, r7, r4
 80a49dc:	f100 32ff 	add.w	r2, r0, #4294967295
 80a49e0:	f080 8103 	bcs.w	80a4bea <__udivmoddi4+0x28e>
 80a49e4:	42a1      	cmp	r1, r4
 80a49e6:	f240 8100 	bls.w	80a4bea <__udivmoddi4+0x28e>
 80a49ea:	3802      	subs	r0, #2
 80a49ec:	443c      	add	r4, r7
 80a49ee:	1a64      	subs	r4, r4, r1
 80a49f0:	2100      	movs	r1, #0
 80a49f2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80a49f6:	b11e      	cbz	r6, 80a4a00 <__udivmoddi4+0xa4>
 80a49f8:	2200      	movs	r2, #0
 80a49fa:	40dc      	lsrs	r4, r3
 80a49fc:	e9c6 4200 	strd	r4, r2, [r6]
 80a4a00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a4a04:	b902      	cbnz	r2, 80a4a08 <__udivmoddi4+0xac>
 80a4a06:	deff      	udf	#255	; 0xff
 80a4a08:	fab2 f382 	clz	r3, r2
 80a4a0c:	2b00      	cmp	r3, #0
 80a4a0e:	d14f      	bne.n	80a4ab0 <__udivmoddi4+0x154>
 80a4a10:	1a8d      	subs	r5, r1, r2
 80a4a12:	2101      	movs	r1, #1
 80a4a14:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80a4a18:	fa1f f882 	uxth.w	r8, r2
 80a4a1c:	fbb5 fcfe 	udiv	ip, r5, lr
 80a4a20:	fb0e 551c 	mls	r5, lr, ip, r5
 80a4a24:	fb08 f00c 	mul.w	r0, r8, ip
 80a4a28:	0c22      	lsrs	r2, r4, #16
 80a4a2a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 80a4a2e:	42a8      	cmp	r0, r5
 80a4a30:	d907      	bls.n	80a4a42 <__udivmoddi4+0xe6>
 80a4a32:	197d      	adds	r5, r7, r5
 80a4a34:	f10c 32ff 	add.w	r2, ip, #4294967295
 80a4a38:	d202      	bcs.n	80a4a40 <__udivmoddi4+0xe4>
 80a4a3a:	42a8      	cmp	r0, r5
 80a4a3c:	f200 80e9 	bhi.w	80a4c12 <__udivmoddi4+0x2b6>
 80a4a40:	4694      	mov	ip, r2
 80a4a42:	1a2d      	subs	r5, r5, r0
 80a4a44:	fbb5 f0fe 	udiv	r0, r5, lr
 80a4a48:	fb0e 5510 	mls	r5, lr, r0, r5
 80a4a4c:	fb08 f800 	mul.w	r8, r8, r0
 80a4a50:	b2a4      	uxth	r4, r4
 80a4a52:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80a4a56:	45a0      	cmp	r8, r4
 80a4a58:	d907      	bls.n	80a4a6a <__udivmoddi4+0x10e>
 80a4a5a:	193c      	adds	r4, r7, r4
 80a4a5c:	f100 32ff 	add.w	r2, r0, #4294967295
 80a4a60:	d202      	bcs.n	80a4a68 <__udivmoddi4+0x10c>
 80a4a62:	45a0      	cmp	r8, r4
 80a4a64:	f200 80d9 	bhi.w	80a4c1a <__udivmoddi4+0x2be>
 80a4a68:	4610      	mov	r0, r2
 80a4a6a:	eba4 0408 	sub.w	r4, r4, r8
 80a4a6e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80a4a72:	e7c0      	b.n	80a49f6 <__udivmoddi4+0x9a>
 80a4a74:	428b      	cmp	r3, r1
 80a4a76:	d908      	bls.n	80a4a8a <__udivmoddi4+0x12e>
 80a4a78:	2e00      	cmp	r6, #0
 80a4a7a:	f000 80b1 	beq.w	80a4be0 <__udivmoddi4+0x284>
 80a4a7e:	2100      	movs	r1, #0
 80a4a80:	e9c6 0500 	strd	r0, r5, [r6]
 80a4a84:	4608      	mov	r0, r1
 80a4a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a4a8a:	fab3 f183 	clz	r1, r3
 80a4a8e:	2900      	cmp	r1, #0
 80a4a90:	d14b      	bne.n	80a4b2a <__udivmoddi4+0x1ce>
 80a4a92:	42ab      	cmp	r3, r5
 80a4a94:	d302      	bcc.n	80a4a9c <__udivmoddi4+0x140>
 80a4a96:	4282      	cmp	r2, r0
 80a4a98:	f200 80b9 	bhi.w	80a4c0e <__udivmoddi4+0x2b2>
 80a4a9c:	1a84      	subs	r4, r0, r2
 80a4a9e:	eb65 0303 	sbc.w	r3, r5, r3
 80a4aa2:	2001      	movs	r0, #1
 80a4aa4:	469e      	mov	lr, r3
 80a4aa6:	2e00      	cmp	r6, #0
 80a4aa8:	d0aa      	beq.n	80a4a00 <__udivmoddi4+0xa4>
 80a4aaa:	e9c6 4e00 	strd	r4, lr, [r6]
 80a4aae:	e7a7      	b.n	80a4a00 <__udivmoddi4+0xa4>
 80a4ab0:	409f      	lsls	r7, r3
 80a4ab2:	f1c3 0220 	rsb	r2, r3, #32
 80a4ab6:	40d1      	lsrs	r1, r2
 80a4ab8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80a4abc:	fbb1 f0fe 	udiv	r0, r1, lr
 80a4ac0:	fa1f f887 	uxth.w	r8, r7
 80a4ac4:	fb0e 1110 	mls	r1, lr, r0, r1
 80a4ac8:	fa24 f202 	lsr.w	r2, r4, r2
 80a4acc:	409d      	lsls	r5, r3
 80a4ace:	fb00 fc08 	mul.w	ip, r0, r8
 80a4ad2:	432a      	orrs	r2, r5
 80a4ad4:	0c15      	lsrs	r5, r2, #16
 80a4ad6:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80a4ada:	45ac      	cmp	ip, r5
 80a4adc:	fa04 f403 	lsl.w	r4, r4, r3
 80a4ae0:	d909      	bls.n	80a4af6 <__udivmoddi4+0x19a>
 80a4ae2:	197d      	adds	r5, r7, r5
 80a4ae4:	f100 31ff 	add.w	r1, r0, #4294967295
 80a4ae8:	f080 808f 	bcs.w	80a4c0a <__udivmoddi4+0x2ae>
 80a4aec:	45ac      	cmp	ip, r5
 80a4aee:	f240 808c 	bls.w	80a4c0a <__udivmoddi4+0x2ae>
 80a4af2:	3802      	subs	r0, #2
 80a4af4:	443d      	add	r5, r7
 80a4af6:	eba5 050c 	sub.w	r5, r5, ip
 80a4afa:	fbb5 f1fe 	udiv	r1, r5, lr
 80a4afe:	fb0e 5c11 	mls	ip, lr, r1, r5
 80a4b02:	fb01 f908 	mul.w	r9, r1, r8
 80a4b06:	b295      	uxth	r5, r2
 80a4b08:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80a4b0c:	45a9      	cmp	r9, r5
 80a4b0e:	d907      	bls.n	80a4b20 <__udivmoddi4+0x1c4>
 80a4b10:	197d      	adds	r5, r7, r5
 80a4b12:	f101 32ff 	add.w	r2, r1, #4294967295
 80a4b16:	d274      	bcs.n	80a4c02 <__udivmoddi4+0x2a6>
 80a4b18:	45a9      	cmp	r9, r5
 80a4b1a:	d972      	bls.n	80a4c02 <__udivmoddi4+0x2a6>
 80a4b1c:	3902      	subs	r1, #2
 80a4b1e:	443d      	add	r5, r7
 80a4b20:	eba5 0509 	sub.w	r5, r5, r9
 80a4b24:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80a4b28:	e778      	b.n	80a4a1c <__udivmoddi4+0xc0>
 80a4b2a:	f1c1 0720 	rsb	r7, r1, #32
 80a4b2e:	408b      	lsls	r3, r1
 80a4b30:	fa22 fc07 	lsr.w	ip, r2, r7
 80a4b34:	ea4c 0c03 	orr.w	ip, ip, r3
 80a4b38:	fa25 f407 	lsr.w	r4, r5, r7
 80a4b3c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80a4b40:	fbb4 f9fe 	udiv	r9, r4, lr
 80a4b44:	fa1f f88c 	uxth.w	r8, ip
 80a4b48:	fb0e 4419 	mls	r4, lr, r9, r4
 80a4b4c:	fa20 f307 	lsr.w	r3, r0, r7
 80a4b50:	fb09 fa08 	mul.w	sl, r9, r8
 80a4b54:	408d      	lsls	r5, r1
 80a4b56:	431d      	orrs	r5, r3
 80a4b58:	0c2b      	lsrs	r3, r5, #16
 80a4b5a:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80a4b5e:	45a2      	cmp	sl, r4
 80a4b60:	fa02 f201 	lsl.w	r2, r2, r1
 80a4b64:	fa00 f301 	lsl.w	r3, r0, r1
 80a4b68:	d909      	bls.n	80a4b7e <__udivmoddi4+0x222>
 80a4b6a:	eb1c 0404 	adds.w	r4, ip, r4
 80a4b6e:	f109 30ff 	add.w	r0, r9, #4294967295
 80a4b72:	d248      	bcs.n	80a4c06 <__udivmoddi4+0x2aa>
 80a4b74:	45a2      	cmp	sl, r4
 80a4b76:	d946      	bls.n	80a4c06 <__udivmoddi4+0x2aa>
 80a4b78:	f1a9 0902 	sub.w	r9, r9, #2
 80a4b7c:	4464      	add	r4, ip
 80a4b7e:	eba4 040a 	sub.w	r4, r4, sl
 80a4b82:	fbb4 f0fe 	udiv	r0, r4, lr
 80a4b86:	fb0e 4410 	mls	r4, lr, r0, r4
 80a4b8a:	fb00 fa08 	mul.w	sl, r0, r8
 80a4b8e:	b2ad      	uxth	r5, r5
 80a4b90:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80a4b94:	45a2      	cmp	sl, r4
 80a4b96:	d908      	bls.n	80a4baa <__udivmoddi4+0x24e>
 80a4b98:	eb1c 0404 	adds.w	r4, ip, r4
 80a4b9c:	f100 35ff 	add.w	r5, r0, #4294967295
 80a4ba0:	d22d      	bcs.n	80a4bfe <__udivmoddi4+0x2a2>
 80a4ba2:	45a2      	cmp	sl, r4
 80a4ba4:	d92b      	bls.n	80a4bfe <__udivmoddi4+0x2a2>
 80a4ba6:	3802      	subs	r0, #2
 80a4ba8:	4464      	add	r4, ip
 80a4baa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80a4bae:	fba0 8902 	umull	r8, r9, r0, r2
 80a4bb2:	eba4 040a 	sub.w	r4, r4, sl
 80a4bb6:	454c      	cmp	r4, r9
 80a4bb8:	46c6      	mov	lr, r8
 80a4bba:	464d      	mov	r5, r9
 80a4bbc:	d319      	bcc.n	80a4bf2 <__udivmoddi4+0x296>
 80a4bbe:	d016      	beq.n	80a4bee <__udivmoddi4+0x292>
 80a4bc0:	b15e      	cbz	r6, 80a4bda <__udivmoddi4+0x27e>
 80a4bc2:	ebb3 020e 	subs.w	r2, r3, lr
 80a4bc6:	eb64 0405 	sbc.w	r4, r4, r5
 80a4bca:	fa04 f707 	lsl.w	r7, r4, r7
 80a4bce:	fa22 f301 	lsr.w	r3, r2, r1
 80a4bd2:	431f      	orrs	r7, r3
 80a4bd4:	40cc      	lsrs	r4, r1
 80a4bd6:	e9c6 7400 	strd	r7, r4, [r6]
 80a4bda:	2100      	movs	r1, #0
 80a4bdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a4be0:	4631      	mov	r1, r6
 80a4be2:	4630      	mov	r0, r6
 80a4be4:	e70c      	b.n	80a4a00 <__udivmoddi4+0xa4>
 80a4be6:	468c      	mov	ip, r1
 80a4be8:	e6eb      	b.n	80a49c2 <__udivmoddi4+0x66>
 80a4bea:	4610      	mov	r0, r2
 80a4bec:	e6ff      	b.n	80a49ee <__udivmoddi4+0x92>
 80a4bee:	4543      	cmp	r3, r8
 80a4bf0:	d2e6      	bcs.n	80a4bc0 <__udivmoddi4+0x264>
 80a4bf2:	ebb8 0e02 	subs.w	lr, r8, r2
 80a4bf6:	eb69 050c 	sbc.w	r5, r9, ip
 80a4bfa:	3801      	subs	r0, #1
 80a4bfc:	e7e0      	b.n	80a4bc0 <__udivmoddi4+0x264>
 80a4bfe:	4628      	mov	r0, r5
 80a4c00:	e7d3      	b.n	80a4baa <__udivmoddi4+0x24e>
 80a4c02:	4611      	mov	r1, r2
 80a4c04:	e78c      	b.n	80a4b20 <__udivmoddi4+0x1c4>
 80a4c06:	4681      	mov	r9, r0
 80a4c08:	e7b9      	b.n	80a4b7e <__udivmoddi4+0x222>
 80a4c0a:	4608      	mov	r0, r1
 80a4c0c:	e773      	b.n	80a4af6 <__udivmoddi4+0x19a>
 80a4c0e:	4608      	mov	r0, r1
 80a4c10:	e749      	b.n	80a4aa6 <__udivmoddi4+0x14a>
 80a4c12:	f1ac 0c02 	sub.w	ip, ip, #2
 80a4c16:	443d      	add	r5, r7
 80a4c18:	e713      	b.n	80a4a42 <__udivmoddi4+0xe6>
 80a4c1a:	3802      	subs	r0, #2
 80a4c1c:	443c      	add	r4, r7
 80a4c1e:	e724      	b.n	80a4a6a <__udivmoddi4+0x10e>

080a4c20 <__aeabi_idiv0>:
 80a4c20:	4770      	bx	lr
 80a4c22:	bf00      	nop

080a4c24 <asctime_r>:
 80a4c24:	b510      	push	{r4, lr}
 80a4c26:	460c      	mov	r4, r1
 80a4c28:	6941      	ldr	r1, [r0, #20]
 80a4c2a:	b086      	sub	sp, #24
 80a4c2c:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 80a4c30:	6903      	ldr	r3, [r0, #16]
 80a4c32:	6982      	ldr	r2, [r0, #24]
 80a4c34:	9104      	str	r1, [sp, #16]
 80a4c36:	6801      	ldr	r1, [r0, #0]
 80a4c38:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80a4c3c:	9103      	str	r1, [sp, #12]
 80a4c3e:	6841      	ldr	r1, [r0, #4]
 80a4c40:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80a4c44:	9102      	str	r1, [sp, #8]
 80a4c46:	6881      	ldr	r1, [r0, #8]
 80a4c48:	9101      	str	r1, [sp, #4]
 80a4c4a:	68c1      	ldr	r1, [r0, #12]
 80a4c4c:	4620      	mov	r0, r4
 80a4c4e:	9100      	str	r1, [sp, #0]
 80a4c50:	4904      	ldr	r1, [pc, #16]	; (80a4c64 <asctime_r+0x40>)
 80a4c52:	440b      	add	r3, r1
 80a4c54:	4904      	ldr	r1, [pc, #16]	; (80a4c68 <asctime_r+0x44>)
 80a4c56:	440a      	add	r2, r1
 80a4c58:	4904      	ldr	r1, [pc, #16]	; (80a4c6c <asctime_r+0x48>)
 80a4c5a:	f7fd fbcf 	bl	80a23fc <siprintf>
 80a4c5e:	4620      	mov	r0, r4
 80a4c60:	b006      	add	sp, #24
 80a4c62:	bd10      	pop	{r4, pc}
 80a4c64:	080a7406 	.word	0x080a7406
 80a4c68:	080a73f1 	.word	0x080a73f1
 80a4c6c:	080a73d1 	.word	0x080a73d1

080a4c70 <atol>:
 80a4c70:	220a      	movs	r2, #10
 80a4c72:	2100      	movs	r1, #0
 80a4c74:	f001 ba1a 	b.w	80a60ac <strtol>

080a4c78 <__cxa_atexit>:
 80a4c78:	b510      	push	{r4, lr}
 80a4c7a:	4604      	mov	r4, r0
 80a4c7c:	4804      	ldr	r0, [pc, #16]	; (80a4c90 <__cxa_atexit+0x18>)
 80a4c7e:	4613      	mov	r3, r2
 80a4c80:	b120      	cbz	r0, 80a4c8c <__cxa_atexit+0x14>
 80a4c82:	460a      	mov	r2, r1
 80a4c84:	2002      	movs	r0, #2
 80a4c86:	4621      	mov	r1, r4
 80a4c88:	f3af 8000 	nop.w
 80a4c8c:	bd10      	pop	{r4, pc}
 80a4c8e:	bf00      	nop
 80a4c90:	00000000 	.word	0x00000000

080a4c94 <localtime_r>:
 80a4c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a4c98:	460c      	mov	r4, r1
 80a4c9a:	4607      	mov	r7, r0
 80a4c9c:	f001 fd2a 	bl	80a66f4 <__gettzinfo>
 80a4ca0:	4621      	mov	r1, r4
 80a4ca2:	4680      	mov	r8, r0
 80a4ca4:	4638      	mov	r0, r7
 80a4ca6:	f001 fd29 	bl	80a66fc <gmtime_r>
 80a4caa:	6943      	ldr	r3, [r0, #20]
 80a4cac:	4604      	mov	r4, r0
 80a4cae:	079a      	lsls	r2, r3, #30
 80a4cb0:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 80a4cb4:	d105      	bne.n	80a4cc2 <localtime_r+0x2e>
 80a4cb6:	2264      	movs	r2, #100	; 0x64
 80a4cb8:	fb96 f3f2 	sdiv	r3, r6, r2
 80a4cbc:	fb02 6313 	mls	r3, r2, r3, r6
 80a4cc0:	bb7b      	cbnz	r3, 80a4d22 <localtime_r+0x8e>
 80a4cc2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80a4cc6:	fb96 f5f3 	sdiv	r5, r6, r3
 80a4cca:	fb03 6515 	mls	r5, r3, r5, r6
 80a4cce:	fab5 f585 	clz	r5, r5
 80a4cd2:	096d      	lsrs	r5, r5, #5
 80a4cd4:	2230      	movs	r2, #48	; 0x30
 80a4cd6:	4b68      	ldr	r3, [pc, #416]	; (80a4e78 <localtime_r+0x1e4>)
 80a4cd8:	fb02 3505 	mla	r5, r2, r5, r3
 80a4cdc:	f001 fb1e 	bl	80a631c <__tz_lock>
 80a4ce0:	f001 fb28 	bl	80a6334 <_tzset_unlocked>
 80a4ce4:	4b65      	ldr	r3, [pc, #404]	; (80a4e7c <localtime_r+0x1e8>)
 80a4ce6:	681b      	ldr	r3, [r3, #0]
 80a4ce8:	b353      	cbz	r3, 80a4d40 <localtime_r+0xac>
 80a4cea:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80a4cee:	42b3      	cmp	r3, r6
 80a4cf0:	d119      	bne.n	80a4d26 <localtime_r+0x92>
 80a4cf2:	e9d7 6700 	ldrd	r6, r7, [r7]
 80a4cf6:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 80a4cfa:	f8d8 1000 	ldr.w	r1, [r8]
 80a4cfe:	b9d1      	cbnz	r1, 80a4d36 <localtime_r+0xa2>
 80a4d00:	4296      	cmp	r6, r2
 80a4d02:	eb77 0303 	sbcs.w	r3, r7, r3
 80a4d06:	da23      	bge.n	80a4d50 <localtime_r+0xbc>
 80a4d08:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 80a4d0c:	4296      	cmp	r6, r2
 80a4d0e:	eb77 0303 	sbcs.w	r3, r7, r3
 80a4d12:	bfb4      	ite	lt
 80a4d14:	2301      	movlt	r3, #1
 80a4d16:	2300      	movge	r3, #0
 80a4d18:	6223      	str	r3, [r4, #32]
 80a4d1a:	db1b      	blt.n	80a4d54 <localtime_r+0xc0>
 80a4d1c:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 80a4d20:	e01a      	b.n	80a4d58 <localtime_r+0xc4>
 80a4d22:	2501      	movs	r5, #1
 80a4d24:	e7d6      	b.n	80a4cd4 <localtime_r+0x40>
 80a4d26:	4630      	mov	r0, r6
 80a4d28:	f001 fa50 	bl	80a61cc <__tzcalc_limits>
 80a4d2c:	2800      	cmp	r0, #0
 80a4d2e:	d1e0      	bne.n	80a4cf2 <localtime_r+0x5e>
 80a4d30:	f04f 33ff 	mov.w	r3, #4294967295
 80a4d34:	e004      	b.n	80a4d40 <localtime_r+0xac>
 80a4d36:	4296      	cmp	r6, r2
 80a4d38:	eb77 0303 	sbcs.w	r3, r7, r3
 80a4d3c:	da02      	bge.n	80a4d44 <localtime_r+0xb0>
 80a4d3e:	2300      	movs	r3, #0
 80a4d40:	6223      	str	r3, [r4, #32]
 80a4d42:	e7eb      	b.n	80a4d1c <localtime_r+0x88>
 80a4d44:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 80a4d48:	4296      	cmp	r6, r2
 80a4d4a:	eb77 0303 	sbcs.w	r3, r7, r3
 80a4d4e:	daf6      	bge.n	80a4d3e <localtime_r+0xaa>
 80a4d50:	2301      	movs	r3, #1
 80a4d52:	6223      	str	r3, [r4, #32]
 80a4d54:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 80a4d58:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80a4d5c:	fb91 f6f3 	sdiv	r6, r1, r3
 80a4d60:	203c      	movs	r0, #60	; 0x3c
 80a4d62:	fb03 1316 	mls	r3, r3, r6, r1
 80a4d66:	fb93 f2f0 	sdiv	r2, r3, r0
 80a4d6a:	fb00 3012 	mls	r0, r0, r2, r3
 80a4d6e:	6861      	ldr	r1, [r4, #4]
 80a4d70:	6823      	ldr	r3, [r4, #0]
 80a4d72:	1a89      	subs	r1, r1, r2
 80a4d74:	68a2      	ldr	r2, [r4, #8]
 80a4d76:	1a1b      	subs	r3, r3, r0
 80a4d78:	1b92      	subs	r2, r2, r6
 80a4d7a:	2b3b      	cmp	r3, #59	; 0x3b
 80a4d7c:	6023      	str	r3, [r4, #0]
 80a4d7e:	6061      	str	r1, [r4, #4]
 80a4d80:	60a2      	str	r2, [r4, #8]
 80a4d82:	dd34      	ble.n	80a4dee <localtime_r+0x15a>
 80a4d84:	3101      	adds	r1, #1
 80a4d86:	6061      	str	r1, [r4, #4]
 80a4d88:	3b3c      	subs	r3, #60	; 0x3c
 80a4d8a:	6023      	str	r3, [r4, #0]
 80a4d8c:	6863      	ldr	r3, [r4, #4]
 80a4d8e:	2b3b      	cmp	r3, #59	; 0x3b
 80a4d90:	dd33      	ble.n	80a4dfa <localtime_r+0x166>
 80a4d92:	3201      	adds	r2, #1
 80a4d94:	60a2      	str	r2, [r4, #8]
 80a4d96:	3b3c      	subs	r3, #60	; 0x3c
 80a4d98:	6063      	str	r3, [r4, #4]
 80a4d9a:	68a3      	ldr	r3, [r4, #8]
 80a4d9c:	2b17      	cmp	r3, #23
 80a4d9e:	dd32      	ble.n	80a4e06 <localtime_r+0x172>
 80a4da0:	69e2      	ldr	r2, [r4, #28]
 80a4da2:	3b18      	subs	r3, #24
 80a4da4:	3201      	adds	r2, #1
 80a4da6:	61e2      	str	r2, [r4, #28]
 80a4da8:	69a2      	ldr	r2, [r4, #24]
 80a4daa:	60a3      	str	r3, [r4, #8]
 80a4dac:	3201      	adds	r2, #1
 80a4dae:	2a06      	cmp	r2, #6
 80a4db0:	bfc8      	it	gt
 80a4db2:	2200      	movgt	r2, #0
 80a4db4:	61a2      	str	r2, [r4, #24]
 80a4db6:	68e2      	ldr	r2, [r4, #12]
 80a4db8:	6923      	ldr	r3, [r4, #16]
 80a4dba:	3201      	adds	r2, #1
 80a4dbc:	60e2      	str	r2, [r4, #12]
 80a4dbe:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 80a4dc2:	428a      	cmp	r2, r1
 80a4dc4:	dd0e      	ble.n	80a4de4 <localtime_r+0x150>
 80a4dc6:	2b0b      	cmp	r3, #11
 80a4dc8:	eba2 0201 	sub.w	r2, r2, r1
 80a4dcc:	60e2      	str	r2, [r4, #12]
 80a4dce:	f103 0201 	add.w	r2, r3, #1
 80a4dd2:	bf05      	ittet	eq
 80a4dd4:	2200      	moveq	r2, #0
 80a4dd6:	6963      	ldreq	r3, [r4, #20]
 80a4dd8:	6122      	strne	r2, [r4, #16]
 80a4dda:	3301      	addeq	r3, #1
 80a4ddc:	bf02      	ittt	eq
 80a4dde:	6122      	streq	r2, [r4, #16]
 80a4de0:	6163      	streq	r3, [r4, #20]
 80a4de2:	61e2      	streq	r2, [r4, #28]
 80a4de4:	f001 faa0 	bl	80a6328 <__tz_unlock>
 80a4de8:	4620      	mov	r0, r4
 80a4dea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a4dee:	2b00      	cmp	r3, #0
 80a4df0:	dacc      	bge.n	80a4d8c <localtime_r+0xf8>
 80a4df2:	3901      	subs	r1, #1
 80a4df4:	6061      	str	r1, [r4, #4]
 80a4df6:	333c      	adds	r3, #60	; 0x3c
 80a4df8:	e7c7      	b.n	80a4d8a <localtime_r+0xf6>
 80a4dfa:	2b00      	cmp	r3, #0
 80a4dfc:	dacd      	bge.n	80a4d9a <localtime_r+0x106>
 80a4dfe:	3a01      	subs	r2, #1
 80a4e00:	60a2      	str	r2, [r4, #8]
 80a4e02:	333c      	adds	r3, #60	; 0x3c
 80a4e04:	e7c8      	b.n	80a4d98 <localtime_r+0x104>
 80a4e06:	2b00      	cmp	r3, #0
 80a4e08:	daec      	bge.n	80a4de4 <localtime_r+0x150>
 80a4e0a:	69e2      	ldr	r2, [r4, #28]
 80a4e0c:	3318      	adds	r3, #24
 80a4e0e:	3a01      	subs	r2, #1
 80a4e10:	61e2      	str	r2, [r4, #28]
 80a4e12:	69a2      	ldr	r2, [r4, #24]
 80a4e14:	60a3      	str	r3, [r4, #8]
 80a4e16:	3a01      	subs	r2, #1
 80a4e18:	bf48      	it	mi
 80a4e1a:	2206      	movmi	r2, #6
 80a4e1c:	61a2      	str	r2, [r4, #24]
 80a4e1e:	68e2      	ldr	r2, [r4, #12]
 80a4e20:	3a01      	subs	r2, #1
 80a4e22:	60e2      	str	r2, [r4, #12]
 80a4e24:	2a00      	cmp	r2, #0
 80a4e26:	d1dd      	bne.n	80a4de4 <localtime_r+0x150>
 80a4e28:	6923      	ldr	r3, [r4, #16]
 80a4e2a:	3b01      	subs	r3, #1
 80a4e2c:	d405      	bmi.n	80a4e3a <localtime_r+0x1a6>
 80a4e2e:	6123      	str	r3, [r4, #16]
 80a4e30:	6923      	ldr	r3, [r4, #16]
 80a4e32:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80a4e36:	60e3      	str	r3, [r4, #12]
 80a4e38:	e7d4      	b.n	80a4de4 <localtime_r+0x150>
 80a4e3a:	230b      	movs	r3, #11
 80a4e3c:	6123      	str	r3, [r4, #16]
 80a4e3e:	6963      	ldr	r3, [r4, #20]
 80a4e40:	1e5a      	subs	r2, r3, #1
 80a4e42:	6162      	str	r2, [r4, #20]
 80a4e44:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 80a4e48:	0793      	lsls	r3, r2, #30
 80a4e4a:	d105      	bne.n	80a4e58 <localtime_r+0x1c4>
 80a4e4c:	2164      	movs	r1, #100	; 0x64
 80a4e4e:	fb92 f3f1 	sdiv	r3, r2, r1
 80a4e52:	fb01 2313 	mls	r3, r1, r3, r2
 80a4e56:	b963      	cbnz	r3, 80a4e72 <localtime_r+0x1de>
 80a4e58:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80a4e5c:	fb92 f3f1 	sdiv	r3, r2, r1
 80a4e60:	fb01 2313 	mls	r3, r1, r3, r2
 80a4e64:	fab3 f383 	clz	r3, r3
 80a4e68:	095b      	lsrs	r3, r3, #5
 80a4e6a:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80a4e6e:	61e3      	str	r3, [r4, #28]
 80a4e70:	e7de      	b.n	80a4e30 <localtime_r+0x19c>
 80a4e72:	2301      	movs	r3, #1
 80a4e74:	e7f9      	b.n	80a4e6a <localtime_r+0x1d6>
 80a4e76:	bf00      	nop
 80a4e78:	080a748c 	.word	0x080a748c
 80a4e7c:	20000760 	.word	0x20000760

080a4e80 <memcpy>:
 80a4e80:	440a      	add	r2, r1
 80a4e82:	4291      	cmp	r1, r2
 80a4e84:	f100 33ff 	add.w	r3, r0, #4294967295
 80a4e88:	d100      	bne.n	80a4e8c <memcpy+0xc>
 80a4e8a:	4770      	bx	lr
 80a4e8c:	b510      	push	{r4, lr}
 80a4e8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a4e92:	4291      	cmp	r1, r2
 80a4e94:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a4e98:	d1f9      	bne.n	80a4e8e <memcpy+0xe>
 80a4e9a:	bd10      	pop	{r4, pc}

080a4e9c <memset>:
 80a4e9c:	4603      	mov	r3, r0
 80a4e9e:	4402      	add	r2, r0
 80a4ea0:	4293      	cmp	r3, r2
 80a4ea2:	d100      	bne.n	80a4ea6 <memset+0xa>
 80a4ea4:	4770      	bx	lr
 80a4ea6:	f803 1b01 	strb.w	r1, [r3], #1
 80a4eaa:	e7f9      	b.n	80a4ea0 <memset+0x4>

080a4eac <validate_structure>:
 80a4eac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a4eae:	6801      	ldr	r1, [r0, #0]
 80a4eb0:	4604      	mov	r4, r0
 80a4eb2:	293b      	cmp	r1, #59	; 0x3b
 80a4eb4:	d911      	bls.n	80a4eda <validate_structure+0x2e>
 80a4eb6:	223c      	movs	r2, #60	; 0x3c
 80a4eb8:	4668      	mov	r0, sp
 80a4eba:	f001 fbc5 	bl	80a6648 <div>
 80a4ebe:	9a01      	ldr	r2, [sp, #4]
 80a4ec0:	6863      	ldr	r3, [r4, #4]
 80a4ec2:	9900      	ldr	r1, [sp, #0]
 80a4ec4:	2a00      	cmp	r2, #0
 80a4ec6:	440b      	add	r3, r1
 80a4ec8:	6063      	str	r3, [r4, #4]
 80a4eca:	bfbb      	ittet	lt
 80a4ecc:	323c      	addlt	r2, #60	; 0x3c
 80a4ece:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80a4ed2:	6022      	strge	r2, [r4, #0]
 80a4ed4:	6022      	strlt	r2, [r4, #0]
 80a4ed6:	bfb8      	it	lt
 80a4ed8:	6063      	strlt	r3, [r4, #4]
 80a4eda:	6861      	ldr	r1, [r4, #4]
 80a4edc:	293b      	cmp	r1, #59	; 0x3b
 80a4ede:	d911      	bls.n	80a4f04 <validate_structure+0x58>
 80a4ee0:	223c      	movs	r2, #60	; 0x3c
 80a4ee2:	4668      	mov	r0, sp
 80a4ee4:	f001 fbb0 	bl	80a6648 <div>
 80a4ee8:	9a01      	ldr	r2, [sp, #4]
 80a4eea:	68a3      	ldr	r3, [r4, #8]
 80a4eec:	9900      	ldr	r1, [sp, #0]
 80a4eee:	2a00      	cmp	r2, #0
 80a4ef0:	440b      	add	r3, r1
 80a4ef2:	60a3      	str	r3, [r4, #8]
 80a4ef4:	bfbb      	ittet	lt
 80a4ef6:	323c      	addlt	r2, #60	; 0x3c
 80a4ef8:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80a4efc:	6062      	strge	r2, [r4, #4]
 80a4efe:	6062      	strlt	r2, [r4, #4]
 80a4f00:	bfb8      	it	lt
 80a4f02:	60a3      	strlt	r3, [r4, #8]
 80a4f04:	68a1      	ldr	r1, [r4, #8]
 80a4f06:	2917      	cmp	r1, #23
 80a4f08:	d911      	bls.n	80a4f2e <validate_structure+0x82>
 80a4f0a:	2218      	movs	r2, #24
 80a4f0c:	4668      	mov	r0, sp
 80a4f0e:	f001 fb9b 	bl	80a6648 <div>
 80a4f12:	9a01      	ldr	r2, [sp, #4]
 80a4f14:	68e3      	ldr	r3, [r4, #12]
 80a4f16:	9900      	ldr	r1, [sp, #0]
 80a4f18:	2a00      	cmp	r2, #0
 80a4f1a:	440b      	add	r3, r1
 80a4f1c:	60e3      	str	r3, [r4, #12]
 80a4f1e:	bfbb      	ittet	lt
 80a4f20:	3218      	addlt	r2, #24
 80a4f22:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80a4f26:	60a2      	strge	r2, [r4, #8]
 80a4f28:	60a2      	strlt	r2, [r4, #8]
 80a4f2a:	bfb8      	it	lt
 80a4f2c:	60e3      	strlt	r3, [r4, #12]
 80a4f2e:	6921      	ldr	r1, [r4, #16]
 80a4f30:	290b      	cmp	r1, #11
 80a4f32:	d911      	bls.n	80a4f58 <validate_structure+0xac>
 80a4f34:	220c      	movs	r2, #12
 80a4f36:	4668      	mov	r0, sp
 80a4f38:	f001 fb86 	bl	80a6648 <div>
 80a4f3c:	9a01      	ldr	r2, [sp, #4]
 80a4f3e:	6963      	ldr	r3, [r4, #20]
 80a4f40:	9900      	ldr	r1, [sp, #0]
 80a4f42:	2a00      	cmp	r2, #0
 80a4f44:	440b      	add	r3, r1
 80a4f46:	6163      	str	r3, [r4, #20]
 80a4f48:	bfbb      	ittet	lt
 80a4f4a:	320c      	addlt	r2, #12
 80a4f4c:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80a4f50:	6122      	strge	r2, [r4, #16]
 80a4f52:	6122      	strlt	r2, [r4, #16]
 80a4f54:	bfb8      	it	lt
 80a4f56:	6163      	strlt	r3, [r4, #20]
 80a4f58:	6963      	ldr	r3, [r4, #20]
 80a4f5a:	0799      	lsls	r1, r3, #30
 80a4f5c:	d120      	bne.n	80a4fa0 <validate_structure+0xf4>
 80a4f5e:	2164      	movs	r1, #100	; 0x64
 80a4f60:	fb93 f2f1 	sdiv	r2, r3, r1
 80a4f64:	fb01 3212 	mls	r2, r1, r2, r3
 80a4f68:	b9e2      	cbnz	r2, 80a4fa4 <validate_structure+0xf8>
 80a4f6a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80a4f6e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80a4f72:	fb93 f2f1 	sdiv	r2, r3, r1
 80a4f76:	fb01 3312 	mls	r3, r1, r2, r3
 80a4f7a:	2b00      	cmp	r3, #0
 80a4f7c:	bf14      	ite	ne
 80a4f7e:	231c      	movne	r3, #28
 80a4f80:	231d      	moveq	r3, #29
 80a4f82:	68e2      	ldr	r2, [r4, #12]
 80a4f84:	2a00      	cmp	r2, #0
 80a4f86:	dc0f      	bgt.n	80a4fa8 <validate_structure+0xfc>
 80a4f88:	260b      	movs	r6, #11
 80a4f8a:	2064      	movs	r0, #100	; 0x64
 80a4f8c:	f44f 75c8 	mov.w	r5, #400	; 0x190
 80a4f90:	4f31      	ldr	r7, [pc, #196]	; (80a5058 <validate_structure+0x1ac>)
 80a4f92:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 80a4f96:	f1bc 0f00 	cmp.w	ip, #0
 80a4f9a:	dd31      	ble.n	80a5000 <validate_structure+0x154>
 80a4f9c:	b003      	add	sp, #12
 80a4f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a4fa0:	231c      	movs	r3, #28
 80a4fa2:	e7ee      	b.n	80a4f82 <validate_structure+0xd6>
 80a4fa4:	231d      	movs	r3, #29
 80a4fa6:	e7ec      	b.n	80a4f82 <validate_structure+0xd6>
 80a4fa8:	f04f 0c00 	mov.w	ip, #0
 80a4fac:	2564      	movs	r5, #100	; 0x64
 80a4fae:	f44f 76c8 	mov.w	r6, #400	; 0x190
 80a4fb2:	4f29      	ldr	r7, [pc, #164]	; (80a5058 <validate_structure+0x1ac>)
 80a4fb4:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 80a4fb8:	2a01      	cmp	r2, #1
 80a4fba:	bf0c      	ite	eq
 80a4fbc:	4618      	moveq	r0, r3
 80a4fbe:	f857 0022 	ldrne.w	r0, [r7, r2, lsl #2]
 80a4fc2:	4281      	cmp	r1, r0
 80a4fc4:	ddea      	ble.n	80a4f9c <validate_structure+0xf0>
 80a4fc6:	3201      	adds	r2, #1
 80a4fc8:	1a09      	subs	r1, r1, r0
 80a4fca:	2a0c      	cmp	r2, #12
 80a4fcc:	60e1      	str	r1, [r4, #12]
 80a4fce:	6122      	str	r2, [r4, #16]
 80a4fd0:	d1f0      	bne.n	80a4fb4 <validate_structure+0x108>
 80a4fd2:	6963      	ldr	r3, [r4, #20]
 80a4fd4:	1c5a      	adds	r2, r3, #1
 80a4fd6:	0791      	lsls	r1, r2, #30
 80a4fd8:	e9c4 c204 	strd	ip, r2, [r4, #16]
 80a4fdc:	d137      	bne.n	80a504e <validate_structure+0x1a2>
 80a4fde:	fb92 f1f5 	sdiv	r1, r2, r5
 80a4fe2:	fb05 2211 	mls	r2, r5, r1, r2
 80a4fe6:	2a00      	cmp	r2, #0
 80a4fe8:	d133      	bne.n	80a5052 <validate_structure+0x1a6>
 80a4fea:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 80a4fee:	fb93 f2f6 	sdiv	r2, r3, r6
 80a4ff2:	fb06 3312 	mls	r3, r6, r2, r3
 80a4ff6:	2b00      	cmp	r3, #0
 80a4ff8:	bf14      	ite	ne
 80a4ffa:	231c      	movne	r3, #28
 80a4ffc:	231d      	moveq	r3, #29
 80a4ffe:	e7d9      	b.n	80a4fb4 <validate_structure+0x108>
 80a5000:	6921      	ldr	r1, [r4, #16]
 80a5002:	3901      	subs	r1, #1
 80a5004:	6121      	str	r1, [r4, #16]
 80a5006:	3101      	adds	r1, #1
 80a5008:	d114      	bne.n	80a5034 <validate_structure+0x188>
 80a500a:	6963      	ldr	r3, [r4, #20]
 80a500c:	1e59      	subs	r1, r3, #1
 80a500e:	078a      	lsls	r2, r1, #30
 80a5010:	e9c4 6104 	strd	r6, r1, [r4, #16]
 80a5014:	d117      	bne.n	80a5046 <validate_structure+0x19a>
 80a5016:	fb91 f2f0 	sdiv	r2, r1, r0
 80a501a:	fb00 1112 	mls	r1, r0, r2, r1
 80a501e:	b9a1      	cbnz	r1, 80a504a <validate_structure+0x19e>
 80a5020:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80a5024:	fb93 f2f5 	sdiv	r2, r3, r5
 80a5028:	fb05 3312 	mls	r3, r5, r2, r3
 80a502c:	2b00      	cmp	r3, #0
 80a502e:	bf14      	ite	ne
 80a5030:	231c      	movne	r3, #28
 80a5032:	231d      	moveq	r3, #29
 80a5034:	6922      	ldr	r2, [r4, #16]
 80a5036:	2a01      	cmp	r2, #1
 80a5038:	bf0c      	ite	eq
 80a503a:	461a      	moveq	r2, r3
 80a503c:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 80a5040:	4462      	add	r2, ip
 80a5042:	60e2      	str	r2, [r4, #12]
 80a5044:	e7a5      	b.n	80a4f92 <validate_structure+0xe6>
 80a5046:	231c      	movs	r3, #28
 80a5048:	e7f4      	b.n	80a5034 <validate_structure+0x188>
 80a504a:	231d      	movs	r3, #29
 80a504c:	e7f2      	b.n	80a5034 <validate_structure+0x188>
 80a504e:	231c      	movs	r3, #28
 80a5050:	e7b0      	b.n	80a4fb4 <validate_structure+0x108>
 80a5052:	231d      	movs	r3, #29
 80a5054:	e7ae      	b.n	80a4fb4 <validate_structure+0x108>
 80a5056:	bf00      	nop
 80a5058:	080a742c 	.word	0x080a742c

080a505c <mktime>:
 80a505c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a5060:	b08b      	sub	sp, #44	; 0x2c
 80a5062:	4605      	mov	r5, r0
 80a5064:	f001 fb46 	bl	80a66f4 <__gettzinfo>
 80a5068:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
 80a506c:	4607      	mov	r7, r0
 80a506e:	4628      	mov	r0, r5
 80a5070:	f7ff ff1c 	bl	80a4eac <validate_structure>
 80a5074:	e9d5 2300 	ldrd	r2, r3, [r5]
 80a5078:	fb0a 2303 	mla	r3, sl, r3, r2
 80a507c:	f44f 6a61 	mov.w	sl, #3600	; 0xe10
 80a5080:	68a8      	ldr	r0, [r5, #8]
 80a5082:	4ab4      	ldr	r2, [pc, #720]	; (80a5354 <mktime+0x2f8>)
 80a5084:	fb0a 3a00 	mla	sl, sl, r0, r3
 80a5088:	e9d5 4303 	ldrd	r4, r3, [r5, #12]
 80a508c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80a5090:	3c01      	subs	r4, #1
 80a5092:	2b01      	cmp	r3, #1
 80a5094:	696e      	ldr	r6, [r5, #20]
 80a5096:	4414      	add	r4, r2
 80a5098:	dd11      	ble.n	80a50be <mktime+0x62>
 80a509a:	07b1      	lsls	r1, r6, #30
 80a509c:	d10f      	bne.n	80a50be <mktime+0x62>
 80a509e:	2264      	movs	r2, #100	; 0x64
 80a50a0:	fb96 f3f2 	sdiv	r3, r6, r2
 80a50a4:	fb02 6313 	mls	r3, r2, r3, r6
 80a50a8:	b943      	cbnz	r3, 80a50bc <mktime+0x60>
 80a50aa:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a50ae:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 80a50b2:	fb91 f3f2 	sdiv	r3, r1, r2
 80a50b6:	fb02 1313 	mls	r3, r2, r3, r1
 80a50ba:	b903      	cbnz	r3, 80a50be <mktime+0x62>
 80a50bc:	3401      	adds	r4, #1
 80a50be:	f644 6220 	movw	r2, #20000	; 0x4e20
 80a50c2:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 80a50c6:	3310      	adds	r3, #16
 80a50c8:	4293      	cmp	r3, r2
 80a50ca:	61ec      	str	r4, [r5, #28]
 80a50cc:	f200 8168 	bhi.w	80a53a0 <mktime+0x344>
 80a50d0:	2e46      	cmp	r6, #70	; 0x46
 80a50d2:	dd77      	ble.n	80a51c4 <mktime+0x168>
 80a50d4:	2346      	movs	r3, #70	; 0x46
 80a50d6:	f240 1e6d 	movw	lr, #365	; 0x16d
 80a50da:	2164      	movs	r1, #100	; 0x64
 80a50dc:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80a50e0:	079a      	lsls	r2, r3, #30
 80a50e2:	d169      	bne.n	80a51b8 <mktime+0x15c>
 80a50e4:	fb93 f2f1 	sdiv	r2, r3, r1
 80a50e8:	fb01 3212 	mls	r2, r1, r2, r3
 80a50ec:	2a00      	cmp	r2, #0
 80a50ee:	d166      	bne.n	80a51be <mktime+0x162>
 80a50f0:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 80a50f4:	fb9c f2f0 	sdiv	r2, ip, r0
 80a50f8:	fb00 c212 	mls	r2, r0, r2, ip
 80a50fc:	2a00      	cmp	r2, #0
 80a50fe:	bf14      	ite	ne
 80a5100:	4672      	movne	r2, lr
 80a5102:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80a5106:	3301      	adds	r3, #1
 80a5108:	429e      	cmp	r6, r3
 80a510a:	4414      	add	r4, r2
 80a510c:	d1e8      	bne.n	80a50e0 <mktime+0x84>
 80a510e:	4b92      	ldr	r3, [pc, #584]	; (80a5358 <mktime+0x2fc>)
 80a5110:	ea4f 7bea 	mov.w	fp, sl, asr #31
 80a5114:	fbc3 ab04 	smlal	sl, fp, r3, r4
 80a5118:	f001 f900 	bl	80a631c <__tz_lock>
 80a511c:	f001 f90a 	bl	80a6334 <_tzset_unlocked>
 80a5120:	4b8e      	ldr	r3, [pc, #568]	; (80a535c <mktime+0x300>)
 80a5122:	f8d3 9000 	ldr.w	r9, [r3]
 80a5126:	f1b9 0f00 	cmp.w	r9, #0
 80a512a:	d03f      	beq.n	80a51ac <mktime+0x150>
 80a512c:	f8d5 9020 	ldr.w	r9, [r5, #32]
 80a5130:	6968      	ldr	r0, [r5, #20]
 80a5132:	687b      	ldr	r3, [r7, #4]
 80a5134:	f1b9 0f01 	cmp.w	r9, #1
 80a5138:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80a513c:	46c8      	mov	r8, r9
 80a513e:	bfa8      	it	ge
 80a5140:	f04f 0801 	movge.w	r8, #1
 80a5144:	4283      	cmp	r3, r0
 80a5146:	d17f      	bne.n	80a5248 <mktime+0x1ec>
 80a5148:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80a514a:	4619      	mov	r1, r3
 80a514c:	17da      	asrs	r2, r3, #31
 80a514e:	e9cd 1200 	strd	r1, r2, [sp]
 80a5152:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80a5156:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80a515a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a515e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80a5160:	1a80      	subs	r0, r0, r2
 80a5162:	eb61 71e2 	sbc.w	r1, r1, r2, asr #31
 80a5166:	4582      	cmp	sl, r0
 80a5168:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80a516c:	eb7b 0101 	sbcs.w	r1, fp, r1
 80a5170:	da71      	bge.n	80a5256 <mktime+0x1fa>
 80a5172:	9800      	ldr	r0, [sp, #0]
 80a5174:	6a39      	ldr	r1, [r7, #32]
 80a5176:	1a09      	subs	r1, r1, r0
 80a5178:	9104      	str	r1, [sp, #16]
 80a517a:	9801      	ldr	r0, [sp, #4]
 80a517c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80a517e:	eb61 0100 	sbc.w	r1, r1, r0
 80a5182:	9105      	str	r1, [sp, #20]
 80a5184:	6839      	ldr	r1, [r7, #0]
 80a5186:	2900      	cmp	r1, #0
 80a5188:	d075      	beq.n	80a5276 <mktime+0x21a>
 80a518a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a518e:	4582      	cmp	sl, r0
 80a5190:	eb7b 0101 	sbcs.w	r1, fp, r1
 80a5194:	db05      	blt.n	80a51a2 <mktime+0x146>
 80a5196:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a519a:	4582      	cmp	sl, r0
 80a519c:	eb7b 0101 	sbcs.w	r1, fp, r1
 80a51a0:	db6f      	blt.n	80a5282 <mktime+0x226>
 80a51a2:	f1b9 0f00 	cmp.w	r9, #0
 80a51a6:	f04f 0900 	mov.w	r9, #0
 80a51aa:	da6f      	bge.n	80a528c <mktime+0x230>
 80a51ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80a51ae:	eb1a 0a03 	adds.w	sl, sl, r3
 80a51b2:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 80a51b6:	e0ae      	b.n	80a5316 <mktime+0x2ba>
 80a51b8:	f240 126d 	movw	r2, #365	; 0x16d
 80a51bc:	e7a3      	b.n	80a5106 <mktime+0xaa>
 80a51be:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80a51c2:	e7a0      	b.n	80a5106 <mktime+0xaa>
 80a51c4:	d0a3      	beq.n	80a510e <mktime+0xb2>
 80a51c6:	2345      	movs	r3, #69	; 0x45
 80a51c8:	f240 1e6d 	movw	lr, #365	; 0x16d
 80a51cc:	2164      	movs	r1, #100	; 0x64
 80a51ce:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80a51d2:	e012      	b.n	80a51fa <mktime+0x19e>
 80a51d4:	bb62      	cbnz	r2, 80a5230 <mktime+0x1d4>
 80a51d6:	fb93 f2f1 	sdiv	r2, r3, r1
 80a51da:	fb01 3212 	mls	r2, r1, r2, r3
 80a51de:	bb52      	cbnz	r2, 80a5236 <mktime+0x1da>
 80a51e0:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 80a51e4:	fb9c f2f0 	sdiv	r2, ip, r0
 80a51e8:	fb00 c212 	mls	r2, r0, r2, ip
 80a51ec:	2a00      	cmp	r2, #0
 80a51ee:	bf14      	ite	ne
 80a51f0:	4672      	movne	r2, lr
 80a51f2:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80a51f6:	1aa4      	subs	r4, r4, r2
 80a51f8:	3b01      	subs	r3, #1
 80a51fa:	429e      	cmp	r6, r3
 80a51fc:	f003 0203 	and.w	r2, r3, #3
 80a5200:	dbe8      	blt.n	80a51d4 <mktime+0x178>
 80a5202:	b9da      	cbnz	r2, 80a523c <mktime+0x1e0>
 80a5204:	2264      	movs	r2, #100	; 0x64
 80a5206:	fb96 f3f2 	sdiv	r3, r6, r2
 80a520a:	fb02 6313 	mls	r3, r2, r3, r6
 80a520e:	b9c3      	cbnz	r3, 80a5242 <mktime+0x1e6>
 80a5210:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a5214:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 80a5218:	fb91 f3f2 	sdiv	r3, r1, r2
 80a521c:	fb02 1313 	mls	r3, r2, r3, r1
 80a5220:	2b00      	cmp	r3, #0
 80a5222:	f240 136d 	movw	r3, #365	; 0x16d
 80a5226:	bf08      	it	eq
 80a5228:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 80a522c:	1ae4      	subs	r4, r4, r3
 80a522e:	e76e      	b.n	80a510e <mktime+0xb2>
 80a5230:	f240 126d 	movw	r2, #365	; 0x16d
 80a5234:	e7df      	b.n	80a51f6 <mktime+0x19a>
 80a5236:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80a523a:	e7dc      	b.n	80a51f6 <mktime+0x19a>
 80a523c:	f240 136d 	movw	r3, #365	; 0x16d
 80a5240:	e7f4      	b.n	80a522c <mktime+0x1d0>
 80a5242:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 80a5246:	e7f1      	b.n	80a522c <mktime+0x1d0>
 80a5248:	f000 ffc0 	bl	80a61cc <__tzcalc_limits>
 80a524c:	2800      	cmp	r0, #0
 80a524e:	f47f af7b 	bne.w	80a5148 <mktime+0xec>
 80a5252:	46c1      	mov	r9, r8
 80a5254:	e054      	b.n	80a5300 <mktime+0x2a4>
 80a5256:	9800      	ldr	r0, [sp, #0]
 80a5258:	9902      	ldr	r1, [sp, #8]
 80a525a:	1a09      	subs	r1, r1, r0
 80a525c:	9108      	str	r1, [sp, #32]
 80a525e:	9801      	ldr	r0, [sp, #4]
 80a5260:	9903      	ldr	r1, [sp, #12]
 80a5262:	eb61 0100 	sbc.w	r1, r1, r0
 80a5266:	9109      	str	r1, [sp, #36]	; 0x24
 80a5268:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80a526c:	4582      	cmp	sl, r0
 80a526e:	eb7b 0101 	sbcs.w	r1, fp, r1
 80a5272:	dbee      	blt.n	80a5252 <mktime+0x1f6>
 80a5274:	e77d      	b.n	80a5172 <mktime+0x116>
 80a5276:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a527a:	4582      	cmp	sl, r0
 80a527c:	eb7b 0101 	sbcs.w	r1, fp, r1
 80a5280:	db89      	blt.n	80a5196 <mktime+0x13a>
 80a5282:	f1b9 0f00 	cmp.w	r9, #0
 80a5286:	db3f      	blt.n	80a5308 <mktime+0x2ac>
 80a5288:	f04f 0901 	mov.w	r9, #1
 80a528c:	ea88 0809 	eor.w	r8, r8, r9
 80a5290:	f1b8 0f01 	cmp.w	r8, #1
 80a5294:	d134      	bne.n	80a5300 <mktime+0x2a4>
 80a5296:	f1b9 0f00 	cmp.w	r9, #0
 80a529a:	d04f      	beq.n	80a533c <mktime+0x2e0>
 80a529c:	1ad3      	subs	r3, r2, r3
 80a529e:	682a      	ldr	r2, [r5, #0]
 80a52a0:	eb1a 0a03 	adds.w	sl, sl, r3
 80a52a4:	441a      	add	r2, r3
 80a52a6:	602a      	str	r2, [r5, #0]
 80a52a8:	4628      	mov	r0, r5
 80a52aa:	f8d5 800c 	ldr.w	r8, [r5, #12]
 80a52ae:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 80a52b2:	f7ff fdfb 	bl	80a4eac <validate_structure>
 80a52b6:	68ea      	ldr	r2, [r5, #12]
 80a52b8:	ebb2 0208 	subs.w	r2, r2, r8
 80a52bc:	d020      	beq.n	80a5300 <mktime+0x2a4>
 80a52be:	2a01      	cmp	r2, #1
 80a52c0:	dc3e      	bgt.n	80a5340 <mktime+0x2e4>
 80a52c2:	1c90      	adds	r0, r2, #2
 80a52c4:	bfd8      	it	le
 80a52c6:	2201      	movle	r2, #1
 80a52c8:	69eb      	ldr	r3, [r5, #28]
 80a52ca:	4414      	add	r4, r2
 80a52cc:	18d3      	adds	r3, r2, r3
 80a52ce:	d547      	bpl.n	80a5360 <mktime+0x304>
 80a52d0:	1e72      	subs	r2, r6, #1
 80a52d2:	0791      	lsls	r1, r2, #30
 80a52d4:	d137      	bne.n	80a5346 <mktime+0x2ea>
 80a52d6:	2164      	movs	r1, #100	; 0x64
 80a52d8:	fb92 f3f1 	sdiv	r3, r2, r1
 80a52dc:	fb01 2313 	mls	r3, r1, r3, r2
 80a52e0:	bba3      	cbnz	r3, 80a534c <mktime+0x2f0>
 80a52e2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a52e6:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 80a52ea:	fb96 f3f2 	sdiv	r3, r6, r2
 80a52ee:	fb02 6613 	mls	r6, r2, r3, r6
 80a52f2:	2e00      	cmp	r6, #0
 80a52f4:	f240 136d 	movw	r3, #365	; 0x16d
 80a52f8:	bf18      	it	ne
 80a52fa:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 80a52fe:	61eb      	str	r3, [r5, #28]
 80a5300:	f1b9 0f01 	cmp.w	r9, #1
 80a5304:	f47f af52 	bne.w	80a51ac <mktime+0x150>
 80a5308:	f04f 0901 	mov.w	r9, #1
 80a530c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80a530e:	eb1a 0a03 	adds.w	sl, sl, r3
 80a5312:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 80a5316:	f001 f807 	bl	80a6328 <__tz_unlock>
 80a531a:	2307      	movs	r3, #7
 80a531c:	3404      	adds	r4, #4
 80a531e:	fb94 f3f3 	sdiv	r3, r4, r3
 80a5322:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a5326:	1ae4      	subs	r4, r4, r3
 80a5328:	bf48      	it	mi
 80a532a:	3407      	addmi	r4, #7
 80a532c:	f8c5 9020 	str.w	r9, [r5, #32]
 80a5330:	61ac      	str	r4, [r5, #24]
 80a5332:	4650      	mov	r0, sl
 80a5334:	4659      	mov	r1, fp
 80a5336:	b00b      	add	sp, #44	; 0x2c
 80a5338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a533c:	1a9b      	subs	r3, r3, r2
 80a533e:	e7ae      	b.n	80a529e <mktime+0x242>
 80a5340:	f04f 32ff 	mov.w	r2, #4294967295
 80a5344:	e7c0      	b.n	80a52c8 <mktime+0x26c>
 80a5346:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 80a534a:	e7d8      	b.n	80a52fe <mktime+0x2a2>
 80a534c:	f240 136d 	movw	r3, #365	; 0x16d
 80a5350:	e7d5      	b.n	80a52fe <mktime+0x2a2>
 80a5352:	bf00      	nop
 80a5354:	080a745c 	.word	0x080a745c
 80a5358:	00015180 	.word	0x00015180
 80a535c:	20000760 	.word	0x20000760
 80a5360:	07b2      	lsls	r2, r6, #30
 80a5362:	d117      	bne.n	80a5394 <mktime+0x338>
 80a5364:	2164      	movs	r1, #100	; 0x64
 80a5366:	fb96 f2f1 	sdiv	r2, r6, r1
 80a536a:	fb01 6212 	mls	r2, r1, r2, r6
 80a536e:	b9a2      	cbnz	r2, 80a539a <mktime+0x33e>
 80a5370:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80a5374:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 80a5378:	fb96 f2f1 	sdiv	r2, r6, r1
 80a537c:	fb01 6612 	mls	r6, r1, r2, r6
 80a5380:	2e00      	cmp	r6, #0
 80a5382:	f240 126d 	movw	r2, #365	; 0x16d
 80a5386:	bf08      	it	eq
 80a5388:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80a538c:	4293      	cmp	r3, r2
 80a538e:	bfa8      	it	ge
 80a5390:	1a9b      	subge	r3, r3, r2
 80a5392:	e7b4      	b.n	80a52fe <mktime+0x2a2>
 80a5394:	f240 126d 	movw	r2, #365	; 0x16d
 80a5398:	e7f8      	b.n	80a538c <mktime+0x330>
 80a539a:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80a539e:	e7f5      	b.n	80a538c <mktime+0x330>
 80a53a0:	f04f 3aff 	mov.w	sl, #4294967295
 80a53a4:	f04f 3bff 	mov.w	fp, #4294967295
 80a53a8:	e7c3      	b.n	80a5332 <mktime+0x2d6>
 80a53aa:	bf00      	nop

080a53ac <srand>:
 80a53ac:	b538      	push	{r3, r4, r5, lr}
 80a53ae:	4b0d      	ldr	r3, [pc, #52]	; (80a53e4 <srand+0x38>)
 80a53b0:	4604      	mov	r4, r0
 80a53b2:	681d      	ldr	r5, [r3, #0]
 80a53b4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a53b6:	b97b      	cbnz	r3, 80a53d8 <srand+0x2c>
 80a53b8:	2018      	movs	r0, #24
 80a53ba:	f7fc ffff 	bl	80a23bc <malloc>
 80a53be:	4a0a      	ldr	r2, [pc, #40]	; (80a53e8 <srand+0x3c>)
 80a53c0:	4b0a      	ldr	r3, [pc, #40]	; (80a53ec <srand+0x40>)
 80a53c2:	63a8      	str	r0, [r5, #56]	; 0x38
 80a53c4:	e9c0 2300 	strd	r2, r3, [r0]
 80a53c8:	4b09      	ldr	r3, [pc, #36]	; (80a53f0 <srand+0x44>)
 80a53ca:	2201      	movs	r2, #1
 80a53cc:	6083      	str	r3, [r0, #8]
 80a53ce:	230b      	movs	r3, #11
 80a53d0:	8183      	strh	r3, [r0, #12]
 80a53d2:	2300      	movs	r3, #0
 80a53d4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a53d8:	2200      	movs	r2, #0
 80a53da:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a53dc:	611c      	str	r4, [r3, #16]
 80a53de:	615a      	str	r2, [r3, #20]
 80a53e0:	bd38      	pop	{r3, r4, r5, pc}
 80a53e2:	bf00      	nop
 80a53e4:	20000008 	.word	0x20000008
 80a53e8:	abcd330e 	.word	0xabcd330e
 80a53ec:	e66d1234 	.word	0xe66d1234
 80a53f0:	0005deec 	.word	0x0005deec

080a53f4 <strchr>:
 80a53f4:	4603      	mov	r3, r0
 80a53f6:	b2c9      	uxtb	r1, r1
 80a53f8:	4618      	mov	r0, r3
 80a53fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a53fe:	b112      	cbz	r2, 80a5406 <strchr+0x12>
 80a5400:	428a      	cmp	r2, r1
 80a5402:	d1f9      	bne.n	80a53f8 <strchr+0x4>
 80a5404:	4770      	bx	lr
 80a5406:	2900      	cmp	r1, #0
 80a5408:	bf18      	it	ne
 80a540a:	2000      	movne	r0, #0
 80a540c:	4770      	bx	lr

080a540e <strcmp>:
 80a540e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a5412:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a5416:	2a01      	cmp	r2, #1
 80a5418:	bf28      	it	cs
 80a541a:	429a      	cmpcs	r2, r3
 80a541c:	d0f7      	beq.n	80a540e <strcmp>
 80a541e:	1ad0      	subs	r0, r2, r3
 80a5420:	4770      	bx	lr

080a5422 <strcpy>:
 80a5422:	4603      	mov	r3, r0
 80a5424:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a5428:	f803 2b01 	strb.w	r2, [r3], #1
 80a542c:	2a00      	cmp	r2, #0
 80a542e:	d1f9      	bne.n	80a5424 <strcpy+0x2>
 80a5430:	4770      	bx	lr
	...

080a5434 <strdup>:
 80a5434:	4b02      	ldr	r3, [pc, #8]	; (80a5440 <strdup+0xc>)
 80a5436:	4601      	mov	r1, r0
 80a5438:	6818      	ldr	r0, [r3, #0]
 80a543a:	f000 b803 	b.w	80a5444 <_strdup_r>
 80a543e:	bf00      	nop
 80a5440:	20000008 	.word	0x20000008

080a5444 <_strdup_r>:
 80a5444:	b570      	push	{r4, r5, r6, lr}
 80a5446:	4604      	mov	r4, r0
 80a5448:	4608      	mov	r0, r1
 80a544a:	460d      	mov	r5, r1
 80a544c:	f000 fd70 	bl	80a5f30 <strlen>
 80a5450:	1c46      	adds	r6, r0, #1
 80a5452:	4631      	mov	r1, r6
 80a5454:	4620      	mov	r0, r4
 80a5456:	f7fd f801 	bl	80a245c <_malloc_r>
 80a545a:	4604      	mov	r4, r0
 80a545c:	b118      	cbz	r0, 80a5466 <_strdup_r+0x22>
 80a545e:	4632      	mov	r2, r6
 80a5460:	4629      	mov	r1, r5
 80a5462:	f7ff fd0d 	bl	80a4e80 <memcpy>
 80a5466:	4620      	mov	r0, r4
 80a5468:	bd70      	pop	{r4, r5, r6, pc}
	...

080a546c <iso_year_adjust>:
 80a546c:	6941      	ldr	r1, [r0, #20]
 80a546e:	f240 736c 	movw	r3, #1900	; 0x76c
 80a5472:	2900      	cmp	r1, #0
 80a5474:	bfa8      	it	ge
 80a5476:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 80a547a:	18ca      	adds	r2, r1, r3
 80a547c:	078b      	lsls	r3, r1, #30
 80a547e:	d105      	bne.n	80a548c <iso_year_adjust+0x20>
 80a5480:	2164      	movs	r1, #100	; 0x64
 80a5482:	fb92 f3f1 	sdiv	r3, r2, r1
 80a5486:	fb01 2313 	mls	r3, r1, r3, r2
 80a548a:	b9db      	cbnz	r3, 80a54c4 <iso_year_adjust+0x58>
 80a548c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80a5490:	fb92 f3f1 	sdiv	r3, r2, r1
 80a5494:	fb01 2313 	mls	r3, r1, r3, r2
 80a5498:	fab3 f383 	clz	r3, r3
 80a549c:	095b      	lsrs	r3, r3, #5
 80a549e:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 80a54a2:	0040      	lsls	r0, r0, #1
 80a54a4:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 80a54a8:	4418      	add	r0, r3
 80a54aa:	f241 63a2 	movw	r3, #5794	; 0x16a2
 80a54ae:	4298      	cmp	r0, r3
 80a54b0:	d03a      	beq.n	80a5528 <iso_year_adjust+0xbc>
 80a54b2:	dc21      	bgt.n	80a54f8 <iso_year_adjust+0x8c>
 80a54b4:	2801      	cmp	r0, #1
 80a54b6:	dc1a      	bgt.n	80a54ee <iso_year_adjust+0x82>
 80a54b8:	2800      	cmp	r0, #0
 80a54ba:	bfb4      	ite	lt
 80a54bc:	2000      	movlt	r0, #0
 80a54be:	f04f 30ff 	movge.w	r0, #4294967295
 80a54c2:	4770      	bx	lr
 80a54c4:	2301      	movs	r3, #1
 80a54c6:	e7ea      	b.n	80a549e <iso_year_adjust+0x32>
 80a54c8:	2817      	cmp	r0, #23
 80a54ca:	d813      	bhi.n	80a54f4 <iso_year_adjust+0x88>
 80a54cc:	e8df f000 	tbb	[pc, r0]
 80a54d0:	0c0c0c0c 	.word	0x0c0c0c0c
 80a54d4:	0c0c1212 	.word	0x0c0c1212
 80a54d8:	12121212 	.word	0x12121212
 80a54dc:	12121212 	.word	0x12121212
 80a54e0:	0c0c1212 	.word	0x0c0c1212
 80a54e4:	0c0c1212 	.word	0x0c0c1212
 80a54e8:	f04f 30ff 	mov.w	r0, #4294967295
 80a54ec:	4770      	bx	lr
 80a54ee:	380a      	subs	r0, #10
 80a54f0:	2817      	cmp	r0, #23
 80a54f2:	d9e9      	bls.n	80a54c8 <iso_year_adjust+0x5c>
 80a54f4:	2000      	movs	r0, #0
 80a54f6:	4770      	bx	lr
 80a54f8:	f241 63b4 	movw	r3, #5812	; 0x16b4
 80a54fc:	4298      	cmp	r0, r3
 80a54fe:	dc06      	bgt.n	80a550e <iso_year_adjust+0xa2>
 80a5500:	f241 63b1 	movw	r3, #5809	; 0x16b1
 80a5504:	4298      	cmp	r0, r3
 80a5506:	bfd4      	ite	le
 80a5508:	2000      	movle	r0, #0
 80a550a:	2001      	movgt	r0, #1
 80a550c:	4770      	bx	lr
 80a550e:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 80a5512:	3802      	subs	r0, #2
 80a5514:	2815      	cmp	r0, #21
 80a5516:	d8ed      	bhi.n	80a54f4 <iso_year_adjust+0x88>
 80a5518:	2301      	movs	r3, #1
 80a551a:	4083      	lsls	r3, r0
 80a551c:	4803      	ldr	r0, [pc, #12]	; (80a552c <iso_year_adjust+0xc0>)
 80a551e:	4018      	ands	r0, r3
 80a5520:	3800      	subs	r0, #0
 80a5522:	bf18      	it	ne
 80a5524:	2001      	movne	r0, #1
 80a5526:	4770      	bx	lr
 80a5528:	2001      	movs	r0, #1
 80a552a:	4770      	bx	lr
 80a552c:	002a001f 	.word	0x002a001f

080a5530 <__strftime>:
 80a5530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a5534:	461e      	mov	r6, r3
 80a5536:	2300      	movs	r3, #0
 80a5538:	4607      	mov	r7, r0
 80a553a:	460d      	mov	r5, r1
 80a553c:	461c      	mov	r4, r3
 80a553e:	b091      	sub	sp, #68	; 0x44
 80a5540:	9304      	str	r3, [sp, #16]
 80a5542:	7813      	ldrb	r3, [r2, #0]
 80a5544:	2b00      	cmp	r3, #0
 80a5546:	f000 84da 	beq.w	80a5efe <__strftime+0x9ce>
 80a554a:	2b25      	cmp	r3, #37	; 0x25
 80a554c:	d11f      	bne.n	80a558e <__strftime+0x5e>
 80a554e:	f892 9001 	ldrb.w	r9, [r2, #1]
 80a5552:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
 80a5556:	d024      	beq.n	80a55a2 <__strftime+0x72>
 80a5558:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
 80a555c:	d021      	beq.n	80a55a2 <__strftime+0x72>
 80a555e:	f04f 0900 	mov.w	r9, #0
 80a5562:	f102 0a01 	add.w	sl, r2, #1
 80a5566:	f89a 3000 	ldrb.w	r3, [sl]
 80a556a:	3b31      	subs	r3, #49	; 0x31
 80a556c:	2b08      	cmp	r3, #8
 80a556e:	d81b      	bhi.n	80a55a8 <__strftime+0x78>
 80a5570:	4650      	mov	r0, sl
 80a5572:	220a      	movs	r2, #10
 80a5574:	a908      	add	r1, sp, #32
 80a5576:	f000 fe1f 	bl	80a61b8 <strtoul>
 80a557a:	4680      	mov	r8, r0
 80a557c:	f8dd a020 	ldr.w	sl, [sp, #32]
 80a5580:	f89a 3000 	ldrb.w	r3, [sl]
 80a5584:	2b45      	cmp	r3, #69	; 0x45
 80a5586:	d112      	bne.n	80a55ae <__strftime+0x7e>
 80a5588:	f10a 0a01 	add.w	sl, sl, #1
 80a558c:	e011      	b.n	80a55b2 <__strftime+0x82>
 80a558e:	1e69      	subs	r1, r5, #1
 80a5590:	42a1      	cmp	r1, r4
 80a5592:	d802      	bhi.n	80a559a <__strftime+0x6a>
 80a5594:	2400      	movs	r4, #0
 80a5596:	f000 bcb5 	b.w	80a5f04 <__strftime+0x9d4>
 80a559a:	553b      	strb	r3, [r7, r4]
 80a559c:	3201      	adds	r2, #1
 80a559e:	3401      	adds	r4, #1
 80a55a0:	e7cf      	b.n	80a5542 <__strftime+0x12>
 80a55a2:	f102 0a02 	add.w	sl, r2, #2
 80a55a6:	e7de      	b.n	80a5566 <__strftime+0x36>
 80a55a8:	f04f 0800 	mov.w	r8, #0
 80a55ac:	e7e8      	b.n	80a5580 <__strftime+0x50>
 80a55ae:	2b4f      	cmp	r3, #79	; 0x4f
 80a55b0:	d0ea      	beq.n	80a5588 <__strftime+0x58>
 80a55b2:	f89a 0000 	ldrb.w	r0, [sl]
 80a55b6:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 80a55ba:	2b55      	cmp	r3, #85	; 0x55
 80a55bc:	d8ea      	bhi.n	80a5594 <__strftime+0x64>
 80a55be:	a201      	add	r2, pc, #4	; (adr r2, 80a55c4 <__strftime+0x94>)
 80a55c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80a55c4:	080a5ef3 	.word	0x080a5ef3
 80a55c8:	080a5595 	.word	0x080a5595
 80a55cc:	080a5595 	.word	0x080a5595
 80a55d0:	080a5595 	.word	0x080a5595
 80a55d4:	080a5595 	.word	0x080a5595
 80a55d8:	080a5595 	.word	0x080a5595
 80a55dc:	080a5595 	.word	0x080a5595
 80a55e0:	080a5595 	.word	0x080a5595
 80a55e4:	080a5595 	.word	0x080a5595
 80a55e8:	080a5595 	.word	0x080a5595
 80a55ec:	080a5595 	.word	0x080a5595
 80a55f0:	080a5595 	.word	0x080a5595
 80a55f4:	080a5595 	.word	0x080a5595
 80a55f8:	080a5595 	.word	0x080a5595
 80a55fc:	080a5595 	.word	0x080a5595
 80a5600:	080a5595 	.word	0x080a5595
 80a5604:	080a5595 	.word	0x080a5595
 80a5608:	080a5595 	.word	0x080a5595
 80a560c:	080a5595 	.word	0x080a5595
 80a5610:	080a5595 	.word	0x080a5595
 80a5614:	080a5595 	.word	0x080a5595
 80a5618:	080a5595 	.word	0x080a5595
 80a561c:	080a5595 	.word	0x080a5595
 80a5620:	080a5595 	.word	0x080a5595
 80a5624:	080a5595 	.word	0x080a5595
 80a5628:	080a5595 	.word	0x080a5595
 80a562c:	080a5595 	.word	0x080a5595
 80a5630:	080a5595 	.word	0x080a5595
 80a5634:	080a5759 	.word	0x080a5759
 80a5638:	080a57b1 	.word	0x080a57b1
 80a563c:	080a5823 	.word	0x080a5823
 80a5640:	080a58bb 	.word	0x080a58bb
 80a5644:	080a5595 	.word	0x080a5595
 80a5648:	080a5905 	.word	0x080a5905
 80a564c:	080a59f9 	.word	0x080a59f9
 80a5650:	080a5b03 	.word	0x080a5b03
 80a5654:	080a5b11 	.word	0x080a5b11
 80a5658:	080a5595 	.word	0x080a5595
 80a565c:	080a5595 	.word	0x080a5595
 80a5660:	080a5595 	.word	0x080a5595
 80a5664:	080a5b41 	.word	0x080a5b41
 80a5668:	080a5595 	.word	0x080a5595
 80a566c:	080a5595 	.word	0x080a5595
 80a5670:	080a5b55 	.word	0x080a5b55
 80a5674:	080a5595 	.word	0x080a5595
 80a5678:	080a5ba5 	.word	0x080a5ba5
 80a567c:	080a5cbb 	.word	0x080a5cbb
 80a5680:	080a5ccb 	.word	0x080a5ccb
 80a5684:	080a5d1f 	.word	0x080a5d1f
 80a5688:	080a5d2f 	.word	0x080a5d2f
 80a568c:	080a5da1 	.word	0x080a5da1
 80a5690:	080a581b 	.word	0x080a581b
 80a5694:	080a5dd5 	.word	0x080a5dd5
 80a5698:	080a5ea1 	.word	0x080a5ea1
 80a569c:	080a5595 	.word	0x080a5595
 80a56a0:	080a5595 	.word	0x080a5595
 80a56a4:	080a5595 	.word	0x080a5595
 80a56a8:	080a5595 	.word	0x080a5595
 80a56ac:	080a5595 	.word	0x080a5595
 80a56b0:	080a5595 	.word	0x080a5595
 80a56b4:	080a571d 	.word	0x080a571d
 80a56b8:	080a5787 	.word	0x080a5787
 80a56bc:	080a57dd 	.word	0x080a57dd
 80a56c0:	080a5897 	.word	0x080a5897
 80a56c4:	080a5897 	.word	0x080a5897
 80a56c8:	080a5595 	.word	0x080a5595
 80a56cc:	080a595b 	.word	0x080a595b
 80a56d0:	080a5787 	.word	0x080a5787
 80a56d4:	080a5595 	.word	0x080a5595
 80a56d8:	080a5b33 	.word	0x080a5b33
 80a56dc:	080a5b03 	.word	0x080a5b03
 80a56e0:	080a5b11 	.word	0x080a5b11
 80a56e4:	080a5b3b 	.word	0x080a5b3b
 80a56e8:	080a5b45 	.word	0x080a5b45
 80a56ec:	080a5595 	.word	0x080a5595
 80a56f0:	080a5b55 	.word	0x080a5b55
 80a56f4:	080a5595 	.word	0x080a5595
 80a56f8:	080a580b 	.word	0x080a580b
 80a56fc:	080a5bb7 	.word	0x080a5bb7
 80a5700:	080a5cbf 	.word	0x080a5cbf
 80a5704:	080a5d05 	.word	0x080a5d05
 80a5708:	080a5595 	.word	0x080a5595
 80a570c:	080a5d93 	.word	0x080a5d93
 80a5710:	080a5813 	.word	0x080a5813
 80a5714:	080a5db9 	.word	0x080a5db9
 80a5718:	080a5e31 	.word	0x080a5e31
 80a571c:	69b3      	ldr	r3, [r6, #24]
 80a571e:	4aa9      	ldr	r2, [pc, #676]	; (80a59c4 <__strftime+0x494>)
 80a5720:	3318      	adds	r3, #24
 80a5722:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 80a5726:	4640      	mov	r0, r8
 80a5728:	f000 fc02 	bl	80a5f30 <strlen>
 80a572c:	f108 38ff 	add.w	r8, r8, #4294967295
 80a5730:	4420      	add	r0, r4
 80a5732:	1e6b      	subs	r3, r5, #1
 80a5734:	42a0      	cmp	r0, r4
 80a5736:	d107      	bne.n	80a5748 <__strftime+0x218>
 80a5738:	f89a 3000 	ldrb.w	r3, [sl]
 80a573c:	2b00      	cmp	r3, #0
 80a573e:	f000 83de 	beq.w	80a5efe <__strftime+0x9ce>
 80a5742:	f10a 0201 	add.w	r2, sl, #1
 80a5746:	e6fc      	b.n	80a5542 <__strftime+0x12>
 80a5748:	42a3      	cmp	r3, r4
 80a574a:	f67f af23 	bls.w	80a5594 <__strftime+0x64>
 80a574e:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80a5752:	553a      	strb	r2, [r7, r4]
 80a5754:	3401      	adds	r4, #1
 80a5756:	e7ed      	b.n	80a5734 <__strftime+0x204>
 80a5758:	69b2      	ldr	r2, [r6, #24]
 80a575a:	4b9a      	ldr	r3, [pc, #616]	; (80a59c4 <__strftime+0x494>)
 80a575c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80a5760:	f8d3 807c 	ldr.w	r8, [r3, #124]	; 0x7c
 80a5764:	4640      	mov	r0, r8
 80a5766:	f000 fbe3 	bl	80a5f30 <strlen>
 80a576a:	f108 38ff 	add.w	r8, r8, #4294967295
 80a576e:	4420      	add	r0, r4
 80a5770:	1e6b      	subs	r3, r5, #1
 80a5772:	42a0      	cmp	r0, r4
 80a5774:	d0e0      	beq.n	80a5738 <__strftime+0x208>
 80a5776:	42a3      	cmp	r3, r4
 80a5778:	f67f af0c 	bls.w	80a5594 <__strftime+0x64>
 80a577c:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80a5780:	553a      	strb	r2, [r7, r4]
 80a5782:	3401      	adds	r4, #1
 80a5784:	e7f5      	b.n	80a5772 <__strftime+0x242>
 80a5786:	4b8f      	ldr	r3, [pc, #572]	; (80a59c4 <__strftime+0x494>)
 80a5788:	6932      	ldr	r2, [r6, #16]
 80a578a:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 80a578e:	4640      	mov	r0, r8
 80a5790:	f000 fbce 	bl	80a5f30 <strlen>
 80a5794:	f108 38ff 	add.w	r8, r8, #4294967295
 80a5798:	4420      	add	r0, r4
 80a579a:	1e6b      	subs	r3, r5, #1
 80a579c:	42a0      	cmp	r0, r4
 80a579e:	d0cb      	beq.n	80a5738 <__strftime+0x208>
 80a57a0:	42a3      	cmp	r3, r4
 80a57a2:	f67f aef7 	bls.w	80a5594 <__strftime+0x64>
 80a57a6:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80a57aa:	553a      	strb	r2, [r7, r4]
 80a57ac:	3401      	adds	r4, #1
 80a57ae:	e7f5      	b.n	80a579c <__strftime+0x26c>
 80a57b0:	6933      	ldr	r3, [r6, #16]
 80a57b2:	4a84      	ldr	r2, [pc, #528]	; (80a59c4 <__strftime+0x494>)
 80a57b4:	330c      	adds	r3, #12
 80a57b6:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 80a57ba:	4640      	mov	r0, r8
 80a57bc:	f000 fbb8 	bl	80a5f30 <strlen>
 80a57c0:	f108 38ff 	add.w	r8, r8, #4294967295
 80a57c4:	4420      	add	r0, r4
 80a57c6:	1e6b      	subs	r3, r5, #1
 80a57c8:	42a0      	cmp	r0, r4
 80a57ca:	d0b5      	beq.n	80a5738 <__strftime+0x208>
 80a57cc:	42a3      	cmp	r3, r4
 80a57ce:	f67f aee1 	bls.w	80a5594 <__strftime+0x64>
 80a57d2:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80a57d6:	553a      	strb	r2, [r7, r4]
 80a57d8:	3401      	adds	r4, #1
 80a57da:	e7f5      	b.n	80a57c8 <__strftime+0x298>
 80a57dc:	4b79      	ldr	r3, [pc, #484]	; (80a59c4 <__strftime+0x494>)
 80a57de:	f8d3 80a0 	ldr.w	r8, [r3, #160]	; 0xa0
 80a57e2:	4640      	mov	r0, r8
 80a57e4:	f000 fba4 	bl	80a5f30 <strlen>
 80a57e8:	f898 3000 	ldrb.w	r3, [r8]
 80a57ec:	2b00      	cmp	r3, #0
 80a57ee:	d0a3      	beq.n	80a5738 <__strftime+0x208>
 80a57f0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80a57f2:	4642      	mov	r2, r8
 80a57f4:	9300      	str	r3, [sp, #0]
 80a57f6:	4633      	mov	r3, r6
 80a57f8:	1b29      	subs	r1, r5, r4
 80a57fa:	1938      	adds	r0, r7, r4
 80a57fc:	f7ff fe98 	bl	80a5530 <__strftime>
 80a5800:	2800      	cmp	r0, #0
 80a5802:	f77f aec7 	ble.w	80a5594 <__strftime+0x64>
 80a5806:	4404      	add	r4, r0
 80a5808:	e796      	b.n	80a5738 <__strftime+0x208>
 80a580a:	4b6e      	ldr	r3, [pc, #440]	; (80a59c4 <__strftime+0x494>)
 80a580c:	f8d3 80e4 	ldr.w	r8, [r3, #228]	; 0xe4
 80a5810:	e7e7      	b.n	80a57e2 <__strftime+0x2b2>
 80a5812:	4b6c      	ldr	r3, [pc, #432]	; (80a59c4 <__strftime+0x494>)
 80a5814:	f8d3 809c 	ldr.w	r8, [r3, #156]	; 0x9c
 80a5818:	e7e3      	b.n	80a57e2 <__strftime+0x2b2>
 80a581a:	4b6a      	ldr	r3, [pc, #424]	; (80a59c4 <__strftime+0x494>)
 80a581c:	f8d3 8098 	ldr.w	r8, [r3, #152]	; 0x98
 80a5820:	e7df      	b.n	80a57e2 <__strftime+0x2b2>
 80a5822:	4969      	ldr	r1, [pc, #420]	; (80a59c8 <__strftime+0x498>)
 80a5824:	f8d6 b014 	ldr.w	fp, [r6, #20]
 80a5828:	458b      	cmp	fp, r1
 80a582a:	bfac      	ite	ge
 80a582c:	2100      	movge	r1, #0
 80a582e:	2101      	movlt	r1, #1
 80a5830:	f1bb 0f00 	cmp.w	fp, #0
 80a5834:	db10      	blt.n	80a5858 <__strftime+0x328>
 80a5836:	2064      	movs	r0, #100	; 0x64
 80a5838:	fb9b f0f0 	sdiv	r0, fp, r0
 80a583c:	3013      	adds	r0, #19
 80a583e:	f1b9 0f00 	cmp.w	r9, #0
 80a5842:	d013      	beq.n	80a586c <__strftime+0x33c>
 80a5844:	2863      	cmp	r0, #99	; 0x63
 80a5846:	dd24      	ble.n	80a5892 <__strftime+0x362>
 80a5848:	4a60      	ldr	r2, [pc, #384]	; (80a59cc <__strftime+0x49c>)
 80a584a:	4b61      	ldr	r3, [pc, #388]	; (80a59d0 <__strftime+0x4a0>)
 80a584c:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
 80a5850:	bf18      	it	ne
 80a5852:	4613      	movne	r3, r2
 80a5854:	4a5f      	ldr	r2, [pc, #380]	; (80a59d4 <__strftime+0x4a4>)
 80a5856:	e00b      	b.n	80a5870 <__strftime+0x340>
 80a5858:	f20b 706c 	addw	r0, fp, #1900	; 0x76c
 80a585c:	9105      	str	r1, [sp, #20]
 80a585e:	f000 feef 	bl	80a6640 <abs>
 80a5862:	2364      	movs	r3, #100	; 0x64
 80a5864:	9905      	ldr	r1, [sp, #20]
 80a5866:	fb90 f0f3 	sdiv	r0, r0, r3
 80a586a:	e7e8      	b.n	80a583e <__strftime+0x30e>
 80a586c:	4b57      	ldr	r3, [pc, #348]	; (80a59cc <__strftime+0x49c>)
 80a586e:	4a5a      	ldr	r2, [pc, #360]	; (80a59d8 <__strftime+0x4a8>)
 80a5870:	f1b8 0f02 	cmp.w	r8, #2
 80a5874:	bf2c      	ite	cs
 80a5876:	ebc1 0108 	rsbcs	r1, r1, r8
 80a587a:	f1c1 0102 	rsbcc	r1, r1, #2
 80a587e:	9001      	str	r0, [sp, #4]
 80a5880:	9100      	str	r1, [sp, #0]
 80a5882:	4851      	ldr	r0, [pc, #324]	; (80a59c8 <__strftime+0x498>)
 80a5884:	4955      	ldr	r1, [pc, #340]	; (80a59dc <__strftime+0x4ac>)
 80a5886:	4583      	cmp	fp, r0
 80a5888:	bfb8      	it	lt
 80a588a:	460b      	movlt	r3, r1
 80a588c:	1b29      	subs	r1, r5, r4
 80a588e:	1938      	adds	r0, r7, r4
 80a5890:	e029      	b.n	80a58e6 <__strftime+0x3b6>
 80a5892:	4b4e      	ldr	r3, [pc, #312]	; (80a59cc <__strftime+0x49c>)
 80a5894:	e7de      	b.n	80a5854 <__strftime+0x324>
 80a5896:	4952      	ldr	r1, [pc, #328]	; (80a59e0 <__strftime+0x4b0>)
 80a5898:	4a52      	ldr	r2, [pc, #328]	; (80a59e4 <__strftime+0x4b4>)
 80a589a:	68f3      	ldr	r3, [r6, #12]
 80a589c:	2864      	cmp	r0, #100	; 0x64
 80a589e:	bf08      	it	eq
 80a58a0:	460a      	moveq	r2, r1
 80a58a2:	1b29      	subs	r1, r5, r4
 80a58a4:	1938      	adds	r0, r7, r4
 80a58a6:	f7fc fdc1 	bl	80a242c <sniprintf>
 80a58aa:	2800      	cmp	r0, #0
 80a58ac:	f6ff ae72 	blt.w	80a5594 <__strftime+0x64>
 80a58b0:	4404      	add	r4, r0
 80a58b2:	42a5      	cmp	r5, r4
 80a58b4:	f63f af40 	bhi.w	80a5738 <__strftime+0x208>
 80a58b8:	e66c      	b.n	80a5594 <__strftime+0x64>
 80a58ba:	6970      	ldr	r0, [r6, #20]
 80a58bc:	6933      	ldr	r3, [r6, #16]
 80a58be:	2800      	cmp	r0, #0
 80a58c0:	f103 0b01 	add.w	fp, r3, #1
 80a58c4:	eb07 0804 	add.w	r8, r7, r4
 80a58c8:	68f3      	ldr	r3, [r6, #12]
 80a58ca:	eba5 0904 	sub.w	r9, r5, r4
 80a58ce:	db0d      	blt.n	80a58ec <__strftime+0x3bc>
 80a58d0:	2164      	movs	r1, #100	; 0x64
 80a58d2:	fb90 f2f1 	sdiv	r2, r0, r1
 80a58d6:	fb01 0212 	mls	r2, r1, r2, r0
 80a58da:	e9cd 3200 	strd	r3, r2, [sp]
 80a58de:	4649      	mov	r1, r9
 80a58e0:	465b      	mov	r3, fp
 80a58e2:	4640      	mov	r0, r8
 80a58e4:	4a40      	ldr	r2, [pc, #256]	; (80a59e8 <__strftime+0x4b8>)
 80a58e6:	f7fc fda1 	bl	80a242c <sniprintf>
 80a58ea:	e7de      	b.n	80a58aa <__strftime+0x37a>
 80a58ec:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80a58f0:	9305      	str	r3, [sp, #20]
 80a58f2:	f000 fea5 	bl	80a6640 <abs>
 80a58f6:	2264      	movs	r2, #100	; 0x64
 80a58f8:	fb90 f1f2 	sdiv	r1, r0, r2
 80a58fc:	9b05      	ldr	r3, [sp, #20]
 80a58fe:	fb01 0212 	mls	r2, r1, r2, r0
 80a5902:	e7ea      	b.n	80a58da <__strftime+0x3aa>
 80a5904:	2325      	movs	r3, #37	; 0x25
 80a5906:	f88d 3020 	strb.w	r3, [sp, #32]
 80a590a:	f1b9 0f00 	cmp.w	r9, #0
 80a590e:	d013      	beq.n	80a5938 <__strftime+0x408>
 80a5910:	f1b8 0f06 	cmp.w	r8, #6
 80a5914:	bf38      	it	cc
 80a5916:	f04f 0806 	movcc.w	r8, #6
 80a591a:	f1b8 0306 	subs.w	r3, r8, #6
 80a591e:	f88d 9021 	strb.w	r9, [sp, #33]	; 0x21
 80a5922:	d10e      	bne.n	80a5942 <__strftime+0x412>
 80a5924:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 80a5928:	4930      	ldr	r1, [pc, #192]	; (80a59ec <__strftime+0x4bc>)
 80a592a:	f7ff fd7a 	bl	80a5422 <strcpy>
 80a592e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80a5930:	aa08      	add	r2, sp, #32
 80a5932:	9300      	str	r3, [sp, #0]
 80a5934:	4633      	mov	r3, r6
 80a5936:	e75f      	b.n	80a57f8 <__strftime+0x2c8>
 80a5938:	f04f 092b 	mov.w	r9, #43	; 0x2b
 80a593c:	f04f 080a 	mov.w	r8, #10
 80a5940:	e7eb      	b.n	80a591a <__strftime+0x3ea>
 80a5942:	211e      	movs	r1, #30
 80a5944:	4a2a      	ldr	r2, [pc, #168]	; (80a59f0 <__strftime+0x4c0>)
 80a5946:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 80a594a:	f7fc fd6f 	bl	80a242c <sniprintf>
 80a594e:	2800      	cmp	r0, #0
 80a5950:	dde8      	ble.n	80a5924 <__strftime+0x3f4>
 80a5952:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 80a5956:	4418      	add	r0, r3
 80a5958:	e7e6      	b.n	80a5928 <__strftime+0x3f8>
 80a595a:	4630      	mov	r0, r6
 80a595c:	f7ff fd86 	bl	80a546c <iso_year_adjust>
 80a5960:	4680      	mov	r8, r0
 80a5962:	6970      	ldr	r0, [r6, #20]
 80a5964:	2800      	cmp	r0, #0
 80a5966:	db11      	blt.n	80a598c <__strftime+0x45c>
 80a5968:	2264      	movs	r2, #100	; 0x64
 80a596a:	fb90 f3f2 	sdiv	r3, r0, r2
 80a596e:	fb02 0313 	mls	r3, r2, r3, r0
 80a5972:	4498      	add	r8, r3
 80a5974:	2364      	movs	r3, #100	; 0x64
 80a5976:	fb98 f0f3 	sdiv	r0, r8, r3
 80a597a:	fb03 8810 	mls	r8, r3, r0, r8
 80a597e:	4498      	add	r8, r3
 80a5980:	fbb8 f2f3 	udiv	r2, r8, r3
 80a5984:	fb03 8312 	mls	r3, r3, r2, r8
 80a5988:	4a15      	ldr	r2, [pc, #84]	; (80a59e0 <__strftime+0x4b0>)
 80a598a:	e78a      	b.n	80a58a2 <__strftime+0x372>
 80a598c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80a5990:	f000 fe56 	bl	80a6640 <abs>
 80a5994:	2364      	movs	r3, #100	; 0x64
 80a5996:	fb90 f2f3 	sdiv	r2, r0, r3
 80a599a:	f1b8 0f00 	cmp.w	r8, #0
 80a599e:	fb02 0313 	mls	r3, r2, r3, r0
 80a59a2:	da06      	bge.n	80a59b2 <__strftime+0x482>
 80a59a4:	6971      	ldr	r1, [r6, #20]
 80a59a6:	4a13      	ldr	r2, [pc, #76]	; (80a59f4 <__strftime+0x4c4>)
 80a59a8:	4291      	cmp	r1, r2
 80a59aa:	bfb8      	it	lt
 80a59ac:	f04f 0801 	movlt.w	r8, #1
 80a59b0:	e7df      	b.n	80a5972 <__strftime+0x442>
 80a59b2:	d0de      	beq.n	80a5972 <__strftime+0x442>
 80a59b4:	6971      	ldr	r1, [r6, #20]
 80a59b6:	4a04      	ldr	r2, [pc, #16]	; (80a59c8 <__strftime+0x498>)
 80a59b8:	4291      	cmp	r1, r2
 80a59ba:	bfb8      	it	lt
 80a59bc:	f04f 38ff 	movlt.w	r8, #4294967295
 80a59c0:	e7d7      	b.n	80a5972 <__strftime+0x442>
 80a59c2:	bf00      	nop
 80a59c4:	080a7674 	.word	0x080a7674
 80a59c8:	fffff894 	.word	0xfffff894
 80a59cc:	080a6ac2 	.word	0x080a6ac2
 80a59d0:	080a74fb 	.word	0x080a74fb
 80a59d4:	080a74f3 	.word	0x080a74f3
 80a59d8:	080a74ec 	.word	0x080a74ec
 80a59dc:	080a74fd 	.word	0x080a74fd
 80a59e0:	080a750d 	.word	0x080a750d
 80a59e4:	080a74ff 	.word	0x080a74ff
 80a59e8:	080a7503 	.word	0x080a7503
 80a59ec:	080a7516 	.word	0x080a7516
 80a59f0:	080a7512 	.word	0x080a7512
 80a59f4:	fffff895 	.word	0xfffff895
 80a59f8:	4bb7      	ldr	r3, [pc, #732]	; (80a5cd8 <__strftime+0x7a8>)
 80a59fa:	6971      	ldr	r1, [r6, #20]
 80a59fc:	4630      	mov	r0, r6
 80a59fe:	4299      	cmp	r1, r3
 80a5a00:	bfac      	ite	ge
 80a5a02:	2300      	movge	r3, #0
 80a5a04:	2301      	movlt	r3, #1
 80a5a06:	e9cd 3105 	strd	r3, r1, [sp, #20]
 80a5a0a:	f7ff fd2f 	bl	80a546c <iso_year_adjust>
 80a5a0e:	9906      	ldr	r1, [sp, #24]
 80a5a10:	4683      	mov	fp, r0
 80a5a12:	2900      	cmp	r1, #0
 80a5a14:	db2a      	blt.n	80a5a6c <__strftime+0x53c>
 80a5a16:	2264      	movs	r2, #100	; 0x64
 80a5a18:	fb91 f2f2 	sdiv	r2, r1, r2
 80a5a1c:	3213      	adds	r2, #19
 80a5a1e:	6970      	ldr	r0, [r6, #20]
 80a5a20:	2800      	cmp	r0, #0
 80a5a22:	db2d      	blt.n	80a5a80 <__strftime+0x550>
 80a5a24:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80a5a28:	fb90 fefc 	sdiv	lr, r0, ip
 80a5a2c:	fb0c 001e 	mls	r0, ip, lr, r0
 80a5a30:	f1bb 0f00 	cmp.w	fp, #0
 80a5a34:	da33      	bge.n	80a5a9e <__strftime+0x56e>
 80a5a36:	6971      	ldr	r1, [r6, #20]
 80a5a38:	4ba8      	ldr	r3, [pc, #672]	; (80a5cdc <__strftime+0x7ac>)
 80a5a3a:	4299      	cmp	r1, r3
 80a5a3c:	db39      	blt.n	80a5ab2 <__strftime+0x582>
 80a5a3e:	eb0b 0300 	add.w	r3, fp, r0
 80a5a42:	1c59      	adds	r1, r3, #1
 80a5a44:	d13a      	bne.n	80a5abc <__strftime+0x58c>
 80a5a46:	2363      	movs	r3, #99	; 0x63
 80a5a48:	3a01      	subs	r2, #1
 80a5a4a:	2064      	movs	r0, #100	; 0x64
 80a5a4c:	fb00 3202 	mla	r2, r0, r2, r3
 80a5a50:	9b05      	ldr	r3, [sp, #20]
 80a5a52:	2b00      	cmp	r3, #0
 80a5a54:	d037      	beq.n	80a5ac6 <__strftime+0x596>
 80a5a56:	232d      	movs	r3, #45	; 0x2d
 80a5a58:	f88d 3020 	strb.w	r3, [sp, #32]
 80a5a5c:	f1b8 0f00 	cmp.w	r8, #0
 80a5a60:	d001      	beq.n	80a5a66 <__strftime+0x536>
 80a5a62:	f108 38ff 	add.w	r8, r8, #4294967295
 80a5a66:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 80a5a6a:	e037      	b.n	80a5adc <__strftime+0x5ac>
 80a5a6c:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 80a5a70:	9106      	str	r1, [sp, #24]
 80a5a72:	f000 fde5 	bl	80a6640 <abs>
 80a5a76:	2264      	movs	r2, #100	; 0x64
 80a5a78:	9906      	ldr	r1, [sp, #24]
 80a5a7a:	fb90 f2f2 	sdiv	r2, r0, r2
 80a5a7e:	e7ce      	b.n	80a5a1e <__strftime+0x4ee>
 80a5a80:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80a5a84:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80a5a88:	f000 fdda 	bl	80a6640 <abs>
 80a5a8c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80a5a90:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80a5a94:	fb90 fefc 	sdiv	lr, r0, ip
 80a5a98:	fb0e 001c 	mls	r0, lr, ip, r0
 80a5a9c:	e7c8      	b.n	80a5a30 <__strftime+0x500>
 80a5a9e:	d0ce      	beq.n	80a5a3e <__strftime+0x50e>
 80a5aa0:	4b8d      	ldr	r3, [pc, #564]	; (80a5cd8 <__strftime+0x7a8>)
 80a5aa2:	4299      	cmp	r1, r3
 80a5aa4:	bfb6      	itet	lt
 80a5aa6:	2301      	movlt	r3, #1
 80a5aa8:	2300      	movge	r3, #0
 80a5aaa:	f04f 3bff 	movlt.w	fp, #4294967295
 80a5aae:	9305      	str	r3, [sp, #20]
 80a5ab0:	e7c5      	b.n	80a5a3e <__strftime+0x50e>
 80a5ab2:	f04f 0b01 	mov.w	fp, #1
 80a5ab6:	f8cd b014 	str.w	fp, [sp, #20]
 80a5aba:	e7c0      	b.n	80a5a3e <__strftime+0x50e>
 80a5abc:	2b64      	cmp	r3, #100	; 0x64
 80a5abe:	bf04      	itt	eq
 80a5ac0:	2300      	moveq	r3, #0
 80a5ac2:	3201      	addeq	r2, #1
 80a5ac4:	e7c1      	b.n	80a5a4a <__strftime+0x51a>
 80a5ac6:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
 80a5aca:	d106      	bne.n	80a5ada <__strftime+0x5aa>
 80a5acc:	f242 730f 	movw	r3, #9999	; 0x270f
 80a5ad0:	429a      	cmp	r2, r3
 80a5ad2:	d902      	bls.n	80a5ada <__strftime+0x5aa>
 80a5ad4:	f88d 9020 	strb.w	r9, [sp, #32]
 80a5ad8:	e7c0      	b.n	80a5a5c <__strftime+0x52c>
 80a5ada:	ab08      	add	r3, sp, #32
 80a5adc:	2125      	movs	r1, #37	; 0x25
 80a5ade:	7019      	strb	r1, [r3, #0]
 80a5ae0:	f1b9 0f00 	cmp.w	r9, #0
 80a5ae4:	d109      	bne.n	80a5afa <__strftime+0x5ca>
 80a5ae6:	1c58      	adds	r0, r3, #1
 80a5ae8:	497d      	ldr	r1, [pc, #500]	; (80a5ce0 <__strftime+0x7b0>)
 80a5aea:	9205      	str	r2, [sp, #20]
 80a5aec:	f7ff fc99 	bl	80a5422 <strcpy>
 80a5af0:	9a05      	ldr	r2, [sp, #20]
 80a5af2:	9200      	str	r2, [sp, #0]
 80a5af4:	4643      	mov	r3, r8
 80a5af6:	aa08      	add	r2, sp, #32
 80a5af8:	e058      	b.n	80a5bac <__strftime+0x67c>
 80a5afa:	2130      	movs	r1, #48	; 0x30
 80a5afc:	1c98      	adds	r0, r3, #2
 80a5afe:	7059      	strb	r1, [r3, #1]
 80a5b00:	e7f2      	b.n	80a5ae8 <__strftime+0x5b8>
 80a5b02:	4978      	ldr	r1, [pc, #480]	; (80a5ce4 <__strftime+0x7b4>)
 80a5b04:	4a78      	ldr	r2, [pc, #480]	; (80a5ce8 <__strftime+0x7b8>)
 80a5b06:	68b3      	ldr	r3, [r6, #8]
 80a5b08:	286b      	cmp	r0, #107	; 0x6b
 80a5b0a:	bf08      	it	eq
 80a5b0c:	460a      	moveq	r2, r1
 80a5b0e:	e6c8      	b.n	80a58a2 <__strftime+0x372>
 80a5b10:	68b3      	ldr	r3, [r6, #8]
 80a5b12:	b163      	cbz	r3, 80a5b2e <__strftime+0x5fe>
 80a5b14:	2b0c      	cmp	r3, #12
 80a5b16:	d004      	beq.n	80a5b22 <__strftime+0x5f2>
 80a5b18:	210c      	movs	r1, #12
 80a5b1a:	fb93 f2f1 	sdiv	r2, r3, r1
 80a5b1e:	fb01 3312 	mls	r3, r1, r2, r3
 80a5b22:	4971      	ldr	r1, [pc, #452]	; (80a5ce8 <__strftime+0x7b8>)
 80a5b24:	4a6f      	ldr	r2, [pc, #444]	; (80a5ce4 <__strftime+0x7b4>)
 80a5b26:	2849      	cmp	r0, #73	; 0x49
 80a5b28:	bf08      	it	eq
 80a5b2a:	460a      	moveq	r2, r1
 80a5b2c:	e6b9      	b.n	80a58a2 <__strftime+0x372>
 80a5b2e:	230c      	movs	r3, #12
 80a5b30:	e7f7      	b.n	80a5b22 <__strftime+0x5f2>
 80a5b32:	69f3      	ldr	r3, [r6, #28]
 80a5b34:	4a6d      	ldr	r2, [pc, #436]	; (80a5cec <__strftime+0x7bc>)
 80a5b36:	3301      	adds	r3, #1
 80a5b38:	e6b3      	b.n	80a58a2 <__strftime+0x372>
 80a5b3a:	6933      	ldr	r3, [r6, #16]
 80a5b3c:	3301      	adds	r3, #1
 80a5b3e:	e723      	b.n	80a5988 <__strftime+0x458>
 80a5b40:	6873      	ldr	r3, [r6, #4]
 80a5b42:	e721      	b.n	80a5988 <__strftime+0x458>
 80a5b44:	1e6b      	subs	r3, r5, #1
 80a5b46:	42a3      	cmp	r3, r4
 80a5b48:	f67f ad24 	bls.w	80a5594 <__strftime+0x64>
 80a5b4c:	230a      	movs	r3, #10
 80a5b4e:	553b      	strb	r3, [r7, r4]
 80a5b50:	3401      	adds	r4, #1
 80a5b52:	e5f1      	b.n	80a5738 <__strftime+0x208>
 80a5b54:	68b3      	ldr	r3, [r6, #8]
 80a5b56:	2b0b      	cmp	r3, #11
 80a5b58:	bfcc      	ite	gt
 80a5b5a:	22a4      	movgt	r2, #164	; 0xa4
 80a5b5c:	22a0      	movle	r2, #160	; 0xa0
 80a5b5e:	4b64      	ldr	r3, [pc, #400]	; (80a5cf0 <__strftime+0x7c0>)
 80a5b60:	4413      	add	r3, r2
 80a5b62:	f8d3 8004 	ldr.w	r8, [r3, #4]
 80a5b66:	4640      	mov	r0, r8
 80a5b68:	f000 f9e2 	bl	80a5f30 <strlen>
 80a5b6c:	f108 32ff 	add.w	r2, r8, #4294967295
 80a5b70:	4420      	add	r0, r4
 80a5b72:	f105 3cff 	add.w	ip, r5, #4294967295
 80a5b76:	42a0      	cmp	r0, r4
 80a5b78:	f43f adde 	beq.w	80a5738 <__strftime+0x208>
 80a5b7c:	45a4      	cmp	ip, r4
 80a5b7e:	f67f ad09 	bls.w	80a5594 <__strftime+0x64>
 80a5b82:	f89a 1000 	ldrb.w	r1, [sl]
 80a5b86:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80a5b8a:	2950      	cmp	r1, #80	; 0x50
 80a5b8c:	d107      	bne.n	80a5b9e <__strftime+0x66e>
 80a5b8e:	4959      	ldr	r1, [pc, #356]	; (80a5cf4 <__strftime+0x7c4>)
 80a5b90:	5cc9      	ldrb	r1, [r1, r3]
 80a5b92:	f001 0103 	and.w	r1, r1, #3
 80a5b96:	2901      	cmp	r1, #1
 80a5b98:	bf08      	it	eq
 80a5b9a:	3320      	addeq	r3, #32
 80a5b9c:	b2db      	uxtb	r3, r3
 80a5b9e:	553b      	strb	r3, [r7, r4]
 80a5ba0:	3401      	adds	r4, #1
 80a5ba2:	e7e8      	b.n	80a5b76 <__strftime+0x646>
 80a5ba4:	6873      	ldr	r3, [r6, #4]
 80a5ba6:	4a54      	ldr	r2, [pc, #336]	; (80a5cf8 <__strftime+0x7c8>)
 80a5ba8:	9300      	str	r3, [sp, #0]
 80a5baa:	68b3      	ldr	r3, [r6, #8]
 80a5bac:	1b29      	subs	r1, r5, r4
 80a5bae:	1938      	adds	r0, r7, r4
 80a5bb0:	f7fc fc3c 	bl	80a242c <sniprintf>
 80a5bb4:	e679      	b.n	80a58aa <__strftime+0x37a>
 80a5bb6:	6a33      	ldr	r3, [r6, #32]
 80a5bb8:	2b00      	cmp	r3, #0
 80a5bba:	db7b      	blt.n	80a5cb4 <__strftime+0x784>
 80a5bbc:	f000 fbae 	bl	80a631c <__tz_lock>
 80a5bc0:	9b04      	ldr	r3, [sp, #16]
 80a5bc2:	b90b      	cbnz	r3, 80a5bc8 <__strftime+0x698>
 80a5bc4:	f000 fbb6 	bl	80a6334 <_tzset_unlocked>
 80a5bc8:	f000 fd94 	bl	80a66f4 <__gettzinfo>
 80a5bcc:	6a33      	ldr	r3, [r6, #32]
 80a5bce:	2b00      	cmp	r3, #0
 80a5bd0:	bfcc      	ite	gt
 80a5bd2:	2350      	movgt	r3, #80	; 0x50
 80a5bd4:	2328      	movle	r3, #40	; 0x28
 80a5bd6:	58c3      	ldr	r3, [r0, r3]
 80a5bd8:	f1c3 0900 	rsb	r9, r3, #0
 80a5bdc:	f000 fba4 	bl	80a6328 <__tz_unlock>
 80a5be0:	2301      	movs	r3, #1
 80a5be2:	9304      	str	r3, [sp, #16]
 80a5be4:	f8d6 c014 	ldr.w	ip, [r6, #20]
 80a5be8:	eba5 0e04 	sub.w	lr, r5, r4
 80a5bec:	4662      	mov	r2, ip
 80a5bee:	f1bc 0145 	subs.w	r1, ip, #69	; 0x45
 80a5bf2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80a5bf6:	9102      	str	r1, [sp, #8]
 80a5bf8:	f143 31ff 	adc.w	r1, r3, #4294967295
 80a5bfc:	9103      	str	r1, [sp, #12]
 80a5bfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a5c02:	2800      	cmp	r0, #0
 80a5c04:	f171 0100 	sbcs.w	r1, r1, #0
 80a5c08:	eb07 0804 	add.w	r8, r7, r4
 80a5c0c:	da05      	bge.n	80a5c1a <__strftime+0x6ea>
 80a5c0e:	f1bc 0142 	subs.w	r1, ip, #66	; 0x42
 80a5c12:	f143 33ff 	adc.w	r3, r3, #4294967295
 80a5c16:	9102      	str	r1, [sp, #8]
 80a5c18:	9303      	str	r3, [sp, #12]
 80a5c1a:	9b02      	ldr	r3, [sp, #8]
 80a5c1c:	f10c 32ff 	add.w	r2, ip, #4294967295
 80a5c20:	0898      	lsrs	r0, r3, #2
 80a5c22:	9b03      	ldr	r3, [sp, #12]
 80a5c24:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 80a5c28:	1099      	asrs	r1, r3, #2
 80a5c2a:	2364      	movs	r3, #100	; 0x64
 80a5c2c:	fb92 f3f3 	sdiv	r3, r2, r3
 80a5c30:	1ac0      	subs	r0, r0, r3
 80a5c32:	eb61 71e3 	sbc.w	r1, r1, r3, asr #31
 80a5c36:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80a5c3a:	f20c 122b 	addw	r2, ip, #299	; 0x12b
 80a5c3e:	fb92 f3f3 	sdiv	r3, r2, r3
 80a5c42:	18c0      	adds	r0, r0, r3
 80a5c44:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 80a5c48:	f240 136d 	movw	r3, #365	; 0x16d
 80a5c4c:	f1ac 0c46 	sub.w	ip, ip, #70	; 0x46
 80a5c50:	fb03 fc0c 	mul.w	ip, r3, ip
 80a5c54:	eb10 000c 	adds.w	r0, r0, ip
 80a5c58:	eb41 71ec 	adc.w	r1, r1, ip, asr #31
 80a5c5c:	f04f 0c18 	mov.w	ip, #24
 80a5c60:	69f3      	ldr	r3, [r6, #28]
 80a5c62:	18c0      	adds	r0, r0, r3
 80a5c64:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 80a5c68:	fba0 230c 	umull	r2, r3, r0, ip
 80a5c6c:	fb0c 3301 	mla	r3, ip, r1, r3
 80a5c70:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 80a5c74:	68b1      	ldr	r1, [r6, #8]
 80a5c76:	1852      	adds	r2, r2, r1
 80a5c78:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 80a5c7c:	fba2 010c 	umull	r0, r1, r2, ip
 80a5c80:	fb0c 1103 	mla	r1, ip, r3, r1
 80a5c84:	6873      	ldr	r3, [r6, #4]
 80a5c86:	18c0      	adds	r0, r0, r3
 80a5c88:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 80a5c8c:	fba0 230c 	umull	r2, r3, r0, ip
 80a5c90:	fb0c 3301 	mla	r3, ip, r1, r3
 80a5c94:	6831      	ldr	r1, [r6, #0]
 80a5c96:	4640      	mov	r0, r8
 80a5c98:	1852      	adds	r2, r2, r1
 80a5c9a:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 80a5c9e:	ebb2 0209 	subs.w	r2, r2, r9
 80a5ca2:	eb63 73e9 	sbc.w	r3, r3, r9, asr #31
 80a5ca6:	e9cd 2300 	strd	r2, r3, [sp]
 80a5caa:	4671      	mov	r1, lr
 80a5cac:	4a13      	ldr	r2, [pc, #76]	; (80a5cfc <__strftime+0x7cc>)
 80a5cae:	f7fc fbbd 	bl	80a242c <sniprintf>
 80a5cb2:	e5fa      	b.n	80a58aa <__strftime+0x37a>
 80a5cb4:	f04f 0900 	mov.w	r9, #0
 80a5cb8:	e794      	b.n	80a5be4 <__strftime+0x6b4>
 80a5cba:	6833      	ldr	r3, [r6, #0]
 80a5cbc:	e664      	b.n	80a5988 <__strftime+0x458>
 80a5cbe:	1e6b      	subs	r3, r5, #1
 80a5cc0:	42a3      	cmp	r3, r4
 80a5cc2:	f67f ac67 	bls.w	80a5594 <__strftime+0x64>
 80a5cc6:	2309      	movs	r3, #9
 80a5cc8:	e741      	b.n	80a5b4e <__strftime+0x61e>
 80a5cca:	6833      	ldr	r3, [r6, #0]
 80a5ccc:	4a0c      	ldr	r2, [pc, #48]	; (80a5d00 <__strftime+0x7d0>)
 80a5cce:	9301      	str	r3, [sp, #4]
 80a5cd0:	6873      	ldr	r3, [r6, #4]
 80a5cd2:	9300      	str	r3, [sp, #0]
 80a5cd4:	68b3      	ldr	r3, [r6, #8]
 80a5cd6:	e5d9      	b.n	80a588c <__strftime+0x35c>
 80a5cd8:	fffff894 	.word	0xfffff894
 80a5cdc:	fffff895 	.word	0xfffff895
 80a5ce0:	080a751e 	.word	0x080a751e
 80a5ce4:	080a74ff 	.word	0x080a74ff
 80a5ce8:	080a750d 	.word	0x080a750d
 80a5cec:	080a7522 	.word	0x080a7522
 80a5cf0:	080a7674 	.word	0x080a7674
 80a5cf4:	080a77ad 	.word	0x080a77ad
 80a5cf8:	080a7531 	.word	0x080a7531
 80a5cfc:	080a7527 	.word	0x080a7527
 80a5d00:	080a752c 	.word	0x080a752c
 80a5d04:	1e6b      	subs	r3, r5, #1
 80a5d06:	42a3      	cmp	r3, r4
 80a5d08:	f67f ac44 	bls.w	80a5594 <__strftime+0x64>
 80a5d0c:	69b3      	ldr	r3, [r6, #24]
 80a5d0e:	193a      	adds	r2, r7, r4
 80a5d10:	3401      	adds	r4, #1
 80a5d12:	b913      	cbnz	r3, 80a5d1a <__strftime+0x7ea>
 80a5d14:	2337      	movs	r3, #55	; 0x37
 80a5d16:	7013      	strb	r3, [r2, #0]
 80a5d18:	e50e      	b.n	80a5738 <__strftime+0x208>
 80a5d1a:	3330      	adds	r3, #48	; 0x30
 80a5d1c:	e7fb      	b.n	80a5d16 <__strftime+0x7e6>
 80a5d1e:	69f3      	ldr	r3, [r6, #28]
 80a5d20:	69b2      	ldr	r2, [r6, #24]
 80a5d22:	3307      	adds	r3, #7
 80a5d24:	1a9b      	subs	r3, r3, r2
 80a5d26:	2207      	movs	r2, #7
 80a5d28:	fb93 f3f2 	sdiv	r3, r3, r2
 80a5d2c:	e62c      	b.n	80a5988 <__strftime+0x458>
 80a5d2e:	4630      	mov	r0, r6
 80a5d30:	f7ff fb9c 	bl	80a546c <iso_year_adjust>
 80a5d34:	69b2      	ldr	r2, [r6, #24]
 80a5d36:	b132      	cbz	r2, 80a5d46 <__strftime+0x816>
 80a5d38:	3a01      	subs	r2, #1
 80a5d3a:	2800      	cmp	r0, #0
 80a5d3c:	dc27      	bgt.n	80a5d8e <__strftime+0x85e>
 80a5d3e:	69f3      	ldr	r3, [r6, #28]
 80a5d40:	d103      	bne.n	80a5d4a <__strftime+0x81a>
 80a5d42:	330a      	adds	r3, #10
 80a5d44:	e7ee      	b.n	80a5d24 <__strftime+0x7f4>
 80a5d46:	2206      	movs	r2, #6
 80a5d48:	e7f7      	b.n	80a5d3a <__strftime+0x80a>
 80a5d4a:	6970      	ldr	r0, [r6, #20]
 80a5d4c:	1ad3      	subs	r3, r2, r3
 80a5d4e:	2800      	cmp	r0, #0
 80a5d50:	f240 726b 	movw	r2, #1899	; 0x76b
 80a5d54:	bfa8      	it	ge
 80a5d56:	f06f 0264 	mvnge.w	r2, #100	; 0x64
 80a5d5a:	4410      	add	r0, r2
 80a5d5c:	0782      	lsls	r2, r0, #30
 80a5d5e:	d105      	bne.n	80a5d6c <__strftime+0x83c>
 80a5d60:	2264      	movs	r2, #100	; 0x64
 80a5d62:	fb90 f1f2 	sdiv	r1, r0, r2
 80a5d66:	fb02 0111 	mls	r1, r2, r1, r0
 80a5d6a:	b971      	cbnz	r1, 80a5d8a <__strftime+0x85a>
 80a5d6c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80a5d70:	fb90 f2f1 	sdiv	r2, r0, r1
 80a5d74:	fb01 0212 	mls	r2, r1, r2, r0
 80a5d78:	fab2 f282 	clz	r2, r2
 80a5d7c:	0952      	lsrs	r2, r2, #5
 80a5d7e:	1a9a      	subs	r2, r3, r2
 80a5d80:	2a05      	cmp	r2, #5
 80a5d82:	bfb4      	ite	lt
 80a5d84:	2335      	movlt	r3, #53	; 0x35
 80a5d86:	2334      	movge	r3, #52	; 0x34
 80a5d88:	e5fe      	b.n	80a5988 <__strftime+0x458>
 80a5d8a:	2201      	movs	r2, #1
 80a5d8c:	e7f7      	b.n	80a5d7e <__strftime+0x84e>
 80a5d8e:	2301      	movs	r3, #1
 80a5d90:	e5fa      	b.n	80a5988 <__strftime+0x458>
 80a5d92:	1e6b      	subs	r3, r5, #1
 80a5d94:	42a3      	cmp	r3, r4
 80a5d96:	f67f abfd 	bls.w	80a5594 <__strftime+0x64>
 80a5d9a:	69b3      	ldr	r3, [r6, #24]
 80a5d9c:	3330      	adds	r3, #48	; 0x30
 80a5d9e:	e6d6      	b.n	80a5b4e <__strftime+0x61e>
 80a5da0:	69b3      	ldr	r3, [r6, #24]
 80a5da2:	b13b      	cbz	r3, 80a5db4 <__strftime+0x884>
 80a5da4:	3b01      	subs	r3, #1
 80a5da6:	69f2      	ldr	r2, [r6, #28]
 80a5da8:	3207      	adds	r2, #7
 80a5daa:	1ad2      	subs	r2, r2, r3
 80a5dac:	2307      	movs	r3, #7
 80a5dae:	fb92 f3f3 	sdiv	r3, r2, r3
 80a5db2:	e5e9      	b.n	80a5988 <__strftime+0x458>
 80a5db4:	2306      	movs	r3, #6
 80a5db6:	e7f6      	b.n	80a5da6 <__strftime+0x876>
 80a5db8:	6970      	ldr	r0, [r6, #20]
 80a5dba:	2800      	cmp	r0, #0
 80a5dbc:	db05      	blt.n	80a5dca <__strftime+0x89a>
 80a5dbe:	2264      	movs	r2, #100	; 0x64
 80a5dc0:	fb90 f3f2 	sdiv	r3, r0, r2
 80a5dc4:	fb03 0312 	mls	r3, r3, r2, r0
 80a5dc8:	e5de      	b.n	80a5988 <__strftime+0x458>
 80a5dca:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80a5dce:	f000 fc37 	bl	80a6640 <abs>
 80a5dd2:	e7f4      	b.n	80a5dbe <__strftime+0x88e>
 80a5dd4:	6973      	ldr	r3, [r6, #20]
 80a5dd6:	4a4d      	ldr	r2, [pc, #308]	; (80a5f0c <__strftime+0x9dc>)
 80a5dd8:	4293      	cmp	r3, r2
 80a5dda:	da0c      	bge.n	80a5df6 <__strftime+0x8c6>
 80a5ddc:	212d      	movs	r1, #45	; 0x2d
 80a5dde:	eba2 0b03 	sub.w	fp, r2, r3
 80a5de2:	f88d 1020 	strb.w	r1, [sp, #32]
 80a5de6:	f1b8 0f00 	cmp.w	r8, #0
 80a5dea:	d001      	beq.n	80a5df0 <__strftime+0x8c0>
 80a5dec:	f108 38ff 	add.w	r8, r8, #4294967295
 80a5df0:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 80a5df4:	e00c      	b.n	80a5e10 <__strftime+0x8e0>
 80a5df6:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
 80a5dfa:	f203 7b6c 	addw	fp, r3, #1900	; 0x76c
 80a5dfe:	d106      	bne.n	80a5e0e <__strftime+0x8de>
 80a5e00:	f242 730f 	movw	r3, #9999	; 0x270f
 80a5e04:	459b      	cmp	fp, r3
 80a5e06:	d902      	bls.n	80a5e0e <__strftime+0x8de>
 80a5e08:	f88d 9020 	strb.w	r9, [sp, #32]
 80a5e0c:	e7eb      	b.n	80a5de6 <__strftime+0x8b6>
 80a5e0e:	ab08      	add	r3, sp, #32
 80a5e10:	2225      	movs	r2, #37	; 0x25
 80a5e12:	701a      	strb	r2, [r3, #0]
 80a5e14:	f1b9 0f00 	cmp.w	r9, #0
 80a5e18:	d106      	bne.n	80a5e28 <__strftime+0x8f8>
 80a5e1a:	1c58      	adds	r0, r3, #1
 80a5e1c:	493c      	ldr	r1, [pc, #240]	; (80a5f10 <__strftime+0x9e0>)
 80a5e1e:	f7ff fb00 	bl	80a5422 <strcpy>
 80a5e22:	f8cd b000 	str.w	fp, [sp]
 80a5e26:	e665      	b.n	80a5af4 <__strftime+0x5c4>
 80a5e28:	2230      	movs	r2, #48	; 0x30
 80a5e2a:	1c98      	adds	r0, r3, #2
 80a5e2c:	705a      	strb	r2, [r3, #1]
 80a5e2e:	e7f5      	b.n	80a5e1c <__strftime+0x8ec>
 80a5e30:	6a33      	ldr	r3, [r6, #32]
 80a5e32:	2b00      	cmp	r3, #0
 80a5e34:	f6ff ac80 	blt.w	80a5738 <__strftime+0x208>
 80a5e38:	f000 fa70 	bl	80a631c <__tz_lock>
 80a5e3c:	9b04      	ldr	r3, [sp, #16]
 80a5e3e:	b90b      	cbnz	r3, 80a5e44 <__strftime+0x914>
 80a5e40:	f000 fa78 	bl	80a6334 <_tzset_unlocked>
 80a5e44:	f000 fc56 	bl	80a66f4 <__gettzinfo>
 80a5e48:	6a33      	ldr	r3, [r6, #32]
 80a5e4a:	eb07 0904 	add.w	r9, r7, r4
 80a5e4e:	2b00      	cmp	r3, #0
 80a5e50:	bfcc      	ite	gt
 80a5e52:	2350      	movgt	r3, #80	; 0x50
 80a5e54:	2328      	movle	r3, #40	; 0x28
 80a5e56:	58c3      	ldr	r3, [r0, r3]
 80a5e58:	eba5 0b04 	sub.w	fp, r5, r4
 80a5e5c:	f1c3 0800 	rsb	r8, r3, #0
 80a5e60:	f000 fa62 	bl	80a6328 <__tz_unlock>
 80a5e64:	233c      	movs	r3, #60	; 0x3c
 80a5e66:	fb98 f0f3 	sdiv	r0, r8, r3
 80a5e6a:	f000 fcf7 	bl	80a685c <labs>
 80a5e6e:	233c      	movs	r3, #60	; 0x3c
 80a5e70:	fb90 f2f3 	sdiv	r2, r0, r3
 80a5e74:	fb02 0013 	mls	r0, r2, r3, r0
 80a5e78:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80a5e7c:	9000      	str	r0, [sp, #0]
 80a5e7e:	fb98 f3f3 	sdiv	r3, r8, r3
 80a5e82:	4659      	mov	r1, fp
 80a5e84:	4648      	mov	r0, r9
 80a5e86:	4a23      	ldr	r2, [pc, #140]	; (80a5f14 <__strftime+0x9e4>)
 80a5e88:	f7fc fad0 	bl	80a242c <sniprintf>
 80a5e8c:	2800      	cmp	r0, #0
 80a5e8e:	f6ff ab81 	blt.w	80a5594 <__strftime+0x64>
 80a5e92:	4404      	add	r4, r0
 80a5e94:	42a5      	cmp	r5, r4
 80a5e96:	f67f ab7d 	bls.w	80a5594 <__strftime+0x64>
 80a5e9a:	2301      	movs	r3, #1
 80a5e9c:	9304      	str	r3, [sp, #16]
 80a5e9e:	e44b      	b.n	80a5738 <__strftime+0x208>
 80a5ea0:	6a33      	ldr	r3, [r6, #32]
 80a5ea2:	2b00      	cmp	r3, #0
 80a5ea4:	f6ff ac48 	blt.w	80a5738 <__strftime+0x208>
 80a5ea8:	f000 fa38 	bl	80a631c <__tz_lock>
 80a5eac:	9b04      	ldr	r3, [sp, #16]
 80a5eae:	b90b      	cbnz	r3, 80a5eb4 <__strftime+0x984>
 80a5eb0:	f000 fa40 	bl	80a6334 <_tzset_unlocked>
 80a5eb4:	6a33      	ldr	r3, [r6, #32]
 80a5eb6:	4a18      	ldr	r2, [pc, #96]	; (80a5f18 <__strftime+0x9e8>)
 80a5eb8:	2b00      	cmp	r3, #0
 80a5eba:	bfd4      	ite	le
 80a5ebc:	2300      	movle	r3, #0
 80a5ebe:	2301      	movgt	r3, #1
 80a5ec0:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 80a5ec4:	4640      	mov	r0, r8
 80a5ec6:	f000 f833 	bl	80a5f30 <strlen>
 80a5eca:	f108 38ff 	add.w	r8, r8, #4294967295
 80a5ece:	4420      	add	r0, r4
 80a5ed0:	1e6b      	subs	r3, r5, #1
 80a5ed2:	42a0      	cmp	r0, r4
 80a5ed4:	d102      	bne.n	80a5edc <__strftime+0x9ac>
 80a5ed6:	f000 fa27 	bl	80a6328 <__tz_unlock>
 80a5eda:	e7de      	b.n	80a5e9a <__strftime+0x96a>
 80a5edc:	42a3      	cmp	r3, r4
 80a5ede:	d904      	bls.n	80a5eea <__strftime+0x9ba>
 80a5ee0:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80a5ee4:	553a      	strb	r2, [r7, r4]
 80a5ee6:	3401      	adds	r4, #1
 80a5ee8:	e7f3      	b.n	80a5ed2 <__strftime+0x9a2>
 80a5eea:	f000 fa1d 	bl	80a6328 <__tz_unlock>
 80a5eee:	f7ff bb51 	b.w	80a5594 <__strftime+0x64>
 80a5ef2:	1e6b      	subs	r3, r5, #1
 80a5ef4:	42a3      	cmp	r3, r4
 80a5ef6:	f67f ab4d 	bls.w	80a5594 <__strftime+0x64>
 80a5efa:	2325      	movs	r3, #37	; 0x25
 80a5efc:	e627      	b.n	80a5b4e <__strftime+0x61e>
 80a5efe:	b10d      	cbz	r5, 80a5f04 <__strftime+0x9d4>
 80a5f00:	2300      	movs	r3, #0
 80a5f02:	553b      	strb	r3, [r7, r4]
 80a5f04:	4620      	mov	r0, r4
 80a5f06:	b011      	add	sp, #68	; 0x44
 80a5f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a5f0c:	fffff894 	.word	0xfffff894
 80a5f10:	080a751e 	.word	0x080a751e
 80a5f14:	080a753b 	.word	0x080a753b
 80a5f18:	2000006c 	.word	0x2000006c

080a5f1c <strftime>:
 80a5f1c:	b513      	push	{r0, r1, r4, lr}
 80a5f1e:	4c03      	ldr	r4, [pc, #12]	; (80a5f2c <strftime+0x10>)
 80a5f20:	9400      	str	r4, [sp, #0]
 80a5f22:	f7ff fb05 	bl	80a5530 <__strftime>
 80a5f26:	b002      	add	sp, #8
 80a5f28:	bd10      	pop	{r4, pc}
 80a5f2a:	bf00      	nop
 80a5f2c:	200000d0 	.word	0x200000d0

080a5f30 <strlen>:
 80a5f30:	4603      	mov	r3, r0
 80a5f32:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a5f36:	2a00      	cmp	r2, #0
 80a5f38:	d1fb      	bne.n	80a5f32 <strlen+0x2>
 80a5f3a:	1a18      	subs	r0, r3, r0
 80a5f3c:	3801      	subs	r0, #1
 80a5f3e:	4770      	bx	lr

080a5f40 <strncmp>:
 80a5f40:	b510      	push	{r4, lr}
 80a5f42:	b16a      	cbz	r2, 80a5f60 <strncmp+0x20>
 80a5f44:	3901      	subs	r1, #1
 80a5f46:	1884      	adds	r4, r0, r2
 80a5f48:	f810 3b01 	ldrb.w	r3, [r0], #1
 80a5f4c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80a5f50:	4293      	cmp	r3, r2
 80a5f52:	d103      	bne.n	80a5f5c <strncmp+0x1c>
 80a5f54:	42a0      	cmp	r0, r4
 80a5f56:	d001      	beq.n	80a5f5c <strncmp+0x1c>
 80a5f58:	2b00      	cmp	r3, #0
 80a5f5a:	d1f5      	bne.n	80a5f48 <strncmp+0x8>
 80a5f5c:	1a98      	subs	r0, r3, r2
 80a5f5e:	bd10      	pop	{r4, pc}
 80a5f60:	4610      	mov	r0, r2
 80a5f62:	e7fc      	b.n	80a5f5e <strncmp+0x1e>

080a5f64 <strncpy>:
 80a5f64:	4603      	mov	r3, r0
 80a5f66:	b510      	push	{r4, lr}
 80a5f68:	3901      	subs	r1, #1
 80a5f6a:	b132      	cbz	r2, 80a5f7a <strncpy+0x16>
 80a5f6c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80a5f70:	3a01      	subs	r2, #1
 80a5f72:	f803 4b01 	strb.w	r4, [r3], #1
 80a5f76:	2c00      	cmp	r4, #0
 80a5f78:	d1f7      	bne.n	80a5f6a <strncpy+0x6>
 80a5f7a:	2100      	movs	r1, #0
 80a5f7c:	441a      	add	r2, r3
 80a5f7e:	4293      	cmp	r3, r2
 80a5f80:	d100      	bne.n	80a5f84 <strncpy+0x20>
 80a5f82:	bd10      	pop	{r4, pc}
 80a5f84:	f803 1b01 	strb.w	r1, [r3], #1
 80a5f88:	e7f9      	b.n	80a5f7e <strncpy+0x1a>

080a5f8a <strstr>:
 80a5f8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a5f8c:	780c      	ldrb	r4, [r1, #0]
 80a5f8e:	b164      	cbz	r4, 80a5faa <strstr+0x20>
 80a5f90:	4603      	mov	r3, r0
 80a5f92:	781a      	ldrb	r2, [r3, #0]
 80a5f94:	4618      	mov	r0, r3
 80a5f96:	1c5e      	adds	r6, r3, #1
 80a5f98:	b90a      	cbnz	r2, 80a5f9e <strstr+0x14>
 80a5f9a:	4610      	mov	r0, r2
 80a5f9c:	e005      	b.n	80a5faa <strstr+0x20>
 80a5f9e:	4294      	cmp	r4, r2
 80a5fa0:	d108      	bne.n	80a5fb4 <strstr+0x2a>
 80a5fa2:	460d      	mov	r5, r1
 80a5fa4:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80a5fa8:	b902      	cbnz	r2, 80a5fac <strstr+0x22>
 80a5faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a5fac:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80a5fb0:	4297      	cmp	r7, r2
 80a5fb2:	d0f7      	beq.n	80a5fa4 <strstr+0x1a>
 80a5fb4:	4633      	mov	r3, r6
 80a5fb6:	e7ec      	b.n	80a5f92 <strstr+0x8>

080a5fb8 <_strtol_l.isra.0>:
 80a5fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a5fbc:	468c      	mov	ip, r1
 80a5fbe:	4686      	mov	lr, r0
 80a5fc0:	4e39      	ldr	r6, [pc, #228]	; (80a60a8 <_strtol_l.isra.0+0xf0>)
 80a5fc2:	4660      	mov	r0, ip
 80a5fc4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80a5fc8:	5da5      	ldrb	r5, [r4, r6]
 80a5fca:	f015 0508 	ands.w	r5, r5, #8
 80a5fce:	d1f8      	bne.n	80a5fc2 <_strtol_l.isra.0+0xa>
 80a5fd0:	2c2d      	cmp	r4, #45	; 0x2d
 80a5fd2:	d133      	bne.n	80a603c <_strtol_l.isra.0+0x84>
 80a5fd4:	f04f 0801 	mov.w	r8, #1
 80a5fd8:	f89c 4000 	ldrb.w	r4, [ip]
 80a5fdc:	f100 0c02 	add.w	ip, r0, #2
 80a5fe0:	2b00      	cmp	r3, #0
 80a5fe2:	d05c      	beq.n	80a609e <_strtol_l.isra.0+0xe6>
 80a5fe4:	2b10      	cmp	r3, #16
 80a5fe6:	d10c      	bne.n	80a6002 <_strtol_l.isra.0+0x4a>
 80a5fe8:	2c30      	cmp	r4, #48	; 0x30
 80a5fea:	d10a      	bne.n	80a6002 <_strtol_l.isra.0+0x4a>
 80a5fec:	f89c 0000 	ldrb.w	r0, [ip]
 80a5ff0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a5ff4:	2858      	cmp	r0, #88	; 0x58
 80a5ff6:	d14d      	bne.n	80a6094 <_strtol_l.isra.0+0xdc>
 80a5ff8:	2310      	movs	r3, #16
 80a5ffa:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80a5ffe:	f10c 0c02 	add.w	ip, ip, #2
 80a6002:	2600      	movs	r6, #0
 80a6004:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 80a6008:	3f01      	subs	r7, #1
 80a600a:	fbb7 f9f3 	udiv	r9, r7, r3
 80a600e:	4630      	mov	r0, r6
 80a6010:	fb03 7a19 	mls	sl, r3, r9, r7
 80a6014:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
 80a6018:	2d09      	cmp	r5, #9
 80a601a:	d818      	bhi.n	80a604e <_strtol_l.isra.0+0x96>
 80a601c:	462c      	mov	r4, r5
 80a601e:	42a3      	cmp	r3, r4
 80a6020:	dd24      	ble.n	80a606c <_strtol_l.isra.0+0xb4>
 80a6022:	1c75      	adds	r5, r6, #1
 80a6024:	d007      	beq.n	80a6036 <_strtol_l.isra.0+0x7e>
 80a6026:	4581      	cmp	r9, r0
 80a6028:	d31d      	bcc.n	80a6066 <_strtol_l.isra.0+0xae>
 80a602a:	d101      	bne.n	80a6030 <_strtol_l.isra.0+0x78>
 80a602c:	45a2      	cmp	sl, r4
 80a602e:	db1a      	blt.n	80a6066 <_strtol_l.isra.0+0xae>
 80a6030:	2601      	movs	r6, #1
 80a6032:	fb00 4003 	mla	r0, r0, r3, r4
 80a6036:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80a603a:	e7eb      	b.n	80a6014 <_strtol_l.isra.0+0x5c>
 80a603c:	2c2b      	cmp	r4, #43	; 0x2b
 80a603e:	bf08      	it	eq
 80a6040:	f89c 4000 	ldrbeq.w	r4, [ip]
 80a6044:	46a8      	mov	r8, r5
 80a6046:	bf08      	it	eq
 80a6048:	f100 0c02 	addeq.w	ip, r0, #2
 80a604c:	e7c8      	b.n	80a5fe0 <_strtol_l.isra.0+0x28>
 80a604e:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
 80a6052:	2d19      	cmp	r5, #25
 80a6054:	d801      	bhi.n	80a605a <_strtol_l.isra.0+0xa2>
 80a6056:	3c37      	subs	r4, #55	; 0x37
 80a6058:	e7e1      	b.n	80a601e <_strtol_l.isra.0+0x66>
 80a605a:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
 80a605e:	2d19      	cmp	r5, #25
 80a6060:	d804      	bhi.n	80a606c <_strtol_l.isra.0+0xb4>
 80a6062:	3c57      	subs	r4, #87	; 0x57
 80a6064:	e7db      	b.n	80a601e <_strtol_l.isra.0+0x66>
 80a6066:	f04f 36ff 	mov.w	r6, #4294967295
 80a606a:	e7e4      	b.n	80a6036 <_strtol_l.isra.0+0x7e>
 80a606c:	1c73      	adds	r3, r6, #1
 80a606e:	d106      	bne.n	80a607e <_strtol_l.isra.0+0xc6>
 80a6070:	2322      	movs	r3, #34	; 0x22
 80a6072:	4638      	mov	r0, r7
 80a6074:	f8ce 3000 	str.w	r3, [lr]
 80a6078:	b942      	cbnz	r2, 80a608c <_strtol_l.isra.0+0xd4>
 80a607a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a607e:	f1b8 0f00 	cmp.w	r8, #0
 80a6082:	d000      	beq.n	80a6086 <_strtol_l.isra.0+0xce>
 80a6084:	4240      	negs	r0, r0
 80a6086:	2a00      	cmp	r2, #0
 80a6088:	d0f7      	beq.n	80a607a <_strtol_l.isra.0+0xc2>
 80a608a:	b10e      	cbz	r6, 80a6090 <_strtol_l.isra.0+0xd8>
 80a608c:	f10c 31ff 	add.w	r1, ip, #4294967295
 80a6090:	6011      	str	r1, [r2, #0]
 80a6092:	e7f2      	b.n	80a607a <_strtol_l.isra.0+0xc2>
 80a6094:	2430      	movs	r4, #48	; 0x30
 80a6096:	2b00      	cmp	r3, #0
 80a6098:	d1b3      	bne.n	80a6002 <_strtol_l.isra.0+0x4a>
 80a609a:	2308      	movs	r3, #8
 80a609c:	e7b1      	b.n	80a6002 <_strtol_l.isra.0+0x4a>
 80a609e:	2c30      	cmp	r4, #48	; 0x30
 80a60a0:	d0a4      	beq.n	80a5fec <_strtol_l.isra.0+0x34>
 80a60a2:	230a      	movs	r3, #10
 80a60a4:	e7ad      	b.n	80a6002 <_strtol_l.isra.0+0x4a>
 80a60a6:	bf00      	nop
 80a60a8:	080a77ad 	.word	0x080a77ad

080a60ac <strtol>:
 80a60ac:	4613      	mov	r3, r2
 80a60ae:	460a      	mov	r2, r1
 80a60b0:	4601      	mov	r1, r0
 80a60b2:	4802      	ldr	r0, [pc, #8]	; (80a60bc <strtol+0x10>)
 80a60b4:	6800      	ldr	r0, [r0, #0]
 80a60b6:	f7ff bf7f 	b.w	80a5fb8 <_strtol_l.isra.0>
 80a60ba:	bf00      	nop
 80a60bc:	20000008 	.word	0x20000008

080a60c0 <_strtoul_l.isra.0>:
 80a60c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a60c4:	468c      	mov	ip, r1
 80a60c6:	4686      	mov	lr, r0
 80a60c8:	4e3a      	ldr	r6, [pc, #232]	; (80a61b4 <_strtoul_l.isra.0+0xf4>)
 80a60ca:	4660      	mov	r0, ip
 80a60cc:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80a60d0:	5da5      	ldrb	r5, [r4, r6]
 80a60d2:	f015 0508 	ands.w	r5, r5, #8
 80a60d6:	d1f8      	bne.n	80a60ca <_strtoul_l.isra.0+0xa>
 80a60d8:	2c2d      	cmp	r4, #45	; 0x2d
 80a60da:	d134      	bne.n	80a6146 <_strtoul_l.isra.0+0x86>
 80a60dc:	f04f 0801 	mov.w	r8, #1
 80a60e0:	f89c 4000 	ldrb.w	r4, [ip]
 80a60e4:	f100 0c02 	add.w	ip, r0, #2
 80a60e8:	2b00      	cmp	r3, #0
 80a60ea:	d05e      	beq.n	80a61aa <_strtoul_l.isra.0+0xea>
 80a60ec:	2b10      	cmp	r3, #16
 80a60ee:	d10c      	bne.n	80a610a <_strtoul_l.isra.0+0x4a>
 80a60f0:	2c30      	cmp	r4, #48	; 0x30
 80a60f2:	d10a      	bne.n	80a610a <_strtoul_l.isra.0+0x4a>
 80a60f4:	f89c 0000 	ldrb.w	r0, [ip]
 80a60f8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a60fc:	2858      	cmp	r0, #88	; 0x58
 80a60fe:	d14f      	bne.n	80a61a0 <_strtoul_l.isra.0+0xe0>
 80a6100:	2310      	movs	r3, #16
 80a6102:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80a6106:	f10c 0c02 	add.w	ip, ip, #2
 80a610a:	f04f 37ff 	mov.w	r7, #4294967295
 80a610e:	fbb7 f7f3 	udiv	r7, r7, r3
 80a6112:	2500      	movs	r5, #0
 80a6114:	fb03 f907 	mul.w	r9, r3, r7
 80a6118:	4628      	mov	r0, r5
 80a611a:	ea6f 0909 	mvn.w	r9, r9
 80a611e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80a6122:	2e09      	cmp	r6, #9
 80a6124:	d818      	bhi.n	80a6158 <_strtoul_l.isra.0+0x98>
 80a6126:	4634      	mov	r4, r6
 80a6128:	42a3      	cmp	r3, r4
 80a612a:	dd24      	ble.n	80a6176 <_strtoul_l.isra.0+0xb6>
 80a612c:	2d00      	cmp	r5, #0
 80a612e:	db1f      	blt.n	80a6170 <_strtoul_l.isra.0+0xb0>
 80a6130:	4287      	cmp	r7, r0
 80a6132:	d31d      	bcc.n	80a6170 <_strtoul_l.isra.0+0xb0>
 80a6134:	d101      	bne.n	80a613a <_strtoul_l.isra.0+0x7a>
 80a6136:	45a1      	cmp	r9, r4
 80a6138:	db1a      	blt.n	80a6170 <_strtoul_l.isra.0+0xb0>
 80a613a:	2501      	movs	r5, #1
 80a613c:	fb00 4003 	mla	r0, r0, r3, r4
 80a6140:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80a6144:	e7eb      	b.n	80a611e <_strtoul_l.isra.0+0x5e>
 80a6146:	2c2b      	cmp	r4, #43	; 0x2b
 80a6148:	bf08      	it	eq
 80a614a:	f89c 4000 	ldrbeq.w	r4, [ip]
 80a614e:	46a8      	mov	r8, r5
 80a6150:	bf08      	it	eq
 80a6152:	f100 0c02 	addeq.w	ip, r0, #2
 80a6156:	e7c7      	b.n	80a60e8 <_strtoul_l.isra.0+0x28>
 80a6158:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80a615c:	2e19      	cmp	r6, #25
 80a615e:	d801      	bhi.n	80a6164 <_strtoul_l.isra.0+0xa4>
 80a6160:	3c37      	subs	r4, #55	; 0x37
 80a6162:	e7e1      	b.n	80a6128 <_strtoul_l.isra.0+0x68>
 80a6164:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80a6168:	2e19      	cmp	r6, #25
 80a616a:	d804      	bhi.n	80a6176 <_strtoul_l.isra.0+0xb6>
 80a616c:	3c57      	subs	r4, #87	; 0x57
 80a616e:	e7db      	b.n	80a6128 <_strtoul_l.isra.0+0x68>
 80a6170:	f04f 35ff 	mov.w	r5, #4294967295
 80a6174:	e7e4      	b.n	80a6140 <_strtoul_l.isra.0+0x80>
 80a6176:	2d00      	cmp	r5, #0
 80a6178:	da07      	bge.n	80a618a <_strtoul_l.isra.0+0xca>
 80a617a:	2322      	movs	r3, #34	; 0x22
 80a617c:	f04f 30ff 	mov.w	r0, #4294967295
 80a6180:	f8ce 3000 	str.w	r3, [lr]
 80a6184:	b942      	cbnz	r2, 80a6198 <_strtoul_l.isra.0+0xd8>
 80a6186:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a618a:	f1b8 0f00 	cmp.w	r8, #0
 80a618e:	d000      	beq.n	80a6192 <_strtoul_l.isra.0+0xd2>
 80a6190:	4240      	negs	r0, r0
 80a6192:	2a00      	cmp	r2, #0
 80a6194:	d0f7      	beq.n	80a6186 <_strtoul_l.isra.0+0xc6>
 80a6196:	b10d      	cbz	r5, 80a619c <_strtoul_l.isra.0+0xdc>
 80a6198:	f10c 31ff 	add.w	r1, ip, #4294967295
 80a619c:	6011      	str	r1, [r2, #0]
 80a619e:	e7f2      	b.n	80a6186 <_strtoul_l.isra.0+0xc6>
 80a61a0:	2430      	movs	r4, #48	; 0x30
 80a61a2:	2b00      	cmp	r3, #0
 80a61a4:	d1b1      	bne.n	80a610a <_strtoul_l.isra.0+0x4a>
 80a61a6:	2308      	movs	r3, #8
 80a61a8:	e7af      	b.n	80a610a <_strtoul_l.isra.0+0x4a>
 80a61aa:	2c30      	cmp	r4, #48	; 0x30
 80a61ac:	d0a2      	beq.n	80a60f4 <_strtoul_l.isra.0+0x34>
 80a61ae:	230a      	movs	r3, #10
 80a61b0:	e7ab      	b.n	80a610a <_strtoul_l.isra.0+0x4a>
 80a61b2:	bf00      	nop
 80a61b4:	080a77ad 	.word	0x080a77ad

080a61b8 <strtoul>:
 80a61b8:	4613      	mov	r3, r2
 80a61ba:	460a      	mov	r2, r1
 80a61bc:	4601      	mov	r1, r0
 80a61be:	4802      	ldr	r0, [pc, #8]	; (80a61c8 <strtoul+0x10>)
 80a61c0:	6800      	ldr	r0, [r0, #0]
 80a61c2:	f7ff bf7d 	b.w	80a60c0 <_strtoul_l.isra.0>
 80a61c6:	bf00      	nop
 80a61c8:	20000008 	.word	0x20000008

080a61cc <__tzcalc_limits>:
 80a61cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a61d0:	4680      	mov	r8, r0
 80a61d2:	f000 fa8f 	bl	80a66f4 <__gettzinfo>
 80a61d6:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80a61da:	4598      	cmp	r8, r3
 80a61dc:	f340 8097 	ble.w	80a630e <__tzcalc_limits+0x142>
 80a61e0:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 80a61e4:	f240 126d 	movw	r2, #365	; 0x16d
 80a61e8:	4443      	add	r3, r8
 80a61ea:	109b      	asrs	r3, r3, #2
 80a61ec:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 80a61f0:	fb02 3505 	mla	r5, r2, r5, r3
 80a61f4:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80a61f8:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 80a61fc:	fb93 f3f2 	sdiv	r3, r3, r2
 80a6200:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 80a6204:	441d      	add	r5, r3
 80a6206:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80a620a:	4442      	add	r2, r8
 80a620c:	fbb2 f2f3 	udiv	r2, r2, r3
 80a6210:	fb98 f7f3 	sdiv	r7, r8, r3
 80a6214:	4415      	add	r5, r2
 80a6216:	2264      	movs	r2, #100	; 0x64
 80a6218:	fb03 8717 	mls	r7, r3, r7, r8
 80a621c:	fb98 f6f2 	sdiv	r6, r8, r2
 80a6220:	fab7 fc87 	clz	ip, r7
 80a6224:	4604      	mov	r4, r0
 80a6226:	f04f 0e07 	mov.w	lr, #7
 80a622a:	fb02 8616 	mls	r6, r2, r6, r8
 80a622e:	f008 0303 	and.w	r3, r8, #3
 80a6232:	f8c0 8004 	str.w	r8, [r0, #4]
 80a6236:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80a623a:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 80a623e:	9300      	str	r3, [sp, #0]
 80a6240:	7a22      	ldrb	r2, [r4, #8]
 80a6242:	6963      	ldr	r3, [r4, #20]
 80a6244:	2a4a      	cmp	r2, #74	; 0x4a
 80a6246:	d128      	bne.n	80a629a <__tzcalc_limits+0xce>
 80a6248:	9900      	ldr	r1, [sp, #0]
 80a624a:	18ea      	adds	r2, r5, r3
 80a624c:	b901      	cbnz	r1, 80a6250 <__tzcalc_limits+0x84>
 80a624e:	b906      	cbnz	r6, 80a6252 <__tzcalc_limits+0x86>
 80a6250:	bb0f      	cbnz	r7, 80a6296 <__tzcalc_limits+0xca>
 80a6252:	2b3b      	cmp	r3, #59	; 0x3b
 80a6254:	bfd4      	ite	le
 80a6256:	2300      	movle	r3, #0
 80a6258:	2301      	movgt	r3, #1
 80a625a:	4413      	add	r3, r2
 80a625c:	1e5a      	subs	r2, r3, #1
 80a625e:	69a3      	ldr	r3, [r4, #24]
 80a6260:	492c      	ldr	r1, [pc, #176]	; (80a6314 <__tzcalc_limits+0x148>)
 80a6262:	3428      	adds	r4, #40	; 0x28
 80a6264:	fb01 3202 	mla	r2, r1, r2, r3
 80a6268:	6823      	ldr	r3, [r4, #0]
 80a626a:	4413      	add	r3, r2
 80a626c:	461a      	mov	r2, r3
 80a626e:	17db      	asrs	r3, r3, #31
 80a6270:	e944 2302 	strd	r2, r3, [r4, #-8]
 80a6274:	45a3      	cmp	fp, r4
 80a6276:	d1e3      	bne.n	80a6240 <__tzcalc_limits+0x74>
 80a6278:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 80a627c:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 80a6280:	4294      	cmp	r4, r2
 80a6282:	eb75 0303 	sbcs.w	r3, r5, r3
 80a6286:	bfb4      	ite	lt
 80a6288:	2301      	movlt	r3, #1
 80a628a:	2300      	movge	r3, #0
 80a628c:	6003      	str	r3, [r0, #0]
 80a628e:	2001      	movs	r0, #1
 80a6290:	b003      	add	sp, #12
 80a6292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a6296:	2300      	movs	r3, #0
 80a6298:	e7df      	b.n	80a625a <__tzcalc_limits+0x8e>
 80a629a:	2a44      	cmp	r2, #68	; 0x44
 80a629c:	d101      	bne.n	80a62a2 <__tzcalc_limits+0xd6>
 80a629e:	18ea      	adds	r2, r5, r3
 80a62a0:	e7dd      	b.n	80a625e <__tzcalc_limits+0x92>
 80a62a2:	9a00      	ldr	r2, [sp, #0]
 80a62a4:	bb6a      	cbnz	r2, 80a6302 <__tzcalc_limits+0x136>
 80a62a6:	2e00      	cmp	r6, #0
 80a62a8:	bf0c      	ite	eq
 80a62aa:	46e0      	moveq	r8, ip
 80a62ac:	f04f 0801 	movne.w	r8, #1
 80a62b0:	f04f 0a30 	mov.w	sl, #48	; 0x30
 80a62b4:	68e2      	ldr	r2, [r4, #12]
 80a62b6:	f04f 0900 	mov.w	r9, #0
 80a62ba:	9201      	str	r2, [sp, #4]
 80a62bc:	462a      	mov	r2, r5
 80a62be:	4916      	ldr	r1, [pc, #88]	; (80a6318 <__tzcalc_limits+0x14c>)
 80a62c0:	fb0a 1808 	mla	r8, sl, r8, r1
 80a62c4:	f1a8 0804 	sub.w	r8, r8, #4
 80a62c8:	9901      	ldr	r1, [sp, #4]
 80a62ca:	f109 0901 	add.w	r9, r9, #1
 80a62ce:	4549      	cmp	r1, r9
 80a62d0:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 80a62d4:	dc17      	bgt.n	80a6306 <__tzcalc_limits+0x13a>
 80a62d6:	f102 0804 	add.w	r8, r2, #4
 80a62da:	fb98 f9fe 	sdiv	r9, r8, lr
 80a62de:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 80a62e2:	eba8 0909 	sub.w	r9, r8, r9
 80a62e6:	ebb3 0909 	subs.w	r9, r3, r9
 80a62ea:	6923      	ldr	r3, [r4, #16]
 80a62ec:	bf48      	it	mi
 80a62ee:	f109 0907 	addmi.w	r9, r9, #7
 80a62f2:	3b01      	subs	r3, #1
 80a62f4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a62f8:	444b      	add	r3, r9
 80a62fa:	4553      	cmp	r3, sl
 80a62fc:	da05      	bge.n	80a630a <__tzcalc_limits+0x13e>
 80a62fe:	441a      	add	r2, r3
 80a6300:	e7ad      	b.n	80a625e <__tzcalc_limits+0x92>
 80a6302:	46e0      	mov	r8, ip
 80a6304:	e7d4      	b.n	80a62b0 <__tzcalc_limits+0xe4>
 80a6306:	4452      	add	r2, sl
 80a6308:	e7de      	b.n	80a62c8 <__tzcalc_limits+0xfc>
 80a630a:	3b07      	subs	r3, #7
 80a630c:	e7f5      	b.n	80a62fa <__tzcalc_limits+0x12e>
 80a630e:	2000      	movs	r0, #0
 80a6310:	e7be      	b.n	80a6290 <__tzcalc_limits+0xc4>
 80a6312:	bf00      	nop
 80a6314:	00015180 	.word	0x00015180
 80a6318:	080a748c 	.word	0x080a748c

080a631c <__tz_lock>:
 80a631c:	4801      	ldr	r0, [pc, #4]	; (80a6324 <__tz_lock+0x8>)
 80a631e:	f000 baa1 	b.w	80a6864 <__retarget_lock_acquire>
 80a6322:	bf00      	nop
 80a6324:	20000773 	.word	0x20000773

080a6328 <__tz_unlock>:
 80a6328:	4801      	ldr	r0, [pc, #4]	; (80a6330 <__tz_unlock+0x8>)
 80a632a:	f000 ba9d 	b.w	80a6868 <__retarget_lock_release>
 80a632e:	bf00      	nop
 80a6330:	20000773 	.word	0x20000773

080a6334 <_tzset_unlocked>:
 80a6334:	4b01      	ldr	r3, [pc, #4]	; (80a633c <_tzset_unlocked+0x8>)
 80a6336:	6818      	ldr	r0, [r3, #0]
 80a6338:	f000 b802 	b.w	80a6340 <_tzset_unlocked_r>
 80a633c:	20000008 	.word	0x20000008

080a6340 <_tzset_unlocked_r>:
 80a6340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a6344:	b08d      	sub	sp, #52	; 0x34
 80a6346:	4607      	mov	r7, r0
 80a6348:	f000 f9d4 	bl	80a66f4 <__gettzinfo>
 80a634c:	49b0      	ldr	r1, [pc, #704]	; (80a6610 <_tzset_unlocked_r+0x2d0>)
 80a634e:	4605      	mov	r5, r0
 80a6350:	4638      	mov	r0, r7
 80a6352:	f000 f9c7 	bl	80a66e4 <_getenv_r>
 80a6356:	4eaf      	ldr	r6, [pc, #700]	; (80a6614 <_tzset_unlocked_r+0x2d4>)
 80a6358:	4604      	mov	r4, r0
 80a635a:	b970      	cbnz	r0, 80a637a <_tzset_unlocked_r+0x3a>
 80a635c:	4bae      	ldr	r3, [pc, #696]	; (80a6618 <_tzset_unlocked_r+0x2d8>)
 80a635e:	4aaf      	ldr	r2, [pc, #700]	; (80a661c <_tzset_unlocked_r+0x2dc>)
 80a6360:	6018      	str	r0, [r3, #0]
 80a6362:	4baf      	ldr	r3, [pc, #700]	; (80a6620 <_tzset_unlocked_r+0x2e0>)
 80a6364:	6018      	str	r0, [r3, #0]
 80a6366:	4baf      	ldr	r3, [pc, #700]	; (80a6624 <_tzset_unlocked_r+0x2e4>)
 80a6368:	6830      	ldr	r0, [r6, #0]
 80a636a:	e9c3 2200 	strd	r2, r2, [r3]
 80a636e:	f7fc f82d 	bl	80a23cc <free>
 80a6372:	6034      	str	r4, [r6, #0]
 80a6374:	b00d      	add	sp, #52	; 0x34
 80a6376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a637a:	6831      	ldr	r1, [r6, #0]
 80a637c:	2900      	cmp	r1, #0
 80a637e:	d15f      	bne.n	80a6440 <_tzset_unlocked_r+0x100>
 80a6380:	6830      	ldr	r0, [r6, #0]
 80a6382:	f7fc f823 	bl	80a23cc <free>
 80a6386:	4620      	mov	r0, r4
 80a6388:	f7ff fdd2 	bl	80a5f30 <strlen>
 80a638c:	1c41      	adds	r1, r0, #1
 80a638e:	4638      	mov	r0, r7
 80a6390:	f7fc f864 	bl	80a245c <_malloc_r>
 80a6394:	6030      	str	r0, [r6, #0]
 80a6396:	2800      	cmp	r0, #0
 80a6398:	d157      	bne.n	80a644a <_tzset_unlocked_r+0x10a>
 80a639a:	7823      	ldrb	r3, [r4, #0]
 80a639c:	ae0a      	add	r6, sp, #40	; 0x28
 80a639e:	2b3a      	cmp	r3, #58	; 0x3a
 80a63a0:	bf08      	it	eq
 80a63a2:	3401      	addeq	r4, #1
 80a63a4:	4633      	mov	r3, r6
 80a63a6:	4620      	mov	r0, r4
 80a63a8:	4a9f      	ldr	r2, [pc, #636]	; (80a6628 <_tzset_unlocked_r+0x2e8>)
 80a63aa:	49a0      	ldr	r1, [pc, #640]	; (80a662c <_tzset_unlocked_r+0x2ec>)
 80a63ac:	f7fc f82e 	bl	80a240c <siscanf>
 80a63b0:	2800      	cmp	r0, #0
 80a63b2:	dddf      	ble.n	80a6374 <_tzset_unlocked_r+0x34>
 80a63b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a63b6:	18e7      	adds	r7, r4, r3
 80a63b8:	5ce3      	ldrb	r3, [r4, r3]
 80a63ba:	2b2d      	cmp	r3, #45	; 0x2d
 80a63bc:	d149      	bne.n	80a6452 <_tzset_unlocked_r+0x112>
 80a63be:	f04f 34ff 	mov.w	r4, #4294967295
 80a63c2:	3701      	adds	r7, #1
 80a63c4:	f04f 0800 	mov.w	r8, #0
 80a63c8:	f10d 0a20 	add.w	sl, sp, #32
 80a63cc:	f10d 0b1e 	add.w	fp, sp, #30
 80a63d0:	4633      	mov	r3, r6
 80a63d2:	4638      	mov	r0, r7
 80a63d4:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 80a63d8:	4995      	ldr	r1, [pc, #596]	; (80a6630 <_tzset_unlocked_r+0x2f0>)
 80a63da:	9603      	str	r6, [sp, #12]
 80a63dc:	f8cd b000 	str.w	fp, [sp]
 80a63e0:	aa07      	add	r2, sp, #28
 80a63e2:	f8ad 801e 	strh.w	r8, [sp, #30]
 80a63e6:	f8ad 8020 	strh.w	r8, [sp, #32]
 80a63ea:	f7fc f80f 	bl	80a240c <siscanf>
 80a63ee:	4540      	cmp	r0, r8
 80a63f0:	ddc0      	ble.n	80a6374 <_tzset_unlocked_r+0x34>
 80a63f2:	213c      	movs	r1, #60	; 0x3c
 80a63f4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80a63f8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80a63fc:	f8df 923c 	ldr.w	r9, [pc, #572]	; 80a663c <_tzset_unlocked_r+0x2fc>
 80a6400:	fb01 2203 	mla	r2, r1, r3, r2
 80a6404:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a6408:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80a640c:	fb01 2303 	mla	r3, r1, r3, r2
 80a6410:	435c      	muls	r4, r3
 80a6412:	4b85      	ldr	r3, [pc, #532]	; (80a6628 <_tzset_unlocked_r+0x2e8>)
 80a6414:	62ac      	str	r4, [r5, #40]	; 0x28
 80a6416:	4c83      	ldr	r4, [pc, #524]	; (80a6624 <_tzset_unlocked_r+0x2e4>)
 80a6418:	464a      	mov	r2, r9
 80a641a:	6023      	str	r3, [r4, #0]
 80a641c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a641e:	4983      	ldr	r1, [pc, #524]	; (80a662c <_tzset_unlocked_r+0x2ec>)
 80a6420:	441f      	add	r7, r3
 80a6422:	4638      	mov	r0, r7
 80a6424:	4633      	mov	r3, r6
 80a6426:	f7fb fff1 	bl	80a240c <siscanf>
 80a642a:	4540      	cmp	r0, r8
 80a642c:	dc17      	bgt.n	80a645e <_tzset_unlocked_r+0x11e>
 80a642e:	6823      	ldr	r3, [r4, #0]
 80a6430:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80a6432:	6063      	str	r3, [r4, #4]
 80a6434:	4b78      	ldr	r3, [pc, #480]	; (80a6618 <_tzset_unlocked_r+0x2d8>)
 80a6436:	601a      	str	r2, [r3, #0]
 80a6438:	4b79      	ldr	r3, [pc, #484]	; (80a6620 <_tzset_unlocked_r+0x2e0>)
 80a643a:	f8c3 8000 	str.w	r8, [r3]
 80a643e:	e799      	b.n	80a6374 <_tzset_unlocked_r+0x34>
 80a6440:	f7fe ffe5 	bl	80a540e <strcmp>
 80a6444:	2800      	cmp	r0, #0
 80a6446:	d19b      	bne.n	80a6380 <_tzset_unlocked_r+0x40>
 80a6448:	e794      	b.n	80a6374 <_tzset_unlocked_r+0x34>
 80a644a:	4621      	mov	r1, r4
 80a644c:	f7fe ffe9 	bl	80a5422 <strcpy>
 80a6450:	e7a3      	b.n	80a639a <_tzset_unlocked_r+0x5a>
 80a6452:	2b2b      	cmp	r3, #43	; 0x2b
 80a6454:	f04f 0401 	mov.w	r4, #1
 80a6458:	bf08      	it	eq
 80a645a:	3701      	addeq	r7, #1
 80a645c:	e7b2      	b.n	80a63c4 <_tzset_unlocked_r+0x84>
 80a645e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a6460:	f8c4 9004 	str.w	r9, [r4, #4]
 80a6464:	18fc      	adds	r4, r7, r3
 80a6466:	5cfb      	ldrb	r3, [r7, r3]
 80a6468:	2b2d      	cmp	r3, #45	; 0x2d
 80a646a:	f040 808c 	bne.w	80a6586 <_tzset_unlocked_r+0x246>
 80a646e:	f04f 37ff 	mov.w	r7, #4294967295
 80a6472:	3401      	adds	r4, #1
 80a6474:	2300      	movs	r3, #0
 80a6476:	4620      	mov	r0, r4
 80a6478:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a647c:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a6480:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a6484:	930a      	str	r3, [sp, #40]	; 0x28
 80a6486:	e9cd a602 	strd	sl, r6, [sp, #8]
 80a648a:	4633      	mov	r3, r6
 80a648c:	e9cd b600 	strd	fp, r6, [sp]
 80a6490:	4967      	ldr	r1, [pc, #412]	; (80a6630 <_tzset_unlocked_r+0x2f0>)
 80a6492:	aa07      	add	r2, sp, #28
 80a6494:	f7fb ffba 	bl	80a240c <siscanf>
 80a6498:	2800      	cmp	r0, #0
 80a649a:	dc7a      	bgt.n	80a6592 <_tzset_unlocked_r+0x252>
 80a649c:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 80a649e:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 80a64a2:	652f      	str	r7, [r5, #80]	; 0x50
 80a64a4:	f04f 0900 	mov.w	r9, #0
 80a64a8:	462f      	mov	r7, r5
 80a64aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a64ac:	441c      	add	r4, r3
 80a64ae:	7823      	ldrb	r3, [r4, #0]
 80a64b0:	2b2c      	cmp	r3, #44	; 0x2c
 80a64b2:	bf08      	it	eq
 80a64b4:	3401      	addeq	r4, #1
 80a64b6:	f894 8000 	ldrb.w	r8, [r4]
 80a64ba:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80a64be:	d17a      	bne.n	80a65b6 <_tzset_unlocked_r+0x276>
 80a64c0:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80a64c4:	e9cd 6301 	strd	r6, r3, [sp, #4]
 80a64c8:	ab09      	add	r3, sp, #36	; 0x24
 80a64ca:	9300      	str	r3, [sp, #0]
 80a64cc:	4620      	mov	r0, r4
 80a64ce:	4633      	mov	r3, r6
 80a64d0:	4958      	ldr	r1, [pc, #352]	; (80a6634 <_tzset_unlocked_r+0x2f4>)
 80a64d2:	9603      	str	r6, [sp, #12]
 80a64d4:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80a64d8:	f7fb ff98 	bl	80a240c <siscanf>
 80a64dc:	2803      	cmp	r0, #3
 80a64de:	f47f af49 	bne.w	80a6374 <_tzset_unlocked_r+0x34>
 80a64e2:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80a64e6:	1e4b      	subs	r3, r1, #1
 80a64e8:	2b0b      	cmp	r3, #11
 80a64ea:	f63f af43 	bhi.w	80a6374 <_tzset_unlocked_r+0x34>
 80a64ee:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80a64f2:	1e53      	subs	r3, r2, #1
 80a64f4:	2b04      	cmp	r3, #4
 80a64f6:	f63f af3d 	bhi.w	80a6374 <_tzset_unlocked_r+0x34>
 80a64fa:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80a64fe:	2b06      	cmp	r3, #6
 80a6500:	f63f af38 	bhi.w	80a6374 <_tzset_unlocked_r+0x34>
 80a6504:	e9c7 1203 	strd	r1, r2, [r7, #12]
 80a6508:	f887 8008 	strb.w	r8, [r7, #8]
 80a650c:	617b      	str	r3, [r7, #20]
 80a650e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a6510:	eb04 0803 	add.w	r8, r4, r3
 80a6514:	2302      	movs	r3, #2
 80a6516:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a651a:	2300      	movs	r3, #0
 80a651c:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a6520:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a6524:	930a      	str	r3, [sp, #40]	; 0x28
 80a6526:	f898 3000 	ldrb.w	r3, [r8]
 80a652a:	2b2f      	cmp	r3, #47	; 0x2f
 80a652c:	d109      	bne.n	80a6542 <_tzset_unlocked_r+0x202>
 80a652e:	4633      	mov	r3, r6
 80a6530:	4640      	mov	r0, r8
 80a6532:	e9cd a602 	strd	sl, r6, [sp, #8]
 80a6536:	e9cd b600 	strd	fp, r6, [sp]
 80a653a:	493f      	ldr	r1, [pc, #252]	; (80a6638 <_tzset_unlocked_r+0x2f8>)
 80a653c:	aa07      	add	r2, sp, #28
 80a653e:	f7fb ff65 	bl	80a240c <siscanf>
 80a6542:	213c      	movs	r1, #60	; 0x3c
 80a6544:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80a6548:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80a654c:	3728      	adds	r7, #40	; 0x28
 80a654e:	fb01 2203 	mla	r2, r1, r3, r2
 80a6552:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a6556:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80a655a:	fb01 2303 	mla	r3, r1, r3, r2
 80a655e:	f847 3c10 	str.w	r3, [r7, #-16]
 80a6562:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80a6564:	4444      	add	r4, r8
 80a6566:	f1b9 0f00 	cmp.w	r9, #0
 80a656a:	d021      	beq.n	80a65b0 <_tzset_unlocked_r+0x270>
 80a656c:	6868      	ldr	r0, [r5, #4]
 80a656e:	f7ff fe2d 	bl	80a61cc <__tzcalc_limits>
 80a6572:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80a6574:	4b28      	ldr	r3, [pc, #160]	; (80a6618 <_tzset_unlocked_r+0x2d8>)
 80a6576:	601a      	str	r2, [r3, #0]
 80a6578:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80a657a:	1a9b      	subs	r3, r3, r2
 80a657c:	bf18      	it	ne
 80a657e:	2301      	movne	r3, #1
 80a6580:	4a27      	ldr	r2, [pc, #156]	; (80a6620 <_tzset_unlocked_r+0x2e0>)
 80a6582:	6013      	str	r3, [r2, #0]
 80a6584:	e6f6      	b.n	80a6374 <_tzset_unlocked_r+0x34>
 80a6586:	2b2b      	cmp	r3, #43	; 0x2b
 80a6588:	f04f 0701 	mov.w	r7, #1
 80a658c:	bf08      	it	eq
 80a658e:	3401      	addeq	r4, #1
 80a6590:	e770      	b.n	80a6474 <_tzset_unlocked_r+0x134>
 80a6592:	213c      	movs	r1, #60	; 0x3c
 80a6594:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80a6598:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80a659c:	fb01 2203 	mla	r2, r1, r3, r2
 80a65a0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a65a4:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80a65a8:	fb01 2303 	mla	r3, r1, r3, r2
 80a65ac:	435f      	muls	r7, r3
 80a65ae:	e778      	b.n	80a64a2 <_tzset_unlocked_r+0x162>
 80a65b0:	f04f 0901 	mov.w	r9, #1
 80a65b4:	e77b      	b.n	80a64ae <_tzset_unlocked_r+0x16e>
 80a65b6:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80a65ba:	bf0a      	itet	eq
 80a65bc:	4643      	moveq	r3, r8
 80a65be:	2344      	movne	r3, #68	; 0x44
 80a65c0:	3401      	addeq	r4, #1
 80a65c2:	220a      	movs	r2, #10
 80a65c4:	4620      	mov	r0, r4
 80a65c6:	a90b      	add	r1, sp, #44	; 0x2c
 80a65c8:	9305      	str	r3, [sp, #20]
 80a65ca:	f7ff fdf5 	bl	80a61b8 <strtoul>
 80a65ce:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80a65d2:	9b05      	ldr	r3, [sp, #20]
 80a65d4:	45a0      	cmp	r8, r4
 80a65d6:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80a65da:	d114      	bne.n	80a6606 <_tzset_unlocked_r+0x2c6>
 80a65dc:	234d      	movs	r3, #77	; 0x4d
 80a65de:	f1b9 0f00 	cmp.w	r9, #0
 80a65e2:	d107      	bne.n	80a65f4 <_tzset_unlocked_r+0x2b4>
 80a65e4:	2103      	movs	r1, #3
 80a65e6:	722b      	strb	r3, [r5, #8]
 80a65e8:	2302      	movs	r3, #2
 80a65ea:	f8c5 9014 	str.w	r9, [r5, #20]
 80a65ee:	e9c5 1303 	strd	r1, r3, [r5, #12]
 80a65f2:	e78f      	b.n	80a6514 <_tzset_unlocked_r+0x1d4>
 80a65f4:	220b      	movs	r2, #11
 80a65f6:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 80a65fa:	2301      	movs	r3, #1
 80a65fc:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 80a6600:	2300      	movs	r3, #0
 80a6602:	63eb      	str	r3, [r5, #60]	; 0x3c
 80a6604:	e786      	b.n	80a6514 <_tzset_unlocked_r+0x1d4>
 80a6606:	b280      	uxth	r0, r0
 80a6608:	723b      	strb	r3, [r7, #8]
 80a660a:	6178      	str	r0, [r7, #20]
 80a660c:	e782      	b.n	80a6514 <_tzset_unlocked_r+0x1d4>
 80a660e:	bf00      	nop
 80a6610:	080a7770 	.word	0x080a7770
 80a6614:	2000075c 	.word	0x2000075c
 80a6618:	20000764 	.word	0x20000764
 80a661c:	080a7773 	.word	0x080a7773
 80a6620:	20000760 	.word	0x20000760
 80a6624:	2000006c 	.word	0x2000006c
 80a6628:	2000074f 	.word	0x2000074f
 80a662c:	080a7777 	.word	0x080a7777
 80a6630:	080a779a 	.word	0x080a779a
 80a6634:	080a7786 	.word	0x080a7786
 80a6638:	080a7799 	.word	0x080a7799
 80a663c:	20000744 	.word	0x20000744

080a6640 <abs>:
 80a6640:	2800      	cmp	r0, #0
 80a6642:	bfb8      	it	lt
 80a6644:	4240      	neglt	r0, r0
 80a6646:	4770      	bx	lr

080a6648 <div>:
 80a6648:	b510      	push	{r4, lr}
 80a664a:	fb91 f4f2 	sdiv	r4, r1, r2
 80a664e:	2900      	cmp	r1, #0
 80a6650:	fb02 1314 	mls	r3, r2, r4, r1
 80a6654:	db06      	blt.n	80a6664 <div+0x1c>
 80a6656:	2b00      	cmp	r3, #0
 80a6658:	da01      	bge.n	80a665e <div+0x16>
 80a665a:	3401      	adds	r4, #1
 80a665c:	1a9b      	subs	r3, r3, r2
 80a665e:	e9c0 4300 	strd	r4, r3, [r0]
 80a6662:	bd10      	pop	{r4, pc}
 80a6664:	2b00      	cmp	r3, #0
 80a6666:	bfc4      	itt	gt
 80a6668:	f104 34ff 	addgt.w	r4, r4, #4294967295
 80a666c:	189b      	addgt	r3, r3, r2
 80a666e:	e7f6      	b.n	80a665e <div+0x16>

080a6670 <_findenv_r>:
 80a6670:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a6674:	4607      	mov	r7, r0
 80a6676:	4689      	mov	r9, r1
 80a6678:	4616      	mov	r6, r2
 80a667a:	f000 f917 	bl	80a68ac <__env_lock>
 80a667e:	4b18      	ldr	r3, [pc, #96]	; (80a66e0 <_findenv_r+0x70>)
 80a6680:	681c      	ldr	r4, [r3, #0]
 80a6682:	469a      	mov	sl, r3
 80a6684:	b134      	cbz	r4, 80a6694 <_findenv_r+0x24>
 80a6686:	464b      	mov	r3, r9
 80a6688:	4698      	mov	r8, r3
 80a668a:	f813 1b01 	ldrb.w	r1, [r3], #1
 80a668e:	b139      	cbz	r1, 80a66a0 <_findenv_r+0x30>
 80a6690:	293d      	cmp	r1, #61	; 0x3d
 80a6692:	d1f9      	bne.n	80a6688 <_findenv_r+0x18>
 80a6694:	4638      	mov	r0, r7
 80a6696:	f000 f90f 	bl	80a68b8 <__env_unlock>
 80a669a:	2000      	movs	r0, #0
 80a669c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a66a0:	eba8 0809 	sub.w	r8, r8, r9
 80a66a4:	46a3      	mov	fp, r4
 80a66a6:	f854 0b04 	ldr.w	r0, [r4], #4
 80a66aa:	2800      	cmp	r0, #0
 80a66ac:	d0f2      	beq.n	80a6694 <_findenv_r+0x24>
 80a66ae:	4642      	mov	r2, r8
 80a66b0:	4649      	mov	r1, r9
 80a66b2:	f7ff fc45 	bl	80a5f40 <strncmp>
 80a66b6:	2800      	cmp	r0, #0
 80a66b8:	d1f4      	bne.n	80a66a4 <_findenv_r+0x34>
 80a66ba:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80a66be:	eb03 0508 	add.w	r5, r3, r8
 80a66c2:	f813 3008 	ldrb.w	r3, [r3, r8]
 80a66c6:	2b3d      	cmp	r3, #61	; 0x3d
 80a66c8:	d1ec      	bne.n	80a66a4 <_findenv_r+0x34>
 80a66ca:	f8da 3000 	ldr.w	r3, [sl]
 80a66ce:	4638      	mov	r0, r7
 80a66d0:	ebab 0303 	sub.w	r3, fp, r3
 80a66d4:	109b      	asrs	r3, r3, #2
 80a66d6:	6033      	str	r3, [r6, #0]
 80a66d8:	f000 f8ee 	bl	80a68b8 <__env_unlock>
 80a66dc:	1c68      	adds	r0, r5, #1
 80a66de:	e7dd      	b.n	80a669c <_findenv_r+0x2c>
 80a66e0:	2000023c 	.word	0x2000023c

080a66e4 <_getenv_r>:
 80a66e4:	b507      	push	{r0, r1, r2, lr}
 80a66e6:	aa01      	add	r2, sp, #4
 80a66e8:	f7ff ffc2 	bl	80a6670 <_findenv_r>
 80a66ec:	b003      	add	sp, #12
 80a66ee:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a66f4 <__gettzinfo>:
 80a66f4:	4800      	ldr	r0, [pc, #0]	; (80a66f8 <__gettzinfo+0x4>)
 80a66f6:	4770      	bx	lr
 80a66f8:	20000078 	.word	0x20000078

080a66fc <gmtime_r>:
 80a66fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a6700:	e9d0 6700 	ldrd	r6, r7, [r0]
 80a6704:	460c      	mov	r4, r1
 80a6706:	2300      	movs	r3, #0
 80a6708:	4630      	mov	r0, r6
 80a670a:	4639      	mov	r1, r7
 80a670c:	4a4f      	ldr	r2, [pc, #316]	; (80a684c <gmtime_r+0x150>)
 80a670e:	f000 f8d9 	bl	80a68c4 <__aeabi_ldivmod>
 80a6712:	4639      	mov	r1, r7
 80a6714:	4605      	mov	r5, r0
 80a6716:	2300      	movs	r3, #0
 80a6718:	4630      	mov	r0, r6
 80a671a:	4a4c      	ldr	r2, [pc, #304]	; (80a684c <gmtime_r+0x150>)
 80a671c:	f000 f8d2 	bl	80a68c4 <__aeabi_ldivmod>
 80a6720:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a6724:	2a00      	cmp	r2, #0
 80a6726:	bfbc      	itt	lt
 80a6728:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80a672c:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80a6730:	fbb2 f3f1 	udiv	r3, r2, r1
 80a6734:	fb01 2213 	mls	r2, r1, r3, r2
 80a6738:	f04f 013c 	mov.w	r1, #60	; 0x3c
 80a673c:	60a3      	str	r3, [r4, #8]
 80a673e:	fbb2 f3f1 	udiv	r3, r2, r1
 80a6742:	fb01 2213 	mls	r2, r1, r3, r2
 80a6746:	6022      	str	r2, [r4, #0]
 80a6748:	f04f 0207 	mov.w	r2, #7
 80a674c:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 80a6750:	bfac      	ite	ge
 80a6752:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 80a6756:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 80a675a:	6063      	str	r3, [r4, #4]
 80a675c:	1cc3      	adds	r3, r0, #3
 80a675e:	fb93 f2f2 	sdiv	r2, r3, r2
 80a6762:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a6766:	1a9b      	subs	r3, r3, r2
 80a6768:	bf48      	it	mi
 80a676a:	3307      	addmi	r3, #7
 80a676c:	2800      	cmp	r0, #0
 80a676e:	4938      	ldr	r1, [pc, #224]	; (80a6850 <gmtime_r+0x154>)
 80a6770:	61a3      	str	r3, [r4, #24]
 80a6772:	bfbd      	ittte	lt
 80a6774:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 80a6778:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 80a677c:	fb93 f1f1 	sdivlt	r1, r3, r1
 80a6780:	fb90 f1f1 	sdivge	r1, r0, r1
 80a6784:	f648 62ac 	movw	r2, #36524	; 0x8eac
 80a6788:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 80a678c:	4b31      	ldr	r3, [pc, #196]	; (80a6854 <gmtime_r+0x158>)
 80a678e:	f240 176d 	movw	r7, #365	; 0x16d
 80a6792:	fb03 0001 	mla	r0, r3, r1, r0
 80a6796:	fbb0 f2f2 	udiv	r2, r0, r2
 80a679a:	fbb0 f3fc 	udiv	r3, r0, ip
 80a679e:	4402      	add	r2, r0
 80a67a0:	1ad2      	subs	r2, r2, r3
 80a67a2:	4b2d      	ldr	r3, [pc, #180]	; (80a6858 <gmtime_r+0x15c>)
 80a67a4:	2664      	movs	r6, #100	; 0x64
 80a67a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80a67aa:	1ad3      	subs	r3, r2, r3
 80a67ac:	fbb3 f5f7 	udiv	r5, r3, r7
 80a67b0:	fbb3 f3fc 	udiv	r3, r3, ip
 80a67b4:	fbb5 f2f6 	udiv	r2, r5, r6
 80a67b8:	1ad3      	subs	r3, r2, r3
 80a67ba:	4403      	add	r3, r0
 80a67bc:	2099      	movs	r0, #153	; 0x99
 80a67be:	fb07 3315 	mls	r3, r7, r5, r3
 80a67c2:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 80a67c6:	f10c 0c02 	add.w	ip, ip, #2
 80a67ca:	fbbc f7f0 	udiv	r7, ip, r0
 80a67ce:	f04f 0805 	mov.w	r8, #5
 80a67d2:	4378      	muls	r0, r7
 80a67d4:	3002      	adds	r0, #2
 80a67d6:	fbb0 f0f8 	udiv	r0, r0, r8
 80a67da:	f103 0e01 	add.w	lr, r3, #1
 80a67de:	ebae 0000 	sub.w	r0, lr, r0
 80a67e2:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 80a67e6:	45f4      	cmp	ip, lr
 80a67e8:	bf94      	ite	ls
 80a67ea:	f04f 0c02 	movls.w	ip, #2
 80a67ee:	f06f 0c09 	mvnhi.w	ip, #9
 80a67f2:	4467      	add	r7, ip
 80a67f4:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 80a67f8:	fb0c 5101 	mla	r1, ip, r1, r5
 80a67fc:	2f01      	cmp	r7, #1
 80a67fe:	bf98      	it	ls
 80a6800:	3101      	addls	r1, #1
 80a6802:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80a6806:	d30c      	bcc.n	80a6822 <gmtime_r+0x126>
 80a6808:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80a680c:	61e3      	str	r3, [r4, #28]
 80a680e:	2300      	movs	r3, #0
 80a6810:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 80a6814:	60e0      	str	r0, [r4, #12]
 80a6816:	e9c4 7104 	strd	r7, r1, [r4, #16]
 80a681a:	4620      	mov	r0, r4
 80a681c:	6223      	str	r3, [r4, #32]
 80a681e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a6822:	f015 0f03 	tst.w	r5, #3
 80a6826:	d102      	bne.n	80a682e <gmtime_r+0x132>
 80a6828:	fb06 5212 	mls	r2, r6, r2, r5
 80a682c:	b95a      	cbnz	r2, 80a6846 <gmtime_r+0x14a>
 80a682e:	f44f 76c8 	mov.w	r6, #400	; 0x190
 80a6832:	fbb5 f2f6 	udiv	r2, r5, r6
 80a6836:	fb06 5212 	mls	r2, r6, r2, r5
 80a683a:	fab2 f282 	clz	r2, r2
 80a683e:	0952      	lsrs	r2, r2, #5
 80a6840:	333b      	adds	r3, #59	; 0x3b
 80a6842:	4413      	add	r3, r2
 80a6844:	e7e2      	b.n	80a680c <gmtime_r+0x110>
 80a6846:	2201      	movs	r2, #1
 80a6848:	e7fa      	b.n	80a6840 <gmtime_r+0x144>
 80a684a:	bf00      	nop
 80a684c:	00015180 	.word	0x00015180
 80a6850:	00023ab1 	.word	0x00023ab1
 80a6854:	fffdc54f 	.word	0xfffdc54f
 80a6858:	00023ab0 	.word	0x00023ab0

080a685c <labs>:
 80a685c:	2800      	cmp	r0, #0
 80a685e:	bfb8      	it	lt
 80a6860:	4240      	neglt	r0, r0
 80a6862:	4770      	bx	lr

080a6864 <__retarget_lock_acquire>:
 80a6864:	4770      	bx	lr

080a6866 <__retarget_lock_acquire_recursive>:
 80a6866:	4770      	bx	lr

080a6868 <__retarget_lock_release>:
 80a6868:	4770      	bx	lr

080a686a <__retarget_lock_release_recursive>:
 80a686a:	4770      	bx	lr

080a686c <__ascii_mbtowc>:
 80a686c:	b082      	sub	sp, #8
 80a686e:	b901      	cbnz	r1, 80a6872 <__ascii_mbtowc+0x6>
 80a6870:	a901      	add	r1, sp, #4
 80a6872:	b142      	cbz	r2, 80a6886 <__ascii_mbtowc+0x1a>
 80a6874:	b14b      	cbz	r3, 80a688a <__ascii_mbtowc+0x1e>
 80a6876:	7813      	ldrb	r3, [r2, #0]
 80a6878:	600b      	str	r3, [r1, #0]
 80a687a:	7812      	ldrb	r2, [r2, #0]
 80a687c:	1e10      	subs	r0, r2, #0
 80a687e:	bf18      	it	ne
 80a6880:	2001      	movne	r0, #1
 80a6882:	b002      	add	sp, #8
 80a6884:	4770      	bx	lr
 80a6886:	4610      	mov	r0, r2
 80a6888:	e7fb      	b.n	80a6882 <__ascii_mbtowc+0x16>
 80a688a:	f06f 0001 	mvn.w	r0, #1
 80a688e:	e7f8      	b.n	80a6882 <__ascii_mbtowc+0x16>

080a6890 <__ascii_wctomb>:
 80a6890:	4603      	mov	r3, r0
 80a6892:	4608      	mov	r0, r1
 80a6894:	b141      	cbz	r1, 80a68a8 <__ascii_wctomb+0x18>
 80a6896:	2aff      	cmp	r2, #255	; 0xff
 80a6898:	d904      	bls.n	80a68a4 <__ascii_wctomb+0x14>
 80a689a:	228a      	movs	r2, #138	; 0x8a
 80a689c:	f04f 30ff 	mov.w	r0, #4294967295
 80a68a0:	601a      	str	r2, [r3, #0]
 80a68a2:	4770      	bx	lr
 80a68a4:	2001      	movs	r0, #1
 80a68a6:	700a      	strb	r2, [r1, #0]
 80a68a8:	4770      	bx	lr
	...

080a68ac <__env_lock>:
 80a68ac:	4801      	ldr	r0, [pc, #4]	; (80a68b4 <__env_lock+0x8>)
 80a68ae:	f7ff bfda 	b.w	80a6866 <__retarget_lock_acquire_recursive>
 80a68b2:	bf00      	nop
 80a68b4:	20000772 	.word	0x20000772

080a68b8 <__env_unlock>:
 80a68b8:	4801      	ldr	r0, [pc, #4]	; (80a68c0 <__env_unlock+0x8>)
 80a68ba:	f7ff bfd6 	b.w	80a686a <__retarget_lock_release_recursive>
 80a68be:	bf00      	nop
 80a68c0:	20000772 	.word	0x20000772

080a68c4 <__aeabi_ldivmod>:
 80a68c4:	b97b      	cbnz	r3, 80a68e6 <__aeabi_ldivmod+0x22>
 80a68c6:	b972      	cbnz	r2, 80a68e6 <__aeabi_ldivmod+0x22>
 80a68c8:	2900      	cmp	r1, #0
 80a68ca:	bfbe      	ittt	lt
 80a68cc:	2000      	movlt	r0, #0
 80a68ce:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80a68d2:	e006      	blt.n	80a68e2 <__aeabi_ldivmod+0x1e>
 80a68d4:	bf08      	it	eq
 80a68d6:	2800      	cmpeq	r0, #0
 80a68d8:	bf1c      	itt	ne
 80a68da:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80a68de:	f04f 30ff 	movne.w	r0, #4294967295
 80a68e2:	f7fe b99d 	b.w	80a4c20 <__aeabi_idiv0>
 80a68e6:	f1ad 0c08 	sub.w	ip, sp, #8
 80a68ea:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80a68ee:	2900      	cmp	r1, #0
 80a68f0:	db09      	blt.n	80a6906 <__aeabi_ldivmod+0x42>
 80a68f2:	2b00      	cmp	r3, #0
 80a68f4:	db1a      	blt.n	80a692c <__aeabi_ldivmod+0x68>
 80a68f6:	f7fe f831 	bl	80a495c <__udivmoddi4>
 80a68fa:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a68fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a6902:	b004      	add	sp, #16
 80a6904:	4770      	bx	lr
 80a6906:	4240      	negs	r0, r0
 80a6908:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a690c:	2b00      	cmp	r3, #0
 80a690e:	db1b      	blt.n	80a6948 <__aeabi_ldivmod+0x84>
 80a6910:	f7fe f824 	bl	80a495c <__udivmoddi4>
 80a6914:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a6918:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a691c:	b004      	add	sp, #16
 80a691e:	4240      	negs	r0, r0
 80a6920:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a6924:	4252      	negs	r2, r2
 80a6926:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a692a:	4770      	bx	lr
 80a692c:	4252      	negs	r2, r2
 80a692e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a6932:	f7fe f813 	bl	80a495c <__udivmoddi4>
 80a6936:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a693a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a693e:	b004      	add	sp, #16
 80a6940:	4240      	negs	r0, r0
 80a6942:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a6946:	4770      	bx	lr
 80a6948:	4252      	negs	r2, r2
 80a694a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a694e:	f7fe f805 	bl	80a495c <__udivmoddi4>
 80a6952:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a6956:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a695a:	b004      	add	sp, #16
 80a695c:	4252      	negs	r2, r2
 80a695e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a6962:	4770      	bx	lr

080a6964 <dynalib_user>:
 80a6964:	001d 080a 005d 080a 0085 080a 0089 080a     ....]...........
 80a6974:	0000 0000 4544 5542 0047 616f 7475 5f68     ....DEBUG.oauth_
 80a6984:	7375 5f72 6f63 6564 6f00 7561 6874 705f     usr_code.oauth_p
 80a6994:	6c6f 5f6c 7561 6874 6f00 7561 6874 725f     oll_auth.oauth_r
 80a69a4:	6665 745f 6b6f 6e65 5300 6174 6574 203a     ef_token.State: 
 80a69b4:	614f 7475 3268 5220 6665 6572 6873 5420     Oauth2 Refresh T
 80a69c4:	6b6f 6e65 5300 6174 6574 203a 614f 7475     oken.State: Oaut
 80a69d4:	3268 5220 7165 5520 6573 2072 6f43 6564     h2 Req User Code
 80a69e4:	6800 6f6f 2d6b 6572 7073 6e6f 6573 6800     .hook-response.h
 80a69f4:	6f6f 2d6b 7265 6f72 0072 0a0d 6854 7369     ook-error...This
 80a6a04:	6120 7070 696c 6163 6974 6e6f 7220 7165      application req
 80a6a14:	6975 6572 2073 6f79 7275 7020 7265 696d     uires your permi
 80a6a24:	7373 6f69 206e 6f74 6120 6363 7365 2073     ssion to access 
 80a6a34:	6f79 7275 4720 6f6f 6c67 2065 6143 656c     your Google Cale
 80a6a44:	646e 7261 002e 0a0d 6c50 6165 6573 202c     ndar....Please, 
 80a6a54:	6f67 7420 3a6f 0020 202c 6e61 2064 6e65     go to: ., and en
 80a6a64:	6574 2072 6874 2065 6f66 6c6c 776f 6e69     ter the followin
 80a6a74:	2067 6f63 6564 203a 0d00 440a 7665 6369     g code: ...Devic
 80a6a84:	2065 7561 6874 726f 7a69 6465 0d21 000a     e authorized!...
 80a6a94:	6544 6976 6563 6120 7475 6f68 6972 657a     Device authorize
 80a6aa4:	2164 0d00 410a 6363 7365 2073 6f74 656b     d!...Access toke
 80a6ab4:	206e 6572 7266 7365 6568 2164 0a0d 4100     n refreshed!...A
 80a6ac4:	6363 7365 2073 6f74 656b 206e 6572 7266     ccess token refr
 80a6ad4:	7365 6568 2164 5200 7365 3a70 4f20 7541     eshed!.Resp: OAu
 80a6ae4:	6874 5f32 7453 7461 2065 6f4e 2074 6553     th2_State Not Se
 80a6af4:	2174 2121 0d00 480a 5454 2050 5245 4f52     t!!!...HTTP ERRO
 80a6b04:	2052 202d 6425 0d00 450a 7272 726f 203a     R - %d...Error: 
 80a6b14:	6e49 6176 696c 2064 6c63 6569 746e 6920     Invalid client i
 80a6b24:	2e64 4100 7475 6f68 6972 617a 6974 6e6f     d..Authorization
 80a6b34:	7020 6e65 6964 676e 2e2e 002e 0a0d 7245      pending......Er
 80a6b44:	6f72 3a72 4120 6363 7365 2073 6564 696e     ror: Access deni
 80a6b54:	6465 002e 0a0d 7245 6f72 3a72 4920 766e     ed....Error: Inv
 80a6b64:	6c61 6469 6320 696c 6e65 2074 6573 7263     alid client secr
 80a6b74:	7465 002e 0a0d 7245 6f72 3a72 4920 766e     et....Error: Inv
 80a6b84:	6c61 6469 7220 7165 6575 7473 002e 6f54     alid request..To
 80a6b94:	656b 206e 6974 656d 756f 3a74 5220 6665     ken timeout: Ref
 80a6ba4:	6572 6873 6e69 2e67 2e2e 2f00 6f68 6b6f     reshing..../hook
 80a6bb4:	722d 7365 6f70 736e 2f65 2f00 6f68 6b6f     -response/./hook
 80a6bc4:	652d 7272 726f 002f 227b 6c63 6569 746e     -error/.{"client
 80a6bd4:	695f 2264 223a 7325 7d22 5500 6573 2072     _id":"%s"}.User 
 80a6be4:	6f63 6564 7220 7165 6575 7473 7320 6e65     code request sen
 80a6bf4:	2174 7b00 6322 696c 6e65 5f74 6469 3a22     t!.{"client_id":
 80a6c04:	2522 2273 222c 6c63 6569 746e 735f 6365     "%s","client_sec
 80a6c14:	6572 2274 223a 7325 2c22 6322 646f 2265     ret":"%s","code"
 80a6c24:	223a 7325 7d22 4500 7272 726f 203a 7355     :"%s"}.Error: Us
 80a6c34:	7265 6320 646f 2065 6168 2073 7865 6970     er code has expi
 80a6c44:	6572 2e64 7b00 7222 6665 6572 6873 745f     red..{"refresh_t
 80a6c54:	6b6f 6e65 3a22 2522 2273 222c 6c63 6569     oken":"%s","clie
 80a6c64:	746e 695f 2264 223a 7325 2c22 6322 696c     nt_id":"%s","cli
 80a6c74:	6e65 5f74 6573 7263 7465 3a22 2522 2273     ent_secret":"%s"
 80a6c84:	007d 6552 7266 7365 2068 6f74 656b 206e     }.Refresh token 
 80a6c94:	6572 7571 7365 2074 6573 746e 5700 6961     request sent.Wai
 80a6ca4:	6974 676e 203a 414f 7475 3268 7220 7365     ting: OAuth2 res
 80a6cb4:	6f70 736e 2e65 2e2e 4400 7665 6369 2065     ponse....Device 
 80a6cc4:	7541 6874 726f 7a69 6465 0021 6f4c 706f     Authorized!.Loop
 80a6cd4:	203a 414f 7475 3268 535f 6174 6574 4e20     : OAuth2_State N
 80a6ce4:	746f 5320 7465 2121 0021 6d45 7470 0079     ot Set!!!.Empty.
	...
 80a6eec:	0000 6163 656c 646e 7261 655f 6576 746e     ..calendar_event
 80a6efc:	2d00 3730 303a 0030 227b 6163 656c 646e     .-07:00.{"calend
 80a6f0c:	7261 695f 2264 223a 7325 2c22 6122 6363     ar_id":"%s","acc
 80a6f1c:	7365 5f73 6f74 656b 226e 223a 7325 2c22     ess_token":"%s",
 80a6f2c:	7422 6d69 5f65 696d 226e 223a 7325 2c22     "time_min":"%s",
 80a6f3c:	7422 6d69 5f65 616d 2278 223a 7325 7d22     "time_max":"%s"}
 80a6f4c:	5400 6d69 2065 656c 7466 203a 6425 253a     .Time left: %d:%
 80a6f5c:	3230 3a64 3025 6432 2500 2d64 6425 252d     02d:%02d.%d-%d-%
 80a6f6c:	2064 6425 253a 3230 3a64 3025 6432 7e00     d %d:%02d:%02d.~
 80a6f7c:	7e7e 0d00 450a 7272 726f 203a 6854 2065     ~~...Error: The 
 80a6f8c:	6572 7571 7365 6574 2064 726f 6564 6972     requested orderi
 80a6f9c:	676e 6920 2073 6f6e 2074 7661 6961 616c     ng is not availa
 80a6fac:	6c62 2065 6f66 2072 6874 2065 6170 7472     ble for the part
 80a6fbc:	6369 6c75 7261 7120 6575 7972 002e 0a0d     icular query....
 80a6fcc:	7245 6f72 3a72 4920 766e 6c61 6469 6320     Error: Invalid c
 80a6fdc:	6572 6564 746e 6169 736c 002e 0a0d 7245     redentials....Er
 80a6fec:	6f72 3a72 4920 766e 6c61 6469 6320 6c61     ror: Invalid cal
 80a6ffc:	6e65 6164 2072 6469 002e 6556 0067 6f54     endar id..Veg.To
 80a700c:	006d 7246 006f 6552 616c 2079 6553 7574     m.Fro.Relay Setu
 80a701c:	2070 6f43 706d 656c 6574 7200 6c65 7961     p Complete.relay
 80a702c:	2031 203d 4e4f 7200 6c65 7961 2031 203d     1 = ON.relay1 = 
 80a703c:	464f 0046 6572 616c 3279 3d20 4f20 004e     OFF.relay2 = ON.
 80a704c:	6572 616c 3279 3d20 4f20 4646 7200 6c65     relay2 = OFF.rel
 80a705c:	7961 2033 203d 4e4f 7200 6c65 7961 2033     ay3 = ON.relay3 
 80a706c:	203d 464f 0046 7554 6e72 6e69 2067 666f     = OFF.Turning of
 80a707c:	2066 6572 616c 7379 4300 6c61 6e65 6164     f relays.Calenda
 80a708c:	2072 7665 6e65 2074 7570 6c62 7369 6568     r event publishe
 80a709c:	2164 7700 6961 6974 676e 203a 6163 656c     d!.waiting: cale
 80a70ac:	646e 7261 6120 6970 7220 7365 6f70 736e     ndar api respons
 80a70bc:	2e65 2e2e 5300 6174 6567 6320 6168 676e     e....Stage chang
 80a70cc:	6465 7420 3a6f 4f20 5541 4854 0032 7453     ed to: OAUTH2.St
 80a70dc:	6761 3a65 4320 4c41 4e45 4144 0052 7453     age: CALENDAR.St
 80a70ec:	6761 3a65 5720 4941 4954 474e 5300 6174     age: WAITING.Sta
 80a70fc:	6567 203a 4550 444e 4e49 0047 7453 6761     ge: PENDING.Stag
 80a710c:	3a65 4120 5443 5649 0045 6341 7674 3a65     e: ACTIVE.Actve:
 80a711c:	0020 7041 2070 7453 6761 2065 6146 6c69      .App Stage Fail
 80a712c:	7275 0065 6552 6461 4320 6c61 6e65 6164     ure.Read Calenda
 80a713c:	2072 3128 7220 6165 2964 4300 7275 6572     r (1 read).Curre
 80a714c:	746e 5320 6174 6574 5400 6d69 2065 6552     nt State.Time Re
 80a715c:	616d 6e69 6e69 0067 6552 616c 2079 6e4f     maining.Relay On
 80a716c:	2820 2030 6c61 296c 5200 6c65 7961 4f20      (0 all).Relay O
 80a717c:	6666 2820 2030 6c61 296c 4f00 7561 6874     ff (0 all).Oauth
 80a718c:	2032 6c61 6572 6461 2079 7561 6874 6e65     2 already authen
 80a719c:	6369 7461 6465 5000 6572 7373 5220 7365     icated.Press Res
 80a71ac:	7465 4220 7475 6f74 006e 6550 646e 6e69     et Button.Pendin
 80a71bc:	3a67 0020 6f4e 7020 6e65 6964 676e 6520     g: .No pending e
 80a71cc:	6576 746e 2173 5700 6961 6974 676e 3300     vents!.Waiting.3
 80a71dc:	3535 3833 3132 3838 3131 2d39 3031 6832     55382188119-102h
 80a71ec:	7674 6966 6e69 6471 3063 7370 3065 3065     tvfiinqdc0pse0e0
 80a71fc:	7539 6b71 3676 6c38 6a33 3736 612e 7070     9uqkv68l3j67.app
 80a720c:	2e73 6f67 676f 656c 7375 7265 6f63 746e     s.googleusercont
 80a721c:	6e65 2e74 6f63 006d 3141 3466 3372 6f48     ent.com.A1f4r3Ho
 80a722c:	5042 2d46 7858 527a 7965 594e 4e45 6f45     BPF-XxzReyNYENEo
 80a723c:	3100 3367 6730 3539 6561 6a67 6631 6f70     .1g30g95aegj1fpo
 80a724c:	7433 7034 6e37 6865 7368 406b 7267 756f     3t4p7nehhsk@grou
 80a725c:	2e70 6163 656c 646e 7261 672e 6f6f 6c67     p.calendar.googl
 80a726c:	2e65 6f63 006d                              e.com.

080a7272 <_ZL9TIME_ZONE>:
 80a7272:	61f9 7070 2500 302b 6433 253a 3230 0075     .app.%+03d:%02u.
 80a7282:	5925 252d 2d6d 6425 2554 3a48 4d25 253a     %Y-%m-%dT%H:%M:%
 80a7292:	2553 007a 7361 7463 6d69 0065 0000          S%z.asctime...

080a72a0 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a72a8:	2e5d 080a 2e63 080a 2ea1 080a 2e71 080a     ]...c.......q...
 80a72b8:	2e5f 080a                                   _...

080a72bc <_ZTV9IPAddress>:
	...
 80a72c4:	3411 080a 3401 080a 3403 080a               .4...4...4..

080a72d0 <_ZTV9USBSerial>:
	...
 80a72d8:	34cd 080a 3533 080a 350b 080a 2841 080a     .4..35...5..A(..
 80a72e8:	34fd 080a 34cf 080a 34df 080a 352d 080a     .4...4...4..-5..
 80a72f8:	34ef 080a 34c9 080a                         .4...4..

080a7300 <_ZTV11USARTSerial>:
	...
 80a7308:	3631 080a 3699 080a 3675 080a 2841 080a     16...6..u6..A(..
 80a7318:	3645 080a 3661 080a 3653 080a 366f 080a     E6..a6..S6..o6..
 80a7328:	3633 080a 3637 080a                         36..76..

080a7330 <_ZTV7TwoWire>:
	...
 80a7338:	3781 080a 37cb 080a 37a3 080a 3783 080a     .7...7...7...7..
 80a7348:	37ab 080a 37b3 080a 37bb 080a 37c3 080a     .7...7...7...7..

080a7358 <_ZTVN5spark9WiFiClassE>:
	...
 80a7360:	3893 080a 3889 080a 387f 080a 37fd 080a     .8...8...8...7..
 80a7370:	28f9 080a 3873 080a 38f1 080a 38f9 080a     .(..s8...8...8..
 80a7380:	3867 080a 385f 080a 3855 080a 384b 080a     g8.._8..U8..K8..
 80a7390:	3807 080a                                   .8..

080a7394 <_ZTVN5spark12NetworkClassE>:
	...
 80a739c:	38b1 080a 38bb 080a 38c5 080a 38cf 080a     .8...8...8...8..
 80a73ac:	38d9 080a 38e5 080a 38f1 080a 38f9 080a     .8...8...8...8..
 80a73bc:	3901 080a 390d 080a 3915 080a 391f 080a     .9...9...9...9..
 80a73cc:	3929 080a                                   )9..

080a73d0 <_ZSt7nothrow>:
 80a73d0:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
 80a73e0:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

080a73f1 <day_name.4782>:
 80a73f1:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 80a7401:	6972 6153                                    riSat

080a7406 <mon_name.4783>:
 80a7406:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 80a7416:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 80a7426:	4476 6365 0000                              vDec..

080a742c <DAYS_IN_MONTH>:
 80a742c:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 80a743c:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a744c:	001e 0000 001f 0000 001e 0000 001f 0000     ................

080a745c <_DAYS_BEFORE_MONTH>:
 80a745c:	0000 0000 001f 0000 003b 0000 005a 0000     ........;...Z...
 80a746c:	0078 0000 0097 0000 00b5 0000 00d4 0000     x...............
 80a747c:	00f3 0000 0111 0000 0130 0000 014e 0000     ........0...N...

080a748c <__month_lengths>:
 80a748c:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 80a749c:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a74ac:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a74bc:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 80a74cc:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a74dc:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a74ec:	7325 2e25 642a 2500 2573 2e30 642a 2b00     %s%.*d.%s%0.*d.+
 80a74fc:	2d00 2500 6432 2500 322e 2f64 2e25 6432     .-.%2d.%.2d/%.2d
 80a750c:	252f 322e 0064 6c25 0075 2d59 6d25 252d     /%.2d.%lu.Y-%m-%
 80a751c:	0064 2a2e 0075 2e25 6433 2500 6c6c 0064     d..*u.%.3d.%lld.
 80a752c:	2e25 6432 253a 322e 3a64 2e25 6432 2500     %.2d:%.2d:%.2d.%
 80a753c:	302b 6c33 2564 322e 646c 4a00 6e61 4600     +03ld%.2ld.Jan.F
 80a754c:	6265 4d00 7261 4100 7270 4d00 7961 4a00     eb.Mar.Apr.May.J
 80a755c:	6e75 4a00 6c75 4100 6775 5300 7065 4f00     un.Jul.Aug.Sep.O
 80a756c:	7463 4e00 766f 4400 6365 4a00 6e61 6175     ct.Nov.Dec.Janua
 80a757c:	7972 4600 6265 7572 7261 0079 614d 6372     ry.February.Marc
 80a758c:	0068 7041 6972 006c 754a 656e 4a00 6c75     h.April.June.Jul
 80a759c:	0079 7541 7567 7473 5300 7065 6574 626d     y.August.Septemb
 80a75ac:	7265 4f00 7463 626f 7265 4e00 766f 6d65     er.October.Novem
 80a75bc:	6562 0072 6544 6563 626d 7265 5300 6e75     ber.December.Sun
 80a75cc:	4d00 6e6f 5400 6575 5700 6465 5400 7568     .Mon.Tue.Wed.Thu
 80a75dc:	4600 6972 5300 7461 5300 6e75 6164 0079     .Fri.Sat.Sunday.
 80a75ec:	6f4d 646e 7961 5400 6575 6473 7961 5700     Monday.Tuesday.W
 80a75fc:	6465 656e 6473 7961 5400 7568 7372 6164     ednesday.Thursda
 80a760c:	0079 7246 6469 7961 5300 7461 7275 6164     y.Friday.Saturda
 80a761c:	0079 4825 253a 3a4d 5325 2500 2f6d 6425     y.%H:%M:%S.%m/%d
 80a762c:	252f 0079 6125 2520 2062 6525 2520 3a48     /%y.%a %b %e %H:
 80a763c:	4d25 253a 2053 5925 4100 004d 4d50 2500     %M:%S %Y.AM.PM.%
 80a764c:	2061 6225 2520 2065 4825 253a 3a4d 5325     a %b %e %H:%M:%S
 80a765c:	2520 205a 5925 6d00 0064 4925 253a 3a4d      %Z %Y.md.%I:%M:
 80a766c:	5325 2520 0070 0000                         %S %p...

080a7674 <_C_time_locale>:
 80a7674:	7547 080a 754b 080a 754f 080a 7553 080a     Gu..Ku..Ou..Su..
 80a7684:	7557 080a 755b 080a 755f 080a 7563 080a     Wu..[u.._u..cu..
 80a7694:	7567 080a 756b 080a 756f 080a 7573 080a     gu..ku..ou..su..
 80a76a4:	7577 080a 757f 080a 7588 080a 758e 080a     wu...u...u...u..
 80a76b4:	7557 080a 7594 080a 7599 080a 759e 080a     Wu...u...u...u..
 80a76c4:	75a5 080a 75af 080a 75b7 080a 75c0 080a     .u...u...u...u..
 80a76d4:	75c9 080a 75cd 080a 75d1 080a 75d5 080a     .u...u...u...u..
 80a76e4:	75d9 080a 75dd 080a 75e1 080a 75e5 080a     .u...u...u...u..
 80a76f4:	75ec 080a 75f3 080a 75fb 080a 7605 080a     .u...u...u...v..
 80a7704:	760e 080a 7615 080a 761e 080a 7627 080a     .v...v...v..'v..
 80a7714:	7630 080a 7645 080a 7648 080a 764b 080a     0v..Ev..Hv..Kv..
 80a7724:	7577 080a 757f 080a 7588 080a 758e 080a     wu...u...u...u..
 80a7734:	7557 080a 7594 080a 7599 080a 759e 080a     Wu...u...u...u..
 80a7744:	75a5 080a 75af 080a 75b7 080a 75c0 080a     .u...u...u...u..
 80a7754:	7663 080a 7666 080a 6ac2 080a 6ac2 080a     cv..fv...j...j..
 80a7764:	6ac2 080a 6ac2 080a 6ac2 080a 5a54 4700     .j...j...j..TZ.G
 80a7774:	544d 2500 3031 5e5b 2d30 2c39 2d2b 255d     MT.%10[^0-9,+-]%
 80a7784:	006e 254d 7568 6e25 252e 7568 6e25 252e     n.M%hu%n.%hu%n.%
 80a7794:	7568 6e25 2f00 6825 2575 3a6e 6825 2575     hu%n./%hu%n:%hu%
 80a77a4:	3a6e 6825 2575 006e                         n:%hu%n.

080a77ac <_ctype_>:
 80a77ac:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 80a77bc:	2020 2020 2020 2020 2020 2020 2020 2020                     
 80a77cc:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 80a77dc:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 80a77ec:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 80a77fc:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 80a780c:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 80a781c:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 80a782c:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
 80a78ac:	4300 5000 534f 5849                          .C.POSIX.

080a78b5 <link_const_variable_data_end>:
 80a78b5:	00          	.byte	0x00
	...

080a78b8 <link_constructors_location>:
 80a78b8:	080a0cf5 	.word	0x080a0cf5
 80a78bc:	080a1579 	.word	0x080a1579
 80a78c0:	080a180d 	.word	0x080a180d
 80a78c4:	080a1e89 	.word	0x080a1e89
 80a78c8:	080a24b9 	.word	0x080a24b9
 80a78cc:	080a2915 	.word	0x080a2915
 80a78d0:	080a2cad 	.word	0x080a2cad
 80a78d4:	080a2cf5 	.word	0x080a2cf5
 80a78d8:	080a389d 	.word	0x080a389d
 80a78dc:	080a3979 	.word	0x080a3979
 80a78e0:	080a3aa9 	.word	0x080a3aa9

080a78e4 <link_constructors_end>:
	...
