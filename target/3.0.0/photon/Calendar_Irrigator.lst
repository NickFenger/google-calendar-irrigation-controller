
c:/Users/Nick/Documents/Particle/calendar_irrigator/Calendar_Irrigator/target/3.0.0/photon/Calendar_Irrigator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00007b14  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  080a7b30  080a7b30  00017b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  40024000  080a7b38  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000240  20000000  080a7b3c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000002d8  20000240  20000240  00040240  2**3
                  ALLOC
  7 .module_info_suffix 00000028  080a7d7c  080a7d7c  00037d7c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  080a7da4  080a7da4  00037da4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00184140  00000000  00000000  00037da8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0001940a  00000000  00000000  001bbee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00020b4f  00000000  00000000  001d52f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000023e0  00000000  00000000  001f5e41  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00005d98  00000000  00000000  001f8221  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0002c0cf  00000000  00000000  001fdfb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00038184  00000000  00000000  0022a088  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000becca  00000000  00000000  0026220c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  000065ec  00000000  00000000  00320ed8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f005 f821 	bl	80a5074 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f005 f829 	bl	80a5090 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a7b3c 	.word	0x080a7b3c
 80a004c:	20000240 	.word	0x20000240
 80a0050:	20000240 	.word	0x20000240
 80a0054:	20000515 	.word	0x20000515
 80a0058:	20000515 	.word	0x20000515

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f002 ffc9 	bl	80a2ff4 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0062:	2500      	movs	r5, #0
 80a0064:	4e05      	ldr	r6, [pc, #20]	; (80a007c <module_user_init+0x20>)
 80a0066:	4c06      	ldr	r4, [pc, #24]	; (80a0080 <module_user_init+0x24>)
 80a0068:	1ba4      	subs	r4, r4, r6
 80a006a:	08a4      	lsrs	r4, r4, #2
 80a006c:	42a5      	cmp	r5, r4
 80a006e:	d100      	bne.n	80a0072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0072:	f856 3b04 	ldr.w	r3, [r6], #4
 80a0076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f7      	b.n	80a006c <module_user_init+0x10>
 80a007c:	080a7af8 	.word	0x080a7af8
 80a0080:	080a7b24 	.word	0x080a7b24

080a0084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0084:	f001 bcc2 	b.w	80a1a0c <setup>

080a0088 <module_user_loop>:
}

void module_user_loop() {
 80a0088:	b508      	push	{r3, lr}
    loop();
 80a008a:	f001 fe55 	bl	80a1d38 <loop>
    _post_loop();
}
 80a008e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0092:	f002 bf71 	b.w	80a2f78 <_post_loop>

080a0096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80a0096:	f002 ba93 	b.w	80a25c0 <malloc>

080a009a <_Znaj>:
 80a009a:	f002 ba91 	b.w	80a25c0 <malloc>

080a009e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a009e:	f002 ba97 	b.w	80a25d0 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr

080a00b2 <_Z12split_stringR6StringcRsS1_>:
//!
//!	@return None.
//
//*****************************************************************************
String split_string(String &str, char delimiter, int16_t &index, int16_t &last_index)
{
 80a00b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a00b4:	460e      	mov	r6, r1
 80a00b6:	4605      	mov	r5, r0
 80a00b8:	4611      	mov	r1, r2
    //  Search for the delimiter position.
    index = str.indexOf(delimiter, index);
 80a00ba:	4630      	mov	r0, r6
 80a00bc:	f9b3 2000 	ldrsh.w	r2, [r3]
{
 80a00c0:	461c      	mov	r4, r3
 80a00c2:	9f06      	ldr	r7, [sp, #24]
    index = str.indexOf(delimiter, index);
 80a00c4:	f002 fc60 	bl	80a2988 <_ZNK6String7indexOfEcj>
 80a00c8:	b203      	sxth	r3, r0
 80a00ca:	8023      	strh	r3, [r4, #0]
    //  Generate an string from the given indexs values.
    String result = str.substring(last_index, index);
 80a00cc:	4628      	mov	r0, r5
 80a00ce:	f9b7 2000 	ldrsh.w	r2, [r7]
 80a00d2:	4631      	mov	r1, r6
 80a00d4:	f002 fc78 	bl	80a29c8 <_ZNK6String9substringEjj>
    last_index = ++index;
 80a00d8:	8822      	ldrh	r2, [r4, #0]
    return result;
}
 80a00da:	4628      	mov	r0, r5
    last_index = ++index;
 80a00dc:	3201      	adds	r2, #1
 80a00de:	b212      	sxth	r2, r2
 80a00e0:	8022      	strh	r2, [r4, #0]
 80a00e2:	803a      	strh	r2, [r7, #0]
}
 80a00e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a00e6 <_Z9unix_timeiiiiii>:
//!
//!	@return A unix timestamp corresponding to the parameters passed.
//
//*****************************************************************************
time_t unix_time(int year, int month, int day, int hour, int min, int sec)
{
 80a00e6:	b500      	push	{lr}
 80a00e8:	b08b      	sub	sp, #44	; 0x2c
  struct tm t;
  t.tm_year = year - 1900;
  t.tm_mon = month - 1;
  t.tm_mday = day;
  t.tm_hour = hour;
 80a00ea:	9303      	str	r3, [sp, #12]
  t.tm_min = min;
 80a00ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  t.tm_year = year - 1900;
 80a00ee:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
  t.tm_min = min;
 80a00f2:	9302      	str	r3, [sp, #8]
  t.tm_sec = sec;
 80a00f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  t.tm_year = year - 1900;
 80a00f6:	9006      	str	r0, [sp, #24]
  t.tm_sec = sec;
 80a00f8:	9301      	str	r3, [sp, #4]
  t.tm_isdst = 0;
 80a00fa:	2300      	movs	r3, #0
  t.tm_mon = month - 1;
 80a00fc:	3901      	subs	r1, #1
  return mktime(&t);
 80a00fe:	a801      	add	r0, sp, #4
  t.tm_mday = day;
 80a0100:	e9cd 2104 	strd	r2, r1, [sp, #16]
  t.tm_isdst = 0;
 80a0104:	9309      	str	r3, [sp, #36]	; 0x24
  return mktime(&t);
 80a0106:	f005 f8a3 	bl	80a5250 <mktime>
 80a010a:	b00b      	add	sp, #44	; 0x2c
 80a010c:	f85d fb04 	ldr.w	pc, [sp], #4

080a0110 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM13Google_OAuth2FvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a0110:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a0112:	b538      	push	{r3, r4, r5, lr}
 80a0114:	4604      	mov	r4, r0
	  switch (__op)
 80a0116:	d007      	beq.n	80a0128 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM13Google_OAuth2FvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x18>
 80a0118:	2a03      	cmp	r2, #3
 80a011a:	d011      	beq.n	80a0140 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM13Google_OAuth2FvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x30>
 80a011c:	2a01      	cmp	r2, #1
 80a011e:	d101      	bne.n	80a0124 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM13Google_OAuth2FvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80a0120:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
 80a0122:	6023      	str	r3, [r4, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a0124:	2000      	movs	r0, #0
 80a0126:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80a0128:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
 80a012a:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a012c:	f7ff ffb3 	bl	80a0096 <_Znwj>
 80a0130:	4603      	mov	r3, r0
 80a0132:	2800      	cmp	r0, #0
 80a0134:	d0f5      	beq.n	80a0122 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM13Google_OAuth2FvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
 80a0136:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80a013a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80a013e:	e7f0      	b.n	80a0122 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM13Google_OAuth2FvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
	  delete __victim._M_access<_Functor*>();
 80a0140:	6800      	ldr	r0, [r0, #0]
 80a0142:	2800      	cmp	r0, #0
 80a0144:	d0ee      	beq.n	80a0124 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM13Google_OAuth2FvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>
 80a0146:	210c      	movs	r1, #12
 80a0148:	f003 fe05 	bl	80a3d56 <_ZdlPvj>
 80a014c:	e7ea      	b.n	80a0124 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM13Google_OAuth2FvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>

080a014e <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM13Google_OAuth2FvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE9_M_invokeERKSt9_Any_dataOS1_SH_>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a014e:	b470      	push	{r4, r5, r6}
	    return __source._M_access<_Functor*>();
 80a0150:	6803      	ldr	r3, [r0, #0]
      // Call unqualified
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return std::__invoke(_M_f,
 80a0152:	6809      	ldr	r1, [r1, #0]
  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    {
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
 80a0154:	685c      	ldr	r4, [r3, #4]
 80a0156:	689d      	ldr	r5, [r3, #8]
 80a0158:	1066      	asrs	r6, r4, #1
 80a015a:	eb05 0064 	add.w	r0, r5, r4, asr #1
 80a015e:	07e4      	lsls	r4, r4, #31
 80a0160:	bf48      	it	mi
 80a0162:	59ac      	ldrmi	r4, [r5, r6]
 80a0164:	681b      	ldr	r3, [r3, #0]
 80a0166:	6812      	ldr	r2, [r2, #0]
 80a0168:	bf48      	it	mi
 80a016a:	58e3      	ldrmi	r3, [r4, r3]
      {
	(*_Base::_M_get_pointer(__functor))(
	    std::forward<_ArgTypes>(__args)...);
      }
 80a016c:	bc70      	pop	{r4, r5, r6}
 80a016e:	4718      	bx	r3

080a0170 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>:

inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
 80a0170:	b513      	push	{r0, r1, r4, lr}
 80a0172:	4604      	mov	r4, r0
 80a0174:	4b05      	ldr	r3, [pc, #20]	; (80a018c <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0+0x1c>)
 80a0176:	460a      	mov	r2, r1
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 80a0178:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a017a:	4905      	ldr	r1, [pc, #20]	; (80a0190 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0+0x20>)
 80a017c:	f88d 3000 	strb.w	r3, [sp]
 80a0180:	233c      	movs	r3, #60	; 0x3c
 80a0182:	f003 f8c5 	bl	80a3310 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    return publish(name, data, PUBLIC);
}
 80a0186:	4620      	mov	r0, r4
 80a0188:	b002      	add	sp, #8
 80a018a:	bd10      	pop	{r4, pc}
 80a018c:	20000244 	.word	0x20000244
 80a0190:	080a6b6c 	.word	0x080a6b6c

080a0194 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 80a0194:	b510      	push	{r4, lr}
      if (_M_manager)
 80a0196:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 80a0198:	4604      	mov	r4, r0
      if (_M_manager)
 80a019a:	b113      	cbz	r3, 80a01a2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a019c:	2203      	movs	r2, #3
 80a019e:	4601      	mov	r1, r0
 80a01a0:	4798      	blx	r3
    }
 80a01a2:	4620      	mov	r0, r4
 80a01a4:	bd10      	pop	{r4, pc}

080a01a6 <_ZN13Google_OAuth29time_leftEv>:
//!
//! @return false if no time left, true if there is still time left.
//
//*****************************************************************************
bool Google_OAuth2::time_left(void)
{
 80a01a6:	b570      	push	{r4, r5, r6, lr}
 80a01a8:	4605      	mov	r5, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a01aa:	f002 f803 	bl	80a21b4 <HAL_Timer_Get_Milli_Seconds>
    uint32_t time_elapsed = millis() - time;
 80a01ae:	f8d5 42b0 	ldr.w	r4, [r5, #688]	; 0x2b0
 80a01b2:	4606      	mov	r6, r0
 80a01b4:	f001 fffe 	bl	80a21b4 <HAL_Timer_Get_Milli_Seconds>
    time = millis();
    life_time -= time_elapsed;
 80a01b8:	f8d5 32b4 	ldr.w	r3, [r5, #692]	; 0x2b4
    time = millis();
 80a01bc:	f8c5 02b0 	str.w	r0, [r5, #688]	; 0x2b0
    life_time -= time_elapsed;
 80a01c0:	441c      	add	r4, r3
 80a01c2:	1ba0      	subs	r0, r4, r6
    return (life_time > 0);
}
 80a01c4:	2800      	cmp	r0, #0
    life_time -= time_elapsed;
 80a01c6:	f8c5 02b4 	str.w	r0, [r5, #692]	; 0x2b4
}
 80a01ca:	bfd4      	ite	le
 80a01cc:	2000      	movle	r0, #0
 80a01ce:	2001      	movgt	r0, #1
 80a01d0:	bd70      	pop	{r4, r5, r6, pc}

080a01d2 <_ZN13Google_OAuth213authenticatedEv>:
    }
    
    //char  statusText[64];
    //sprintf(statusText, "Time Remaining %ld", life_time);
    //DEBUG_PRINT(statusText);
    return state == OAuth2_State::REFRESH_TOKEN;
 80a01d2:	f890 02be 	ldrb.w	r0, [r0, #702]	; 0x2be
    
}
 80a01d6:	1e83      	subs	r3, r0, #2
 80a01d8:	4258      	negs	r0, r3
 80a01da:	4158      	adcs	r0, r3
 80a01dc:	4770      	bx	lr

080a01de <_ZN13Google_OAuth210authorizedEv>:
//! @return false if not authorized, true if authorized.
//
//*****************************************************************************
bool Google_OAuth2::authorized(void)
{
    return state == OAuth2_State::AUTHORIZED;
 80a01de:	f890 02be 	ldrb.w	r0, [r0, #702]	; 0x2be
}
 80a01e2:	1ec3      	subs	r3, r0, #3
 80a01e4:	4258      	negs	r0, r3
 80a01e6:	4158      	adcs	r0, r3
 80a01e8:	4770      	bx	lr

080a01ea <_ZN13Google_OAuth26failedEv>:
//! @return false if did not fail, true if failed.
//
//*****************************************************************************
bool Google_OAuth2::failed(void)
{
    return state == OAuth2_State::FAILED;
 80a01ea:	f890 02be 	ldrb.w	r0, [r0, #702]	; 0x2be
    
}
 80a01ee:	1f43      	subs	r3, r0, #5
 80a01f0:	4258      	negs	r0, r3
 80a01f2:	4158      	adcs	r0, r3
 80a01f4:	4770      	bx	lr

080a01f6 <_ZN13Google_OAuth211write_tokenEv>:
//!
//! @return None.
//
//*****************************************************************************
void Google_OAuth2::write_token(void)
{
 80a01f6:	b598      	push	{r3, r4, r7, lr}
    
    
    int n = refresh_token.length();
 
    // declaring character array
    char token[n + 1];
 80a01f8:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
{
 80a01fc:	af00      	add	r7, sp, #0
    char token[n + 1];
 80a01fe:	3308      	adds	r3, #8
 80a0200:	f023 0307 	bic.w	r3, r3, #7
 80a0204:	ebad 0d03 	sub.w	sp, sp, r3
{
 80a0208:	4604      	mov	r4, r0
 
    // copying the contents of the
    // string to char array
    strcpy(token, refresh_token.c_str());
 80a020a:	f8d0 129c 	ldr.w	r1, [r0, #668]	; 0x29c
 80a020e:	4668      	mov	r0, sp
 80a0210:	f005 fa01 	bl	80a5616 <strcpy>
    //    cout << token[i];
    
    
    
    //  Write 0 to indicate "available".
    Refresh_Token.available = 0;
 80a0214:	2300      	movs	r3, #0
    //delay(1000);
    //DEBUG_PRINT("write token");

    //  Copy the token into the Refresh Token struct.
    strlcpy_P(Refresh_Token.data, token, sizeof(Refresh_Token.data));
 80a0216:	4669      	mov	r1, sp
    Refresh_Token.available = 0;
 80a0218:	7223      	strb	r3, [r4, #8]
    strlcpy_P(Refresh_Token.data, token, sizeof(Refresh_Token.data));
 80a021a:	f44f 7200 	mov.w	r2, #512	; 0x200
 80a021e:	f104 0009 	add.w	r0, r4, #9
 80a0222:	f005 ff99 	bl	80a6158 <strncpy>
    EEPROM.put(TOKEN_ADDRESS, Refresh_Token);
 80a0226:	f003 fd23 	bl	80a3c70 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 80a022a:	f240 2201 	movw	r2, #513	; 0x201
 80a022e:	6820      	ldr	r0, [r4, #0]
 80a0230:	f104 0108 	add.w	r1, r4, #8
 80a0234:	f001 ffd6 	bl	80a21e4 <HAL_EEPROM_Put>
    
    
}
 80a0238:	46bd      	mov	sp, r7
 80a023a:	bd98      	pop	{r3, r4, r7, pc}

080a023c <_ZN13Google_OAuth210read_tokenEv>:
//!
//! @return false if token not available, true if token available.
//
//*****************************************************************************
bool Google_OAuth2::read_token(void)
{
 80a023c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a023e:	4604      	mov	r4, r0
    EEPROM.get(TOKEN_ADDRESS, Refresh_Token);
 80a0240:	f003 fd16 	bl	80a3c70 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 80a0244:	f240 2201 	movw	r2, #513	; 0x201
 80a0248:	6820      	ldr	r0, [r4, #0]
 80a024a:	f104 0108 	add.w	r1, r4, #8
 80a024e:	f001 ffc1 	bl	80a21d4 <HAL_EEPROM_Get>
  
    //  If 1, token not available in memory.
    //  If 0, token available in memory.
    if (Refresh_Token.available == 1)
 80a0252:	7a23      	ldrb	r3, [r4, #8]
 80a0254:	2b01      	cmp	r3, #1
 80a0256:	d00f      	beq.n	80a0278 <_ZN13Google_OAuth210read_tokenEv+0x3c>
    {
        return false;
    }
    //  Access the raw token data from the Refresh Token struct
    //  and convert it into an string object.
    refresh_token = String(Refresh_Token.data);
 80a0258:	f104 0109 	add.w	r1, r4, #9
 80a025c:	4668      	mov	r0, sp
 80a025e:	f002 faa7 	bl	80a27b0 <_ZN6StringC1EPKc>
 80a0262:	4669      	mov	r1, sp
 80a0264:	f504 7027 	add.w	r0, r4, #668	; 0x29c
 80a0268:	f002 faec 	bl	80a2844 <_ZN6StringaSEOS_>
 80a026c:	4668      	mov	r0, sp
 80a026e:	f002 fa55 	bl	80a271c <_ZN6StringD1Ev>
 80a0272:	2001      	movs	r0, #1
    //delay(1000);
    //DEBUG_PRINT("token read from struct next");
    //delay(1000);
    //DEBUG_PRINT(refresh_token);
    return true;
}
 80a0274:	b004      	add	sp, #16
 80a0276:	bd10      	pop	{r4, pc}
        return false;
 80a0278:	2000      	movs	r0, #0
 80a027a:	e7fb      	b.n	80a0274 <_ZN13Google_OAuth210read_tokenEv+0x38>

080a027c <_ZN13Google_OAuth2C1ERK6StringS2_>:
Google_OAuth2::Google_OAuth2(const String &client_id, const String &client_secret)
 80a027c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    : CLIENT_ID(client_id), CLIENT_SECRET(client_secret)
 80a027e:	2500      	movs	r5, #0
 80a0280:	f44f 7300 	mov.w	r3, #512	; 0x200
 80a0284:	e9c0 5300 	strd	r5, r3, [r0]
            //  if 1, token is not available.
            uint8_t available;
            //  Raw token data (max. 60 characters).
            char data[512];
            //  Default constructor.
            oauth2_token() : available(1), data("Empty") {};
 80a0288:	2301      	movs	r3, #1
Google_OAuth2::Google_OAuth2(const String &client_id, const String &client_secret)
 80a028a:	4604      	mov	r4, r0
 80a028c:	460f      	mov	r7, r1
 80a028e:	4616      	mov	r6, r2
 80a0290:	7203      	strb	r3, [r0, #8]
 80a0292:	4b29      	ldr	r3, [pc, #164]	; (80a0338 <_ZN13Google_OAuth2C1ERK6StringS2_+0xbc>)
 80a0294:	4629      	mov	r1, r5
 80a0296:	681a      	ldr	r2, [r3, #0]
 80a0298:	889b      	ldrh	r3, [r3, #4]
 80a029a:	f8c0 2009 	str.w	r2, [r0, #9]
 80a029e:	f8a0 300d 	strh.w	r3, [r0, #13]
 80a02a2:	f44f 72fd 	mov.w	r2, #506	; 0x1fa
 80a02a6:	300f      	adds	r0, #15
 80a02a8:	f004 fef2 	bl	80a5090 <memset>
    : CLIENT_ID(client_id), CLIENT_SECRET(client_secret)
 80a02ac:	4923      	ldr	r1, [pc, #140]	; (80a033c <_ZN13Google_OAuth2C1ERK6StringS2_+0xc0>)
 80a02ae:	f504 7003 	add.w	r0, r4, #524	; 0x20c
 80a02b2:	f002 fa7d 	bl	80a27b0 <_ZN6StringC1EPKc>
 80a02b6:	4922      	ldr	r1, [pc, #136]	; (80a0340 <_ZN13Google_OAuth2C1ERK6StringS2_+0xc4>)
 80a02b8:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 80a02bc:	f002 fa78 	bl	80a27b0 <_ZN6StringC1EPKc>
 80a02c0:	4920      	ldr	r1, [pc, #128]	; (80a0344 <_ZN13Google_OAuth2C1ERK6StringS2_+0xc8>)
 80a02c2:	f504 700b 	add.w	r0, r4, #556	; 0x22c
 80a02c6:	f002 fa73 	bl	80a27b0 <_ZN6StringC1EPKc>
 80a02ca:	4639      	mov	r1, r7
 80a02cc:	f504 700f 	add.w	r0, r4, #572	; 0x23c
 80a02d0:	f002 faad 	bl	80a282e <_ZN6StringC1ERKS_>
 80a02d4:	4631      	mov	r1, r6
 80a02d6:	f504 7013 	add.w	r0, r4, #588	; 0x24c
 80a02da:	f002 faa8 	bl	80a282e <_ZN6StringC1ERKS_>
 80a02de:	491a      	ldr	r1, [pc, #104]	; (80a0348 <_ZN13Google_OAuth2C1ERK6StringS2_+0xcc>)
 80a02e0:	f504 7017 	add.w	r0, r4, #604	; 0x25c
 80a02e4:	f002 fa64 	bl	80a27b0 <_ZN6StringC1EPKc>
 80a02e8:	4917      	ldr	r1, [pc, #92]	; (80a0348 <_ZN13Google_OAuth2C1ERK6StringS2_+0xcc>)
 80a02ea:	f504 701b 	add.w	r0, r4, #620	; 0x26c
 80a02ee:	f002 fa5f 	bl	80a27b0 <_ZN6StringC1EPKc>
 80a02f2:	4915      	ldr	r1, [pc, #84]	; (80a0348 <_ZN13Google_OAuth2C1ERK6StringS2_+0xcc>)
 80a02f4:	f504 701f 	add.w	r0, r4, #636	; 0x27c
 80a02f8:	f002 fa5a 	bl	80a27b0 <_ZN6StringC1EPKc>
 80a02fc:	4912      	ldr	r1, [pc, #72]	; (80a0348 <_ZN13Google_OAuth2C1ERK6StringS2_+0xcc>)
 80a02fe:	f504 7023 	add.w	r0, r4, #652	; 0x28c
 80a0302:	f002 fa55 	bl	80a27b0 <_ZN6StringC1EPKc>
 80a0306:	4910      	ldr	r1, [pc, #64]	; (80a0348 <_ZN13Google_OAuth2C1ERK6StringS2_+0xcc>)
 80a0308:	f504 7027 	add.w	r0, r4, #668	; 0x29c
 80a030c:	f002 fa50 	bl	80a27b0 <_ZN6StringC1EPKc>
 80a0310:	490d      	ldr	r1, [pc, #52]	; (80a0348 <_ZN13Google_OAuth2C1ERK6StringS2_+0xcc>)
 80a0312:	f504 7031 	add.w	r0, r4, #708	; 0x2c4
 80a0316:	f002 fa4b 	bl	80a27b0 <_ZN6StringC1EPKc>
    if (read_token())
 80a031a:	4620      	mov	r0, r4
 80a031c:	f7ff ff8e 	bl	80a023c <_ZN13Google_OAuth210read_tokenEv>
 80a0320:	42a8      	cmp	r0, r5
        state = OAuth2_State::REQ_USER_CODE;
 80a0322:	bf14      	ite	ne
 80a0324:	2302      	movne	r3, #2
 80a0326:	462b      	moveq	r3, r5
}
 80a0328:	4620      	mov	r0, r4
 80a032a:	f884 32be 	strb.w	r3, [r4, #702]	; 0x2be
    polling_time = 0;
 80a032e:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
    is_device_subscribed = false;
 80a0332:	f884 52c0 	strb.w	r5, [r4, #704]	; 0x2c0
}
 80a0336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a0338:	080a6eb0 	.word	0x080a6eb0
 80a033c:	080a6b72 	.word	0x080a6b72
 80a0340:	080a6b81 	.word	0x080a6b81
 80a0344:	080a6b91 	.word	0x080a6b91
 80a0348:	080a6c3b 	.word	0x080a6c3b

080a034c <_ZN13Google_OAuth211erase_tokenEv>:
//!
//! @return None.
//
//*****************************************************************************
void Google_OAuth2::erase_token(void)
{
 80a034c:	b538      	push	{r3, r4, r5, lr}
    //  Write 1 to indicate "not available".
    Refresh_Token.available = 1;
 80a034e:	4605      	mov	r5, r0
 80a0350:	2301      	movs	r3, #1
{
 80a0352:	4604      	mov	r4, r0
    Refresh_Token.available = 1;
 80a0354:	f805 3f08 	strb.w	r3, [r5, #8]!
    EEPROM.put(TOKEN_ADDRESS, Refresh_Token);
 80a0358:	f003 fc8a 	bl	80a3c70 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 80a035c:	4629      	mov	r1, r5
 80a035e:	6820      	ldr	r0, [r4, #0]
 80a0360:	f240 2201 	movw	r2, #513	; 0x201
}
 80a0364:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a0368:	f001 bf3c 	b.w	80a21e4 <HAL_EEPROM_Put>

080a036c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a036c:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a036e:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 80a0370:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 80a0372:	b17c      	cbz	r4, 80a0394 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 80a0374:	6863      	ldr	r3, [r4, #4]
 80a0376:	3b01      	subs	r3, #1
 80a0378:	6063      	str	r3, [r4, #4]
 80a037a:	b95b      	cbnz	r3, 80a0394 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 80a037c:	6823      	ldr	r3, [r4, #0]
 80a037e:	4620      	mov	r0, r4
 80a0380:	689b      	ldr	r3, [r3, #8]
 80a0382:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a0384:	68a3      	ldr	r3, [r4, #8]
 80a0386:	3b01      	subs	r3, #1
 80a0388:	60a3      	str	r3, [r4, #8]
 80a038a:	b91b      	cbnz	r3, 80a0394 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a038c:	6823      	ldr	r3, [r4, #0]
 80a038e:	4620      	mov	r0, r4
 80a0390:	68db      	ldr	r3, [r3, #12]
 80a0392:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 80a0394:	4628      	mov	r0, r5
 80a0396:	bd38      	pop	{r3, r4, r5, pc}

080a0398 <_ZN13Google_OAuth26parserEPKcS1_>:
{
 80a0398:	b5f0      	push	{r4, r5, r6, r7, lr}
    int16_t index = 0, last_index = 0;
 80a039a:	2600      	movs	r6, #0
{
 80a039c:	460d      	mov	r5, r1
 80a039e:	b09b      	sub	sp, #108	; 0x6c
    String str_data = String(data);
 80a03a0:	4611      	mov	r1, r2
{
 80a03a2:	4604      	mov	r4, r0
    String str_data = String(data);
 80a03a4:	a806      	add	r0, sp, #24
    int16_t index = 0, last_index = 0;
 80a03a6:	f8ad 600c 	strh.w	r6, [sp, #12]
 80a03aa:	f8ad 600e 	strh.w	r6, [sp, #14]
    String str_data = String(data);
 80a03ae:	f002 f9ff 	bl	80a27b0 <_ZN6StringC1EPKc>
    String str_event = String(event);
 80a03b2:	4629      	mov	r1, r5
 80a03b4:	a80a      	add	r0, sp, #40	; 0x28
    split_string(str_event, '/', index, last_index); // skip deviceID.
 80a03b6:	f10d 050e 	add.w	r5, sp, #14
    String str_event = String(event);
 80a03ba:	f002 f9f9 	bl	80a27b0 <_ZN6StringC1EPKc>
    split_string(str_event, '/', index, last_index); // skip deviceID.
 80a03be:	222f      	movs	r2, #47	; 0x2f
 80a03c0:	ab03      	add	r3, sp, #12
 80a03c2:	a90a      	add	r1, sp, #40	; 0x28
 80a03c4:	a816      	add	r0, sp, #88	; 0x58
 80a03c6:	9500      	str	r5, [sp, #0]
 80a03c8:	f7ff fe73 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
 80a03cc:	a816      	add	r0, sp, #88	; 0x58
 80a03ce:	f002 f9a5 	bl	80a271c <_ZN6StringD1Ev>
    String hook = split_string(str_event, '/', index, last_index);
 80a03d2:	222f      	movs	r2, #47	; 0x2f
 80a03d4:	ab03      	add	r3, sp, #12
 80a03d6:	a90a      	add	r1, sp, #40	; 0x28
 80a03d8:	a80e      	add	r0, sp, #56	; 0x38
 80a03da:	9500      	str	r5, [sp, #0]
 80a03dc:	f7ff fe69 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
    String webhook_event_name = split_string(str_event, '/', index, last_index);
 80a03e0:	a90a      	add	r1, sp, #40	; 0x28
 80a03e2:	a812      	add	r0, sp, #72	; 0x48
 80a03e4:	222f      	movs	r2, #47	; 0x2f
 80a03e6:	9500      	str	r5, [sp, #0]
 80a03e8:	ab03      	add	r3, sp, #12
 80a03ea:	f7ff fe62 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
    if (hook.equals("hook-response"))
 80a03ee:	4974      	ldr	r1, [pc, #464]	; (80a05c0 <_ZN13Google_OAuth26parserEPKcS1_+0x228>)
 80a03f0:	a80e      	add	r0, sp, #56	; 0x38
    index = 0, last_index = 0;
 80a03f2:	f8ad 600c 	strh.w	r6, [sp, #12]
 80a03f6:	f8ad 600e 	strh.w	r6, [sp, #14]
    if (hook.equals("hook-response"))
 80a03fa:	f002 faa8 	bl	80a294e <_ZNK6String6equalsEPKc>
 80a03fe:	2800      	cmp	r0, #0
 80a0400:	f000 80cc 	beq.w	80a059c <_ZN13Google_OAuth26parserEPKcS1_+0x204>
        if (webhook_event_name.equals(EVENT_REQ_USER_CODE))
 80a0404:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 80a0408:	a812      	add	r0, sp, #72	; 0x48
 80a040a:	f002 fa93 	bl	80a2934 <_ZNK6String6equalsERKS_>
 80a040e:	4607      	mov	r7, r0
 80a0410:	2800      	cmp	r0, #0
 80a0412:	d060      	beq.n	80a04d6 <_ZN13Google_OAuth26parserEPKcS1_+0x13e>
            device_code = split_string(str_data, '~', index, last_index);
 80a0414:	227e      	movs	r2, #126	; 0x7e
 80a0416:	ab03      	add	r3, sp, #12
 80a0418:	a906      	add	r1, sp, #24
 80a041a:	a816      	add	r0, sp, #88	; 0x58
 80a041c:	9500      	str	r5, [sp, #0]
 80a041e:	f7ff fe48 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
 80a0422:	a916      	add	r1, sp, #88	; 0x58
 80a0424:	f504 7017 	add.w	r0, r4, #604	; 0x25c
 80a0428:	f002 fa0c 	bl	80a2844 <_ZN6StringaSEOS_>
 80a042c:	a816      	add	r0, sp, #88	; 0x58
 80a042e:	f002 f975 	bl	80a271c <_ZN6StringD1Ev>
            user_code = split_string(str_data, '~', index, last_index);
 80a0432:	227e      	movs	r2, #126	; 0x7e
 80a0434:	ab03      	add	r3, sp, #12
 80a0436:	a906      	add	r1, sp, #24
 80a0438:	a816      	add	r0, sp, #88	; 0x58
 80a043a:	9500      	str	r5, [sp, #0]
 80a043c:	f7ff fe39 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
 80a0440:	a916      	add	r1, sp, #88	; 0x58
 80a0442:	f504 701b 	add.w	r0, r4, #620	; 0x26c
 80a0446:	f002 f9fd 	bl	80a2844 <_ZN6StringaSEOS_>
 80a044a:	a816      	add	r0, sp, #88	; 0x58
 80a044c:	f002 f966 	bl	80a271c <_ZN6StringD1Ev>
            auth_url = split_string(str_data, '~', index, last_index);
 80a0450:	227e      	movs	r2, #126	; 0x7e
 80a0452:	ab03      	add	r3, sp, #12
 80a0454:	a906      	add	r1, sp, #24
 80a0456:	a816      	add	r0, sp, #88	; 0x58
 80a0458:	9500      	str	r5, [sp, #0]
 80a045a:	f7ff fe2a 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
 80a045e:	a916      	add	r1, sp, #88	; 0x58
 80a0460:	f504 701f 	add.w	r0, r4, #636	; 0x27c
 80a0464:	f002 f9ee 	bl	80a2844 <_ZN6StringaSEOS_>
 80a0468:	a816      	add	r0, sp, #88	; 0x58
 80a046a:	f002 f957 	bl	80a271c <_ZN6StringD1Ev>
            life_time = split_string(str_data, '~', index, last_index).toInt() * 1000;
 80a046e:	227e      	movs	r2, #126	; 0x7e
 80a0470:	a906      	add	r1, sp, #24
 80a0472:	ab03      	add	r3, sp, #12
 80a0474:	a816      	add	r0, sp, #88	; 0x58
 80a0476:	9500      	str	r5, [sp, #0]
 80a0478:	f7ff fe1b 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
 80a047c:	a816      	add	r0, sp, #88	; 0x58
 80a047e:	f002 fac5 	bl	80a2a0c <_ZNK6String5toIntEv>
 80a0482:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0486:	4343      	muls	r3, r0
 80a0488:	a816      	add	r0, sp, #88	; 0x58
 80a048a:	f8c4 32b4 	str.w	r3, [r4, #692]	; 0x2b4
 80a048e:	f002 f945 	bl	80a271c <_ZN6StringD1Ev>
            polling_rate = split_string(str_data, '\0', index, last_index).toInt() * 1000;
 80a0492:	ab03      	add	r3, sp, #12
 80a0494:	4632      	mov	r2, r6
 80a0496:	a906      	add	r1, sp, #24
 80a0498:	a816      	add	r0, sp, #88	; 0x58
 80a049a:	9500      	str	r5, [sp, #0]
 80a049c:	f7ff fe09 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
 80a04a0:	a816      	add	r0, sp, #88	; 0x58
 80a04a2:	f002 fab3 	bl	80a2a0c <_ZNK6String5toIntEv>
 80a04a6:	ebc0 1340 	rsb	r3, r0, r0, lsl #5
 80a04aa:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80a04ae:	00c0      	lsls	r0, r0, #3
 80a04b0:	f8a4 02bc 	strh.w	r0, [r4, #700]	; 0x2bc
        http_status_code = str_data.substring(13, 16).toInt();
 80a04b4:	a816      	add	r0, sp, #88	; 0x58
 80a04b6:	f002 f931 	bl	80a271c <_ZN6StringD1Ev>
    String webhook_event_name = split_string(str_event, '/', index, last_index);
 80a04ba:	a812      	add	r0, sp, #72	; 0x48
 80a04bc:	f002 f92e 	bl	80a271c <_ZN6StringD1Ev>
    String hook = split_string(str_event, '/', index, last_index);
 80a04c0:	a80e      	add	r0, sp, #56	; 0x38
 80a04c2:	f002 f92b 	bl	80a271c <_ZN6StringD1Ev>
    String str_event = String(event);
 80a04c6:	a80a      	add	r0, sp, #40	; 0x28
 80a04c8:	f002 f928 	bl	80a271c <_ZN6StringD1Ev>
    String str_data = String(data);
 80a04cc:	a806      	add	r0, sp, #24
 80a04ce:	f002 f925 	bl	80a271c <_ZN6StringD1Ev>
}
 80a04d2:	b01b      	add	sp, #108	; 0x6c
 80a04d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if (webhook_event_name.equals(EVENT_POLL_AUTH))
 80a04d6:	f504 7107 	add.w	r1, r4, #540	; 0x21c
 80a04da:	a812      	add	r0, sp, #72	; 0x48
 80a04dc:	f002 fa2a 	bl	80a2934 <_ZNK6String6equalsERKS_>
 80a04e0:	4606      	mov	r6, r0
 80a04e2:	2800      	cmp	r0, #0
 80a04e4:	d040      	beq.n	80a0568 <_ZN13Google_OAuth26parserEPKcS1_+0x1d0>
            access_token = split_string(str_data, '~', index, last_index);
 80a04e6:	227e      	movs	r2, #126	; 0x7e
 80a04e8:	ab03      	add	r3, sp, #12
 80a04ea:	a906      	add	r1, sp, #24
 80a04ec:	a816      	add	r0, sp, #88	; 0x58
 80a04ee:	9500      	str	r5, [sp, #0]
 80a04f0:	f7ff fddf 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
 80a04f4:	a916      	add	r1, sp, #88	; 0x58
 80a04f6:	f504 7023 	add.w	r0, r4, #652	; 0x28c
 80a04fa:	f002 f9a3 	bl	80a2844 <_ZN6StringaSEOS_>
 80a04fe:	a816      	add	r0, sp, #88	; 0x58
 80a0500:	f002 f90c 	bl	80a271c <_ZN6StringD1Ev>
            refresh_token = split_string(str_data, '~', index, last_index);
 80a0504:	227e      	movs	r2, #126	; 0x7e
 80a0506:	ab03      	add	r3, sp, #12
 80a0508:	a906      	add	r1, sp, #24
 80a050a:	a816      	add	r0, sp, #88	; 0x58
 80a050c:	9500      	str	r5, [sp, #0]
 80a050e:	f7ff fdd0 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
 80a0512:	a916      	add	r1, sp, #88	; 0x58
 80a0514:	f504 7027 	add.w	r0, r4, #668	; 0x29c
 80a0518:	f002 f994 	bl	80a2844 <_ZN6StringaSEOS_>
 80a051c:	a816      	add	r0, sp, #88	; 0x58
 80a051e:	f002 f8fd 	bl	80a271c <_ZN6StringD1Ev>
            delay(1000);
 80a0522:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a0526:	f002 fcc9 	bl	80a2ebc <delay>
            DEBUG_PRINT(refresh_token);
 80a052a:	f8d4 129c 	ldr.w	r1, [r4, #668]	; 0x29c
 80a052e:	a816      	add	r0, sp, #88	; 0x58
 80a0530:	f002 fa72 	bl	80a2a18 <_ZN6String6formatEPKcz>
 80a0534:	9916      	ldr	r1, [sp, #88]	; 0x58
 80a0536:	a804      	add	r0, sp, #16
 80a0538:	f7ff fe1a 	bl	80a0170 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a053c:	a805      	add	r0, sp, #20
 80a053e:	f7ff ff15 	bl	80a036c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0542:	a816      	add	r0, sp, #88	; 0x58
 80a0544:	f002 f8ea 	bl	80a271c <_ZN6StringD1Ev>
            life_time = split_string(str_data, '\0', index, last_index).toInt() * 1000;
 80a0548:	463a      	mov	r2, r7
 80a054a:	9500      	str	r5, [sp, #0]
 80a054c:	ab03      	add	r3, sp, #12
            life_time = split_string(str_data, '\0', index, last_index).toInt() * 1000;
 80a054e:	a906      	add	r1, sp, #24
 80a0550:	a816      	add	r0, sp, #88	; 0x58
 80a0552:	f7ff fdae 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
 80a0556:	a816      	add	r0, sp, #88	; 0x58
 80a0558:	f002 fa58 	bl	80a2a0c <_ZNK6String5toIntEv>
 80a055c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0560:	4343      	muls	r3, r0
 80a0562:	f8c4 32b4 	str.w	r3, [r4, #692]	; 0x2b4
 80a0566:	e7a5      	b.n	80a04b4 <_ZN13Google_OAuth26parserEPKcS1_+0x11c>
        else if (webhook_event_name.equals(EVENT_REFRESH_TOKEN))
 80a0568:	f504 710b 	add.w	r1, r4, #556	; 0x22c
 80a056c:	a812      	add	r0, sp, #72	; 0x48
 80a056e:	f002 f9e1 	bl	80a2934 <_ZNK6String6equalsERKS_>
 80a0572:	2800      	cmp	r0, #0
 80a0574:	d0a1      	beq.n	80a04ba <_ZN13Google_OAuth26parserEPKcS1_+0x122>
            access_token = split_string(str_data, '~', index, last_index);
 80a0576:	227e      	movs	r2, #126	; 0x7e
 80a0578:	ab03      	add	r3, sp, #12
 80a057a:	a906      	add	r1, sp, #24
 80a057c:	a816      	add	r0, sp, #88	; 0x58
 80a057e:	9500      	str	r5, [sp, #0]
 80a0580:	f7ff fd97 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
 80a0584:	a916      	add	r1, sp, #88	; 0x58
 80a0586:	f504 7023 	add.w	r0, r4, #652	; 0x28c
 80a058a:	f002 f95b 	bl	80a2844 <_ZN6StringaSEOS_>
 80a058e:	a816      	add	r0, sp, #88	; 0x58
 80a0590:	f002 f8c4 	bl	80a271c <_ZN6StringD1Ev>
            life_time = split_string(str_data, '\0', index, last_index).toInt() * 1000;
 80a0594:	4632      	mov	r2, r6
 80a0596:	9500      	str	r5, [sp, #0]
 80a0598:	ab03      	add	r3, sp, #12
 80a059a:	e7d8      	b.n	80a054e <_ZN13Google_OAuth26parserEPKcS1_+0x1b6>
    else if (hook.equals("hook-error"))
 80a059c:	4909      	ldr	r1, [pc, #36]	; (80a05c4 <_ZN13Google_OAuth26parserEPKcS1_+0x22c>)
 80a059e:	a80e      	add	r0, sp, #56	; 0x38
 80a05a0:	f002 f9d5 	bl	80a294e <_ZNK6String6equalsEPKc>
 80a05a4:	2800      	cmp	r0, #0
 80a05a6:	d088      	beq.n	80a04ba <_ZN13Google_OAuth26parserEPKcS1_+0x122>
        http_status_code = str_data.substring(13, 16).toInt();
 80a05a8:	2310      	movs	r3, #16
 80a05aa:	220d      	movs	r2, #13
 80a05ac:	a906      	add	r1, sp, #24
 80a05ae:	a816      	add	r0, sp, #88	; 0x58
 80a05b0:	f002 fa0a 	bl	80a29c8 <_ZNK6String9substringEjj>
 80a05b4:	a816      	add	r0, sp, #88	; 0x58
 80a05b6:	f002 fa29 	bl	80a2a0c <_ZNK6String5toIntEv>
 80a05ba:	f8a4 02d4 	strh.w	r0, [r4, #724]	; 0x2d4
 80a05be:	e779      	b.n	80a04b4 <_ZN13Google_OAuth26parserEPKcS1_+0x11c>
 80a05c0:	080a6ba1 	.word	0x080a6ba1
 80a05c4:	080a6baf 	.word	0x080a6baf

080a05c8 <_ZN13Google_OAuth216response_handlerEPKcS1_>:
{
 80a05c8:	b510      	push	{r4, lr}
 80a05ca:	4604      	mov	r4, r0
 80a05cc:	b08a      	sub	sp, #40	; 0x28
    parser(event, data);
 80a05ce:	f7ff fee3 	bl	80a0398 <_ZN13Google_OAuth26parserEPKcS1_>
    switch (last_state)
 80a05d2:	f894 32bf 	ldrb.w	r3, [r4, #703]	; 0x2bf
 80a05d6:	2b01      	cmp	r3, #1
 80a05d8:	d06f      	beq.n	80a06ba <_ZN13Google_OAuth216response_handlerEPKcS1_+0xf2>
 80a05da:	2b02      	cmp	r3, #2
 80a05dc:	f000 8090 	beq.w	80a0700 <_ZN13Google_OAuth216response_handlerEPKcS1_+0x138>
 80a05e0:	2b00      	cmp	r3, #0
 80a05e2:	f040 80a3 	bne.w	80a072c <_ZN13Google_OAuth216response_handlerEPKcS1_+0x164>
            String msg = "\r\nThis application requires your permission to access your Google Calendar.";
 80a05e6:	4958      	ldr	r1, [pc, #352]	; (80a0748 <_ZN13Google_OAuth216response_handlerEPKcS1_+0x180>)
 80a05e8:	a802      	add	r0, sp, #8
 80a05ea:	f002 f8e1 	bl	80a27b0 <_ZN6StringC1EPKc>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a05ee:	4957      	ldr	r1, [pc, #348]	; (80a074c <_ZN13Google_OAuth216response_handlerEPKcS1_+0x184>)
 80a05f0:	a806      	add	r0, sp, #24
 80a05f2:	f002 f8dd 	bl	80a27b0 <_ZN6StringC1EPKc>
            msg += "\r\nPlease, go to: " + auth_url;
 80a05f6:	f504 711f 	add.w	r1, r4, #636	; 0x27c
 80a05fa:	a806      	add	r0, sp, #24
 80a05fc:	f002 f965 	bl	80a28ca <_ZplRK15StringSumHelperRK6String>
 80a0600:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80a0602:	a802      	add	r0, sp, #8
 80a0604:	f002 f94e 	bl	80a28a4 <_ZN6String6concatERKS_>
class StringSumHelper : public String
 80a0608:	a806      	add	r0, sp, #24
 80a060a:	f002 f887 	bl	80a271c <_ZN6StringD1Ev>
	StringSumHelper(const char *p) : String(p) {}
 80a060e:	4950      	ldr	r1, [pc, #320]	; (80a0750 <_ZN13Google_OAuth216response_handlerEPKcS1_+0x188>)
 80a0610:	a806      	add	r0, sp, #24
 80a0612:	f002 f8cd 	bl	80a27b0 <_ZN6StringC1EPKc>
            msg += ", and enter the following code: " + user_code + "\r\n";
 80a0616:	f504 711b 	add.w	r1, r4, #620	; 0x26c
 80a061a:	a806      	add	r0, sp, #24
 80a061c:	f002 f955 	bl	80a28ca <_ZplRK15StringSumHelperRK6String>
 80a0620:	494c      	ldr	r1, [pc, #304]	; (80a0754 <_ZN13Google_OAuth216response_handlerEPKcS1_+0x18c>)
 80a0622:	f002 f95e 	bl	80a28e2 <_ZplRK15StringSumHelperPKc>
 80a0626:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80a0628:	a802      	add	r0, sp, #8
 80a062a:	f002 f93b 	bl	80a28a4 <_ZN6String6concatERKS_>
class StringSumHelper : public String
 80a062e:	a806      	add	r0, sp, #24
 80a0630:	f002 f874 	bl	80a271c <_ZN6StringD1Ev>
            delay(1000);
 80a0634:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a0638:	f002 fc40 	bl	80a2ebc <delay>
            DEBUG_PRINT(auth_url);
 80a063c:	f8d4 127c 	ldr.w	r1, [r4, #636]	; 0x27c
 80a0640:	a806      	add	r0, sp, #24
 80a0642:	f002 f9e9 	bl	80a2a18 <_ZN6String6formatEPKcz>
 80a0646:	9906      	ldr	r1, [sp, #24]
 80a0648:	4668      	mov	r0, sp
 80a064a:	f7ff fd91 	bl	80a0170 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>
 80a064e:	a801      	add	r0, sp, #4
 80a0650:	f7ff fe8c 	bl	80a036c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0654:	a806      	add	r0, sp, #24
 80a0656:	f002 f861 	bl	80a271c <_ZN6StringD1Ev>
            delay(1000);
 80a065a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a065e:	f002 fc2d 	bl	80a2ebc <delay>
            DEBUG_PRINT(user_code);
 80a0662:	f8d4 126c 	ldr.w	r1, [r4, #620]	; 0x26c
 80a0666:	a806      	add	r0, sp, #24
 80a0668:	f002 f9d6 	bl	80a2a18 <_ZN6String6formatEPKcz>
 80a066c:	9906      	ldr	r1, [sp, #24]
 80a066e:	4668      	mov	r0, sp
 80a0670:	f7ff fd7e 	bl	80a0170 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>
 80a0674:	a801      	add	r0, sp, #4
 80a0676:	f7ff fe79 	bl	80a036c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a067a:	a806      	add	r0, sp, #24
 80a067c:	f002 f84e 	bl	80a271c <_ZN6StringD1Ev>
            delay(1000);
 80a0680:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a0684:	f002 fc1a 	bl	80a2ebc <delay>
            DEBUG_PRINT(msg);
 80a0688:	9902      	ldr	r1, [sp, #8]
 80a068a:	a806      	add	r0, sp, #24
 80a068c:	f002 f9c4 	bl	80a2a18 <_ZN6String6formatEPKcz>
 80a0690:	9906      	ldr	r1, [sp, #24]
 80a0692:	4668      	mov	r0, sp
 80a0694:	f7ff fd6c 	bl	80a0170 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>
 80a0698:	a801      	add	r0, sp, #4
 80a069a:	f7ff fe67 	bl	80a036c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a069e:	a806      	add	r0, sp, #24
 80a06a0:	f002 f83c 	bl	80a271c <_ZN6StringD1Ev>
    last_state = state;
 80a06a4:	f894 32be 	ldrb.w	r3, [r4, #702]	; 0x2be
            String msg = "\r\nThis application requires your permission to access your Google Calendar.";
 80a06a8:	a802      	add	r0, sp, #8
    last_state = state;
 80a06aa:	f884 32bf 	strb.w	r3, [r4, #703]	; 0x2bf
    state = new_state;
 80a06ae:	2301      	movs	r3, #1
 80a06b0:	f884 32be 	strb.w	r3, [r4, #702]	; 0x2be
            DEBUG_PRINT("Resp: OAuth2_State Not Set!!!");
 80a06b4:	f002 f832 	bl	80a271c <_ZN6StringD1Ev>
            break;
 80a06b8:	e017      	b.n	80a06ea <_ZN13Google_OAuth216response_handlerEPKcS1_+0x122>
            DEBUG_PRINT("Device authorized!");
 80a06ba:	4927      	ldr	r1, [pc, #156]	; (80a0758 <_ZN13Google_OAuth216response_handlerEPKcS1_+0x190>)
 80a06bc:	a806      	add	r0, sp, #24
 80a06be:	f002 f9ab 	bl	80a2a18 <_ZN6String6formatEPKcz>
 80a06c2:	9906      	ldr	r1, [sp, #24]
 80a06c4:	a802      	add	r0, sp, #8
 80a06c6:	f7ff fd53 	bl	80a0170 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>
 80a06ca:	a803      	add	r0, sp, #12
 80a06cc:	f7ff fe4e 	bl	80a036c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a06d0:	a806      	add	r0, sp, #24
 80a06d2:	f002 f823 	bl	80a271c <_ZN6StringD1Ev>
    last_state = state;
 80a06d6:	f894 32be 	ldrb.w	r3, [r4, #702]	; 0x2be
            write_token();
 80a06da:	4620      	mov	r0, r4
    last_state = state;
 80a06dc:	f884 32bf 	strb.w	r3, [r4, #703]	; 0x2bf
    state = new_state;
 80a06e0:	2303      	movs	r3, #3
 80a06e2:	f884 32be 	strb.w	r3, [r4, #702]	; 0x2be
            write_token();
 80a06e6:	f7ff fd86 	bl	80a01f6 <_ZN13Google_OAuth211write_tokenEv>
 80a06ea:	f001 fd63 	bl	80a21b4 <HAL_Timer_Get_Milli_Seconds>
    time = millis();
 80a06ee:	f8c4 02b0 	str.w	r0, [r4, #688]	; 0x2b0
     is_device_subscribed = false;
 80a06f2:	2000      	movs	r0, #0
 80a06f4:	f884 02c0 	strb.w	r0, [r4, #704]	; 0x2c0
        spark_unsubscribe(NULL);
 80a06f8:	f001 ff4a 	bl	80a2590 <spark_unsubscribe>
}
 80a06fc:	b00a      	add	sp, #40	; 0x28
 80a06fe:	bd10      	pop	{r4, pc}
            DEBUG_PRINT("Access token refreshed!");
 80a0700:	4916      	ldr	r1, [pc, #88]	; (80a075c <_ZN13Google_OAuth216response_handlerEPKcS1_+0x194>)
 80a0702:	a806      	add	r0, sp, #24
 80a0704:	f002 f988 	bl	80a2a18 <_ZN6String6formatEPKcz>
 80a0708:	9906      	ldr	r1, [sp, #24]
 80a070a:	a802      	add	r0, sp, #8
 80a070c:	f7ff fd30 	bl	80a0170 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>
 80a0710:	a803      	add	r0, sp, #12
 80a0712:	f7ff fe2b 	bl	80a036c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0716:	a806      	add	r0, sp, #24
 80a0718:	f002 f800 	bl	80a271c <_ZN6StringD1Ev>
    last_state = state;
 80a071c:	f894 32be 	ldrb.w	r3, [r4, #702]	; 0x2be
 80a0720:	f884 32bf 	strb.w	r3, [r4, #703]	; 0x2bf
    state = new_state;
 80a0724:	2303      	movs	r3, #3
 80a0726:	f884 32be 	strb.w	r3, [r4, #702]	; 0x2be
}
 80a072a:	e7de      	b.n	80a06ea <_ZN13Google_OAuth216response_handlerEPKcS1_+0x122>
            DEBUG_PRINT("Resp: OAuth2_State Not Set!!!");
 80a072c:	490c      	ldr	r1, [pc, #48]	; (80a0760 <_ZN13Google_OAuth216response_handlerEPKcS1_+0x198>)
 80a072e:	a806      	add	r0, sp, #24
 80a0730:	f002 f972 	bl	80a2a18 <_ZN6String6formatEPKcz>
 80a0734:	9906      	ldr	r1, [sp, #24]
 80a0736:	a802      	add	r0, sp, #8
 80a0738:	f7ff fd1a 	bl	80a0170 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>
 80a073c:	a803      	add	r0, sp, #12
 80a073e:	f7ff fe15 	bl	80a036c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0742:	a806      	add	r0, sp, #24
 80a0744:	e7b6      	b.n	80a06b4 <_ZN13Google_OAuth216response_handlerEPKcS1_+0xec>
 80a0746:	bf00      	nop
 80a0748:	080a6bba 	.word	0x080a6bba
 80a074c:	080a6c06 	.word	0x080a6c06
 80a0750:	080a6c18 	.word	0x080a6c18
 80a0754:	080a6c39 	.word	0x080a6c39
 80a0758:	080a6c3c 	.word	0x080a6c3c
 80a075c:	080a6c4f 	.word	0x080a6c4f
 80a0760:	080a6c67 	.word	0x080a6c67

080a0764 <_ZN13Google_OAuth213error_handlerEPKcS1_>:
{
 80a0764:	b530      	push	{r4, r5, lr}
 80a0766:	4604      	mov	r4, r0
 80a0768:	b08b      	sub	sp, #44	; 0x2c
    parser(event, data);
 80a076a:	f7ff fe15 	bl	80a0398 <_ZN13Google_OAuth26parserEPKcS1_>
    http_error = String::format("\r\nHTTP ERROR - %d", http_status_code);
 80a076e:	f504 7531 	add.w	r5, r4, #708	; 0x2c4
 80a0772:	f8b4 22d4 	ldrh.w	r2, [r4, #724]	; 0x2d4
 80a0776:	4949      	ldr	r1, [pc, #292]	; (80a089c <_ZN13Google_OAuth213error_handlerEPKcS1_+0x138>)
 80a0778:	a806      	add	r0, sp, #24
 80a077a:	f002 f94d 	bl	80a2a18 <_ZN6String6formatEPKcz>
 80a077e:	a906      	add	r1, sp, #24
 80a0780:	4628      	mov	r0, r5
 80a0782:	f002 f85f 	bl	80a2844 <_ZN6StringaSEOS_>
 80a0786:	a806      	add	r0, sp, #24
 80a0788:	f001 ffc8 	bl	80a271c <_ZN6StringD1Ev>
    switch (last_state)
 80a078c:	f894 32bf 	ldrb.w	r3, [r4, #703]	; 0x2bf
 80a0790:	2b01      	cmp	r3, #1
 80a0792:	d02e      	beq.n	80a07f2 <_ZN13Google_OAuth213error_handlerEPKcS1_+0x8e>
 80a0794:	2b02      	cmp	r3, #2
 80a0796:	d07d      	beq.n	80a0894 <_ZN13Google_OAuth213error_handlerEPKcS1_+0x130>
 80a0798:	b91b      	cbnz	r3, 80a07a2 <_ZN13Google_OAuth213error_handlerEPKcS1_+0x3e>
            http_error = "\r\nError: Invalid client id.";
 80a079a:	4628      	mov	r0, r5
 80a079c:	4940      	ldr	r1, [pc, #256]	; (80a08a0 <_ZN13Google_OAuth213error_handlerEPKcS1_+0x13c>)
 80a079e:	f002 f859 	bl	80a2854 <_ZN6StringaSEPKc>
    if (http_status_code > 0 && http_status_code != HTTP_PRECONDITION_REQUIRED)
 80a07a2:	f8b4 32d4 	ldrh.w	r3, [r4, #724]	; 0x2d4
 80a07a6:	b313      	cbz	r3, 80a07ee <_ZN13Google_OAuth213error_handlerEPKcS1_+0x8a>
 80a07a8:	f5b3 7fd6 	cmp.w	r3, #428	; 0x1ac
 80a07ac:	d01f      	beq.n	80a07ee <_ZN13Google_OAuth213error_handlerEPKcS1_+0x8a>
	StringSumHelper(const char *p) : String(p) {}
 80a07ae:	493d      	ldr	r1, [pc, #244]	; (80a08a4 <_ZN13Google_OAuth213error_handlerEPKcS1_+0x140>)
 80a07b0:	a802      	add	r0, sp, #8
 80a07b2:	f001 fffd 	bl	80a27b0 <_ZN6StringC1EPKc>
        DEBUG_PRINT("HTTP ERROR: " + http_error);
 80a07b6:	4629      	mov	r1, r5
 80a07b8:	a802      	add	r0, sp, #8
 80a07ba:	f002 f886 	bl	80a28ca <_ZplRK15StringSumHelperRK6String>
 80a07be:	6801      	ldr	r1, [r0, #0]
 80a07c0:	a806      	add	r0, sp, #24
 80a07c2:	f002 f929 	bl	80a2a18 <_ZN6String6formatEPKcz>
 80a07c6:	9906      	ldr	r1, [sp, #24]
 80a07c8:	4668      	mov	r0, sp
 80a07ca:	f7ff fcd1 	bl	80a0170 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>
 80a07ce:	a801      	add	r0, sp, #4
 80a07d0:	f7ff fdcc 	bl	80a036c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a07d4:	a806      	add	r0, sp, #24
 80a07d6:	f001 ffa1 	bl	80a271c <_ZN6StringD1Ev>
class StringSumHelper : public String
 80a07da:	a802      	add	r0, sp, #8
 80a07dc:	f001 ff9e 	bl	80a271c <_ZN6StringD1Ev>
    last_state = state;
 80a07e0:	f894 32be 	ldrb.w	r3, [r4, #702]	; 0x2be
 80a07e4:	f884 32bf 	strb.w	r3, [r4, #703]	; 0x2bf
    state = new_state;
 80a07e8:	2305      	movs	r3, #5
 80a07ea:	f884 32be 	strb.w	r3, [r4, #702]	; 0x2be
}
 80a07ee:	b00b      	add	sp, #44	; 0x2c
 80a07f0:	bd30      	pop	{r4, r5, pc}
            if (http_status_code == HTTP_PRECONDITION_REQUIRED)
 80a07f2:	f8b4 32d4 	ldrh.w	r3, [r4, #724]	; 0x2d4
 80a07f6:	f5b3 7fd6 	cmp.w	r3, #428	; 0x1ac
 80a07fa:	d138      	bne.n	80a086e <_ZN13Google_OAuth213error_handlerEPKcS1_+0x10a>
                DEBUG_PRINT("Authorization pending...");
 80a07fc:	a806      	add	r0, sp, #24
 80a07fe:	492a      	ldr	r1, [pc, #168]	; (80a08a8 <_ZN13Google_OAuth213error_handlerEPKcS1_+0x144>)
 80a0800:	f002 f90a 	bl	80a2a18 <_ZN6String6formatEPKcz>
 80a0804:	9906      	ldr	r1, [sp, #24]
 80a0806:	a802      	add	r0, sp, #8
 80a0808:	f7ff fcb2 	bl	80a0170 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>
 80a080c:	a803      	add	r0, sp, #12
 80a080e:	f7ff fdad 	bl	80a036c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0812:	a806      	add	r0, sp, #24
 80a0814:	f001 ff82 	bl	80a271c <_ZN6StringD1Ev>
                delay(1000);
 80a0818:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a081c:	f002 fb4e 	bl	80a2ebc <delay>
                DEBUG_PRINT(auth_url);
 80a0820:	f8d4 127c 	ldr.w	r1, [r4, #636]	; 0x27c
 80a0824:	a806      	add	r0, sp, #24
 80a0826:	f002 f8f7 	bl	80a2a18 <_ZN6String6formatEPKcz>
 80a082a:	9906      	ldr	r1, [sp, #24]
 80a082c:	a802      	add	r0, sp, #8
 80a082e:	f7ff fc9f 	bl	80a0170 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>
 80a0832:	a803      	add	r0, sp, #12
 80a0834:	f7ff fd9a 	bl	80a036c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0838:	a806      	add	r0, sp, #24
 80a083a:	f001 ff6f 	bl	80a271c <_ZN6StringD1Ev>
                delay(1000);
 80a083e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a0842:	f002 fb3b 	bl	80a2ebc <delay>
                DEBUG_PRINT(user_code);
 80a0846:	f8d4 126c 	ldr.w	r1, [r4, #620]	; 0x26c
 80a084a:	a806      	add	r0, sp, #24
 80a084c:	f002 f8e4 	bl	80a2a18 <_ZN6String6formatEPKcz>
 80a0850:	9906      	ldr	r1, [sp, #24]
 80a0852:	a802      	add	r0, sp, #8
 80a0854:	f7ff fc8c 	bl	80a0170 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>
 80a0858:	a803      	add	r0, sp, #12
 80a085a:	f7ff fd87 	bl	80a036c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a085e:	a806      	add	r0, sp, #24
 80a0860:	f001 ff5c 	bl	80a271c <_ZN6StringD1Ev>
                delay(1000);
 80a0864:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a0868:	f002 fb28 	bl	80a2ebc <delay>
 80a086c:	e799      	b.n	80a07a2 <_ZN13Google_OAuth213error_handlerEPKcS1_+0x3e>
            else if (http_status_code == HTTP_FORBIDDEN)
 80a086e:	f240 1293 	movw	r2, #403	; 0x193
 80a0872:	4293      	cmp	r3, r2
 80a0874:	d104      	bne.n	80a0880 <_ZN13Google_OAuth213error_handlerEPKcS1_+0x11c>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 80a0876:	490d      	ldr	r1, [pc, #52]	; (80a08ac <_ZN13Google_OAuth213error_handlerEPKcS1_+0x148>)
 80a0878:	4628      	mov	r0, r5
 80a087a:	f002 f817 	bl	80a28ac <_ZN6String6concatEPKc>
 80a087e:	e790      	b.n	80a07a2 <_ZN13Google_OAuth213error_handlerEPKcS1_+0x3e>
            else if (http_status_code == HTTP_UNAUTHORIZED)
 80a0880:	f240 1291 	movw	r2, #401	; 0x191
 80a0884:	4293      	cmp	r3, r2
 80a0886:	d101      	bne.n	80a088c <_ZN13Google_OAuth213error_handlerEPKcS1_+0x128>
 80a0888:	4909      	ldr	r1, [pc, #36]	; (80a08b0 <_ZN13Google_OAuth213error_handlerEPKcS1_+0x14c>)
 80a088a:	e7f5      	b.n	80a0878 <_ZN13Google_OAuth213error_handlerEPKcS1_+0x114>
            else if (http_status_code > 0)
 80a088c:	2b00      	cmp	r3, #0
 80a088e:	d088      	beq.n	80a07a2 <_ZN13Google_OAuth213error_handlerEPKcS1_+0x3e>
 80a0890:	4908      	ldr	r1, [pc, #32]	; (80a08b4 <_ZN13Google_OAuth213error_handlerEPKcS1_+0x150>)
 80a0892:	e7f1      	b.n	80a0878 <_ZN13Google_OAuth213error_handlerEPKcS1_+0x114>
            erase_token();
 80a0894:	4620      	mov	r0, r4
 80a0896:	f7ff fd59 	bl	80a034c <_ZN13Google_OAuth211erase_tokenEv>
 80a089a:	e7f9      	b.n	80a0890 <_ZN13Google_OAuth213error_handlerEPKcS1_+0x12c>
 80a089c:	080a6c85 	.word	0x080a6c85
 80a08a0:	080a6c97 	.word	0x080a6c97
 80a08a4:	080a6d1e 	.word	0x080a6d1e
 80a08a8:	080a6cb3 	.word	0x080a6cb3
 80a08ac:	080a6ccc 	.word	0x080a6ccc
 80a08b0:	080a6ce4 	.word	0x080a6ce4
 80a08b4:	080a6d04 	.word	0x080a6d04

080a08b8 <_ZN13Google_OAuth214is_token_validEv>:
{
 80a08b8:	b530      	push	{r4, r5, lr}
 80a08ba:	b087      	sub	sp, #28
 80a08bc:	4605      	mov	r5, r0
    if (time_left()) 
 80a08be:	f7ff fc72 	bl	80a01a6 <_ZN13Google_OAuth29time_leftEv>
 80a08c2:	4604      	mov	r4, r0
 80a08c4:	b980      	cbnz	r0, 80a08e8 <_ZN13Google_OAuth214is_token_validEv+0x30>
        state = OAuth2_State::REFRESH_TOKEN;
 80a08c6:	2302      	movs	r3, #2
        DEBUG_PRINT("Token timeout: Refreshing...");
 80a08c8:	4909      	ldr	r1, [pc, #36]	; (80a08f0 <_ZN13Google_OAuth214is_token_validEv+0x38>)
        state = OAuth2_State::REFRESH_TOKEN;
 80a08ca:	f885 32be 	strb.w	r3, [r5, #702]	; 0x2be
        DEBUG_PRINT("Token timeout: Refreshing...");
 80a08ce:	a802      	add	r0, sp, #8
 80a08d0:	f002 f8a2 	bl	80a2a18 <_ZN6String6formatEPKcz>
 80a08d4:	4668      	mov	r0, sp
 80a08d6:	9902      	ldr	r1, [sp, #8]
 80a08d8:	f7ff fc4a 	bl	80a0170 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>
 80a08dc:	a801      	add	r0, sp, #4
 80a08de:	f7ff fd45 	bl	80a036c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a08e2:	a802      	add	r0, sp, #8
 80a08e4:	f001 ff1a 	bl	80a271c <_ZN6StringD1Ev>
}
 80a08e8:	4620      	mov	r0, r4
 80a08ea:	b007      	add	sp, #28
 80a08ec:	bd30      	pop	{r4, r5, pc}
 80a08ee:	bf00      	nop
 80a08f0:	080a6d2b 	.word	0x080a6d2b

080a08f4 <_ZN13Google_OAuth211print_errorEv>:
{
 80a08f4:	b510      	push	{r4, lr}
 80a08f6:	4604      	mov	r4, r0
 80a08f8:	b08a      	sub	sp, #40	; 0x28
	StringSumHelper(const char *p) : String(p) {}
 80a08fa:	490e      	ldr	r1, [pc, #56]	; (80a0934 <_ZN13Google_OAuth211print_errorEv+0x40>)
 80a08fc:	a802      	add	r0, sp, #8
 80a08fe:	f001 ff57 	bl	80a27b0 <_ZN6StringC1EPKc>
    DEBUG_PRINT("HTTP ERROR: " + http_error);
 80a0902:	f504 7131 	add.w	r1, r4, #708	; 0x2c4
 80a0906:	a802      	add	r0, sp, #8
 80a0908:	f001 ffdf 	bl	80a28ca <_ZplRK15StringSumHelperRK6String>
 80a090c:	6801      	ldr	r1, [r0, #0]
 80a090e:	a806      	add	r0, sp, #24
 80a0910:	f002 f882 	bl	80a2a18 <_ZN6String6formatEPKcz>
 80a0914:	9906      	ldr	r1, [sp, #24]
 80a0916:	4668      	mov	r0, sp
 80a0918:	f7ff fc2a 	bl	80a0170 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>
 80a091c:	a801      	add	r0, sp, #4
 80a091e:	f7ff fd25 	bl	80a036c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0922:	a806      	add	r0, sp, #24
 80a0924:	f001 fefa 	bl	80a271c <_ZN6StringD1Ev>
class StringSumHelper : public String
 80a0928:	a802      	add	r0, sp, #8
 80a092a:	f001 fef7 	bl	80a271c <_ZN6StringD1Ev>
}
 80a092e:	b00a      	add	sp, #40	; 0x28
 80a0930:	bd10      	pop	{r4, pc}
 80a0932:	bf00      	nop
 80a0934:	080a6d1e 	.word	0x080a6d1e

080a0938 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>:
    function(_Functor) -> function<_Signature>;
#endif

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a0938:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a093a:	2300      	movs	r3, #0
 80a093c:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 80a093e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a0940:	4604      	mov	r4, r0
 80a0942:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a0944:	b12b      	cbz	r3, 80a0952 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a0946:	2202      	movs	r2, #2
 80a0948:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a094a:	68eb      	ldr	r3, [r5, #12]
 80a094c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a094e:	68ab      	ldr	r3, [r5, #8]
 80a0950:	60a3      	str	r3, [r4, #8]
	}
    }
 80a0952:	4620      	mov	r0, r4
 80a0954:	bd38      	pop	{r3, r4, r5, pc}
	...

080a0958 <_ZN10CloudClass9subscribeI13Google_OAuth2EEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0.constprop.0>:
    bool subscribe(const char *eventName, void (T::*handler)(const char *, const char *), T *instance, Spark_Subscription_Scope_TypeDef scope)
 80a0958:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a095a:	461f      	mov	r7, r3
    _Function_base() : _M_manager(nullptr) { }
 80a095c:	2300      	movs	r3, #0
 80a095e:	b091      	sub	sp, #68	; 0x44
 80a0960:	ad02      	add	r5, sp, #8
 80a0962:	e885 0006 	stmia.w	r5, {r1, r2}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a0966:	ac05      	add	r4, sp, #20
 80a0968:	4606      	mov	r6, r0
 80a096a:	e895 0003 	ldmia.w	r5, {r0, r1}
 80a096e:	e884 0005 	stmia.w	r4, {r0, r2}
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0972:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
 80a0974:	930a      	str	r3, [sp, #40]	; 0x28
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0976:	f7ff fb8e 	bl	80a0096 <_Znwj>
 80a097a:	4602      	mov	r2, r0
 80a097c:	b120      	cbz	r0, 80a0988 <_ZN10CloudClass9subscribeI13Google_OAuth2EEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0.constprop.0+0x30>
	{ }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
 80a097e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80a0982:	e882 0003 	stmia.w	r2, {r0, r1}
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a0986:	6097      	str	r7, [r2, #8]
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a0988:	4b13      	ldr	r3, [pc, #76]	; (80a09d8 <_ZN10CloudClass9subscribeI13Google_OAuth2EEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0.constprop.0+0x80>)
        return subscribe_wiring(eventName, handler, scope);
 80a098a:	a908      	add	r1, sp, #32
 80a098c:	930b      	str	r3, [sp, #44]	; 0x2c
	    _M_manager = &_My_handler::_M_manager;
 80a098e:	4b13      	ldr	r3, [pc, #76]	; (80a09dc <_ZN10CloudClass9subscribeI13Google_OAuth2EEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0.constprop.0+0x84>)
 80a0990:	a80c      	add	r0, sp, #48	; 0x30
 80a0992:	930a      	str	r3, [sp, #40]	; 0x28
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0994:	9208      	str	r2, [sp, #32]
 80a0996:	f7ff ffcf 	bl	80a0938 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
        if (handler) // if the call-wrapper has wrapped a callable object
 80a099a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80a099c:	b94b      	cbnz	r3, 80a09b2 <_ZN10CloudClass9subscribeI13Google_OAuth2EEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0.constprop.0+0x5a>
        bool success = false;
 80a099e:	2400      	movs	r4, #0
    class function<_Res(_ArgTypes...)>
 80a09a0:	a80c      	add	r0, sp, #48	; 0x30
 80a09a2:	f7ff fbf7 	bl	80a0194 <_ZNSt14_Function_baseD1Ev>
 80a09a6:	a808      	add	r0, sp, #32
 80a09a8:	f7ff fbf4 	bl	80a0194 <_ZNSt14_Function_baseD1Ev>
    }
 80a09ac:	4620      	mov	r0, r4
 80a09ae:	b011      	add	sp, #68	; 0x44
 80a09b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
            auto wrapper = new wiring_event_handler_t(handler);
 80a09b2:	2010      	movs	r0, #16
 80a09b4:	f7ff fb6f 	bl	80a0096 <_Znwj>
 80a09b8:	4604      	mov	r4, r0
 80a09ba:	2800      	cmp	r0, #0
 80a09bc:	d0ef      	beq.n	80a099e <_ZN10CloudClass9subscribeI13Google_OAuth2EEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0.constprop.0+0x46>
 80a09be:	a90c      	add	r1, sp, #48	; 0x30
 80a09c0:	f7ff ffba 	bl	80a0938 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
                success = spark_subscribe(eventName, (EventHandler)call_wiring_event_handler, wrapper, scope, deviceID, NULL);
 80a09c4:	2300      	movs	r3, #0
 80a09c6:	4622      	mov	r2, r4
 80a09c8:	4630      	mov	r0, r6
 80a09ca:	e9cd 3300 	strd	r3, r3, [sp]
 80a09ce:	4904      	ldr	r1, [pc, #16]	; (80a09e0 <_ZN10CloudClass9subscribeI13Google_OAuth2EEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0.constprop.0+0x88>)
 80a09d0:	f001 fdd6 	bl	80a2580 <spark_subscribe>
 80a09d4:	4604      	mov	r4, r0
 80a09d6:	e7e3      	b.n	80a09a0 <_ZN10CloudClass9subscribeI13Google_OAuth2EEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0.constprop.0+0x48>
 80a09d8:	080a014f 	.word	0x080a014f
 80a09dc:	080a0111 	.word	0x080a0111
 80a09e0:	080a310f 	.word	0x080a310f

080a09e4 <_ZN13Google_OAuth219subscribe_device_toERK6String>:
{
 80a09e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (!is_device_subscribed)
 80a09e8:	f890 72c0 	ldrb.w	r7, [r0, #704]	; 0x2c0
{
 80a09ec:	4606      	mov	r6, r0
 80a09ee:	4688      	mov	r8, r1
 80a09f0:	b090      	sub	sp, #64	; 0x40
    if (!is_device_subscribed)
 80a09f2:	2f00      	cmp	r7, #0
 80a09f4:	d14f      	bne.n	80a0a96 <_ZN13Google_OAuth219subscribe_device_toERK6String+0xb2>
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
 80a09f6:	ac0c      	add	r4, sp, #48	; 0x30
        spark_unsubscribe(NULL);
 80a09f8:	4638      	mov	r0, r7
	StringSumHelper(const String &s) : String(s) {}
 80a09fa:	ad08      	add	r5, sp, #32
 80a09fc:	f001 fdc8 	bl	80a2590 <spark_unsubscribe>
 80a0a00:	4620      	mov	r0, r4
 80a0a02:	f001 fdad 	bl	80a2560 <spark_deviceID>
 80a0a06:	4621      	mov	r1, r4
 80a0a08:	4628      	mov	r0, r5
 80a0a0a:	f001 ff10 	bl	80a282e <_ZN6StringC1ERKS_>
        String hook_reponse = System.deviceID() + "/hook-response/" + event;
 80a0a0e:	4923      	ldr	r1, [pc, #140]	; (80a0a9c <_ZN13Google_OAuth219subscribe_device_toERK6String+0xb8>)
 80a0a10:	4628      	mov	r0, r5
 80a0a12:	f001 ff66 	bl	80a28e2 <_ZplRK15StringSumHelperPKc>
 80a0a16:	4641      	mov	r1, r8
 80a0a18:	f001 ff57 	bl	80a28ca <_ZplRK15StringSumHelperRK6String>
 80a0a1c:	4601      	mov	r1, r0
 80a0a1e:	4668      	mov	r0, sp
 80a0a20:	f001 ff05 	bl	80a282e <_ZN6StringC1ERKS_>
class StringSumHelper : public String
 80a0a24:	4628      	mov	r0, r5
 80a0a26:	f001 fe79 	bl	80a271c <_ZN6StringD1Ev>
 80a0a2a:	4620      	mov	r0, r4
 80a0a2c:	f001 fe76 	bl	80a271c <_ZN6StringD1Ev>
 80a0a30:	4620      	mov	r0, r4
 80a0a32:	f001 fd95 	bl	80a2560 <spark_deviceID>
	StringSumHelper(const String &s) : String(s) {}
 80a0a36:	4621      	mov	r1, r4
 80a0a38:	4628      	mov	r0, r5
 80a0a3a:	f001 fef8 	bl	80a282e <_ZN6StringC1ERKS_>
        String hook_error = System.deviceID() + "/hook-error/" + event;
 80a0a3e:	4918      	ldr	r1, [pc, #96]	; (80a0aa0 <_ZN13Google_OAuth219subscribe_device_toERK6String+0xbc>)
 80a0a40:	4628      	mov	r0, r5
 80a0a42:	f001 ff4e 	bl	80a28e2 <_ZplRK15StringSumHelperPKc>
 80a0a46:	4641      	mov	r1, r8
 80a0a48:	f001 ff3f 	bl	80a28ca <_ZplRK15StringSumHelperRK6String>
 80a0a4c:	4601      	mov	r1, r0
 80a0a4e:	a804      	add	r0, sp, #16
 80a0a50:	f001 feed 	bl	80a282e <_ZN6StringC1ERKS_>
class StringSumHelper : public String
 80a0a54:	4628      	mov	r0, r5
 80a0a56:	f001 fe61 	bl	80a271c <_ZN6StringD1Ev>
 80a0a5a:	4620      	mov	r0, r4
 80a0a5c:	f001 fe5e 	bl	80a271c <_ZN6StringD1Ev>
        Particle.subscribe(hook_reponse, &Google_OAuth2::response_handler, this, MY_DEVICES);
 80a0a60:	4b10      	ldr	r3, [pc, #64]	; (80a0aa4 <_ZN13Google_OAuth219subscribe_device_toERK6String+0xc0>)
 80a0a62:	9800      	ldr	r0, [sp, #0]
 80a0a64:	e9cd 3708 	strd	r3, r7, [sp, #32]
 80a0a68:	4633      	mov	r3, r6
 80a0a6a:	e895 0006 	ldmia.w	r5, {r1, r2}
 80a0a6e:	f7ff ff73 	bl	80a0958 <_ZN10CloudClass9subscribeI13Google_OAuth2EEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0.constprop.0>
        Particle.subscribe(hook_error, &Google_OAuth2::error_handler, this, MY_DEVICES);
 80a0a72:	4b0d      	ldr	r3, [pc, #52]	; (80a0aa8 <_ZN13Google_OAuth219subscribe_device_toERK6String+0xc4>)
 80a0a74:	9804      	ldr	r0, [sp, #16]
 80a0a76:	e9cd 370c 	strd	r3, r7, [sp, #48]	; 0x30
 80a0a7a:	4633      	mov	r3, r6
 80a0a7c:	e894 0006 	ldmia.w	r4, {r1, r2}
 80a0a80:	f7ff ff6a 	bl	80a0958 <_ZN10CloudClass9subscribeI13Google_OAuth2EEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0.constprop.0>
        is_device_subscribed = true;
 80a0a84:	2301      	movs	r3, #1
        String hook_error = System.deviceID() + "/hook-error/" + event;
 80a0a86:	a804      	add	r0, sp, #16
        is_device_subscribed = true;
 80a0a88:	f886 32c0 	strb.w	r3, [r6, #704]	; 0x2c0
        String hook_error = System.deviceID() + "/hook-error/" + event;
 80a0a8c:	f001 fe46 	bl	80a271c <_ZN6StringD1Ev>
        String hook_reponse = System.deviceID() + "/hook-response/" + event;
 80a0a90:	4668      	mov	r0, sp
 80a0a92:	f001 fe43 	bl	80a271c <_ZN6StringD1Ev>
}
 80a0a96:	b010      	add	sp, #64	; 0x40
 80a0a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0a9c:	080a6d48 	.word	0x080a6d48
 80a0aa0:	080a6d58 	.word	0x080a6d58
 80a0aa4:	080a05c9 	.word	0x080a05c9
 80a0aa8:	080a0765 	.word	0x080a0765

080a0aac <_ZN13Google_OAuth24loopEv>:
{
 80a0aac:	b510      	push	{r4, lr}
 80a0aae:	4604      	mov	r4, r0
 80a0ab0:	b08c      	sub	sp, #48	; 0x30
    String data;
 80a0ab2:	498d      	ldr	r1, [pc, #564]	; (80a0ce8 <_ZN13Google_OAuth24loopEv+0x23c>)
 80a0ab4:	a804      	add	r0, sp, #16
 80a0ab6:	f001 fe7b 	bl	80a27b0 <_ZN6StringC1EPKc>
    switch (state)
 80a0aba:	f894 32be 	ldrb.w	r3, [r4, #702]	; 0x2be
 80a0abe:	2b04      	cmp	r3, #4
 80a0ac0:	f200 8103 	bhi.w	80a0cca <_ZN13Google_OAuth24loopEv+0x21e>
 80a0ac4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80a0ac8:	003c0005 	.word	0x003c0005
 80a0acc:	00eb0093 	.word	0x00eb0093
 80a0ad0:	00ba      	.short	0x00ba
            subscribe_device_to(EVENT_REQ_USER_CODE);
 80a0ad2:	4620      	mov	r0, r4
 80a0ad4:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 80a0ad8:	f7ff ff84 	bl	80a09e4 <_ZN13Google_OAuth219subscribe_device_toERK6String>
            data = String::format("{\"client_id\":\"%s\"}", CLIENT_ID.c_str());
 80a0adc:	f8d4 223c 	ldr.w	r2, [r4, #572]	; 0x23c
 80a0ae0:	4982      	ldr	r1, [pc, #520]	; (80a0cec <_ZN13Google_OAuth24loopEv+0x240>)
 80a0ae2:	a808      	add	r0, sp, #32
 80a0ae4:	f001 ff98 	bl	80a2a18 <_ZN6String6formatEPKcz>
 80a0ae8:	a908      	add	r1, sp, #32
 80a0aea:	a804      	add	r0, sp, #16
 80a0aec:	f001 feaa 	bl	80a2844 <_ZN6StringaSEOS_>
 80a0af0:	a808      	add	r0, sp, #32
 80a0af2:	f001 fe13 	bl	80a271c <_ZN6StringD1Ev>
 80a0af6:	4b7e      	ldr	r3, [pc, #504]	; (80a0cf0 <_ZN13Google_OAuth24loopEv+0x244>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a0af8:	f8d4 120c 	ldr.w	r1, [r4, #524]	; 0x20c
 80a0afc:	781b      	ldrb	r3, [r3, #0]
 80a0afe:	9a04      	ldr	r2, [sp, #16]
 80a0b00:	f88d 3000 	strb.w	r3, [sp]
 80a0b04:	a808      	add	r0, sp, #32
 80a0b06:	233c      	movs	r3, #60	; 0x3c
 80a0b08:	f002 fc02 	bl	80a3310 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a0b0c:	a809      	add	r0, sp, #36	; 0x24
 80a0b0e:	f7ff fc2d 	bl	80a036c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            DEBUG_PRINT("User code request sent!");
 80a0b12:	4978      	ldr	r1, [pc, #480]	; (80a0cf4 <_ZN13Google_OAuth24loopEv+0x248>)
            DEBUG_PRINT("Refresh token request sent");
 80a0b14:	a808      	add	r0, sp, #32
 80a0b16:	f001 ff7f 	bl	80a2a18 <_ZN6String6formatEPKcz>
 80a0b1a:	9908      	ldr	r1, [sp, #32]
 80a0b1c:	a802      	add	r0, sp, #8
 80a0b1e:	f7ff fb27 	bl	80a0170 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>
 80a0b22:	a803      	add	r0, sp, #12
 80a0b24:	f7ff fc22 	bl	80a036c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0b28:	a808      	add	r0, sp, #32
 80a0b2a:	f001 fdf7 	bl	80a271c <_ZN6StringD1Ev>
            oauth_timeout_count = 0;
 80a0b2e:	2300      	movs	r3, #0
 80a0b30:	f8c4 32ac 	str.w	r3, [r4, #684]	; 0x2ac
    last_state = state;
 80a0b34:	f894 32be 	ldrb.w	r3, [r4, #702]	; 0x2be
 80a0b38:	f884 32bf 	strb.w	r3, [r4, #703]	; 0x2bf
    state = new_state;
 80a0b3c:	2304      	movs	r3, #4
 80a0b3e:	e03b      	b.n	80a0bb8 <_ZN13Google_OAuth24loopEv+0x10c>
 80a0b40:	f001 fb38 	bl	80a21b4 <HAL_Timer_Get_Milli_Seconds>
            if (millis() > (polling_time + polling_rate * 2))
 80a0b44:	f8b4 22bc 	ldrh.w	r2, [r4, #700]	; 0x2bc
 80a0b48:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 80a0b4c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80a0b50:	4283      	cmp	r3, r0
 80a0b52:	d233      	bcs.n	80a0bbc <_ZN13Google_OAuth24loopEv+0x110>
 80a0b54:	f001 fb2e 	bl	80a21b4 <HAL_Timer_Get_Milli_Seconds>
                polling_time = millis();
 80a0b58:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
                if (time_left())
 80a0b5c:	4620      	mov	r0, r4
 80a0b5e:	f7ff fb22 	bl	80a01a6 <_ZN13Google_OAuth29time_leftEv>
 80a0b62:	b380      	cbz	r0, 80a0bc6 <_ZN13Google_OAuth24loopEv+0x11a>
                    subscribe_device_to(EVENT_POLL_AUTH);
 80a0b64:	4620      	mov	r0, r4
 80a0b66:	f504 7107 	add.w	r1, r4, #540	; 0x21c
 80a0b6a:	f7ff ff3b 	bl	80a09e4 <_ZN13Google_OAuth219subscribe_device_toERK6String>
                    data = String::format("{\"client_id\":\"%s\",\"client_secret\":\"%s\",\"code\":\"%s\"}",
 80a0b6e:	f8d4 325c 	ldr.w	r3, [r4, #604]	; 0x25c
 80a0b72:	f8d4 223c 	ldr.w	r2, [r4, #572]	; 0x23c
 80a0b76:	4960      	ldr	r1, [pc, #384]	; (80a0cf8 <_ZN13Google_OAuth24loopEv+0x24c>)
 80a0b78:	9300      	str	r3, [sp, #0]
 80a0b7a:	a808      	add	r0, sp, #32
 80a0b7c:	f8d4 324c 	ldr.w	r3, [r4, #588]	; 0x24c
 80a0b80:	f001 ff4a 	bl	80a2a18 <_ZN6String6formatEPKcz>
                                        CLIENT_ID.c_str(), CLIENT_SECRET.c_str(), device_code.c_str());
 80a0b84:	a908      	add	r1, sp, #32
 80a0b86:	a804      	add	r0, sp, #16
 80a0b88:	f001 fe5c 	bl	80a2844 <_ZN6StringaSEOS_>
 80a0b8c:	a808      	add	r0, sp, #32
 80a0b8e:	f001 fdc5 	bl	80a271c <_ZN6StringD1Ev>
 80a0b92:	4b57      	ldr	r3, [pc, #348]	; (80a0cf0 <_ZN13Google_OAuth24loopEv+0x244>)
 80a0b94:	9a04      	ldr	r2, [sp, #16]
 80a0b96:	781b      	ldrb	r3, [r3, #0]
 80a0b98:	f8d4 121c 	ldr.w	r1, [r4, #540]	; 0x21c
 80a0b9c:	f88d 3000 	strb.w	r3, [sp]
 80a0ba0:	a808      	add	r0, sp, #32
 80a0ba2:	233c      	movs	r3, #60	; 0x3c
 80a0ba4:	f002 fbb4 	bl	80a3310 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a0ba8:	a809      	add	r0, sp, #36	; 0x24
 80a0baa:	f7ff fbdf 	bl	80a036c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    last_state = state;
 80a0bae:	f894 32be 	ldrb.w	r3, [r4, #702]	; 0x2be
 80a0bb2:	f884 32bf 	strb.w	r3, [r4, #703]	; 0x2bf
    state = new_state;
 80a0bb6:	2301      	movs	r3, #1
 80a0bb8:	f884 32be 	strb.w	r3, [r4, #702]	; 0x2be
    String data;
 80a0bbc:	a804      	add	r0, sp, #16
 80a0bbe:	f001 fdad 	bl	80a271c <_ZN6StringD1Ev>
}
 80a0bc2:	b00c      	add	sp, #48	; 0x30
 80a0bc4:	bd10      	pop	{r4, pc}
                    DEBUG_PRINT("Error: User code has expired.");
 80a0bc6:	494d      	ldr	r1, [pc, #308]	; (80a0cfc <_ZN13Google_OAuth24loopEv+0x250>)
 80a0bc8:	a808      	add	r0, sp, #32
 80a0bca:	f001 ff25 	bl	80a2a18 <_ZN6String6formatEPKcz>
 80a0bce:	9908      	ldr	r1, [sp, #32]
 80a0bd0:	a802      	add	r0, sp, #8
 80a0bd2:	f7ff facd 	bl	80a0170 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>
 80a0bd6:	a803      	add	r0, sp, #12
 80a0bd8:	f7ff fbc8 	bl	80a036c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0bdc:	a808      	add	r0, sp, #32
 80a0bde:	f001 fd9d 	bl	80a271c <_ZN6StringD1Ev>
    last_state = state;
 80a0be2:	f894 32be 	ldrb.w	r3, [r4, #702]	; 0x2be
 80a0be6:	f884 32bf 	strb.w	r3, [r4, #703]	; 0x2bf
    state = new_state;
 80a0bea:	2305      	movs	r3, #5
 80a0bec:	e7e4      	b.n	80a0bb8 <_ZN13Google_OAuth24loopEv+0x10c>
            subscribe_device_to(EVENT_REFRESH_TOKEN);
 80a0bee:	4620      	mov	r0, r4
 80a0bf0:	f504 710b 	add.w	r1, r4, #556	; 0x22c
 80a0bf4:	f7ff fef6 	bl	80a09e4 <_ZN13Google_OAuth219subscribe_device_toERK6String>
            data = String::format("{\"refresh_token\":\"%s\",\"client_id\":\"%s\",\"client_secret\":\"%s\"}",
 80a0bf8:	f8d4 324c 	ldr.w	r3, [r4, #588]	; 0x24c
 80a0bfc:	f8d4 229c 	ldr.w	r2, [r4, #668]	; 0x29c
 80a0c00:	493f      	ldr	r1, [pc, #252]	; (80a0d00 <_ZN13Google_OAuth24loopEv+0x254>)
 80a0c02:	9300      	str	r3, [sp, #0]
 80a0c04:	a808      	add	r0, sp, #32
 80a0c06:	f8d4 323c 	ldr.w	r3, [r4, #572]	; 0x23c
 80a0c0a:	f001 ff05 	bl	80a2a18 <_ZN6String6formatEPKcz>
                                refresh_token.c_str(), CLIENT_ID.c_str(), CLIENT_SECRET.c_str());
 80a0c0e:	a908      	add	r1, sp, #32
 80a0c10:	a804      	add	r0, sp, #16
 80a0c12:	f001 fe17 	bl	80a2844 <_ZN6StringaSEOS_>
 80a0c16:	a808      	add	r0, sp, #32
 80a0c18:	f001 fd80 	bl	80a271c <_ZN6StringD1Ev>
 80a0c1c:	4b34      	ldr	r3, [pc, #208]	; (80a0cf0 <_ZN13Google_OAuth24loopEv+0x244>)
 80a0c1e:	f8d4 122c 	ldr.w	r1, [r4, #556]	; 0x22c
 80a0c22:	781b      	ldrb	r3, [r3, #0]
 80a0c24:	9a04      	ldr	r2, [sp, #16]
 80a0c26:	f88d 3000 	strb.w	r3, [sp]
 80a0c2a:	a808      	add	r0, sp, #32
 80a0c2c:	233c      	movs	r3, #60	; 0x3c
 80a0c2e:	f002 fb6f 	bl	80a3310 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a0c32:	a809      	add	r0, sp, #36	; 0x24
 80a0c34:	f7ff fb9a 	bl	80a036c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            DEBUG_PRINT("Refresh token request sent");
 80a0c38:	4932      	ldr	r1, [pc, #200]	; (80a0d04 <_ZN13Google_OAuth24loopEv+0x258>)
 80a0c3a:	e76b      	b.n	80a0b14 <_ZN13Google_OAuth24loopEv+0x68>
            DEBUG_PRINT("Waiting: OAuth2 response...");            
 80a0c3c:	4932      	ldr	r1, [pc, #200]	; (80a0d08 <_ZN13Google_OAuth24loopEv+0x25c>)
 80a0c3e:	a808      	add	r0, sp, #32
 80a0c40:	f001 feea 	bl	80a2a18 <_ZN6String6formatEPKcz>
 80a0c44:	9908      	ldr	r1, [sp, #32]
 80a0c46:	a802      	add	r0, sp, #8
 80a0c48:	f7ff fa92 	bl	80a0170 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>
 80a0c4c:	a803      	add	r0, sp, #12
 80a0c4e:	f7ff fb8d 	bl	80a036c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0c52:	a808      	add	r0, sp, #32
 80a0c54:	f001 fd62 	bl	80a271c <_ZN6StringD1Ev>
            delay(5000);
 80a0c58:	f241 3088 	movw	r0, #5000	; 0x1388
 80a0c5c:	f002 f92e 	bl	80a2ebc <delay>
            oauth_timeout_count++;
 80a0c60:	f8d4 32ac 	ldr.w	r3, [r4, #684]	; 0x2ac
 80a0c64:	3301      	adds	r3, #1
            if (oauth_timeout_count > 6) { //30 seconds
 80a0c66:	2b06      	cmp	r3, #6
            oauth_timeout_count++;
 80a0c68:	f8c4 32ac 	str.w	r3, [r4, #684]	; 0x2ac
            if (oauth_timeout_count > 6) { //30 seconds
 80a0c6c:	dda6      	ble.n	80a0bbc <_ZN13Google_OAuth24loopEv+0x110>
                DEBUG_PRINT("TIMEOUT oauth2 waiting for a response..."); 
 80a0c6e:	4927      	ldr	r1, [pc, #156]	; (80a0d0c <_ZN13Google_OAuth24loopEv+0x260>)
 80a0c70:	a808      	add	r0, sp, #32
 80a0c72:	f001 fed1 	bl	80a2a18 <_ZN6String6formatEPKcz>
 80a0c76:	9908      	ldr	r1, [sp, #32]
 80a0c78:	a802      	add	r0, sp, #8
 80a0c7a:	f7ff fa79 	bl	80a0170 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>
 80a0c7e:	a803      	add	r0, sp, #12
 80a0c80:	f7ff fb74 	bl	80a036c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0c84:	a808      	add	r0, sp, #32
 80a0c86:	f001 fd49 	bl	80a271c <_ZN6StringD1Ev>
                if (last_state == OAuth2_State::REFRESH_TOKEN) {
 80a0c8a:	f894 32bf 	ldrb.w	r3, [r4, #703]	; 0x2bf
 80a0c8e:	2b02      	cmp	r3, #2
 80a0c90:	f894 32be 	ldrb.w	r3, [r4, #702]	; 0x2be
    last_state = state;
 80a0c94:	f884 32bf 	strb.w	r3, [r4, #703]	; 0x2bf
                if (last_state == OAuth2_State::REFRESH_TOKEN) {
 80a0c98:	d1a7      	bne.n	80a0bea <_ZN13Google_OAuth24loopEv+0x13e>
    state = new_state;
 80a0c9a:	2300      	movs	r3, #0
 80a0c9c:	e78c      	b.n	80a0bb8 <_ZN13Google_OAuth24loopEv+0x10c>
                delay(1000);
 80a0c9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a0ca2:	f002 f90b 	bl	80a2ebc <delay>
                DEBUG_PRINT("Device Authorized!");
 80a0ca6:	a808      	add	r0, sp, #32
 80a0ca8:	4919      	ldr	r1, [pc, #100]	; (80a0d10 <_ZN13Google_OAuth24loopEv+0x264>)
 80a0caa:	f001 feb5 	bl	80a2a18 <_ZN6String6formatEPKcz>
 80a0cae:	9908      	ldr	r1, [sp, #32]
 80a0cb0:	a802      	add	r0, sp, #8
 80a0cb2:	f7ff fa5d 	bl	80a0170 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>
 80a0cb6:	a803      	add	r0, sp, #12
 80a0cb8:	f7ff fb58 	bl	80a036c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0cbc:	a808      	add	r0, sp, #32
 80a0cbe:	f001 fd2d 	bl	80a271c <_ZN6StringD1Ev>
                read_token();
 80a0cc2:	4620      	mov	r0, r4
 80a0cc4:	f7ff faba 	bl	80a023c <_ZN13Google_OAuth210read_tokenEv>
            break;
 80a0cc8:	e778      	b.n	80a0bbc <_ZN13Google_OAuth24loopEv+0x110>
            DEBUG_PRINT("Loop: OAuth2_State Not Set!!!");
 80a0cca:	a808      	add	r0, sp, #32
 80a0ccc:	4911      	ldr	r1, [pc, #68]	; (80a0d14 <_ZN13Google_OAuth24loopEv+0x268>)
 80a0cce:	f001 fea3 	bl	80a2a18 <_ZN6String6formatEPKcz>
 80a0cd2:	9908      	ldr	r1, [sp, #32]
 80a0cd4:	a802      	add	r0, sp, #8
 80a0cd6:	f7ff fa4b 	bl	80a0170 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>
 80a0cda:	a803      	add	r0, sp, #12
 80a0cdc:	f7ff fb46 	bl	80a036c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0ce0:	a808      	add	r0, sp, #32
 80a0ce2:	f001 fd1b 	bl	80a271c <_ZN6StringD1Ev>
            break;
 80a0ce6:	e769      	b.n	80a0bbc <_ZN13Google_OAuth24loopEv+0x110>
 80a0ce8:	080a6c3b 	.word	0x080a6c3b
 80a0cec:	080a6d65 	.word	0x080a6d65
 80a0cf0:	20000245 	.word	0x20000245
 80a0cf4:	080a6d78 	.word	0x080a6d78
 80a0cf8:	080a6d90 	.word	0x080a6d90
 80a0cfc:	080a6dc4 	.word	0x080a6dc4
 80a0d00:	080a6de2 	.word	0x080a6de2
 80a0d04:	080a6e1f 	.word	0x080a6e1f
 80a0d08:	080a6e3a 	.word	0x080a6e3a
 80a0d0c:	080a6e56 	.word	0x080a6e56
 80a0d10:	080a6e7f 	.word	0x080a6e7f
 80a0d14:	080a6e92 	.word	0x080a6e92

080a0d18 <_GLOBAL__sub_I__ZN13Google_OAuth2C2ERK6StringS2_>:
        val_(val) {
 80a0d18:	2200      	movs	r2, #0
 80a0d1a:	4b03      	ldr	r3, [pc, #12]	; (80a0d28 <_GLOBAL__sub_I__ZN13Google_OAuth2C2ERK6StringS2_+0x10>)
 80a0d1c:	701a      	strb	r2, [r3, #0]
 80a0d1e:	2201      	movs	r2, #1
 80a0d20:	4b02      	ldr	r3, [pc, #8]	; (80a0d2c <_GLOBAL__sub_I__ZN13Google_OAuth2C2ERK6StringS2_+0x14>)
 80a0d22:	701a      	strb	r2, [r3, #0]
}
 80a0d24:	4770      	bx	lr
 80a0d26:	bf00      	nop
 80a0d28:	20000244 	.word	0x20000244
 80a0d2c:	20000245 	.word	0x20000245

080a0d30 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM15Google_CalendarFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
	  switch (__op)
 80a0d30:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a0d32:	b538      	push	{r3, r4, r5, lr}
 80a0d34:	4604      	mov	r4, r0
	  switch (__op)
 80a0d36:	d007      	beq.n	80a0d48 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM15Google_CalendarFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x18>
 80a0d38:	2a03      	cmp	r2, #3
 80a0d3a:	d011      	beq.n	80a0d60 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM15Google_CalendarFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x30>
 80a0d3c:	2a01      	cmp	r2, #1
 80a0d3e:	d101      	bne.n	80a0d44 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM15Google_CalendarFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80a0d40:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
 80a0d42:	6023      	str	r3, [r4, #0]
	}
 80a0d44:	2000      	movs	r0, #0
 80a0d46:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80a0d48:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
 80a0d4a:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a0d4c:	f7ff f9a3 	bl	80a0096 <_Znwj>
 80a0d50:	4603      	mov	r3, r0
 80a0d52:	2800      	cmp	r0, #0
 80a0d54:	d0f5      	beq.n	80a0d42 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM15Google_CalendarFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
 80a0d56:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80a0d5a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80a0d5e:	e7f0      	b.n	80a0d42 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM15Google_CalendarFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
	  delete __victim._M_access<_Functor*>();
 80a0d60:	6800      	ldr	r0, [r0, #0]
 80a0d62:	2800      	cmp	r0, #0
 80a0d64:	d0ee      	beq.n	80a0d44 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM15Google_CalendarFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>
 80a0d66:	210c      	movs	r1, #12
 80a0d68:	f002 fff5 	bl	80a3d56 <_ZdlPvj>
 80a0d6c:	e7ea      	b.n	80a0d44 <_ZNSt14_Function_base13_Base_managerISt5_BindIFM15Google_CalendarFvPKcS4_EPS2_St12_PlaceholderILi1EES8_ILi2EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>

080a0d6e <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFM15Google_CalendarFvS1_S1_EPS4_St12_PlaceholderILi1EES8_ILi2EEEEE9_M_invokeERKSt9_Any_dataOS1_SH_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a0d6e:	b470      	push	{r4, r5, r6}
	    return __source._M_access<_Functor*>();
 80a0d70:	6803      	ldr	r3, [r0, #0]
	  return std::__invoke(_M_f,
 80a0d72:	6809      	ldr	r1, [r1, #0]
 80a0d74:	685c      	ldr	r4, [r3, #4]
 80a0d76:	689d      	ldr	r5, [r3, #8]
 80a0d78:	1066      	asrs	r6, r4, #1
 80a0d7a:	eb05 0064 	add.w	r0, r5, r4, asr #1
 80a0d7e:	07e4      	lsls	r4, r4, #31
 80a0d80:	bf48      	it	mi
 80a0d82:	59ac      	ldrmi	r4, [r5, r6]
 80a0d84:	681b      	ldr	r3, [r3, #0]
 80a0d86:	6812      	ldr	r2, [r2, #0]
 80a0d88:	bf48      	it	mi
 80a0d8a:	58e3      	ldrmi	r3, [r4, r3]
      }
 80a0d8c:	bc70      	pop	{r4, r5, r6}
 80a0d8e:	4718      	bx	r3

080a0d90 <_ZN15Google_CalendarC1ERK6StringRKa>:
//!                        as ID.
//!	@param[in] time_zone User time zone. It should be the same as the one use
//!                      in the Google Calendar app.
//
//*****************************************************************************
Google_Calendar::Google_Calendar(const String &calendar_id, const int8_t &time_zone)
 80a0d90:	b538      	push	{r3, r4, r5, lr}
 80a0d92:	4615      	mov	r5, r2
 80a0d94:	4604      	mov	r4, r0
    : CALENDAR_ID(calendar_id), TIME_ZONE(time_zone)
 80a0d96:	3004      	adds	r0, #4
 80a0d98:	f001 fd49 	bl	80a282e <_ZN6StringC1ERKS_>
 80a0d9c:	782b      	ldrb	r3, [r5, #0]
 80a0d9e:	4d0f      	ldr	r5, [pc, #60]	; (80a0ddc <_ZN15Google_CalendarC1ERK6StringRKa+0x4c>)
 80a0da0:	7523      	strb	r3, [r4, #20]
 80a0da2:	4b0f      	ldr	r3, [pc, #60]	; (80a0de0 <_ZN15Google_CalendarC1ERK6StringRKa+0x50>)
 80a0da4:	490f      	ldr	r1, [pc, #60]	; (80a0de4 <_ZN15Google_CalendarC1ERK6StringRKa+0x54>)
 80a0da6:	61a3      	str	r3, [r4, #24]
 80a0da8:	f104 001c 	add.w	r0, r4, #28
 80a0dac:	f001 fd00 	bl	80a27b0 <_ZN6StringC1EPKc>
 80a0db0:	4629      	mov	r1, r5
 80a0db2:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80a0db6:	f001 fcfb 	bl	80a27b0 <_ZN6StringC1EPKc>
 80a0dba:	4629      	mov	r1, r5
 80a0dbc:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80a0dc0:	f001 fcf6 	bl	80a27b0 <_ZN6StringC1EPKc>
 80a0dc4:	4629      	mov	r1, r5
 80a0dc6:	f104 006c 	add.w	r0, r4, #108	; 0x6c
 80a0dca:	f001 fcf1 	bl	80a27b0 <_ZN6StringC1EPKc>
{
    callback = nullptr; 
 80a0dce:	2300      	movs	r3, #0
    event_pending = false;
}
 80a0dd0:	4620      	mov	r0, r4
    callback = nullptr; 
 80a0dd2:	6023      	str	r3, [r4, #0]
    event_pending = false;
 80a0dd4:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
}
 80a0dd8:	bd38      	pop	{r3, r4, r5, pc}
 80a0dda:	bf00      	nop
 80a0ddc:	080a6c3b 	.word	0x080a6c3b
 80a0de0:	006ddd00 	.word	0x006ddd00
 80a0de4:	080a70b0 	.word	0x080a70b0

080a0de8 <_ZN15Google_Calendar6failedEv>:
//! @return false if did not fail, true if failed.
//
//*****************************************************************************
bool Google_Calendar::failed(void)
{
    return http_status_code != HTTP_OK;
 80a0de8:	f8b0 007c 	ldrh.w	r0, [r0, #124]	; 0x7c
}
 80a0dec:	38c8      	subs	r0, #200	; 0xc8
 80a0dee:	bf18      	it	ne
 80a0df0:	2001      	movne	r0, #1
 80a0df2:	4770      	bx	lr

080a0df4 <_ZN15Google_Calendar16is_event_pendingEv>:
//
//*****************************************************************************
bool Google_Calendar::is_event_pending(void)
{
    return event_pending;
}
 80a0df4:	f890 0068 	ldrb.w	r0, [r0, #104]	; 0x68
 80a0df8:	4770      	bx	lr

080a0dfa <_ZN15Google_Calendar18get_time_remainingEv>:



int32_t Google_Calendar::get_time_remaining(void) {
 80a0dfa:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80a0dfe:	4604      	mov	r4, r0
    
    time_t current_time = unix_time(Time.year(), Time.month(), Time.day(),
 80a0e00:	f002 f846 	bl	80a2e90 <_ZN9TimeClass4yearEv>
 80a0e04:	4605      	mov	r5, r0
 80a0e06:	f002 f83b 	bl	80a2e80 <_ZN9TimeClass5monthEv>
 80a0e0a:	4606      	mov	r6, r0
 80a0e0c:	f002 f82c 	bl	80a2e68 <_ZN9TimeClass3dayEv>
 80a0e10:	4607      	mov	r7, r0
 80a0e12:	f002 f805 	bl	80a2e20 <_ZN9TimeClass4hourEv>
 80a0e16:	4680      	mov	r8, r0
 80a0e18:	f002 f80e 	bl	80a2e38 <_ZN9TimeClass6minuteEv>
 80a0e1c:	4681      	mov	r9, r0
 80a0e1e:	f002 f817 	bl	80a2e50 <_ZN9TimeClass6secondEv>
 80a0e22:	4643      	mov	r3, r8
 80a0e24:	463a      	mov	r2, r7
 80a0e26:	e9cd 9000 	strd	r9, r0, [sp]
 80a0e2a:	4631      	mov	r1, r6
 80a0e2c:	4628      	mov	r0, r5
 80a0e2e:	f7ff f95a 	bl	80a00e6 <_Z9unix_timeiiiiii>
 80a0e32:	460b      	mov	r3, r1
                                          Time.hour(), Time.minute(), Time.second());
                                         

    if (is_event_pending()) {
 80a0e34:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
    time_t current_time = unix_time(Time.year(), Time.month(), Time.day(),
 80a0e38:	4602      	mov	r2, r0
    if (is_event_pending()) {
 80a0e3a:	b1b1      	cbz	r1, 80a0e6a <_ZN15Google_Calendar18get_time_remainingEv+0x70>
        if ((event_start_datetime <= current_time) && (event_end_datetime >= current_time)) {
 80a0e3c:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
 80a0e40:	4282      	cmp	r2, r0
 80a0e42:	eb73 0501 	sbcs.w	r5, r3, r1
 80a0e46:	db0b      	blt.n	80a0e60 <_ZN15Google_Calendar18get_time_remainingEv+0x66>
 80a0e48:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
 80a0e4c:	4290      	cmp	r0, r2
 80a0e4e:	eb71 0503 	sbcs.w	r5, r1, r3
 80a0e52:	db07      	blt.n	80a0e64 <_ZN15Google_Calendar18get_time_remainingEv+0x6a>
            //event is active, return remainng time (it will be negative)
            time_left = current_time - event_end_datetime;
 80a0e54:	1a12      	subs	r2, r2, r0
        } else if ( event_start_datetime > current_time ) {
            //event is pending
            time_left = event_start_datetime - current_time;
 80a0e56:	6622      	str	r2, [r4, #96]	; 0x60
    sprintf(statusText, "Time left: %d:%02d:%02d", hours , minutes, seconds);
    DEBUG_PRINT(statusText);
    */
    return time_left;
    
}
 80a0e58:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80a0e5a:	b003      	add	sp, #12
 80a0e5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            time_left = event_start_datetime - current_time;
 80a0e60:	1a82      	subs	r2, r0, r2
 80a0e62:	e7f8      	b.n	80a0e56 <_ZN15Google_Calendar18get_time_remainingEv+0x5c>
            time_left = 0;
 80a0e64:	2300      	movs	r3, #0
        time_left = SEARCH_TIME / 1000 ;
 80a0e66:	6623      	str	r3, [r4, #96]	; 0x60
 80a0e68:	e7f6      	b.n	80a0e58 <_ZN15Google_Calendar18get_time_remainingEv+0x5e>
 80a0e6a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a0e6e:	69a3      	ldr	r3, [r4, #24]
 80a0e70:	fb93 f3f2 	sdiv	r3, r3, r2
 80a0e74:	e7f7      	b.n	80a0e66 <_ZN15Google_Calendar18get_time_remainingEv+0x6c>

080a0e76 <_ZN15Google_Calendar15get_event_titleEv>:
{
    return event_end_datetime;
}

String Google_Calendar::get_event_title(void)
{
 80a0e76:	b510      	push	{r4, lr}
 80a0e78:	4604      	mov	r4, r0
    return event_title;
 80a0e7a:	313c      	adds	r1, #60	; 0x3c
 80a0e7c:	f001 fcd7 	bl	80a282e <_ZN6StringC1ERKS_>
}
 80a0e80:	4620      	mov	r0, r4
 80a0e82:	bd10      	pop	{r4, pc}

080a0e84 <_ZN15Google_Calendar7publishERK13Google_OAuth2>:
{
 80a0e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int16_t index = 0, last_index = 0;
 80a0e88:	2500      	movs	r5, #0
{
 80a0e8a:	b0a3      	sub	sp, #140	; 0x8c
 80a0e8c:	4604      	mov	r4, r0
 80a0e8e:	9102      	str	r1, [sp, #8]
    int16_t index = 0, last_index = 0;
 80a0e90:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a0e94:	f8ad 501e 	strh.w	r5, [sp, #30]
         */
        String format(time_t t, const char* format_spec=NULL);

        inline String format(const char* format_spec=NULL)
        {
            return format(now(), format_spec);
 80a0e98:	f001 ffb1 	bl	80a2dfe <_ZN9TimeClass3nowEv>
 80a0e9c:	f8df b1d8 	ldr.w	fp, [pc, #472]	; 80a1078 <_ZN15Google_Calendar7publishERK13Google_OAuth2+0x1f4>
    String date = split_string(date_time, 'T', index, last_index);
 80a0ea0:	f10d 061e 	add.w	r6, sp, #30
 80a0ea4:	4602      	mov	r2, r0
 80a0ea6:	4659      	mov	r1, fp
 80a0ea8:	17c3      	asrs	r3, r0, #31
 80a0eaa:	9500      	str	r5, [sp, #0]
 80a0eac:	a80a      	add	r0, sp, #40	; 0x28
 80a0eae:	f001 ff47 	bl	80a2d40 <_ZN9TimeClass6formatExPKc>
 80a0eb2:	ab07      	add	r3, sp, #28
 80a0eb4:	2254      	movs	r2, #84	; 0x54
 80a0eb6:	a90a      	add	r1, sp, #40	; 0x28
 80a0eb8:	a80e      	add	r0, sp, #56	; 0x38
 80a0eba:	9600      	str	r6, [sp, #0]
 80a0ebc:	f7ff f8f9 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
    String time = split_string(date_time, date_time.charAt(19), index, last_index);
 80a0ec0:	2113      	movs	r1, #19
 80a0ec2:	a80a      	add	r0, sp, #40	; 0x28
 80a0ec4:	f001 fd5e 	bl	80a2984 <_ZNK6String6charAtEj>
    String time_min = date + "T";
 80a0ec8:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 80a107c <_ZN15Google_Calendar7publishERK13Google_OAuth2+0x1f8>
    String time = split_string(date_time, date_time.charAt(19), index, last_index);
 80a0ecc:	4602      	mov	r2, r0
 80a0ece:	ab07      	add	r3, sp, #28
 80a0ed0:	a90a      	add	r1, sp, #40	; 0x28
 80a0ed2:	a812      	add	r0, sp, #72	; 0x48
 80a0ed4:	9600      	str	r6, [sp, #0]
 80a0ed6:	f7ff f8ec 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
	StringSumHelper(const String &s) : String(s) {}
 80a0eda:	a90e      	add	r1, sp, #56	; 0x38
 80a0edc:	a81e      	add	r0, sp, #120	; 0x78
 80a0ede:	f001 fca6 	bl	80a282e <_ZN6StringC1ERKS_>
    String time_min = date + "T";
 80a0ee2:	4651      	mov	r1, sl
 80a0ee4:	a81e      	add	r0, sp, #120	; 0x78
 80a0ee6:	f001 fcfc 	bl	80a28e2 <_ZplRK15StringSumHelperPKc>
 80a0eea:	4601      	mov	r1, r0
 80a0eec:	a816      	add	r0, sp, #88	; 0x58
 80a0eee:	f001 fc9e 	bl	80a282e <_ZN6StringC1ERKS_>
    time_min += time + "-07:00";
 80a0ef2:	f8df 918c 	ldr.w	r9, [pc, #396]	; 80a1080 <_ZN15Google_Calendar7publishERK13Google_OAuth2+0x1fc>
class StringSumHelper : public String
 80a0ef6:	a81e      	add	r0, sp, #120	; 0x78
 80a0ef8:	f001 fc10 	bl	80a271c <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
 80a0efc:	a912      	add	r1, sp, #72	; 0x48
 80a0efe:	a81e      	add	r0, sp, #120	; 0x78
 80a0f00:	f001 fc95 	bl	80a282e <_ZN6StringC1ERKS_>
 80a0f04:	4649      	mov	r1, r9
 80a0f06:	a81e      	add	r0, sp, #120	; 0x78
 80a0f08:	f001 fceb 	bl	80a28e2 <_ZplRK15StringSumHelperPKc>
 80a0f0c:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80a0f0e:	a816      	add	r0, sp, #88	; 0x58
 80a0f10:	f001 fcc8 	bl	80a28a4 <_ZN6String6concatERKS_>
class StringSumHelper : public String
 80a0f14:	a81e      	add	r0, sp, #120	; 0x78
 80a0f16:	f001 fc01 	bl	80a271c <_ZN6StringD1Ev>
    time_t raw_time = unix_time(Time.year(), Time.month(), Time.day(), 
 80a0f1a:	f001 ffb9 	bl	80a2e90 <_ZN9TimeClass4yearEv>
 80a0f1e:	4607      	mov	r7, r0
 80a0f20:	f001 ffae 	bl	80a2e80 <_ZN9TimeClass5monthEv>
 80a0f24:	4680      	mov	r8, r0
 80a0f26:	f001 ff9f 	bl	80a2e68 <_ZN9TimeClass3dayEv>
 80a0f2a:	9005      	str	r0, [sp, #20]
 80a0f2c:	f001 ff78 	bl	80a2e20 <_ZN9TimeClass4hourEv>
 80a0f30:	9004      	str	r0, [sp, #16]
 80a0f32:	f001 ff81 	bl	80a2e38 <_ZN9TimeClass6minuteEv>
 80a0f36:	9003      	str	r0, [sp, #12]
 80a0f38:	f001 ff8a 	bl	80a2e50 <_ZN9TimeClass6secondEv>
 80a0f3c:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80a0f40:	9903      	ldr	r1, [sp, #12]
 80a0f42:	9001      	str	r0, [sp, #4]
 80a0f44:	9100      	str	r1, [sp, #0]
 80a0f46:	4638      	mov	r0, r7
 80a0f48:	4641      	mov	r1, r8
 80a0f4a:	f7ff f8cc 	bl	80a00e6 <_Z9unix_timeiiiiii>
 80a0f4e:	4607      	mov	r7, r0
    Time.zone(+0);
 80a0f50:	2000      	movs	r0, #0
    time_t raw_time = unix_time(Time.year(), Time.month(), Time.day(), 
 80a0f52:	4688      	mov	r8, r1
    Time.zone(+0);
 80a0f54:	f001 fe32 	bl	80a2bbc <_ZN9TimeClass4zoneEf>
    date_time = Time.format(raw_time + (SEARCH_TIME/1000));
 80a0f58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0f5c:	69a2      	ldr	r2, [r4, #24]
 80a0f5e:	a81e      	add	r0, sp, #120	; 0x78
 80a0f60:	fb92 f2f3 	sdiv	r2, r2, r3
 80a0f64:	4611      	mov	r1, r2
 80a0f66:	18ba      	adds	r2, r7, r2
 80a0f68:	eb48 73e1 	adc.w	r3, r8, r1, asr #31
 80a0f6c:	9500      	str	r5, [sp, #0]
 80a0f6e:	4659      	mov	r1, fp
    index = 0, last_index = 0;
 80a0f70:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a0f74:	f8ad 501e 	strh.w	r5, [sp, #30]
    date_time = Time.format(raw_time + (SEARCH_TIME/1000));
 80a0f78:	f001 fee2 	bl	80a2d40 <_ZN9TimeClass6formatExPKc>
 80a0f7c:	a91e      	add	r1, sp, #120	; 0x78
 80a0f7e:	a80a      	add	r0, sp, #40	; 0x28
 80a0f80:	f001 fc60 	bl	80a2844 <_ZN6StringaSEOS_>
 80a0f84:	a81e      	add	r0, sp, #120	; 0x78
 80a0f86:	f001 fbc9 	bl	80a271c <_ZN6StringD1Ev>
    date = split_string(date_time, 'T', index, last_index);
 80a0f8a:	ab07      	add	r3, sp, #28
 80a0f8c:	2254      	movs	r2, #84	; 0x54
 80a0f8e:	a90a      	add	r1, sp, #40	; 0x28
 80a0f90:	a81e      	add	r0, sp, #120	; 0x78
 80a0f92:	9600      	str	r6, [sp, #0]
 80a0f94:	f7ff f88d 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
 80a0f98:	a91e      	add	r1, sp, #120	; 0x78
 80a0f9a:	a80e      	add	r0, sp, #56	; 0x38
 80a0f9c:	f001 fc52 	bl	80a2844 <_ZN6StringaSEOS_>
 80a0fa0:	a81e      	add	r0, sp, #120	; 0x78
 80a0fa2:	f001 fbbb 	bl	80a271c <_ZN6StringD1Ev>
    time = split_string(date_time, date_time.charAt(19), index, last_index);
 80a0fa6:	2113      	movs	r1, #19
 80a0fa8:	a80a      	add	r0, sp, #40	; 0x28
 80a0faa:	f001 fceb 	bl	80a2984 <_ZNK6String6charAtEj>
 80a0fae:	ab07      	add	r3, sp, #28
 80a0fb0:	4602      	mov	r2, r0
 80a0fb2:	a90a      	add	r1, sp, #40	; 0x28
 80a0fb4:	a81e      	add	r0, sp, #120	; 0x78
 80a0fb6:	9600      	str	r6, [sp, #0]
 80a0fb8:	f7ff f87b 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
 80a0fbc:	a91e      	add	r1, sp, #120	; 0x78
 80a0fbe:	a812      	add	r0, sp, #72	; 0x48
 80a0fc0:	f001 fc40 	bl	80a2844 <_ZN6StringaSEOS_>
 80a0fc4:	a81e      	add	r0, sp, #120	; 0x78
 80a0fc6:	f001 fba9 	bl	80a271c <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
 80a0fca:	a90e      	add	r1, sp, #56	; 0x38
 80a0fcc:	a81e      	add	r0, sp, #120	; 0x78
 80a0fce:	f001 fc2e 	bl	80a282e <_ZN6StringC1ERKS_>
    String time_max = date + "T";
 80a0fd2:	4651      	mov	r1, sl
 80a0fd4:	a81e      	add	r0, sp, #120	; 0x78
 80a0fd6:	f001 fc84 	bl	80a28e2 <_ZplRK15StringSumHelperPKc>
 80a0fda:	4601      	mov	r1, r0
 80a0fdc:	a81a      	add	r0, sp, #104	; 0x68
 80a0fde:	f001 fc26 	bl	80a282e <_ZN6StringC1ERKS_>
class StringSumHelper : public String
 80a0fe2:	a81e      	add	r0, sp, #120	; 0x78
 80a0fe4:	f001 fb9a 	bl	80a271c <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
 80a0fe8:	a912      	add	r1, sp, #72	; 0x48
 80a0fea:	a81e      	add	r0, sp, #120	; 0x78
 80a0fec:	f001 fc1f 	bl	80a282e <_ZN6StringC1ERKS_>
    time_max += time + "-07:00";
 80a0ff0:	4649      	mov	r1, r9
 80a0ff2:	a81e      	add	r0, sp, #120	; 0x78
 80a0ff4:	f001 fc75 	bl	80a28e2 <_ZplRK15StringSumHelperPKc>
 80a0ff8:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80a0ffa:	a81a      	add	r0, sp, #104	; 0x68
 80a0ffc:	f001 fc52 	bl	80a28a4 <_ZN6String6concatERKS_>
class StringSumHelper : public String
 80a1000:	a81e      	add	r0, sp, #120	; 0x78
 80a1002:	f001 fb8b 	bl	80a271c <_ZN6StringD1Ev>
    Time.zone(TIME_ZONE);
 80a1006:	f994 0014 	ldrsb.w	r0, [r4, #20]
 80a100a:	f003 fb53 	bl	80a46b4 <__aeabi_i2f>
 80a100e:	f001 fdd5 	bl	80a2bbc <_ZN9TimeClass4zoneEf>
                                 CALENDAR_ID.c_str(), oauth2.access_token.c_str(), time_min.c_str(), time_max.c_str());
 80a1012:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80a1014:	6862      	ldr	r2, [r4, #4]
 80a1016:	9301      	str	r3, [sp, #4]
 80a1018:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80a101a:	a81e      	add	r0, sp, #120	; 0x78
 80a101c:	9300      	str	r3, [sp, #0]
 80a101e:	9b02      	ldr	r3, [sp, #8]
 80a1020:	4913      	ldr	r1, [pc, #76]	; (80a1070 <_ZN15Google_Calendar7publishERK13Google_OAuth2+0x1ec>)
 80a1022:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80a1026:	f001 fcf7 	bl	80a2a18 <_ZN6String6formatEPKcz>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 80a102a:	4b12      	ldr	r3, [pc, #72]	; (80a1074 <_ZN15Google_Calendar7publishERK13Google_OAuth2+0x1f0>)
 80a102c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80a102e:	781b      	ldrb	r3, [r3, #0]
 80a1030:	69e1      	ldr	r1, [r4, #28]
 80a1032:	f88d 3000 	strb.w	r3, [sp]
 80a1036:	a808      	add	r0, sp, #32
 80a1038:	233c      	movs	r3, #60	; 0x3c
 80a103a:	f002 f969 	bl	80a3310 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a103e:	a809      	add	r0, sp, #36	; 0x24
 80a1040:	f7ff f994 	bl	80a036c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1044:	a81e      	add	r0, sp, #120	; 0x78
 80a1046:	f001 fb69 	bl	80a271c <_ZN6StringD1Ev>
    String time_max = date + "T";
 80a104a:	a81a      	add	r0, sp, #104	; 0x68
 80a104c:	f001 fb66 	bl	80a271c <_ZN6StringD1Ev>
    String time_min = date + "T";
 80a1050:	a816      	add	r0, sp, #88	; 0x58
 80a1052:	f001 fb63 	bl	80a271c <_ZN6StringD1Ev>
    String time = split_string(date_time, date_time.charAt(19), index, last_index);
 80a1056:	a812      	add	r0, sp, #72	; 0x48
 80a1058:	f001 fb60 	bl	80a271c <_ZN6StringD1Ev>
    String date = split_string(date_time, 'T', index, last_index);
 80a105c:	a80e      	add	r0, sp, #56	; 0x38
 80a105e:	f001 fb5d 	bl	80a271c <_ZN6StringD1Ev>
    String date_time = Time.format();
 80a1062:	a80a      	add	r0, sp, #40	; 0x28
 80a1064:	f001 fb5a 	bl	80a271c <_ZN6StringD1Ev>
}
 80a1068:	b023      	add	sp, #140	; 0x8c
 80a106a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a106e:	bf00      	nop
 80a1070:	080a70c6 	.word	0x080a70c6
 80a1074:	20000247 	.word	0x20000247
 80a1078:	200003d8 	.word	0x200003d8
 80a107c:	080a79b5 	.word	0x080a79b5
 80a1080:	080a70bf 	.word	0x080a70bf

080a1084 <_ZN15Google_Calendar11print_errorEv>:
{
 80a1084:	b500      	push	{lr}
    if (http_error.length() != 0) {
 80a1086:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 80a1088:	b089      	sub	sp, #36	; 0x24
    if (http_error.length() != 0) {
 80a108a:	b19b      	cbz	r3, 80a10b4 <_ZN15Google_Calendar11print_errorEv+0x30>
        DEBUG_PRINT(http_error);
 80a108c:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 80a108e:	a804      	add	r0, sp, #16
 80a1090:	f001 fcc2 	bl	80a2a18 <_ZN6String6formatEPKcz>
 80a1094:	4b09      	ldr	r3, [pc, #36]	; (80a10bc <_ZN15Google_Calendar11print_errorEv+0x38>)
 80a1096:	9a04      	ldr	r2, [sp, #16]
 80a1098:	781b      	ldrb	r3, [r3, #0]
 80a109a:	4909      	ldr	r1, [pc, #36]	; (80a10c0 <_ZN15Google_Calendar11print_errorEv+0x3c>)
 80a109c:	f88d 3000 	strb.w	r3, [sp]
 80a10a0:	a802      	add	r0, sp, #8
 80a10a2:	233c      	movs	r3, #60	; 0x3c
 80a10a4:	f002 f934 	bl	80a3310 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a10a8:	a803      	add	r0, sp, #12
 80a10aa:	f7ff f95f 	bl	80a036c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a10ae:	a804      	add	r0, sp, #16
 80a10b0:	f001 fb34 	bl	80a271c <_ZN6StringD1Ev>
}
 80a10b4:	b009      	add	sp, #36	; 0x24
 80a10b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80a10ba:	bf00      	nop
 80a10bc:	20000246 	.word	0x20000246
 80a10c0:	080a6b6c 	.word	0x080a6b6c

080a10c4 <_ZN15Google_Calendar16convert_datetimeE6String>:

time_t Google_Calendar::convert_datetime(String event_date_time) {
    //  The event start date and time is a string RFC3339 timestamp.
    //  i.e. 2011-06-03T10:00:00-07:00.
    //  It is splited and converted into a unix timestamp.
    int16_t index = 0, last_index = 0;
 80a10c4:	2300      	movs	r3, #0
time_t Google_Calendar::convert_datetime(String event_date_time) {
 80a10c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a10ca:	b095      	sub	sp, #84	; 0x54
    int year = split_string(event_date_time, '-', index, last_index).toInt();
 80a10cc:	f10d 0516 	add.w	r5, sp, #22
 80a10d0:	222d      	movs	r2, #45	; 0x2d
    int16_t index = 0, last_index = 0;
 80a10d2:	f8ad 3014 	strh.w	r3, [sp, #20]
 80a10d6:	f8ad 3016 	strh.w	r3, [sp, #22]
    int year = split_string(event_date_time, '-', index, last_index).toInt();
 80a10da:	9500      	str	r5, [sp, #0]
 80a10dc:	ab05      	add	r3, sp, #20
 80a10de:	a80c      	add	r0, sp, #48	; 0x30
time_t Google_Calendar::convert_datetime(String event_date_time) {
 80a10e0:	460c      	mov	r4, r1
    int year = split_string(event_date_time, '-', index, last_index).toInt();
 80a10e2:	f7fe ffe6 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
 80a10e6:	a80c      	add	r0, sp, #48	; 0x30
 80a10e8:	f001 fc90 	bl	80a2a0c <_ZNK6String5toIntEv>
 80a10ec:	4606      	mov	r6, r0
 80a10ee:	a80c      	add	r0, sp, #48	; 0x30
 80a10f0:	f001 fb14 	bl	80a271c <_ZN6StringD1Ev>
    int month = split_string(event_date_time, '-', index, last_index).toInt();
 80a10f4:	4621      	mov	r1, r4
 80a10f6:	ab05      	add	r3, sp, #20
 80a10f8:	222d      	movs	r2, #45	; 0x2d
 80a10fa:	9500      	str	r5, [sp, #0]
 80a10fc:	a80c      	add	r0, sp, #48	; 0x30
 80a10fe:	f7fe ffd8 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
 80a1102:	a80c      	add	r0, sp, #48	; 0x30
 80a1104:	f001 fc82 	bl	80a2a0c <_ZNK6String5toIntEv>
 80a1108:	4607      	mov	r7, r0
 80a110a:	a80c      	add	r0, sp, #48	; 0x30
 80a110c:	f001 fb06 	bl	80a271c <_ZN6StringD1Ev>
    int day = split_string(event_date_time, 'T', index, last_index).toInt();
 80a1110:	4621      	mov	r1, r4
 80a1112:	ab05      	add	r3, sp, #20
 80a1114:	2254      	movs	r2, #84	; 0x54
 80a1116:	9500      	str	r5, [sp, #0]
 80a1118:	a80c      	add	r0, sp, #48	; 0x30
 80a111a:	f7fe ffca 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
 80a111e:	a80c      	add	r0, sp, #48	; 0x30
 80a1120:	f001 fc74 	bl	80a2a0c <_ZNK6String5toIntEv>
 80a1124:	4680      	mov	r8, r0
 80a1126:	a80c      	add	r0, sp, #48	; 0x30
 80a1128:	f001 faf8 	bl	80a271c <_ZN6StringD1Ev>
    int hour = split_string(event_date_time, ':', index, last_index).toInt();
 80a112c:	4621      	mov	r1, r4
 80a112e:	ab05      	add	r3, sp, #20
 80a1130:	223a      	movs	r2, #58	; 0x3a
 80a1132:	9500      	str	r5, [sp, #0]
 80a1134:	a80c      	add	r0, sp, #48	; 0x30
 80a1136:	f7fe ffbc 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
 80a113a:	a80c      	add	r0, sp, #48	; 0x30
 80a113c:	f001 fc66 	bl	80a2a0c <_ZNK6String5toIntEv>
 80a1140:	4681      	mov	r9, r0
 80a1142:	a80c      	add	r0, sp, #48	; 0x30
 80a1144:	f001 faea 	bl	80a271c <_ZN6StringD1Ev>
    int min = split_string(event_date_time, ':', index, last_index).toInt();
 80a1148:	ab05      	add	r3, sp, #20
 80a114a:	223a      	movs	r2, #58	; 0x3a
 80a114c:	4621      	mov	r1, r4
 80a114e:	9500      	str	r5, [sp, #0]
 80a1150:	a80c      	add	r0, sp, #48	; 0x30
 80a1152:	f7fe ffae 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
 80a1156:	a80c      	add	r0, sp, #48	; 0x30
 80a1158:	f001 fc58 	bl	80a2a0c <_ZNK6String5toIntEv>
 80a115c:	4682      	mov	sl, r0
 80a115e:	a80c      	add	r0, sp, #48	; 0x30
 80a1160:	f001 fadc 	bl	80a271c <_ZN6StringD1Ev>
    int sec = split_string(event_date_time, event_date_time.charAt(19), index, last_index).toInt();
 80a1164:	2113      	movs	r1, #19
 80a1166:	4620      	mov	r0, r4
 80a1168:	f001 fc0c 	bl	80a2984 <_ZNK6String6charAtEj>
 80a116c:	4621      	mov	r1, r4
 80a116e:	4602      	mov	r2, r0
 80a1170:	ab05      	add	r3, sp, #20
 80a1172:	9500      	str	r5, [sp, #0]
 80a1174:	a80c      	add	r0, sp, #48	; 0x30
 80a1176:	f7fe ff9c 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
 80a117a:	a80c      	add	r0, sp, #48	; 0x30
 80a117c:	f001 fc46 	bl	80a2a0c <_ZNK6String5toIntEv>
 80a1180:	4604      	mov	r4, r0
 80a1182:	a80c      	add	r0, sp, #48	; 0x30
 80a1184:	f001 faca 	bl	80a271c <_ZN6StringD1Ev>
    time_t event_time = unix_time(year, month, day, hour, min, sec);
 80a1188:	464b      	mov	r3, r9
 80a118a:	4642      	mov	r2, r8
 80a118c:	4639      	mov	r1, r7
 80a118e:	4630      	mov	r0, r6
 80a1190:	e9cd a400 	strd	sl, r4, [sp]
 80a1194:	f7fe ffa7 	bl	80a00e6 <_Z9unix_timeiiiiii>
 80a1198:	4683      	mov	fp, r0
 80a119a:	460d      	mov	r5, r1
    //  Change to UTC+0:00 since the unix timestamp already considers the user time zone.
    char  statusText[32];
    sprintf(statusText, "%d-%d-%d %d:%02d:%02d", year,month,day,hour,min,sec);
 80a119c:	463b      	mov	r3, r7
 80a119e:	4632      	mov	r2, r6
 80a11a0:	4912      	ldr	r1, [pc, #72]	; (80a11ec <_ZN15Google_Calendar16convert_datetimeE6String+0x128>)
 80a11a2:	e9cd a402 	strd	sl, r4, [sp, #8]
 80a11a6:	e9cd 8900 	strd	r8, r9, [sp]
 80a11aa:	a80c      	add	r0, sp, #48	; 0x30
 80a11ac:	f001 fa20 	bl	80a25f0 <sprintf>
    delay(1000);
 80a11b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a11b4:	f001 fe82 	bl	80a2ebc <delay>
    DEBUG_PRINT(statusText);
 80a11b8:	a90c      	add	r1, sp, #48	; 0x30
 80a11ba:	a808      	add	r0, sp, #32
 80a11bc:	f001 fc2c 	bl	80a2a18 <_ZN6String6formatEPKcz>
 80a11c0:	4b0b      	ldr	r3, [pc, #44]	; (80a11f0 <_ZN15Google_Calendar16convert_datetimeE6String+0x12c>)
 80a11c2:	9a08      	ldr	r2, [sp, #32]
 80a11c4:	781b      	ldrb	r3, [r3, #0]
 80a11c6:	490b      	ldr	r1, [pc, #44]	; (80a11f4 <_ZN15Google_Calendar16convert_datetimeE6String+0x130>)
 80a11c8:	f88d 3000 	strb.w	r3, [sp]
 80a11cc:	a806      	add	r0, sp, #24
 80a11ce:	233c      	movs	r3, #60	; 0x3c
 80a11d0:	f002 f89e 	bl	80a3310 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a11d4:	a807      	add	r0, sp, #28
 80a11d6:	f7ff f8c9 	bl	80a036c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a11da:	a808      	add	r0, sp, #32
 80a11dc:	f001 fa9e 	bl	80a271c <_ZN6StringD1Ev>
    return event_time;
}
 80a11e0:	4658      	mov	r0, fp
 80a11e2:	4629      	mov	r1, r5
 80a11e4:	b015      	add	sp, #84	; 0x54
 80a11e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a11ea:	bf00      	nop
 80a11ec:	080a710f 	.word	0x080a710f
 80a11f0:	20000246 	.word	0x20000246
 80a11f4:	080a6b6c 	.word	0x080a6b6c

080a11f8 <_ZN15Google_Calendar6parserEPKcS1_>:
{
 80a11f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    int16_t index = 0, last_index = 0;
 80a11fa:	2600      	movs	r6, #0
{
 80a11fc:	460d      	mov	r5, r1
 80a11fe:	b09d      	sub	sp, #116	; 0x74
    String str_data = String(data);
 80a1200:	4611      	mov	r1, r2
{
 80a1202:	4604      	mov	r4, r0
    String str_data = String(data);
 80a1204:	a804      	add	r0, sp, #16
    int16_t index = 0, last_index = 0;
 80a1206:	f8ad 600c 	strh.w	r6, [sp, #12]
 80a120a:	f8ad 600e 	strh.w	r6, [sp, #14]
    String str_data = String(data);
 80a120e:	f001 facf 	bl	80a27b0 <_ZN6StringC1EPKc>
    String str_event = String(event);
 80a1212:	4629      	mov	r1, r5
 80a1214:	a808      	add	r0, sp, #32
 80a1216:	f001 facb 	bl	80a27b0 <_ZN6StringC1EPKc>
    String event_start;
 80a121a:	4957      	ldr	r1, [pc, #348]	; (80a1378 <_ZN15Google_Calendar6parserEPKcS1_+0x180>)
 80a121c:	a80c      	add	r0, sp, #48	; 0x30
 80a121e:	f001 fac7 	bl	80a27b0 <_ZN6StringC1EPKc>
    split_string(str_event, '/', index, last_index); // skip deviceID.
 80a1222:	f10d 050e 	add.w	r5, sp, #14
    String event_end; 
 80a1226:	4954      	ldr	r1, [pc, #336]	; (80a1378 <_ZN15Google_Calendar6parserEPKcS1_+0x180>)
 80a1228:	a810      	add	r0, sp, #64	; 0x40
 80a122a:	f001 fac1 	bl	80a27b0 <_ZN6StringC1EPKc>
    split_string(str_event, '/', index, last_index); // skip deviceID.
 80a122e:	222f      	movs	r2, #47	; 0x2f
 80a1230:	ab03      	add	r3, sp, #12
 80a1232:	a908      	add	r1, sp, #32
 80a1234:	a818      	add	r0, sp, #96	; 0x60
 80a1236:	9500      	str	r5, [sp, #0]
 80a1238:	f7fe ff3b 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
 80a123c:	a818      	add	r0, sp, #96	; 0x60
 80a123e:	f001 fa6d 	bl	80a271c <_ZN6StringD1Ev>
    String hook = split_string(str_event, '/', index, last_index);
 80a1242:	a908      	add	r1, sp, #32
 80a1244:	a814      	add	r0, sp, #80	; 0x50
 80a1246:	222f      	movs	r2, #47	; 0x2f
 80a1248:	9500      	str	r5, [sp, #0]
 80a124a:	ab03      	add	r3, sp, #12
 80a124c:	f7fe ff31 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
    if (hook.equals("hook-response"))
 80a1250:	494a      	ldr	r1, [pc, #296]	; (80a137c <_ZN15Google_Calendar6parserEPKcS1_+0x184>)
 80a1252:	a814      	add	r0, sp, #80	; 0x50
    index = 0, last_index = 0;
 80a1254:	f8ad 600c 	strh.w	r6, [sp, #12]
 80a1258:	f8ad 600e 	strh.w	r6, [sp, #14]
    if (hook.equals("hook-response"))
 80a125c:	f001 fb77 	bl	80a294e <_ZNK6String6equalsEPKc>
 80a1260:	2800      	cmp	r0, #0
 80a1262:	d073      	beq.n	80a134c <_ZN15Google_Calendar6parserEPKcS1_+0x154>
        if (str_data.equals("~~~"))
 80a1264:	4946      	ldr	r1, [pc, #280]	; (80a1380 <_ZN15Google_Calendar6parserEPKcS1_+0x188>)
 80a1266:	a804      	add	r0, sp, #16
 80a1268:	f001 fb71 	bl	80a294e <_ZNK6String6equalsEPKc>
 80a126c:	4607      	mov	r7, r0
 80a126e:	b1a8      	cbz	r0, 80a129c <_ZN15Google_Calendar6parserEPKcS1_+0xa4>
            event_pending = false;
 80a1270:	f884 6068 	strb.w	r6, [r4, #104]	; 0x68
        http_status_code = HTTP_OK;
 80a1274:	23c8      	movs	r3, #200	; 0xc8
 80a1276:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
    String hook = split_string(str_event, '/', index, last_index);
 80a127a:	a814      	add	r0, sp, #80	; 0x50
 80a127c:	f001 fa4e 	bl	80a271c <_ZN6StringD1Ev>
    String event_end; 
 80a1280:	a810      	add	r0, sp, #64	; 0x40
 80a1282:	f001 fa4b 	bl	80a271c <_ZN6StringD1Ev>
    String event_start;
 80a1286:	a80c      	add	r0, sp, #48	; 0x30
 80a1288:	f001 fa48 	bl	80a271c <_ZN6StringD1Ev>
    String str_event = String(event);
 80a128c:	a808      	add	r0, sp, #32
 80a128e:	f001 fa45 	bl	80a271c <_ZN6StringD1Ev>
    String str_data = String(data);
 80a1292:	a804      	add	r0, sp, #16
 80a1294:	f001 fa42 	bl	80a271c <_ZN6StringD1Ev>
}
 80a1298:	b01d      	add	sp, #116	; 0x74
 80a129a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            event_title = split_string(str_data, '~', index, last_index);;
 80a129c:	227e      	movs	r2, #126	; 0x7e
 80a129e:	ab03      	add	r3, sp, #12
 80a12a0:	a904      	add	r1, sp, #16
 80a12a2:	a818      	add	r0, sp, #96	; 0x60
 80a12a4:	9500      	str	r5, [sp, #0]
 80a12a6:	f7fe ff04 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
 80a12aa:	a918      	add	r1, sp, #96	; 0x60
 80a12ac:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80a12b0:	f001 fac8 	bl	80a2844 <_ZN6StringaSEOS_>
 80a12b4:	a818      	add	r0, sp, #96	; 0x60
 80a12b6:	f001 fa31 	bl	80a271c <_ZN6StringD1Ev>
            event_start = split_string(str_data, '~', index, last_index);;
 80a12ba:	227e      	movs	r2, #126	; 0x7e
 80a12bc:	ab03      	add	r3, sp, #12
 80a12be:	a904      	add	r1, sp, #16
 80a12c0:	a818      	add	r0, sp, #96	; 0x60
 80a12c2:	9500      	str	r5, [sp, #0]
 80a12c4:	f7fe fef5 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
 80a12c8:	a918      	add	r1, sp, #96	; 0x60
 80a12ca:	a80c      	add	r0, sp, #48	; 0x30
 80a12cc:	f001 faba 	bl	80a2844 <_ZN6StringaSEOS_>
 80a12d0:	a818      	add	r0, sp, #96	; 0x60
 80a12d2:	f001 fa23 	bl	80a271c <_ZN6StringD1Ev>
            event_end = split_string(str_data, '~', index, last_index);;
 80a12d6:	227e      	movs	r2, #126	; 0x7e
 80a12d8:	ab03      	add	r3, sp, #12
 80a12da:	a904      	add	r1, sp, #16
 80a12dc:	a818      	add	r0, sp, #96	; 0x60
 80a12de:	9500      	str	r5, [sp, #0]
 80a12e0:	f7fe fee7 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
 80a12e4:	a918      	add	r1, sp, #96	; 0x60
 80a12e6:	a810      	add	r0, sp, #64	; 0x40
 80a12e8:	f001 faac 	bl	80a2844 <_ZN6StringaSEOS_>
 80a12ec:	a818      	add	r0, sp, #96	; 0x60
 80a12ee:	f001 fa15 	bl	80a271c <_ZN6StringD1Ev>
            event_location = split_string(str_data, '\0', index, last_index);
 80a12f2:	ab03      	add	r3, sp, #12
 80a12f4:	463a      	mov	r2, r7
 80a12f6:	a904      	add	r1, sp, #16
 80a12f8:	a818      	add	r0, sp, #96	; 0x60
 80a12fa:	9500      	str	r5, [sp, #0]
 80a12fc:	f7fe fed9 	bl	80a00b2 <_Z12split_stringR6StringcRsS1_>
 80a1300:	a918      	add	r1, sp, #96	; 0x60
 80a1302:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80a1306:	f001 fa9d 	bl	80a2844 <_ZN6StringaSEOS_>
 80a130a:	a818      	add	r0, sp, #96	; 0x60
 80a130c:	f001 fa06 	bl	80a271c <_ZN6StringD1Ev>
            event_start_datetime = convert_datetime(event_start);
 80a1310:	a90c      	add	r1, sp, #48	; 0x30
 80a1312:	a818      	add	r0, sp, #96	; 0x60
 80a1314:	f001 fa8b 	bl	80a282e <_ZN6StringC1ERKS_>
 80a1318:	4620      	mov	r0, r4
 80a131a:	a918      	add	r1, sp, #96	; 0x60
 80a131c:	f7ff fed2 	bl	80a10c4 <_ZN15Google_Calendar16convert_datetimeE6String>
 80a1320:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
 80a1324:	a818      	add	r0, sp, #96	; 0x60
 80a1326:	f001 f9f9 	bl	80a271c <_ZN6StringD1Ev>
            event_end_datetime = convert_datetime(event_end); 
 80a132a:	a910      	add	r1, sp, #64	; 0x40
 80a132c:	a818      	add	r0, sp, #96	; 0x60
 80a132e:	f001 fa7e 	bl	80a282e <_ZN6StringC1ERKS_>
 80a1332:	4620      	mov	r0, r4
 80a1334:	a918      	add	r1, sp, #96	; 0x60
 80a1336:	f7ff fec5 	bl	80a10c4 <_ZN15Google_Calendar16convert_datetimeE6String>
 80a133a:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
 80a133e:	a818      	add	r0, sp, #96	; 0x60
 80a1340:	f001 f9ec 	bl	80a271c <_ZN6StringD1Ev>
            event_pending = true;
 80a1344:	2301      	movs	r3, #1
 80a1346:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 80a134a:	e793      	b.n	80a1274 <_ZN15Google_Calendar6parserEPKcS1_+0x7c>
    else if (hook.equals("hook-error"))
 80a134c:	490d      	ldr	r1, [pc, #52]	; (80a1384 <_ZN15Google_Calendar6parserEPKcS1_+0x18c>)
 80a134e:	a814      	add	r0, sp, #80	; 0x50
 80a1350:	f001 fafd 	bl	80a294e <_ZNK6String6equalsEPKc>
 80a1354:	2800      	cmp	r0, #0
 80a1356:	d090      	beq.n	80a127a <_ZN15Google_Calendar6parserEPKcS1_+0x82>
        http_status_code = str_data.substring(13, 16).toInt();
 80a1358:	2310      	movs	r3, #16
 80a135a:	220d      	movs	r2, #13
 80a135c:	eb0d 0103 	add.w	r1, sp, r3
 80a1360:	a818      	add	r0, sp, #96	; 0x60
 80a1362:	f001 fb31 	bl	80a29c8 <_ZNK6String9substringEjj>
 80a1366:	a818      	add	r0, sp, #96	; 0x60
 80a1368:	f001 fb50 	bl	80a2a0c <_ZNK6String5toIntEv>
 80a136c:	f8a4 007c 	strh.w	r0, [r4, #124]	; 0x7c
 80a1370:	a818      	add	r0, sp, #96	; 0x60
 80a1372:	f001 f9d3 	bl	80a271c <_ZN6StringD1Ev>
 80a1376:	e780      	b.n	80a127a <_ZN15Google_Calendar6parserEPKcS1_+0x82>
 80a1378:	080a6c3b 	.word	0x080a6c3b
 80a137c:	080a6ba1 	.word	0x080a6ba1
 80a1380:	080a7125 	.word	0x080a7125
 80a1384:	080a6baf 	.word	0x080a6baf

080a1388 <_ZN15Google_Calendar16response_handlerEPKcS1_>:
{
 80a1388:	b510      	push	{r4, lr}
 80a138a:	4604      	mov	r4, r0
    parser(event, data);
 80a138c:	f7ff ff34 	bl	80a11f8 <_ZN15Google_Calendar6parserEPKcS1_>
    (*callback)();
 80a1390:	6823      	ldr	r3, [r4, #0]
}
 80a1392:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    (*callback)();
 80a1396:	4718      	bx	r3

080a1398 <_ZN15Google_Calendar13error_handlerEPKcS1_>:
{
 80a1398:	b530      	push	{r4, r5, lr}
 80a139a:	4604      	mov	r4, r0
 80a139c:	b085      	sub	sp, #20
    parser(event, data);
 80a139e:	f7ff ff2b 	bl	80a11f8 <_ZN15Google_Calendar6parserEPKcS1_>
    http_error = String::format("\r\nHTTP ERROR - %d", http_status_code);
 80a13a2:	f104 056c 	add.w	r5, r4, #108	; 0x6c
 80a13a6:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
 80a13aa:	4668      	mov	r0, sp
 80a13ac:	4910      	ldr	r1, [pc, #64]	; (80a13f0 <_ZN15Google_Calendar13error_handlerEPKcS1_+0x58>)
 80a13ae:	f001 fb33 	bl	80a2a18 <_ZN6String6formatEPKcz>
 80a13b2:	4669      	mov	r1, sp
 80a13b4:	4628      	mov	r0, r5
 80a13b6:	f001 fa45 	bl	80a2844 <_ZN6StringaSEOS_>
 80a13ba:	4668      	mov	r0, sp
 80a13bc:	f001 f9ae 	bl	80a271c <_ZN6StringD1Ev>
    if (http_status_code == HTTP_BAD_REQUEST)
 80a13c0:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 80a13c4:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80a13c8:	d107      	bne.n	80a13da <_ZN15Google_Calendar13error_handlerEPKcS1_+0x42>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 80a13ca:	490a      	ldr	r1, [pc, #40]	; (80a13f4 <_ZN15Google_Calendar13error_handlerEPKcS1_+0x5c>)
 80a13cc:	4628      	mov	r0, r5
 80a13ce:	f001 fa6d 	bl	80a28ac <_ZN6String6concatEPKc>
    (*callback)();
 80a13d2:	6823      	ldr	r3, [r4, #0]
 80a13d4:	4798      	blx	r3
}
 80a13d6:	b005      	add	sp, #20
 80a13d8:	bd30      	pop	{r4, r5, pc}
    else if (http_status_code == HTTP_UNAUTHORIZED)
 80a13da:	f240 1291 	movw	r2, #401	; 0x191
 80a13de:	4293      	cmp	r3, r2
 80a13e0:	d101      	bne.n	80a13e6 <_ZN15Google_Calendar13error_handlerEPKcS1_+0x4e>
 80a13e2:	4905      	ldr	r1, [pc, #20]	; (80a13f8 <_ZN15Google_Calendar13error_handlerEPKcS1_+0x60>)
 80a13e4:	e7f2      	b.n	80a13cc <_ZN15Google_Calendar13error_handlerEPKcS1_+0x34>
    else if (http_status_code == HTTP_NOT_FOUND)
 80a13e6:	f5b3 7fca 	cmp.w	r3, #404	; 0x194
 80a13ea:	d1f2      	bne.n	80a13d2 <_ZN15Google_Calendar13error_handlerEPKcS1_+0x3a>
 80a13ec:	4903      	ldr	r1, [pc, #12]	; (80a13fc <_ZN15Google_Calendar13error_handlerEPKcS1_+0x64>)
 80a13ee:	e7ed      	b.n	80a13cc <_ZN15Google_Calendar13error_handlerEPKcS1_+0x34>
 80a13f0:	080a6c85 	.word	0x080a6c85
 80a13f4:	080a7129 	.word	0x080a7129
 80a13f8:	080a7174 	.word	0x080a7174
 80a13fc:	080a7192 	.word	0x080a7192

080a1400 <_ZN10CloudClass9subscribeI15Google_CalendarEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0.constprop.0>:
    bool subscribe(const char *eventName, void (T::*handler)(const char *, const char *), T *instance, Spark_Subscription_Scope_TypeDef scope)
 80a1400:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1402:	461f      	mov	r7, r3
    _Function_base() : _M_manager(nullptr) { }
 80a1404:	2300      	movs	r3, #0
 80a1406:	b091      	sub	sp, #68	; 0x44
 80a1408:	ad02      	add	r5, sp, #8
 80a140a:	e885 0006 	stmia.w	r5, {r1, r2}
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a140e:	ac05      	add	r4, sp, #20
 80a1410:	4606      	mov	r6, r0
 80a1412:	e895 0003 	ldmia.w	r5, {r0, r1}
 80a1416:	e884 0005 	stmia.w	r4, {r0, r2}
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a141a:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
 80a141c:	930a      	str	r3, [sp, #40]	; 0x28
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a141e:	f7fe fe3a 	bl	80a0096 <_Znwj>
 80a1422:	4602      	mov	r2, r0
 80a1424:	b120      	cbz	r0, 80a1430 <_ZN10CloudClass9subscribeI15Google_CalendarEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0.constprop.0+0x30>
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
 80a1426:	e894 0003 	ldmia.w	r4, {r0, r1}
 80a142a:	e882 0003 	stmia.w	r2, {r0, r1}
 80a142e:	6097      	str	r7, [r2, #8]
	    _M_invoker = &_My_handler::_M_invoke;
 80a1430:	4b13      	ldr	r3, [pc, #76]	; (80a1480 <_ZN10CloudClass9subscribeI15Google_CalendarEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0.constprop.0+0x80>)
        return subscribe_wiring(eventName, handler, scope);
 80a1432:	a908      	add	r1, sp, #32
 80a1434:	930b      	str	r3, [sp, #44]	; 0x2c
	    _M_manager = &_My_handler::_M_manager;
 80a1436:	4b13      	ldr	r3, [pc, #76]	; (80a1484 <_ZN10CloudClass9subscribeI15Google_CalendarEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0.constprop.0+0x84>)
 80a1438:	a80c      	add	r0, sp, #48	; 0x30
 80a143a:	930a      	str	r3, [sp, #40]	; 0x28
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a143c:	9208      	str	r2, [sp, #32]
 80a143e:	f7ff fa7b 	bl	80a0938 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
        if (handler) // if the call-wrapper has wrapped a callable object
 80a1442:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80a1444:	b94b      	cbnz	r3, 80a145a <_ZN10CloudClass9subscribeI15Google_CalendarEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0.constprop.0+0x5a>
        bool success = false;
 80a1446:	2400      	movs	r4, #0
    class function<_Res(_ArgTypes...)>
 80a1448:	a80c      	add	r0, sp, #48	; 0x30
 80a144a:	f7fe fea3 	bl	80a0194 <_ZNSt14_Function_baseD1Ev>
 80a144e:	a808      	add	r0, sp, #32
 80a1450:	f7fe fea0 	bl	80a0194 <_ZNSt14_Function_baseD1Ev>
    }
 80a1454:	4620      	mov	r0, r4
 80a1456:	b011      	add	sp, #68	; 0x44
 80a1458:	bdf0      	pop	{r4, r5, r6, r7, pc}
            auto wrapper = new wiring_event_handler_t(handler);
 80a145a:	2010      	movs	r0, #16
 80a145c:	f7fe fe1b 	bl	80a0096 <_Znwj>
 80a1460:	4604      	mov	r4, r0
 80a1462:	2800      	cmp	r0, #0
 80a1464:	d0ef      	beq.n	80a1446 <_ZN10CloudClass9subscribeI15Google_CalendarEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0.constprop.0+0x46>
 80a1466:	a90c      	add	r1, sp, #48	; 0x30
 80a1468:	f7ff fa66 	bl	80a0938 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
                success = spark_subscribe(eventName, (EventHandler)call_wiring_event_handler, wrapper, scope, deviceID, NULL);
 80a146c:	2300      	movs	r3, #0
 80a146e:	4622      	mov	r2, r4
 80a1470:	4630      	mov	r0, r6
 80a1472:	e9cd 3300 	strd	r3, r3, [sp]
 80a1476:	4904      	ldr	r1, [pc, #16]	; (80a1488 <_ZN10CloudClass9subscribeI15Google_CalendarEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0.constprop.0+0x88>)
 80a1478:	f001 f882 	bl	80a2580 <spark_subscribe>
 80a147c:	4604      	mov	r4, r0
 80a147e:	e7e3      	b.n	80a1448 <_ZN10CloudClass9subscribeI15Google_CalendarEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0.constprop.0+0x48>
 80a1480:	080a0d6f 	.word	0x080a0d6f
 80a1484:	080a0d31 	.word	0x080a0d31
 80a1488:	080a310f 	.word	0x080a310f

080a148c <_ZN15Google_Calendar9subscribeEPFvvE>:
{
 80a148c:	b5f0      	push	{r4, r5, r6, r7, lr}
    this->callback = callback;
 80a148e:	4607      	mov	r7, r0
{
 80a1490:	b091      	sub	sp, #68	; 0x44
 80a1492:	ad08      	add	r5, sp, #32
	StringSumHelper(const String &s) : String(s) {}
 80a1494:	ac0c      	add	r4, sp, #48	; 0x30
    this->callback = callback;
 80a1496:	f847 1b1c 	str.w	r1, [r7], #28
{
 80a149a:	4606      	mov	r6, r0
 80a149c:	4628      	mov	r0, r5
 80a149e:	f001 f85f 	bl	80a2560 <spark_deviceID>
 80a14a2:	4629      	mov	r1, r5
 80a14a4:	4620      	mov	r0, r4
 80a14a6:	f001 f9c2 	bl	80a282e <_ZN6StringC1ERKS_>
    String hook_reponse = System.deviceID() + "/hook-response/" + WEBHOOK_EVENT_NAME;
 80a14aa:	4620      	mov	r0, r4
 80a14ac:	4921      	ldr	r1, [pc, #132]	; (80a1534 <_ZN15Google_Calendar9subscribeEPFvvE+0xa8>)
 80a14ae:	f001 fa18 	bl	80a28e2 <_ZplRK15StringSumHelperPKc>
 80a14b2:	4639      	mov	r1, r7
 80a14b4:	f001 fa09 	bl	80a28ca <_ZplRK15StringSumHelperRK6String>
 80a14b8:	4601      	mov	r1, r0
 80a14ba:	4668      	mov	r0, sp
 80a14bc:	f001 f9b7 	bl	80a282e <_ZN6StringC1ERKS_>
class StringSumHelper : public String
 80a14c0:	4620      	mov	r0, r4
 80a14c2:	f001 f92b 	bl	80a271c <_ZN6StringD1Ev>
 80a14c6:	4628      	mov	r0, r5
 80a14c8:	f001 f928 	bl	80a271c <_ZN6StringD1Ev>
 80a14cc:	4628      	mov	r0, r5
 80a14ce:	f001 f847 	bl	80a2560 <spark_deviceID>
	StringSumHelper(const String &s) : String(s) {}
 80a14d2:	4629      	mov	r1, r5
 80a14d4:	4620      	mov	r0, r4
 80a14d6:	f001 f9aa 	bl	80a282e <_ZN6StringC1ERKS_>
    String hook_error = System.deviceID() + "/hook-error/" + WEBHOOK_EVENT_NAME;
 80a14da:	4620      	mov	r0, r4
 80a14dc:	4916      	ldr	r1, [pc, #88]	; (80a1538 <_ZN15Google_Calendar9subscribeEPFvvE+0xac>)
 80a14de:	f001 fa00 	bl	80a28e2 <_ZplRK15StringSumHelperPKc>
 80a14e2:	4639      	mov	r1, r7
 80a14e4:	f001 f9f1 	bl	80a28ca <_ZplRK15StringSumHelperRK6String>
    Particle.subscribe(hook_reponse, &Google_Calendar::response_handler, this, MY_DEVICES);
 80a14e8:	2700      	movs	r7, #0
    String hook_error = System.deviceID() + "/hook-error/" + WEBHOOK_EVENT_NAME;
 80a14ea:	4601      	mov	r1, r0
 80a14ec:	a804      	add	r0, sp, #16
 80a14ee:	f001 f99e 	bl	80a282e <_ZN6StringC1ERKS_>
class StringSumHelper : public String
 80a14f2:	4620      	mov	r0, r4
 80a14f4:	f001 f912 	bl	80a271c <_ZN6StringD1Ev>
 80a14f8:	4628      	mov	r0, r5
 80a14fa:	f001 f90f 	bl	80a271c <_ZN6StringD1Ev>
    Particle.subscribe(hook_reponse, &Google_Calendar::response_handler, this, MY_DEVICES);
 80a14fe:	4b0f      	ldr	r3, [pc, #60]	; (80a153c <_ZN15Google_Calendar9subscribeEPFvvE+0xb0>)
 80a1500:	9709      	str	r7, [sp, #36]	; 0x24
 80a1502:	9308      	str	r3, [sp, #32]
 80a1504:	e895 0006 	ldmia.w	r5, {r1, r2}
 80a1508:	4633      	mov	r3, r6
 80a150a:	9800      	ldr	r0, [sp, #0]
 80a150c:	f7ff ff78 	bl	80a1400 <_ZN10CloudClass9subscribeI15Google_CalendarEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0.constprop.0>
    Particle.subscribe(hook_error, &Google_Calendar::error_handler, this, MY_DEVICES);
 80a1510:	4b0b      	ldr	r3, [pc, #44]	; (80a1540 <_ZN15Google_Calendar9subscribeEPFvvE+0xb4>)
 80a1512:	9804      	ldr	r0, [sp, #16]
 80a1514:	e9cd 370c 	strd	r3, r7, [sp, #48]	; 0x30
 80a1518:	4633      	mov	r3, r6
 80a151a:	e894 0006 	ldmia.w	r4, {r1, r2}
 80a151e:	f7ff ff6f 	bl	80a1400 <_ZN10CloudClass9subscribeI15Google_CalendarEEbPKcMT_FvS3_S3_EPS4_32Spark_Subscription_Scope_TypeDef.isra.0.constprop.0>
    String hook_error = System.deviceID() + "/hook-error/" + WEBHOOK_EVENT_NAME;
 80a1522:	a804      	add	r0, sp, #16
 80a1524:	f001 f8fa 	bl	80a271c <_ZN6StringD1Ev>
    String hook_reponse = System.deviceID() + "/hook-response/" + WEBHOOK_EVENT_NAME;
 80a1528:	4668      	mov	r0, sp
 80a152a:	f001 f8f7 	bl	80a271c <_ZN6StringD1Ev>
}
 80a152e:	b011      	add	sp, #68	; 0x44
 80a1530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1532:	bf00      	nop
 80a1534:	080a6d48 	.word	0x080a6d48
 80a1538:	080a6d58 	.word	0x080a6d58
 80a153c:	080a1389 	.word	0x080a1389
 80a1540:	080a1399 	.word	0x080a1399

080a1544 <_GLOBAL__sub_I__ZN15Google_CalendarC2ERK6StringRKa>:
        val_(val) {
 80a1544:	2200      	movs	r2, #0
 80a1546:	4b03      	ldr	r3, [pc, #12]	; (80a1554 <_GLOBAL__sub_I__ZN15Google_CalendarC2ERK6StringRKa+0x10>)
 80a1548:	701a      	strb	r2, [r3, #0]
 80a154a:	2201      	movs	r2, #1
 80a154c:	4b02      	ldr	r3, [pc, #8]	; (80a1558 <_GLOBAL__sub_I__ZN15Google_CalendarC2ERK6StringRKa+0x14>)
 80a154e:	701a      	strb	r2, [r3, #0]
}
 80a1550:	4770      	bx	lr
 80a1552:	bf00      	nop
 80a1554:	20000246 	.word	0x20000246
 80a1558:	20000247 	.word	0x20000247

080a155c <_ZN15Google_CalendarD1Ev>:
//! It requires an OAuth2.0 access token to perfom the HTTP requests.
//!
//! Source: https://developers.google.com/calendar/v3/reference/events/list
//
//*****************************************************************************
class Google_Calendar
 80a155c:	b510      	push	{r4, lr}
 80a155e:	4604      	mov	r4, r0
 80a1560:	306c      	adds	r0, #108	; 0x6c
 80a1562:	f001 f8db 	bl	80a271c <_ZN6StringD1Ev>
 80a1566:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80a156a:	f001 f8d7 	bl	80a271c <_ZN6StringD1Ev>
 80a156e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80a1572:	f001 f8d3 	bl	80a271c <_ZN6StringD1Ev>
 80a1576:	f104 001c 	add.w	r0, r4, #28
 80a157a:	f001 f8cf 	bl	80a271c <_ZN6StringD1Ev>
 80a157e:	1d20      	adds	r0, r4, #4
 80a1580:	f001 f8cc 	bl	80a271c <_ZN6StringD1Ev>
 80a1584:	4620      	mov	r0, r4
 80a1586:	bd10      	pop	{r4, pc}

080a1588 <_Z8relay_on6String>:
int read_calendar(String cmd) {
    if (cmd.toInt() > 0) change_app_stage_to(App_Stage::CALENDAR);
    return 0;
}

int relay_on(String cmd) {
 80a1588:	b508      	push	{r3, lr}
    Control.control_relay(cmd.toInt(), true);
 80a158a:	f001 fa3f 	bl	80a2a0c <_ZNK6String5toIntEv>
 80a158e:	2201      	movs	r2, #1
 80a1590:	4601      	mov	r1, r0
 80a1592:	4802      	ldr	r0, [pc, #8]	; (80a159c <_Z8relay_on6String+0x14>)
 80a1594:	f000 fdb8 	bl	80a2108 <_ZN13Relay_Control13control_relayEib>
    return 0;
}
 80a1598:	2000      	movs	r0, #0
 80a159a:	bd08      	pop	{r3, pc}
 80a159c:	200002c8 	.word	0x200002c8

080a15a0 <_Z9relay_off6String>:

int relay_off(String cmd) {
 80a15a0:	b508      	push	{r3, lr}
    Control.control_relay(cmd.toInt(), false);
 80a15a2:	f001 fa33 	bl	80a2a0c <_ZNK6String5toIntEv>
 80a15a6:	2200      	movs	r2, #0
 80a15a8:	4601      	mov	r1, r0
 80a15aa:	4802      	ldr	r0, [pc, #8]	; (80a15b4 <_Z9relay_off6String+0x14>)
 80a15ac:	f000 fdac 	bl	80a2108 <_ZN13Relay_Control13control_relayEib>
    return 0;
}
 80a15b0:	2000      	movs	r0, #0
 80a15b2:	bd08      	pop	{r3, pc}
 80a15b4:	200002c8 	.word	0x200002c8

080a15b8 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>:
inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
 80a15b8:	b513      	push	{r0, r1, r4, lr}
 80a15ba:	4604      	mov	r4, r0
 80a15bc:	4b05      	ldr	r3, [pc, #20]	; (80a15d4 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0+0x1c>)
 80a15be:	460a      	mov	r2, r1
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 80a15c0:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a15c2:	4905      	ldr	r1, [pc, #20]	; (80a15d8 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0+0x20>)
 80a15c4:	f88d 3000 	strb.w	r3, [sp]
 80a15c8:	233c      	movs	r3, #60	; 0x3c
 80a15ca:	f001 fea1 	bl	80a3310 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
}
 80a15ce:	4620      	mov	r0, r4
 80a15d0:	b002      	add	sp, #8
 80a15d2:	bd10      	pop	{r4, pc}
 80a15d4:	200002f8 	.word	0x200002f8
 80a15d8:	080a6b6c 	.word	0x080a6b6c

080a15dc <_Z21update_time_remainingm>:
    polling_rate = (run_time *  60 * 1000);
    polling_time = millis();
    change_app_stage_to(App_Stage::MANUAL);
}

void update_time_remaining(unsigned long now) {
 80a15dc:	b507      	push	{r0, r1, r2, lr}
                                            
    unsigned long msecs_till_action = polling_rate - (now - polling_time) ;
 80a15de:	4b0f      	ldr	r3, [pc, #60]	; (80a161c <_Z21update_time_remainingm+0x40>)
 80a15e0:	4a0f      	ldr	r2, [pc, #60]	; (80a1620 <_Z21update_time_remainingm+0x44>)
 80a15e2:	681b      	ldr	r3, [r3, #0]
 80a15e4:	6812      	ldr	r2, [r2, #0]
    int hours = msecs_till_action / 1000 / 3600;
    int minutes = (msecs_till_action / 1000 - (hours * 3600) )/ 60;
 80a15e6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
    unsigned long msecs_till_action = polling_rate - (now - polling_time) ;
 80a15ea:	4413      	add	r3, r2
 80a15ec:	1a18      	subs	r0, r3, r0
    int minutes = (msecs_till_action / 1000 - (hours * 3600) )/ 60;
 80a15ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    int hours = msecs_till_action / 1000 / 3600;
 80a15f2:	4a0c      	ldr	r2, [pc, #48]	; (80a1624 <_Z21update_time_remainingm+0x48>)
 80a15f4:	fbb0 f2f2 	udiv	r2, r0, r2
    int minutes = (msecs_till_action / 1000 - (hours * 3600) )/ 60;
 80a15f8:	fbb0 f0f3 	udiv	r0, r0, r3
 80a15fc:	fb01 0012 	mls	r0, r1, r2, r0
 80a1600:	213c      	movs	r1, #60	; 0x3c
 80a1602:	fbb0 f3f1 	udiv	r3, r0, r1
    int seconds = (msecs_till_action / 1000 - (hours * 3600) - (minutes * 60));
 80a1606:	fb01 0113 	mls	r1, r1, r3, r0
    sprintf(timeRemaining, "%d:%02d:%02d", hours , minutes, seconds);
 80a160a:	4807      	ldr	r0, [pc, #28]	; (80a1628 <_Z21update_time_remainingm+0x4c>)
 80a160c:	9100      	str	r1, [sp, #0]
 80a160e:	4907      	ldr	r1, [pc, #28]	; (80a162c <_Z21update_time_remainingm+0x50>)
 80a1610:	f000 ffee 	bl	80a25f0 <sprintf>
}
 80a1614:	b003      	add	sp, #12
 80a1616:	f85d fb04 	ldr.w	pc, [sp], #4
 80a161a:	bf00      	nop
 80a161c:	2000033c 	.word	0x2000033c
 80a1620:	20000338 	.word	0x20000338
 80a1624:	0036ee80 	.word	0x0036ee80
 80a1628:	20000340 	.word	0x20000340
 80a162c:	080a7118 	.word	0x080a7118

080a1630 <_Z15print_app_errorv>:
//!
//! @return None. 
//
//*****************************************************************************
void print_app_error(void)
{
 80a1630:	b508      	push	{r3, lr}
    switch (last_app_stage)
 80a1632:	4b0a      	ldr	r3, [pc, #40]	; (80a165c <_Z15print_app_errorv+0x2c>)
 80a1634:	781b      	ldrb	r3, [r3, #0]
 80a1636:	b13b      	cbz	r3, 80a1648 <_Z15print_app_errorv+0x18>
 80a1638:	2b01      	cmp	r3, #1
 80a163a:	d00a      	beq.n	80a1652 <_Z15print_app_errorv+0x22>
            
        default:
            break;
    }
    delay(1000);
}
 80a163c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(1000);
 80a1640:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a1644:	f001 bc3a 	b.w	80a2ebc <delay>
            OAuth2->print_error();
 80a1648:	4b05      	ldr	r3, [pc, #20]	; (80a1660 <_Z15print_app_errorv+0x30>)
 80a164a:	6818      	ldr	r0, [r3, #0]
 80a164c:	f7ff f952 	bl	80a08f4 <_ZN13Google_OAuth211print_errorEv>
            break;
 80a1650:	e7f4      	b.n	80a163c <_Z15print_app_errorv+0xc>
            Calendar.print_error();
 80a1652:	4804      	ldr	r0, [pc, #16]	; (80a1664 <_Z15print_app_errorv+0x34>)
 80a1654:	f7ff fd16 	bl	80a1084 <_ZN15Google_Calendar11print_errorEv>
            break;
 80a1658:	e7f0      	b.n	80a163c <_Z15print_app_errorv+0xc>
 80a165a:	bf00      	nop
 80a165c:	20000334 	.word	0x20000334
 80a1660:	200002d4 	.word	0x200002d4
 80a1664:	20000248 	.word	0x20000248

080a1668 <_Z19change_app_stage_to9App_Stage>:
{
 80a1668:	b530      	push	{r4, r5, lr}
 80a166a:	b089      	sub	sp, #36	; 0x24
 80a166c:	4604      	mov	r4, r0
 80a166e:	f000 fda1 	bl	80a21b4 <HAL_Timer_Get_Milli_Seconds>
 80a1672:	4605      	mov	r5, r0
    switch (new_stage)
 80a1674:	2c07      	cmp	r4, #7
 80a1676:	d81f      	bhi.n	80a16b8 <_Z19change_app_stage_to9App_Stage+0x50>
 80a1678:	e8df f014 	tbh	[pc, r4, lsl #1]
 80a167c:	00320008 	.word	0x00320008
 80a1680:	004c001e 	.word	0x004c001e
 80a1684:	00930069 	.word	0x00930069
 80a1688:	00d40095 	.word	0x00d40095
            DEBUG_PRINT("Stage changed to: OAUTH2");
 80a168c:	4979      	ldr	r1, [pc, #484]	; (80a1874 <_Z19change_app_stage_to9App_Stage+0x20c>)
 80a168e:	a804      	add	r0, sp, #16
 80a1690:	f001 f9c2 	bl	80a2a18 <_ZN6String6formatEPKcz>
 80a1694:	9904      	ldr	r1, [sp, #16]
 80a1696:	4668      	mov	r0, sp
 80a1698:	f7ff ff8e 	bl	80a15b8 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>
 80a169c:	a801      	add	r0, sp, #4
 80a169e:	f7fe fe65 	bl	80a036c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a16a2:	a804      	add	r0, sp, #16
 80a16a4:	f001 f83a 	bl	80a271c <_ZN6StringD1Ev>
            polling_rate = 1000;
 80a16a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a16ac:	4b72      	ldr	r3, [pc, #456]	; (80a1878 <_Z19change_app_stage_to9App_Stage+0x210>)
 80a16ae:	601a      	str	r2, [r3, #0]
 80a16b0:	f000 fd80 	bl	80a21b4 <HAL_Timer_Get_Milli_Seconds>
            polling_time = millis();
 80a16b4:	4b71      	ldr	r3, [pc, #452]	; (80a187c <_Z19change_app_stage_to9App_Stage+0x214>)
 80a16b6:	6018      	str	r0, [r3, #0]
    last_app_stage = app_stage;
 80a16b8:	4b71      	ldr	r3, [pc, #452]	; (80a1880 <_Z19change_app_stage_to9App_Stage+0x218>)
 80a16ba:	4a72      	ldr	r2, [pc, #456]	; (80a1884 <_Z19change_app_stage_to9App_Stage+0x21c>)
 80a16bc:	7819      	ldrb	r1, [r3, #0]
    app_stage = new_stage;
 80a16be:	701c      	strb	r4, [r3, #0]
    last_app_stage = app_stage;
 80a16c0:	7011      	strb	r1, [r2, #0]
    event_state = Event_State::COMPLETED;     
 80a16c2:	2202      	movs	r2, #2
 80a16c4:	4b70      	ldr	r3, [pc, #448]	; (80a1888 <_Z19change_app_stage_to9App_Stage+0x220>)
        spark_unsubscribe(NULL);
 80a16c6:	2000      	movs	r0, #0
 80a16c8:	701a      	strb	r2, [r3, #0]
 80a16ca:	f000 ff61 	bl	80a2590 <spark_unsubscribe>
    if (new_stage == App_Stage::CALENDAR)
 80a16ce:	2c01      	cmp	r4, #1
 80a16d0:	f040 80b7 	bne.w	80a1842 <_Z19change_app_stage_to9App_Stage+0x1da>
        Calendar.subscribe(calendar_handler);
 80a16d4:	496d      	ldr	r1, [pc, #436]	; (80a188c <_Z19change_app_stage_to9App_Stage+0x224>)
 80a16d6:	486e      	ldr	r0, [pc, #440]	; (80a1890 <_Z19change_app_stage_to9App_Stage+0x228>)
 80a16d8:	f7ff fed8 	bl	80a148c <_ZN15Google_Calendar9subscribeEPFvvE>
}
 80a16dc:	b009      	add	sp, #36	; 0x24
 80a16de:	bd30      	pop	{r4, r5, pc}
            DEBUG_PRINT("Stage: CALENDAR");
 80a16e0:	a804      	add	r0, sp, #16
 80a16e2:	496c      	ldr	r1, [pc, #432]	; (80a1894 <_Z19change_app_stage_to9App_Stage+0x22c>)
 80a16e4:	f001 f998 	bl	80a2a18 <_ZN6String6formatEPKcz>
 80a16e8:	9904      	ldr	r1, [sp, #16]
 80a16ea:	4668      	mov	r0, sp
 80a16ec:	f7ff ff64 	bl	80a15b8 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>
 80a16f0:	a801      	add	r0, sp, #4
 80a16f2:	f7fe fe3b 	bl	80a036c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a16f6:	a804      	add	r0, sp, #16
 80a16f8:	f001 f810 	bl	80a271c <_ZN6StringD1Ev>
            polling_rate = 1000;
 80a16fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a1700:	4b5d      	ldr	r3, [pc, #372]	; (80a1878 <_Z19change_app_stage_to9App_Stage+0x210>)
 80a1702:	601a      	str	r2, [r3, #0]
 80a1704:	f000 fd56 	bl	80a21b4 <HAL_Timer_Get_Milli_Seconds>
            polling_time = millis();
 80a1708:	4b5c      	ldr	r3, [pc, #368]	; (80a187c <_Z19change_app_stage_to9App_Stage+0x214>)
 80a170a:	6018      	str	r0, [r3, #0]
            Calendar.print_error();
 80a170c:	4860      	ldr	r0, [pc, #384]	; (80a1890 <_Z19change_app_stage_to9App_Stage+0x228>)
 80a170e:	f7ff fcb9 	bl	80a1084 <_ZN15Google_Calendar11print_errorEv>
            break;
 80a1712:	e7d1      	b.n	80a16b8 <_Z19change_app_stage_to9App_Stage+0x50>
            DEBUG_PRINT("Stage: WAITING");
 80a1714:	4960      	ldr	r1, [pc, #384]	; (80a1898 <_Z19change_app_stage_to9App_Stage+0x230>)
            DEBUG_PRINT("Stage: PENDING");
 80a1716:	a804      	add	r0, sp, #16
 80a1718:	f001 f97e 	bl	80a2a18 <_ZN6String6formatEPKcz>
 80a171c:	9904      	ldr	r1, [sp, #16]
 80a171e:	4668      	mov	r0, sp
 80a1720:	f7ff ff4a 	bl	80a15b8 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>
 80a1724:	a801      	add	r0, sp, #4
 80a1726:	f7fe fe21 	bl	80a036c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a172a:	a804      	add	r0, sp, #16
 80a172c:	f000 fff6 	bl	80a271c <_ZN6StringD1Ev>
            Control.turn_off_relays();
 80a1730:	485a      	ldr	r0, [pc, #360]	; (80a189c <_Z19change_app_stage_to9App_Stage+0x234>)
 80a1732:	f000 fcf9 	bl	80a2128 <_ZN13Relay_Control15turn_off_relaysEv>
            polling_rate = Calendar.get_time_remaining() * 1000 ;
 80a1736:	4856      	ldr	r0, [pc, #344]	; (80a1890 <_Z19change_app_stage_to9App_Stage+0x228>)
 80a1738:	f7ff fb5f 	bl	80a0dfa <_ZN15Google_Calendar18get_time_remainingEv>
 80a173c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1740:	4358      	muls	r0, r3
 80a1742:	4298      	cmp	r0, r3
 80a1744:	bf38      	it	cc
 80a1746:	4618      	movcc	r0, r3
 80a1748:	4b4b      	ldr	r3, [pc, #300]	; (80a1878 <_Z19change_app_stage_to9App_Stage+0x210>)
 80a174a:	6018      	str	r0, [r3, #0]
 80a174c:	e013      	b.n	80a1776 <_Z19change_app_stage_to9App_Stage+0x10e>
            DEBUG_PRINT("Stage: EVENT_TOO_LONG");
 80a174e:	4954      	ldr	r1, [pc, #336]	; (80a18a0 <_Z19change_app_stage_to9App_Stage+0x238>)
 80a1750:	a804      	add	r0, sp, #16
 80a1752:	f001 f961 	bl	80a2a18 <_ZN6String6formatEPKcz>
 80a1756:	9904      	ldr	r1, [sp, #16]
 80a1758:	4668      	mov	r0, sp
 80a175a:	f7ff ff2d 	bl	80a15b8 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>
 80a175e:	a801      	add	r0, sp, #4
 80a1760:	f7fe fe04 	bl	80a036c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1764:	a804      	add	r0, sp, #16
 80a1766:	f000 ffd9 	bl	80a271c <_ZN6StringD1Ev>
            Control.turn_off_relays();
 80a176a:	484c      	ldr	r0, [pc, #304]	; (80a189c <_Z19change_app_stage_to9App_Stage+0x234>)
 80a176c:	f000 fcdc 	bl	80a2128 <_ZN13Relay_Control15turn_off_relaysEv>
            polling_rate = (1 * 60 * 60 * 1000) ;
 80a1770:	4b41      	ldr	r3, [pc, #260]	; (80a1878 <_Z19change_app_stage_to9App_Stage+0x210>)
 80a1772:	4a4c      	ldr	r2, [pc, #304]	; (80a18a4 <_Z19change_app_stage_to9App_Stage+0x23c>)
 80a1774:	601a      	str	r2, [r3, #0]
 80a1776:	f000 fd1d 	bl	80a21b4 <HAL_Timer_Get_Milli_Seconds>
            polling_time = millis();
 80a177a:	4b40      	ldr	r3, [pc, #256]	; (80a187c <_Z19change_app_stage_to9App_Stage+0x214>)
 80a177c:	6018      	str	r0, [r3, #0]
            update_time_remaining(now);
 80a177e:	4628      	mov	r0, r5
 80a1780:	f7ff ff2c 	bl	80a15dc <_Z21update_time_remainingm>
            DEBUG_PRINT(timeRemaining);
 80a1784:	a804      	add	r0, sp, #16
 80a1786:	4948      	ldr	r1, [pc, #288]	; (80a18a8 <_Z19change_app_stage_to9App_Stage+0x240>)
 80a1788:	f001 f946 	bl	80a2a18 <_ZN6String6formatEPKcz>
 80a178c:	4668      	mov	r0, sp
 80a178e:	9904      	ldr	r1, [sp, #16]
 80a1790:	f7ff ff12 	bl	80a15b8 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>
 80a1794:	a801      	add	r0, sp, #4
 80a1796:	f7fe fde9 	bl	80a036c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a179a:	a804      	add	r0, sp, #16
 80a179c:	f000 ffbe 	bl	80a271c <_ZN6StringD1Ev>
            break;
 80a17a0:	e78a      	b.n	80a16b8 <_Z19change_app_stage_to9App_Stage+0x50>
            DEBUG_PRINT("Stage: PENDING");
 80a17a2:	4942      	ldr	r1, [pc, #264]	; (80a18ac <_Z19change_app_stage_to9App_Stage+0x244>)
 80a17a4:	e7b7      	b.n	80a1716 <_Z19change_app_stage_to9App_Stage+0xae>
            DEBUG_PRINT("Stage: ACTIVE");
 80a17a6:	4942      	ldr	r1, [pc, #264]	; (80a18b0 <_Z19change_app_stage_to9App_Stage+0x248>)
 80a17a8:	a804      	add	r0, sp, #16
 80a17aa:	f001 f935 	bl	80a2a18 <_ZN6String6formatEPKcz>
 80a17ae:	9904      	ldr	r1, [sp, #16]
 80a17b0:	4668      	mov	r0, sp
 80a17b2:	f7ff ff01 	bl	80a15b8 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>
 80a17b6:	a801      	add	r0, sp, #4
 80a17b8:	f7fe fdd8 	bl	80a036c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a17bc:	a804      	add	r0, sp, #16
 80a17be:	f000 ffad 	bl	80a271c <_ZN6StringD1Ev>
            Control.process_event(Calendar.get_event_title());
 80a17c2:	4933      	ldr	r1, [pc, #204]	; (80a1890 <_Z19change_app_stage_to9App_Stage+0x228>)
 80a17c4:	a804      	add	r0, sp, #16
 80a17c6:	f7ff fb56 	bl	80a0e76 <_ZN15Google_Calendar15get_event_titleEv>
 80a17ca:	a904      	add	r1, sp, #16
 80a17cc:	4833      	ldr	r0, [pc, #204]	; (80a189c <_Z19change_app_stage_to9App_Stage+0x234>)
 80a17ce:	f000 fb9f 	bl	80a1f10 <_ZN13Relay_Control13process_eventE6String>
 80a17d2:	a804      	add	r0, sp, #16
 80a17d4:	f000 ffa2 	bl	80a271c <_ZN6StringD1Ev>
	StringSumHelper(const char *p) : String(p) {}
 80a17d8:	4936      	ldr	r1, [pc, #216]	; (80a18b4 <_Z19change_app_stage_to9App_Stage+0x24c>)
 80a17da:	a804      	add	r0, sp, #16
 80a17dc:	f000 ffe8 	bl	80a27b0 <_ZN6StringC1EPKc>
            sprintf(currentState, "Actve: " + Calendar.get_event_title());
 80a17e0:	4668      	mov	r0, sp
 80a17e2:	492b      	ldr	r1, [pc, #172]	; (80a1890 <_Z19change_app_stage_to9App_Stage+0x228>)
 80a17e4:	f7ff fb47 	bl	80a0e76 <_ZN15Google_Calendar15get_event_titleEv>
 80a17e8:	4669      	mov	r1, sp
 80a17ea:	a804      	add	r0, sp, #16
 80a17ec:	f001 f86d 	bl	80a28ca <_ZplRK15StringSumHelperRK6String>
 80a17f0:	6801      	ldr	r1, [r0, #0]
 80a17f2:	4831      	ldr	r0, [pc, #196]	; (80a18b8 <_Z19change_app_stage_to9App_Stage+0x250>)
 80a17f4:	f000 fefc 	bl	80a25f0 <sprintf>
 80a17f8:	4668      	mov	r0, sp
 80a17fa:	f000 ff8f 	bl	80a271c <_ZN6StringD1Ev>
class StringSumHelper : public String
 80a17fe:	a804      	add	r0, sp, #16
 80a1800:	f000 ff8c 	bl	80a271c <_ZN6StringD1Ev>
            polling_rate = abs(Calendar.get_time_remaining() * 1000);
 80a1804:	4822      	ldr	r0, [pc, #136]	; (80a1890 <_Z19change_app_stage_to9App_Stage+0x228>)
 80a1806:	f7ff faf8 	bl	80a0dfa <_ZN15Google_Calendar18get_time_remainingEv>
 80a180a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a180e:	fb02 f300 	mul.w	r3, r2, r0

  using ::abs;

#ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  inline long
  abs(long __i) { return __builtin_labs(__i); }
 80a1812:	2b00      	cmp	r3, #0
 80a1814:	bfb8      	it	lt
 80a1816:	425b      	neglt	r3, r3
 80a1818:	4293      	cmp	r3, r2
 80a181a:	bfb8      	it	lt
 80a181c:	4613      	movlt	r3, r2
 80a181e:	4a16      	ldr	r2, [pc, #88]	; (80a1878 <_Z19change_app_stage_to9App_Stage+0x210>)
 80a1820:	6013      	str	r3, [r2, #0]
 80a1822:	e7a8      	b.n	80a1776 <_Z19change_app_stage_to9App_Stage+0x10e>
            DEBUG_PRINT("Stage: MANUAL");
 80a1824:	a804      	add	r0, sp, #16
 80a1826:	4925      	ldr	r1, [pc, #148]	; (80a18bc <_Z19change_app_stage_to9App_Stage+0x254>)
 80a1828:	f001 f8f6 	bl	80a2a18 <_ZN6String6formatEPKcz>
 80a182c:	4668      	mov	r0, sp
 80a182e:	9904      	ldr	r1, [sp, #16]
 80a1830:	f7ff fec2 	bl	80a15b8 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>
 80a1834:	a801      	add	r0, sp, #4
 80a1836:	f7fe fd99 	bl	80a036c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a183a:	a804      	add	r0, sp, #16
 80a183c:	f000 ff6e 	bl	80a271c <_ZN6StringD1Ev>
 80a1840:	e79d      	b.n	80a177e <_Z19change_app_stage_to9App_Stage+0x116>
    else if (new_stage == App_Stage::FAILED)
 80a1842:	2c02      	cmp	r4, #2
 80a1844:	f47f af4a 	bne.w	80a16dc <_Z19change_app_stage_to9App_Stage+0x74>
        Control.turn_off_relays();
 80a1848:	4814      	ldr	r0, [pc, #80]	; (80a189c <_Z19change_app_stage_to9App_Stage+0x234>)
 80a184a:	f000 fc6d 	bl	80a2128 <_ZN13Relay_Control15turn_off_relaysEv>
        delay(1000);
 80a184e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a1852:	f001 fb33 	bl	80a2ebc <delay>
        DEBUG_PRINT("App Stage Failure");
 80a1856:	a804      	add	r0, sp, #16
 80a1858:	4919      	ldr	r1, [pc, #100]	; (80a18c0 <_Z19change_app_stage_to9App_Stage+0x258>)
 80a185a:	f001 f8dd 	bl	80a2a18 <_ZN6String6formatEPKcz>
 80a185e:	4668      	mov	r0, sp
 80a1860:	9904      	ldr	r1, [sp, #16]
 80a1862:	f7ff fea9 	bl	80a15b8 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>
 80a1866:	a801      	add	r0, sp, #4
 80a1868:	f7fe fd80 	bl	80a036c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a186c:	a804      	add	r0, sp, #16
 80a186e:	f000 ff55 	bl	80a271c <_ZN6StringD1Ev>
}
 80a1872:	e733      	b.n	80a16dc <_Z19change_app_stage_to9App_Stage+0x74>
 80a1874:	080a71b0 	.word	0x080a71b0
 80a1878:	20000338 	.word	0x20000338
 80a187c:	2000033c 	.word	0x2000033c
 80a1880:	2000030c 	.word	0x2000030c
 80a1884:	20000334 	.word	0x20000334
 80a1888:	2000032d 	.word	0x2000032d
 80a188c:	080a1bed 	.word	0x080a1bed
 80a1890:	20000248 	.word	0x20000248
 80a1894:	080a71c9 	.word	0x080a71c9
 80a1898:	080a71d9 	.word	0x080a71d9
 80a189c:	200002c8 	.word	0x200002c8
 80a18a0:	080a71e8 	.word	0x080a71e8
 80a18a4:	0036ee80 	.word	0x0036ee80
 80a18a8:	20000340 	.word	0x20000340
 80a18ac:	080a71fe 	.word	0x080a71fe
 80a18b0:	080a720d 	.word	0x080a720d
 80a18b4:	080a721b 	.word	0x080a721b
 80a18b8:	2000030d 	.word	0x2000030d
 80a18bc:	080a7223 	.word	0x080a7223
 80a18c0:	080a7231 	.word	0x080a7231

080a18c4 <_Z13read_calendar6String>:
int read_calendar(String cmd) {
 80a18c4:	b508      	push	{r3, lr}
    if (cmd.toInt() > 0) change_app_stage_to(App_Stage::CALENDAR);
 80a18c6:	f001 f8a1 	bl	80a2a0c <_ZNK6String5toIntEv>
 80a18ca:	2800      	cmp	r0, #0
 80a18cc:	dd02      	ble.n	80a18d4 <_Z13read_calendar6String+0x10>
 80a18ce:	2001      	movs	r0, #1
 80a18d0:	f7ff feca 	bl	80a1668 <_Z19change_app_stage_to9App_Stage>
}
 80a18d4:	2000      	movs	r0, #0
 80a18d6:	bd08      	pop	{r3, pc}

080a18d8 <_Z17force_erase_token6String>:
int force_erase_token(String cmd) {
 80a18d8:	b538      	push	{r3, r4, r5, lr}
    if (cmd.toInt() > 0) {
 80a18da:	f001 f897 	bl	80a2a0c <_ZNK6String5toIntEv>
 80a18de:	2800      	cmp	r0, #0
 80a18e0:	dd46      	ble.n	80a1970 <_Z17force_erase_token6String+0x98>
        delete OAuth2;
 80a18e2:	4d24      	ldr	r5, [pc, #144]	; (80a1974 <_Z17force_erase_token6String+0x9c>)
 80a18e4:	682c      	ldr	r4, [r5, #0]
 80a18e6:	b384      	cbz	r4, 80a194a <_Z17force_erase_token6String+0x72>
class Google_OAuth2
 80a18e8:	f504 7031 	add.w	r0, r4, #708	; 0x2c4
 80a18ec:	f000 ff16 	bl	80a271c <_ZN6StringD1Ev>
 80a18f0:	f504 7027 	add.w	r0, r4, #668	; 0x29c
 80a18f4:	f000 ff12 	bl	80a271c <_ZN6StringD1Ev>
 80a18f8:	f504 7023 	add.w	r0, r4, #652	; 0x28c
 80a18fc:	f000 ff0e 	bl	80a271c <_ZN6StringD1Ev>
 80a1900:	f504 701f 	add.w	r0, r4, #636	; 0x27c
 80a1904:	f000 ff0a 	bl	80a271c <_ZN6StringD1Ev>
 80a1908:	f504 701b 	add.w	r0, r4, #620	; 0x26c
 80a190c:	f000 ff06 	bl	80a271c <_ZN6StringD1Ev>
 80a1910:	f504 7017 	add.w	r0, r4, #604	; 0x25c
 80a1914:	f000 ff02 	bl	80a271c <_ZN6StringD1Ev>
 80a1918:	f504 7013 	add.w	r0, r4, #588	; 0x24c
 80a191c:	f000 fefe 	bl	80a271c <_ZN6StringD1Ev>
 80a1920:	f504 700f 	add.w	r0, r4, #572	; 0x23c
 80a1924:	f000 fefa 	bl	80a271c <_ZN6StringD1Ev>
 80a1928:	f504 700b 	add.w	r0, r4, #556	; 0x22c
 80a192c:	f000 fef6 	bl	80a271c <_ZN6StringD1Ev>
 80a1930:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 80a1934:	f000 fef2 	bl	80a271c <_ZN6StringD1Ev>
 80a1938:	f504 7003 	add.w	r0, r4, #524	; 0x20c
 80a193c:	f000 feee 	bl	80a271c <_ZN6StringD1Ev>
 80a1940:	f44f 7136 	mov.w	r1, #728	; 0x2d8
 80a1944:	4620      	mov	r0, r4
 80a1946:	f002 fa06 	bl	80a3d56 <_ZdlPvj>
        OAuth2 = NULL;
 80a194a:	2300      	movs	r3, #0
        OAuth2 = new Google_OAuth2(CLIENT_ID, CLIENT_SECRET);
 80a194c:	f44f 7036 	mov.w	r0, #728	; 0x2d8
        OAuth2 = NULL;
 80a1950:	602b      	str	r3, [r5, #0]
        OAuth2 = new Google_OAuth2(CLIENT_ID, CLIENT_SECRET);
 80a1952:	f7fe fba0 	bl	80a0096 <_Znwj>
 80a1956:	4604      	mov	r4, r0
 80a1958:	b118      	cbz	r0, 80a1962 <_Z17force_erase_token6String+0x8a>
 80a195a:	4a07      	ldr	r2, [pc, #28]	; (80a1978 <_Z17force_erase_token6String+0xa0>)
 80a195c:	4907      	ldr	r1, [pc, #28]	; (80a197c <_Z17force_erase_token6String+0xa4>)
 80a195e:	f7fe fc8d 	bl	80a027c <_ZN13Google_OAuth2C1ERK6StringS2_>
        OAuth2->erase_token();
 80a1962:	4620      	mov	r0, r4
        OAuth2 = new Google_OAuth2(CLIENT_ID, CLIENT_SECRET);
 80a1964:	602c      	str	r4, [r5, #0]
        OAuth2->erase_token();
 80a1966:	f7fe fcf1 	bl	80a034c <_ZN13Google_OAuth211erase_tokenEv>
        change_app_stage_to(App_Stage::OAUTH2);
 80a196a:	2000      	movs	r0, #0
 80a196c:	f7ff fe7c 	bl	80a1668 <_Z19change_app_stage_to9App_Stage>
}
 80a1970:	2000      	movs	r0, #0
 80a1972:	bd38      	pop	{r3, r4, r5, pc}
 80a1974:	200002d4 	.word	0x200002d4
 80a1978:	200002e8 	.word	0x200002e8
 80a197c:	200002fc 	.word	0x200002fc

080a1980 <_Z17manual_relay_modeii>:
void manual_relay_mode(int relay_num, int run_time){
 80a1980:	b570      	push	{r4, r5, r6, lr}
 80a1982:	4604      	mov	r4, r0
    Control.turn_off_relays();
 80a1984:	4e0e      	ldr	r6, [pc, #56]	; (80a19c0 <_Z17manual_relay_modeii+0x40>)
void manual_relay_mode(int relay_num, int run_time){
 80a1986:	460d      	mov	r5, r1
    Control.turn_off_relays();
 80a1988:	4630      	mov	r0, r6
 80a198a:	f000 fbcd 	bl	80a2128 <_ZN13Relay_Control15turn_off_relaysEv>
    sprintf(currentState, "Manual: Relay %d", relay_num);
 80a198e:	4622      	mov	r2, r4
 80a1990:	490c      	ldr	r1, [pc, #48]	; (80a19c4 <_Z17manual_relay_modeii+0x44>)
 80a1992:	480d      	ldr	r0, [pc, #52]	; (80a19c8 <_Z17manual_relay_modeii+0x48>)
 80a1994:	f000 fe2c 	bl	80a25f0 <sprintf>
    Control.control_relay(relay_num, true);
 80a1998:	4621      	mov	r1, r4
 80a199a:	4630      	mov	r0, r6
 80a199c:	2201      	movs	r2, #1
 80a199e:	f000 fbb3 	bl	80a2108 <_ZN13Relay_Control13control_relayEib>
    polling_rate = (run_time *  60 * 1000);
 80a19a2:	f64e 2360 	movw	r3, #60000	; 0xea60
 80a19a6:	435d      	muls	r5, r3
 80a19a8:	4b08      	ldr	r3, [pc, #32]	; (80a19cc <_Z17manual_relay_modeii+0x4c>)
 80a19aa:	601d      	str	r5, [r3, #0]
 80a19ac:	f000 fc02 	bl	80a21b4 <HAL_Timer_Get_Milli_Seconds>
    polling_time = millis();
 80a19b0:	4b07      	ldr	r3, [pc, #28]	; (80a19d0 <_Z17manual_relay_modeii+0x50>)
 80a19b2:	6018      	str	r0, [r3, #0]
}
 80a19b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    change_app_stage_to(App_Stage::MANUAL);
 80a19b8:	2007      	movs	r0, #7
 80a19ba:	f7ff be55 	b.w	80a1668 <_Z19change_app_stage_to9App_Stage>
 80a19be:	bf00      	nop
 80a19c0:	200002c8 	.word	0x200002c8
 80a19c4:	080a7243 	.word	0x080a7243
 80a19c8:	2000030d 	.word	0x2000030d
 80a19cc:	20000338 	.word	0x20000338
 80a19d0:	2000033c 	.word	0x2000033c

080a19d4 <_Z12relay_1_time6String>:
int relay_1_time(String cmd) {
 80a19d4:	b508      	push	{r3, lr}
    manual_relay_mode(1, cmd.toInt());
 80a19d6:	f001 f819 	bl	80a2a0c <_ZNK6String5toIntEv>
 80a19da:	4601      	mov	r1, r0
 80a19dc:	2001      	movs	r0, #1
 80a19de:	f7ff ffcf 	bl	80a1980 <_Z17manual_relay_modeii>
}
 80a19e2:	2000      	movs	r0, #0
 80a19e4:	bd08      	pop	{r3, pc}

080a19e6 <_Z12relay_2_time6String>:
int relay_2_time(String cmd) {
 80a19e6:	b508      	push	{r3, lr}
    manual_relay_mode(2, cmd.toInt());
 80a19e8:	f001 f810 	bl	80a2a0c <_ZNK6String5toIntEv>
 80a19ec:	4601      	mov	r1, r0
 80a19ee:	2002      	movs	r0, #2
 80a19f0:	f7ff ffc6 	bl	80a1980 <_Z17manual_relay_modeii>
}
 80a19f4:	2000      	movs	r0, #0
 80a19f6:	bd08      	pop	{r3, pc}

080a19f8 <_Z12relay_3_time6String>:
int relay_3_time(String cmd) {
 80a19f8:	b508      	push	{r3, lr}
    manual_relay_mode(3, cmd.toInt());
 80a19fa:	f001 f807 	bl	80a2a0c <_ZNK6String5toIntEv>
 80a19fe:	4601      	mov	r1, r0
 80a1a00:	2003      	movs	r0, #3
 80a1a02:	f7ff ffbd 	bl	80a1980 <_Z17manual_relay_modeii>
}
 80a1a06:	2000      	movs	r0, #0
 80a1a08:	bd08      	pop	{r3, pc}
	...

080a1a0c <setup>:
{
 80a1a0c:	b530      	push	{r4, r5, lr}
 OAuth2 = new Google_OAuth2(CLIENT_ID, CLIENT_SECRET);
 80a1a0e:	f44f 7036 	mov.w	r0, #728	; 0x2d8
{
 80a1a12:	b087      	sub	sp, #28
 OAuth2 = new Google_OAuth2(CLIENT_ID, CLIENT_SECRET);
 80a1a14:	f7fe fb3f 	bl	80a0096 <_Znwj>
 80a1a18:	4604      	mov	r4, r0
 80a1a1a:	b118      	cbz	r0, 80a1a24 <setup+0x18>
 80a1a1c:	4a35      	ldr	r2, [pc, #212]	; (80a1af4 <setup+0xe8>)
 80a1a1e:	4936      	ldr	r1, [pc, #216]	; (80a1af8 <setup+0xec>)
 80a1a20:	f7fe fc2c 	bl	80a027c <_ZN13Google_OAuth2C1ERK6StringS2_>
 80a1a24:	4d35      	ldr	r5, [pc, #212]	; (80a1afc <setup+0xf0>)
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
 80a1a26:	2300      	movs	r3, #0
 80a1a28:	2204      	movs	r2, #4
 80a1a2a:	4935      	ldr	r1, [pc, #212]	; (80a1b00 <setup+0xf4>)
 80a1a2c:	4835      	ldr	r0, [pc, #212]	; (80a1b04 <setup+0xf8>)
 80a1a2e:	602c      	str	r4, [r5, #0]
 80a1a30:	f000 fd76 	bl	80a2520 <spark_variable>
 80a1a34:	2300      	movs	r3, #0
 80a1a36:	2204      	movs	r2, #4
 80a1a38:	4933      	ldr	r1, [pc, #204]	; (80a1b08 <setup+0xfc>)
 80a1a3a:	4834      	ldr	r0, [pc, #208]	; (80a1b0c <setup+0x100>)
 80a1a3c:	f000 fd70 	bl	80a2520 <spark_variable>
        return spark_variable(varKey, (const void*)userVar, CloudVariableTypeInt::TYPE_ID, NULL);
 80a1a40:	2300      	movs	r3, #0
 80a1a42:	2202      	movs	r2, #2
 80a1a44:	4932      	ldr	r1, [pc, #200]	; (80a1b10 <setup+0x104>)
 80a1a46:	4833      	ldr	r0, [pc, #204]	; (80a1b14 <setup+0x108>)
 80a1a48:	f000 fd6a 	bl	80a2520 <spark_variable>
        return register_function(call_raw_user_function, (void*)func, funcKey);
 80a1a4c:	4a32      	ldr	r2, [pc, #200]	; (80a1b18 <setup+0x10c>)
 80a1a4e:	4933      	ldr	r1, [pc, #204]	; (80a1b1c <setup+0x110>)
 80a1a50:	4833      	ldr	r0, [pc, #204]	; (80a1b20 <setup+0x114>)
 80a1a52:	f001 fb6a 	bl	80a312a <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80a1a56:	4a33      	ldr	r2, [pc, #204]	; (80a1b24 <setup+0x118>)
 80a1a58:	4933      	ldr	r1, [pc, #204]	; (80a1b28 <setup+0x11c>)
 80a1a5a:	4831      	ldr	r0, [pc, #196]	; (80a1b20 <setup+0x114>)
 80a1a5c:	f001 fb65 	bl	80a312a <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80a1a60:	4a32      	ldr	r2, [pc, #200]	; (80a1b2c <setup+0x120>)
 80a1a62:	4933      	ldr	r1, [pc, #204]	; (80a1b30 <setup+0x124>)
 80a1a64:	482e      	ldr	r0, [pc, #184]	; (80a1b20 <setup+0x114>)
 80a1a66:	f001 fb60 	bl	80a312a <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80a1a6a:	4a32      	ldr	r2, [pc, #200]	; (80a1b34 <setup+0x128>)
 80a1a6c:	4932      	ldr	r1, [pc, #200]	; (80a1b38 <setup+0x12c>)
 80a1a6e:	482c      	ldr	r0, [pc, #176]	; (80a1b20 <setup+0x114>)
 80a1a70:	f001 fb5b 	bl	80a312a <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80a1a74:	4a31      	ldr	r2, [pc, #196]	; (80a1b3c <setup+0x130>)
 80a1a76:	4932      	ldr	r1, [pc, #200]	; (80a1b40 <setup+0x134>)
 80a1a78:	4829      	ldr	r0, [pc, #164]	; (80a1b20 <setup+0x114>)
 80a1a7a:	f001 fb56 	bl	80a312a <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80a1a7e:	4a31      	ldr	r2, [pc, #196]	; (80a1b44 <setup+0x138>)
 80a1a80:	4931      	ldr	r1, [pc, #196]	; (80a1b48 <setup+0x13c>)
 80a1a82:	4827      	ldr	r0, [pc, #156]	; (80a1b20 <setup+0x114>)
 80a1a84:	f001 fb51 	bl	80a312a <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80a1a88:	4a30      	ldr	r2, [pc, #192]	; (80a1b4c <setup+0x140>)
 80a1a8a:	4931      	ldr	r1, [pc, #196]	; (80a1b50 <setup+0x144>)
 80a1a8c:	4824      	ldr	r0, [pc, #144]	; (80a1b20 <setup+0x114>)
 80a1a8e:	f001 fb4c 	bl	80a312a <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
    Time.zone(TIME_ZONE);
 80a1a92:	4830      	ldr	r0, [pc, #192]	; (80a1b54 <setup+0x148>)
 80a1a94:	f001 f892 	bl	80a2bbc <_ZN9TimeClass4zoneEf>
    Time.setFormat(TIME_FORMAT_ISO8601_FULL);
 80a1a98:	4b2f      	ldr	r3, [pc, #188]	; (80a1b58 <setup+0x14c>)
    DEBUG_PRINT("Erase Token");
 80a1a9a:	4930      	ldr	r1, [pc, #192]	; (80a1b5c <setup+0x150>)
        }

        void setFormat(const char* format)
        {
            this->format_spec = format;
 80a1a9c:	681a      	ldr	r2, [r3, #0]
 80a1a9e:	4b30      	ldr	r3, [pc, #192]	; (80a1b60 <setup+0x154>)
 80a1aa0:	a802      	add	r0, sp, #8
 80a1aa2:	601a      	str	r2, [r3, #0]
 80a1aa4:	f000 ffb8 	bl	80a2a18 <_ZN6String6formatEPKcz>
 80a1aa8:	9902      	ldr	r1, [sp, #8]
 80a1aaa:	4668      	mov	r0, sp
 80a1aac:	f7ff fd84 	bl	80a15b8 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>
 80a1ab0:	a801      	add	r0, sp, #4
 80a1ab2:	f7fe fc5b 	bl	80a036c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1ab6:	a802      	add	r0, sp, #8
 80a1ab8:	f000 fe30 	bl	80a271c <_ZN6StringD1Ev>
    if (OAuth2->authenticated()) 
 80a1abc:	6828      	ldr	r0, [r5, #0]
 80a1abe:	f7fe fb88 	bl	80a01d2 <_ZN13Google_OAuth213authenticatedEv>
 80a1ac2:	b170      	cbz	r0, 80a1ae2 <setup+0xd6>
        DEBUG_PRINT("Oauth2 already authenicated");
 80a1ac4:	4927      	ldr	r1, [pc, #156]	; (80a1b64 <setup+0x158>)
 80a1ac6:	a802      	add	r0, sp, #8
 80a1ac8:	f000 ffa6 	bl	80a2a18 <_ZN6String6formatEPKcz>
 80a1acc:	9902      	ldr	r1, [sp, #8]
 80a1ace:	4668      	mov	r0, sp
 80a1ad0:	f7ff fd72 	bl	80a15b8 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>
 80a1ad4:	a801      	add	r0, sp, #4
 80a1ad6:	f7fe fc49 	bl	80a036c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1ada:	a802      	add	r0, sp, #8
 80a1adc:	f000 fe1e 	bl	80a271c <_ZN6StringD1Ev>
        change_app_stage_to(App_Stage::CALENDAR);
 80a1ae0:	2001      	movs	r0, #1
       change_app_stage_to(App_Stage::OAUTH2);
 80a1ae2:	f7ff fdc1 	bl	80a1668 <_Z19change_app_stage_to9App_Stage>
 80a1ae6:	f000 fb65 	bl	80a21b4 <HAL_Timer_Get_Milli_Seconds>
    polling_time = millis();
 80a1aea:	4b1f      	ldr	r3, [pc, #124]	; (80a1b68 <setup+0x15c>)
 80a1aec:	6018      	str	r0, [r3, #0]
}
 80a1aee:	b007      	add	sp, #28
 80a1af0:	bd30      	pop	{r4, r5, pc}
 80a1af2:	bf00      	nop
 80a1af4:	200002e8 	.word	0x200002e8
 80a1af8:	200002fc 	.word	0x200002fc
 80a1afc:	200002d4 	.word	0x200002d4
 80a1b00:	20000340 	.word	0x20000340
 80a1b04:	080a7254 	.word	0x080a7254
 80a1b08:	2000030d 	.word	0x2000030d
 80a1b0c:	080a7263 	.word	0x080a7263
 80a1b10:	20000330 	.word	0x20000330
 80a1b14:	080a7271 	.word	0x080a7271
 80a1b18:	080a7278 	.word	0x080a7278
 80a1b1c:	080a18c5 	.word	0x080a18c5
 80a1b20:	080a30e3 	.word	0x080a30e3
 80a1b24:	080a728f 	.word	0x080a728f
 80a1b28:	080a18d9 	.word	0x080a18d9
 80a1b2c:	080a72a5 	.word	0x080a72a5
 80a1b30:	080a1589 	.word	0x080a1589
 80a1b34:	080a72b6 	.word	0x080a72b6
 80a1b38:	080a15a1 	.word	0x080a15a1
 80a1b3c:	080a72c8 	.word	0x080a72c8
 80a1b40:	080a19d5 	.word	0x080a19d5
 80a1b44:	080a72d4 	.word	0x080a72d4
 80a1b48:	080a19e7 	.word	0x080a19e7
 80a1b4c:	080a72e0 	.word	0x080a72e0
 80a1b50:	080a19f9 	.word	0x080a19f9
 80a1b54:	c0e00000 	.word	0xc0e00000
 80a1b58:	20000004 	.word	0x20000004
 80a1b5c:	080a72ec 	.word	0x080a72ec
 80a1b60:	200003dc 	.word	0x200003dc
 80a1b64:	080a72f8 	.word	0x080a72f8
 80a1b68:	2000033c 	.word	0x2000033c

080a1b6c <_Z11oauth2_loopv>:
{
 80a1b6c:	b510      	push	{r4, lr}
    OAuth2->loop();
 80a1b6e:	4c1b      	ldr	r4, [pc, #108]	; (80a1bdc <_Z11oauth2_loopv+0x70>)
{
 80a1b70:	b086      	sub	sp, #24
    OAuth2->loop();
 80a1b72:	6820      	ldr	r0, [r4, #0]
 80a1b74:	f7fe ff9a 	bl	80a0aac <_ZN13Google_OAuth24loopEv>
    if (OAuth2->authorized())
 80a1b78:	6820      	ldr	r0, [r4, #0]
 80a1b7a:	f7fe fb30 	bl	80a01de <_ZN13Google_OAuth210authorizedEv>
 80a1b7e:	b1b8      	cbz	r0, 80a1bb0 <_Z11oauth2_loopv+0x44>
        if (last_app_stage == App_Stage::CALENDAR)
 80a1b80:	4b17      	ldr	r3, [pc, #92]	; (80a1be0 <_Z11oauth2_loopv+0x74>)
 80a1b82:	7818      	ldrb	r0, [r3, #0]
 80a1b84:	2801      	cmp	r0, #1
 80a1b86:	d103      	bne.n	80a1b90 <_Z11oauth2_loopv+0x24>
        change_app_stage_to(App_Stage::FAILED);
 80a1b88:	f7ff fd6e 	bl	80a1668 <_Z19change_app_stage_to9App_Stage>
}
 80a1b8c:	b006      	add	sp, #24
 80a1b8e:	bd10      	pop	{r4, pc}
            DEBUG_PRINT("OAuth2 WAITING");
 80a1b90:	4914      	ldr	r1, [pc, #80]	; (80a1be4 <_Z11oauth2_loopv+0x78>)
 80a1b92:	a802      	add	r0, sp, #8
 80a1b94:	f000 ff40 	bl	80a2a18 <_ZN6String6formatEPKcz>
 80a1b98:	9902      	ldr	r1, [sp, #8]
 80a1b9a:	4668      	mov	r0, sp
 80a1b9c:	f7ff fd0c 	bl	80a15b8 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>
 80a1ba0:	a801      	add	r0, sp, #4
 80a1ba2:	f7fe fbe3 	bl	80a036c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1ba6:	a802      	add	r0, sp, #8
 80a1ba8:	f000 fdb8 	bl	80a271c <_ZN6StringD1Ev>
            change_app_stage_to(App_Stage::WAITING);
 80a1bac:	2003      	movs	r0, #3
 80a1bae:	e7eb      	b.n	80a1b88 <_Z11oauth2_loopv+0x1c>
    else if (OAuth2->failed())
 80a1bb0:	6820      	ldr	r0, [r4, #0]
 80a1bb2:	f7fe fb1a 	bl	80a01ea <_ZN13Google_OAuth26failedEv>
 80a1bb6:	2800      	cmp	r0, #0
 80a1bb8:	d0e8      	beq.n	80a1b8c <_Z11oauth2_loopv+0x20>
        DEBUG_PRINT("OAuth2.failed()");
 80a1bba:	490b      	ldr	r1, [pc, #44]	; (80a1be8 <_Z11oauth2_loopv+0x7c>)
 80a1bbc:	a802      	add	r0, sp, #8
 80a1bbe:	f000 ff2b 	bl	80a2a18 <_ZN6String6formatEPKcz>
 80a1bc2:	9902      	ldr	r1, [sp, #8]
 80a1bc4:	4668      	mov	r0, sp
 80a1bc6:	f7ff fcf7 	bl	80a15b8 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>
 80a1bca:	a801      	add	r0, sp, #4
 80a1bcc:	f7fe fbce 	bl	80a036c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1bd0:	a802      	add	r0, sp, #8
 80a1bd2:	f000 fda3 	bl	80a271c <_ZN6StringD1Ev>
        change_app_stage_to(App_Stage::FAILED);
 80a1bd6:	2002      	movs	r0, #2
 80a1bd8:	e7d6      	b.n	80a1b88 <_Z11oauth2_loopv+0x1c>
 80a1bda:	bf00      	nop
 80a1bdc:	200002d4 	.word	0x200002d4
 80a1be0:	20000334 	.word	0x20000334
 80a1be4:	080a7314 	.word	0x080a7314
 80a1be8:	080a7323 	.word	0x080a7323

080a1bec <_Z16calendar_handlerv>:
{
 80a1bec:	b500      	push	{lr}
    if (!Calendar.failed())
 80a1bee:	4828      	ldr	r0, [pc, #160]	; (80a1c90 <_Z16calendar_handlerv+0xa4>)
{
 80a1bf0:	b089      	sub	sp, #36	; 0x24
    if (!Calendar.failed())
 80a1bf2:	f7ff f8f9 	bl	80a0de8 <_ZN15Google_Calendar6failedEv>
 80a1bf6:	2800      	cmp	r0, #0
 80a1bf8:	d145      	bne.n	80a1c86 <_Z16calendar_handlerv+0x9a>
        if (Calendar.is_event_pending())
 80a1bfa:	4825      	ldr	r0, [pc, #148]	; (80a1c90 <_Z16calendar_handlerv+0xa4>)
 80a1bfc:	f7ff f8fa 	bl	80a0df4 <_ZN15Google_Calendar16is_event_pendingEv>
 80a1c00:	b328      	cbz	r0, 80a1c4e <_Z16calendar_handlerv+0x62>
            if ((Calendar.get_time_remaining() * 1000) < 0) {
 80a1c02:	4823      	ldr	r0, [pc, #140]	; (80a1c90 <_Z16calendar_handlerv+0xa4>)
 80a1c04:	f7ff f8f9 	bl	80a0dfa <_ZN15Google_Calendar18get_time_remainingEv>
 80a1c08:	2800      	cmp	r0, #0
 80a1c0a:	da1b      	bge.n	80a1c44 <_Z16calendar_handlerv+0x58>
                change_app_stage_to(App_Stage::ACTIVE);
 80a1c0c:	2006      	movs	r0, #6
 80a1c0e:	f7ff fd2b 	bl	80a1668 <_Z19change_app_stage_to9App_Stage>
	StringSumHelper(const char *p) : String(p) {}
 80a1c12:	4920      	ldr	r1, [pc, #128]	; (80a1c94 <_Z16calendar_handlerv+0xa8>)
 80a1c14:	4668      	mov	r0, sp
 80a1c16:	f000 fdcb 	bl	80a27b0 <_ZN6StringC1EPKc>
                sprintf(currentState, "Pending: " + Calendar.get_event_title());
 80a1c1a:	491d      	ldr	r1, [pc, #116]	; (80a1c90 <_Z16calendar_handlerv+0xa4>)
 80a1c1c:	a804      	add	r0, sp, #16
 80a1c1e:	f7ff f92a 	bl	80a0e76 <_ZN15Google_Calendar15get_event_titleEv>
 80a1c22:	a904      	add	r1, sp, #16
 80a1c24:	4668      	mov	r0, sp
 80a1c26:	f000 fe50 	bl	80a28ca <_ZplRK15StringSumHelperRK6String>
 80a1c2a:	6801      	ldr	r1, [r0, #0]
 80a1c2c:	481a      	ldr	r0, [pc, #104]	; (80a1c98 <_Z16calendar_handlerv+0xac>)
 80a1c2e:	f000 fcdf 	bl	80a25f0 <sprintf>
 80a1c32:	a804      	add	r0, sp, #16
 80a1c34:	f000 fd72 	bl	80a271c <_ZN6StringD1Ev>
class StringSumHelper : public String
 80a1c38:	4668      	mov	r0, sp
 80a1c3a:	f000 fd6f 	bl	80a271c <_ZN6StringD1Ev>
}
 80a1c3e:	b009      	add	sp, #36	; 0x24
 80a1c40:	f85d fb04 	ldr.w	pc, [sp], #4
                change_app_stage_to(App_Stage::PENDING);
 80a1c44:	2005      	movs	r0, #5
 80a1c46:	f7ff fd0f 	bl	80a1668 <_Z19change_app_stage_to9App_Stage>
	StringSumHelper(const char *p) : String(p) {}
 80a1c4a:	4914      	ldr	r1, [pc, #80]	; (80a1c9c <_Z16calendar_handlerv+0xb0>)
 80a1c4c:	e7e2      	b.n	80a1c14 <_Z16calendar_handlerv+0x28>
            delay(1000);
 80a1c4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a1c52:	f001 f933 	bl	80a2ebc <delay>
            DEBUG_PRINT("No pending events!");
 80a1c56:	a804      	add	r0, sp, #16
 80a1c58:	4911      	ldr	r1, [pc, #68]	; (80a1ca0 <_Z16calendar_handlerv+0xb4>)
 80a1c5a:	f000 fedd 	bl	80a2a18 <_ZN6String6formatEPKcz>
 80a1c5e:	9904      	ldr	r1, [sp, #16]
 80a1c60:	4668      	mov	r0, sp
 80a1c62:	f7ff fca9 	bl	80a15b8 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>
 80a1c66:	a801      	add	r0, sp, #4
 80a1c68:	f7fe fb80 	bl	80a036c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1c6c:	a804      	add	r0, sp, #16
 80a1c6e:	f000 fd55 	bl	80a271c <_ZN6StringD1Ev>
            change_app_stage_to(App_Stage::WAITING);
 80a1c72:	2003      	movs	r0, #3
 80a1c74:	f7ff fcf8 	bl	80a1668 <_Z19change_app_stage_to9App_Stage>
            sprintf(currentState, "Waiting");
 80a1c78:	490a      	ldr	r1, [pc, #40]	; (80a1ca4 <_Z16calendar_handlerv+0xb8>)
 80a1c7a:	4807      	ldr	r0, [pc, #28]	; (80a1c98 <_Z16calendar_handlerv+0xac>)
}
 80a1c7c:	b009      	add	sp, #36	; 0x24
 80a1c7e:	f85d eb04 	ldr.w	lr, [sp], #4
            sprintf(currentState, "Waiting");
 80a1c82:	f003 bcc8 	b.w	80a5616 <strcpy>
        change_app_stage_to(App_Stage::FAILED);
 80a1c86:	2002      	movs	r0, #2
 80a1c88:	f7ff fcee 	bl	80a1668 <_Z19change_app_stage_to9App_Stage>
}
 80a1c8c:	e7d7      	b.n	80a1c3e <_Z16calendar_handlerv+0x52>
 80a1c8e:	bf00      	nop
 80a1c90:	20000248 	.word	0x20000248
 80a1c94:	080a721b 	.word	0x080a721b
 80a1c98:	2000030d 	.word	0x2000030d
 80a1c9c:	080a7333 	.word	0x080a7333
 80a1ca0:	080a733d 	.word	0x080a733d
 80a1ca4:	080a7350 	.word	0x080a7350

080a1ca8 <_Z17print_event_statev>:
{
 80a1ca8:	b510      	push	{r4, lr}
    if (event_state == Event_State::PUBLISHING)
 80a1caa:	4b13      	ldr	r3, [pc, #76]	; (80a1cf8 <_Z17print_event_statev+0x50>)
{
 80a1cac:	b086      	sub	sp, #24
    if (event_state == Event_State::PUBLISHING)
 80a1cae:	781a      	ldrb	r2, [r3, #0]
 80a1cb0:	461c      	mov	r4, r3
 80a1cb2:	b9aa      	cbnz	r2, 80a1ce0 <_Z17print_event_statev+0x38>
        switch (app_stage)
 80a1cb4:	4b11      	ldr	r3, [pc, #68]	; (80a1cfc <_Z17print_event_statev+0x54>)
 80a1cb6:	781b      	ldrb	r3, [r3, #0]
 80a1cb8:	2b01      	cmp	r3, #1
 80a1cba:	d10d      	bne.n	80a1cd8 <_Z17print_event_statev+0x30>
            DEBUG_PRINT("Calendar event published!");
 80a1cbc:	4910      	ldr	r1, [pc, #64]	; (80a1d00 <_Z17print_event_statev+0x58>)
 80a1cbe:	a802      	add	r0, sp, #8
 80a1cc0:	f000 feaa 	bl	80a2a18 <_ZN6String6formatEPKcz>
 80a1cc4:	4668      	mov	r0, sp
 80a1cc6:	9902      	ldr	r1, [sp, #8]
 80a1cc8:	f7ff fc76 	bl	80a15b8 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>
 80a1ccc:	a801      	add	r0, sp, #4
 80a1cce:	f7fe fb4d 	bl	80a036c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1cd2:	a802      	add	r0, sp, #8
 80a1cd4:	f000 fd22 	bl	80a271c <_ZN6StringD1Ev>
        event_state = Event_State::WAIT_FOR_RESPONSE;
 80a1cd8:	2301      	movs	r3, #1
 80a1cda:	7023      	strb	r3, [r4, #0]
}
 80a1cdc:	b006      	add	sp, #24
 80a1cde:	bd10      	pop	{r4, pc}
    else if (event_state == Event_State::WAIT_FOR_RESPONSE)
 80a1ce0:	2a01      	cmp	r2, #1
 80a1ce2:	d104      	bne.n	80a1cee <_Z17print_event_statev+0x46>
        delay(1000);
 80a1ce4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a1ce8:	f001 f8e8 	bl	80a2ebc <delay>
 80a1cec:	e7f6      	b.n	80a1cdc <_Z17print_event_statev+0x34>
    else if (event_state == Event_State::COMPLETED)
 80a1cee:	2a02      	cmp	r2, #2
        event_state = Event_State::PUBLISHING;
 80a1cf0:	bf04      	itt	eq
 80a1cf2:	2200      	moveq	r2, #0
 80a1cf4:	701a      	strbeq	r2, [r3, #0]
}
 80a1cf6:	e7f1      	b.n	80a1cdc <_Z17print_event_statev+0x34>
 80a1cf8:	2000032d 	.word	0x2000032d
 80a1cfc:	2000030c 	.word	0x2000030c
 80a1d00:	080a7358 	.word	0x080a7358

080a1d04 <_Z13calendar_loopv>:
{
 80a1d04:	b510      	push	{r4, lr}
    if (event_state == Event_State::PUBLISHING)
 80a1d06:	4b09      	ldr	r3, [pc, #36]	; (80a1d2c <_Z13calendar_loopv+0x28>)
 80a1d08:	781b      	ldrb	r3, [r3, #0]
 80a1d0a:	b943      	cbnz	r3, 80a1d1e <_Z13calendar_loopv+0x1a>
        if (OAuth2->is_token_valid())
 80a1d0c:	4c08      	ldr	r4, [pc, #32]	; (80a1d30 <_Z13calendar_loopv+0x2c>)
 80a1d0e:	6820      	ldr	r0, [r4, #0]
 80a1d10:	f7fe fdd2 	bl	80a08b8 <_ZN13Google_OAuth214is_token_validEv>
 80a1d14:	b138      	cbz	r0, 80a1d26 <_Z13calendar_loopv+0x22>
            Calendar.publish(*OAuth2);
 80a1d16:	6821      	ldr	r1, [r4, #0]
 80a1d18:	4806      	ldr	r0, [pc, #24]	; (80a1d34 <_Z13calendar_loopv+0x30>)
 80a1d1a:	f7ff f8b3 	bl	80a0e84 <_ZN15Google_Calendar7publishERK13Google_OAuth2>
}
 80a1d1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    print_event_state();
 80a1d22:	f7ff bfc1 	b.w	80a1ca8 <_Z17print_event_statev>
            change_app_stage_to(App_Stage::OAUTH2);
 80a1d26:	f7ff fc9f 	bl	80a1668 <_Z19change_app_stage_to9App_Stage>
 80a1d2a:	e7f8      	b.n	80a1d1e <_Z13calendar_loopv+0x1a>
 80a1d2c:	2000032d 	.word	0x2000032d
 80a1d30:	200002d4 	.word	0x200002d4
 80a1d34:	20000248 	.word	0x20000248

080a1d38 <loop>:
{
 80a1d38:	b570      	push	{r4, r5, r6, lr}
 80a1d3a:	b086      	sub	sp, #24
    freemem = System.freeMemory();
 80a1d3c:	f000 fcbe 	bl	80a26bc <_ZN11SystemClass10freeMemoryEv>
 80a1d40:	4b37      	ldr	r3, [pc, #220]	; (80a1e20 <loop+0xe8>)
    if ((polling_rate > (60 * 60 * 1000)) && (app_stage == App_Stage::ACTIVE) ) {
 80a1d42:	4d38      	ldr	r5, [pc, #224]	; (80a1e24 <loop+0xec>)
    freemem = System.freeMemory();
 80a1d44:	6018      	str	r0, [r3, #0]
 80a1d46:	f000 fa35 	bl	80a21b4 <HAL_Timer_Get_Milli_Seconds>
 80a1d4a:	4604      	mov	r4, r0
    update_time_remaining(now);
 80a1d4c:	f7ff fc46 	bl	80a15dc <_Z21update_time_remainingm>
    if ((polling_rate > (60 * 60 * 1000)) && (app_stage == App_Stage::ACTIVE) ) {
 80a1d50:	6829      	ldr	r1, [r5, #0]
 80a1d52:	4a35      	ldr	r2, [pc, #212]	; (80a1e28 <loop+0xf0>)
 80a1d54:	4e35      	ldr	r6, [pc, #212]	; (80a1e2c <loop+0xf4>)
 80a1d56:	4291      	cmp	r1, r2
 80a1d58:	d913      	bls.n	80a1d82 <loop+0x4a>
 80a1d5a:	7833      	ldrb	r3, [r6, #0]
 80a1d5c:	2b06      	cmp	r3, #6
 80a1d5e:	d110      	bne.n	80a1d82 <loop+0x4a>
        DEBUG_PRINT("Max Event Time Exceeded");
 80a1d60:	4933      	ldr	r1, [pc, #204]	; (80a1e30 <loop+0xf8>)
 80a1d62:	a802      	add	r0, sp, #8
 80a1d64:	f000 fe58 	bl	80a2a18 <_ZN6String6formatEPKcz>
 80a1d68:	9902      	ldr	r1, [sp, #8]
 80a1d6a:	4668      	mov	r0, sp
 80a1d6c:	f7ff fc24 	bl	80a15b8 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>
 80a1d70:	a801      	add	r0, sp, #4
 80a1d72:	f7fe fafb 	bl	80a036c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1d76:	a802      	add	r0, sp, #8
 80a1d78:	f000 fcd0 	bl	80a271c <_ZN6StringD1Ev>
        change_app_stage_to(App_Stage::EVENT_TOO_LONG);
 80a1d7c:	2004      	movs	r0, #4
 80a1d7e:	f7ff fc73 	bl	80a1668 <_Z19change_app_stage_to9App_Stage>
    unsigned long elapsed = now - polling_time; //will always be positive
 80a1d82:	4a2c      	ldr	r2, [pc, #176]	; (80a1e34 <loop+0xfc>)
    if (elapsed <= polling_rate) {
 80a1d84:	6829      	ldr	r1, [r5, #0]
    unsigned long elapsed = now - polling_time; //will always be positive
 80a1d86:	6810      	ldr	r0, [r2, #0]
 80a1d88:	7833      	ldrb	r3, [r6, #0]
 80a1d8a:	1a24      	subs	r4, r4, r0
    if (elapsed <= polling_rate) {
 80a1d8c:	42a1      	cmp	r1, r4
 80a1d8e:	4614      	mov	r4, r2
 80a1d90:	d32b      	bcc.n	80a1dea <loop+0xb2>
        switch (app_stage)
 80a1d92:	2b02      	cmp	r3, #2
 80a1d94:	d00b      	beq.n	80a1dae <loop+0x76>
 80a1d96:	3b03      	subs	r3, #3
 80a1d98:	2b04      	cmp	r3, #4
 80a1d9a:	d802      	bhi.n	80a1da2 <loop+0x6a>
                Control.relay_loop();
 80a1d9c:	4826      	ldr	r0, [pc, #152]	; (80a1e38 <loop+0x100>)
 80a1d9e:	f000 f931 	bl	80a2004 <_ZN13Relay_Control10relay_loopEv>
        delay(1000);
 80a1da2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a1da6:	f001 f889 	bl	80a2ebc <delay>
}
 80a1daa:	b006      	add	sp, #24
 80a1dac:	bd70      	pop	{r4, r5, r6, pc}
                Control.turn_off_relays();
 80a1dae:	4822      	ldr	r0, [pc, #136]	; (80a1e38 <loop+0x100>)
 80a1db0:	f000 f9ba 	bl	80a2128 <_ZN13Relay_Control15turn_off_relaysEv>
                delay(1000);
 80a1db4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a1db8:	f001 f880 	bl	80a2ebc <delay>
                DEBUG_PRINT("Press Reset Button");
 80a1dbc:	a802      	add	r0, sp, #8
 80a1dbe:	491f      	ldr	r1, [pc, #124]	; (80a1e3c <loop+0x104>)
 80a1dc0:	f000 fe2a 	bl	80a2a18 <_ZN6String6formatEPKcz>
 80a1dc4:	9902      	ldr	r1, [sp, #8]
 80a1dc6:	4668      	mov	r0, sp
 80a1dc8:	f7ff fbf6 	bl	80a15b8 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>
 80a1dcc:	a801      	add	r0, sp, #4
 80a1dce:	f7fe facd 	bl	80a036c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1dd2:	a802      	add	r0, sp, #8
 80a1dd4:	f000 fca2 	bl	80a271c <_ZN6StringD1Ev>
                delay(15 * 60 * 1000);
 80a1dd8:	4819      	ldr	r0, [pc, #100]	; (80a1e40 <loop+0x108>)
 80a1dda:	f001 f86f 	bl	80a2ebc <delay>
                print_app_error();
 80a1dde:	f7ff fc27 	bl	80a1630 <_Z15print_app_errorv>
                Control.turn_off_relays();
 80a1de2:	4815      	ldr	r0, [pc, #84]	; (80a1e38 <loop+0x100>)
 80a1de4:	f000 f9a0 	bl	80a2128 <_ZN13Relay_Control15turn_off_relaysEv>
 80a1de8:	e7d8      	b.n	80a1d9c <loop+0x64>
        switch (app_stage)
 80a1dea:	2b07      	cmp	r3, #7
 80a1dec:	d807      	bhi.n	80a1dfe <loop+0xc6>
 80a1dee:	e8df f003 	tbb	[pc, r3]
 80a1df2:	0a04      	.short	0x0a04
 80a1df4:	0d141406 	.word	0x0d141406
 80a1df8:	1114      	.short	0x1114
                oauth2_loop();
 80a1dfa:	f7ff feb7 	bl	80a1b6c <_Z11oauth2_loopv>
 80a1dfe:	f000 f9d9 	bl	80a21b4 <HAL_Timer_Get_Milli_Seconds>
        polling_time = millis();
 80a1e02:	6020      	str	r0, [r4, #0]
}
 80a1e04:	e7d1      	b.n	80a1daa <loop+0x72>
                calendar_loop();
 80a1e06:	f7ff ff7d 	bl	80a1d04 <_Z13calendar_loopv>
                break;
 80a1e0a:	e7f8      	b.n	80a1dfe <loop+0xc6>
                change_app_stage_to(App_Stage::ACTIVE); 
 80a1e0c:	2006      	movs	r0, #6
                change_app_stage_to(App_Stage::CALENDAR); 
 80a1e0e:	f7ff fc2b 	bl	80a1668 <_Z19change_app_stage_to9App_Stage>
                break;
 80a1e12:	e7f4      	b.n	80a1dfe <loop+0xc6>
                Control.turn_off_relays();
 80a1e14:	4808      	ldr	r0, [pc, #32]	; (80a1e38 <loop+0x100>)
 80a1e16:	f000 f987 	bl	80a2128 <_ZN13Relay_Control15turn_off_relaysEv>
                change_app_stage_to(App_Stage::CALENDAR); 
 80a1e1a:	2001      	movs	r0, #1
 80a1e1c:	e7f7      	b.n	80a1e0e <loop+0xd6>
 80a1e1e:	bf00      	nop
 80a1e20:	20000330 	.word	0x20000330
 80a1e24:	20000338 	.word	0x20000338
 80a1e28:	0036ee80 	.word	0x0036ee80
 80a1e2c:	2000030c 	.word	0x2000030c
 80a1e30:	080a7372 	.word	0x080a7372
 80a1e34:	2000033c 	.word	0x2000033c
 80a1e38:	200002c8 	.word	0x200002c8
 80a1e3c:	080a738a 	.word	0x080a738a
 80a1e40:	000dbba0 	.word	0x000dbba0

080a1e44 <_GLOBAL__sub_I_app_stage>:
        val_(val) {
 80a1e44:	2200      	movs	r2, #0
}
 80a1e46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1e48:	4b1b      	ldr	r3, [pc, #108]	; (80a1eb8 <_GLOBAL__sub_I_app_stage+0x74>)

const String CLIENT_ID = "355382188119-102htvfiinqdc0pse0e09uqkv68l3j67.apps.googleusercontent.com";  
 80a1e4a:	4d1c      	ldr	r5, [pc, #112]	; (80a1ebc <_GLOBAL__sub_I_app_stage+0x78>)
 80a1e4c:	701a      	strb	r2, [r3, #0]
 80a1e4e:	4c1c      	ldr	r4, [pc, #112]	; (80a1ec0 <_GLOBAL__sub_I_app_stage+0x7c>)
 80a1e50:	4e1c      	ldr	r6, [pc, #112]	; (80a1ec4 <_GLOBAL__sub_I_app_stage+0x80>)
 80a1e52:	4628      	mov	r0, r5
 80a1e54:	491c      	ldr	r1, [pc, #112]	; (80a1ec8 <_GLOBAL__sub_I_app_stage+0x84>)
 80a1e56:	f000 fcab 	bl	80a27b0 <_ZN6StringC1EPKc>
 80a1e5a:	4628      	mov	r0, r5
const String CLIENT_SECRET = "VQOm4nCJJzXuC37ybY3jiWl8";  
 80a1e5c:	4d1b      	ldr	r5, [pc, #108]	; (80a1ecc <_GLOBAL__sub_I_app_stage+0x88>)
const String CLIENT_ID = "355382188119-102htvfiinqdc0pse0e09uqkv68l3j67.apps.googleusercontent.com";  
 80a1e5e:	4622      	mov	r2, r4
 80a1e60:	4631      	mov	r1, r6
 80a1e62:	f001 ff73 	bl	80a3d4c <__aeabi_atexit>
const String CLIENT_SECRET = "VQOm4nCJJzXuC37ybY3jiWl8";  
 80a1e66:	4628      	mov	r0, r5
 80a1e68:	4919      	ldr	r1, [pc, #100]	; (80a1ed0 <_GLOBAL__sub_I_app_stage+0x8c>)
 80a1e6a:	f000 fca1 	bl	80a27b0 <_ZN6StringC1EPKc>
 80a1e6e:	4628      	mov	r0, r5
 80a1e70:	4d18      	ldr	r5, [pc, #96]	; (80a1ed4 <_GLOBAL__sub_I_app_stage+0x90>)
const String CLIENT_SECRET = "VQOm4nCJJzXuC37ybY3jiWl8";  
 80a1e72:	4622      	mov	r2, r4
 80a1e74:	4631      	mov	r1, r6
 80a1e76:	f001 ff69 	bl	80a3d4c <__aeabi_atexit>
 80a1e7a:	4628      	mov	r0, r5
 80a1e7c:	4916      	ldr	r1, [pc, #88]	; (80a1ed8 <_GLOBAL__sub_I_app_stage+0x94>)
 80a1e7e:	f000 fc97 	bl	80a27b0 <_ZN6StringC1EPKc>
//*****************************************************************************
Google_OAuth2 *OAuth2; 
/*
Google_OAuth2 OAuth2(CLIENT_ID, CLIENT_SECRET);
*/
Google_Calendar Calendar(CALENDAR_ID, TIME_ZONE);
 80a1e82:	4f16      	ldr	r7, [pc, #88]	; (80a1edc <_GLOBAL__sub_I_app_stage+0x98>)
 80a1e84:	4631      	mov	r1, r6
 80a1e86:	4e16      	ldr	r6, [pc, #88]	; (80a1ee0 <_GLOBAL__sub_I_app_stage+0x9c>)
 80a1e88:	4622      	mov	r2, r4
 80a1e8a:	4628      	mov	r0, r5
 80a1e8c:	f001 ff5e 	bl	80a3d4c <__aeabi_atexit>
 80a1e90:	4632      	mov	r2, r6
 80a1e92:	4629      	mov	r1, r5
 80a1e94:	4638      	mov	r0, r7
 80a1e96:	f7fe ff7b 	bl	80a0d90 <_ZN15Google_CalendarC1ERK6StringRKa>
 80a1e9a:	4622      	mov	r2, r4
 80a1e9c:	4638      	mov	r0, r7
 80a1e9e:	4911      	ldr	r1, [pc, #68]	; (80a1ee4 <_GLOBAL__sub_I_app_stage+0xa0>)
 80a1ea0:	f001 ff54 	bl	80a3d4c <__aeabi_atexit>
Relay_Control Control(TIME_ZONE);
 80a1ea4:	4631      	mov	r1, r6
 80a1ea6:	4810      	ldr	r0, [pc, #64]	; (80a1ee8 <_GLOBAL__sub_I_app_stage+0xa4>)
 80a1ea8:	f000 f89e 	bl	80a1fe8 <_ZN13Relay_ControlC1ERKa>
 80a1eac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    int scan(void (*handler)(WiFiAccessPoint* ap, T* instance), T* instance) {
        return scan((wlan_scan_result_t)handler, (void*)instance);
    }

    int selectAntenna(WLanSelectAntenna_TypeDef antenna) {
        return wlan_select_antenna(antenna);
 80a1eb0:	2001      	movs	r0, #1
 80a1eb2:	f000 ba89 	b.w	80a23c8 <wlan_select_antenna>
 80a1eb6:	bf00      	nop
 80a1eb8:	200002f8 	.word	0x200002f8
 80a1ebc:	200002fc 	.word	0x200002fc
 80a1ec0:	20000240 	.word	0x20000240
 80a1ec4:	080a271d 	.word	0x080a271d
 80a1ec8:	080a739d 	.word	0x080a739d
 80a1ecc:	200002e8 	.word	0x200002e8
 80a1ed0:	080a73e6 	.word	0x080a73e6
 80a1ed4:	200002d8 	.word	0x200002d8
 80a1ed8:	080a73ff 	.word	0x080a73ff
 80a1edc:	20000248 	.word	0x20000248
 80a1ee0:	080a7434 	.word	0x080a7434
 80a1ee4:	080a155d 	.word	0x080a155d
 80a1ee8:	200002c8 	.word	0x200002c8

080a1eec <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>:
inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
 80a1eec:	b513      	push	{r0, r1, r4, lr}
 80a1eee:	4604      	mov	r4, r0
 80a1ef0:	4b05      	ldr	r3, [pc, #20]	; (80a1f08 <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0+0x1c>)
 80a1ef2:	460a      	mov	r2, r1
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 80a1ef4:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a1ef6:	4905      	ldr	r1, [pc, #20]	; (80a1f0c <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0+0x20>)
 80a1ef8:	f88d 3000 	strb.w	r3, [sp]
 80a1efc:	233c      	movs	r3, #60	; 0x3c
 80a1efe:	f001 fa07 	bl	80a3310 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
}
 80a1f02:	4620      	mov	r0, r4
 80a1f04:	b002      	add	sp, #8
 80a1f06:	bd10      	pop	{r4, pc}
 80a1f08:	200003c0 	.word	0x200003c0
 80a1f0c:	080a6b6c 	.word	0x080a6b6c

080a1f10 <_ZN13Relay_Control13process_eventE6String>:
   
    DEBUG_PRINT("Relay Setup Complete")

}
void Relay_Control::process_event(String event_title)
{
 80a1f10:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a1f12:	460d      	mov	r5, r1
 80a1f14:	4604      	mov	r4, r0



    if (event_title.indexOf("Veg") > -1) {
 80a1f16:	4917      	ldr	r1, [pc, #92]	; (80a1f74 <_ZN13Relay_Control13process_eventE6String+0x64>)
 80a1f18:	4668      	mov	r0, sp
 80a1f1a:	f000 fc49 	bl	80a27b0 <_ZN6StringC1EPKc>
 80a1f1e:	4669      	mov	r1, sp
 80a1f20:	4628      	mov	r0, r5
 80a1f22:	f000 fd4e 	bl	80a29c2 <_ZNK6String7indexOfERKS_>
 80a1f26:	4606      	mov	r6, r0
 80a1f28:	43f6      	mvns	r6, r6
 80a1f2a:	4668      	mov	r0, sp
 80a1f2c:	0ff6      	lsrs	r6, r6, #31
 80a1f2e:	f000 fbf5 	bl	80a271c <_ZN6StringD1Ev>
 80a1f32:	7126      	strb	r6, [r4, #4]
        relay1 = true;
    } else {
        relay1 = false;
    }
    
    if (event_title.indexOf("Tom") > -1) {
 80a1f34:	4668      	mov	r0, sp
 80a1f36:	4910      	ldr	r1, [pc, #64]	; (80a1f78 <_ZN13Relay_Control13process_eventE6String+0x68>)
 80a1f38:	f000 fc3a 	bl	80a27b0 <_ZN6StringC1EPKc>
 80a1f3c:	4669      	mov	r1, sp
 80a1f3e:	4628      	mov	r0, r5
 80a1f40:	f000 fd3f 	bl	80a29c2 <_ZNK6String7indexOfERKS_>
 80a1f44:	4606      	mov	r6, r0
 80a1f46:	43f6      	mvns	r6, r6
 80a1f48:	4668      	mov	r0, sp
 80a1f4a:	0ff6      	lsrs	r6, r6, #31
 80a1f4c:	f000 fbe6 	bl	80a271c <_ZN6StringD1Ev>
        relay2 = true;
    } else {
        relay2 = false;
    }
    
    if (event_title.indexOf("Fro") > -1) {
 80a1f50:	4668      	mov	r0, sp
 80a1f52:	490a      	ldr	r1, [pc, #40]	; (80a1f7c <_ZN13Relay_Control13process_eventE6String+0x6c>)
 80a1f54:	7166      	strb	r6, [r4, #5]
 80a1f56:	f000 fc2b 	bl	80a27b0 <_ZN6StringC1EPKc>
 80a1f5a:	4669      	mov	r1, sp
 80a1f5c:	4628      	mov	r0, r5
 80a1f5e:	f000 fd30 	bl	80a29c2 <_ZNK6String7indexOfERKS_>
 80a1f62:	4605      	mov	r5, r0
 80a1f64:	4668      	mov	r0, sp
 80a1f66:	43ed      	mvns	r5, r5
 80a1f68:	f000 fbd8 	bl	80a271c <_ZN6StringD1Ev>
 80a1f6c:	0fed      	lsrs	r5, r5, #31
 80a1f6e:	71a5      	strb	r5, [r4, #6]
        relay3 = true;
    } else {
        relay3 = false;
    }
    
}
 80a1f70:	b004      	add	sp, #16
 80a1f72:	bd70      	pop	{r4, r5, r6, pc}
 80a1f74:	080a7435 	.word	0x080a7435
 80a1f78:	080a7439 	.word	0x080a7439
 80a1f7c:	080a743d 	.word	0x080a743d

080a1f80 <_ZN13Relay_Control12setup_relaysEv>:
void Relay_Control::setup_relays()  {
 80a1f80:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    pinMode(RELAY1PIN, OUTPUT);
 80a1f82:	2101      	movs	r1, #1
 80a1f84:	2004      	movs	r0, #4
 80a1f86:	f001 fe49 	bl	80a3c1c <pinMode>
    pinMode(RELAY2PIN, OUTPUT);
 80a1f8a:	2101      	movs	r1, #1
 80a1f8c:	2005      	movs	r0, #5
 80a1f8e:	f001 fe45 	bl	80a3c1c <pinMode>
    pinMode(RELAY3PIN, OUTPUT);
 80a1f92:	2101      	movs	r1, #1
 80a1f94:	2006      	movs	r0, #6
 80a1f96:	f001 fe41 	bl	80a3c1c <pinMode>
    pinMode(RELAY4PIN, OUTPUT);
 80a1f9a:	2101      	movs	r1, #1
 80a1f9c:	2007      	movs	r0, #7
 80a1f9e:	f001 fe3d 	bl	80a3c1c <pinMode>
    digitalWrite(RELAY1PIN, HIGH);
 80a1fa2:	2101      	movs	r1, #1
 80a1fa4:	2004      	movs	r0, #4
 80a1fa6:	f001 fe4a 	bl	80a3c3e <digitalWrite>
    digitalWrite(RELAY2PIN, HIGH);
 80a1faa:	2101      	movs	r1, #1
 80a1fac:	2005      	movs	r0, #5
 80a1fae:	f001 fe46 	bl	80a3c3e <digitalWrite>
    digitalWrite(RELAY3PIN, HIGH); 
 80a1fb2:	2101      	movs	r1, #1
 80a1fb4:	2006      	movs	r0, #6
 80a1fb6:	f001 fe42 	bl	80a3c3e <digitalWrite>
    digitalWrite(RELAY4PIN, HIGH);
 80a1fba:	2101      	movs	r1, #1
 80a1fbc:	2007      	movs	r0, #7
 80a1fbe:	f001 fe3e 	bl	80a3c3e <digitalWrite>
    DEBUG_PRINT("Relay Setup Complete")
 80a1fc2:	a802      	add	r0, sp, #8
 80a1fc4:	4907      	ldr	r1, [pc, #28]	; (80a1fe4 <_ZN13Relay_Control12setup_relaysEv+0x64>)
 80a1fc6:	f000 fd27 	bl	80a2a18 <_ZN6String6formatEPKcz>
 80a1fca:	9902      	ldr	r1, [sp, #8]
 80a1fcc:	4668      	mov	r0, sp
 80a1fce:	f7ff ff8d 	bl	80a1eec <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>
 80a1fd2:	a801      	add	r0, sp, #4
 80a1fd4:	f7fe f9ca 	bl	80a036c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1fd8:	a802      	add	r0, sp, #8
 80a1fda:	f000 fb9f 	bl	80a271c <_ZN6StringD1Ev>
}
 80a1fde:	b007      	add	sp, #28
 80a1fe0:	f85d fb04 	ldr.w	pc, [sp], #4
 80a1fe4:	080a7441 	.word	0x080a7441

080a1fe8 <_ZN13Relay_ControlC1ERKa>:
    : TIME_ZONE(time_zone)
 80a1fe8:	780b      	ldrb	r3, [r1, #0]
Relay_Control::Relay_Control(const int8_t &time_zone)
 80a1fea:	b510      	push	{r4, lr}
    : TIME_ZONE(time_zone)
 80a1fec:	7003      	strb	r3, [r0, #0]
Relay_Control::Relay_Control(const int8_t &time_zone)
 80a1fee:	4604      	mov	r4, r0
    setup_relays();
 80a1ff0:	f7ff ffc6 	bl	80a1f80 <_ZN13Relay_Control12setup_relaysEv>
    relay1_LastState = false;
 80a1ff4:	2300      	movs	r3, #0
}
 80a1ff6:	4620      	mov	r0, r4
    lastUpdateTime = 0;
 80a1ff8:	e9c4 3301 	strd	r3, r3, [r4, #4]
    relay1_LastState = false;
 80a1ffc:	7063      	strb	r3, [r4, #1]
    relay2_LastState = false;
 80a1ffe:	8063      	strh	r3, [r4, #2]
}
 80a2000:	bd10      	pop	{r4, pc}
	...

080a2004 <_ZN13Relay_Control10relay_loopEv>:
}



void Relay_Control::relay_loop()
{
 80a2004:	b510      	push	{r4, lr}
        relay1
 80a2006:	7903      	ldrb	r3, [r0, #4]


    timerState = relay1TimerActive();  //State Change method this block
    if(timerState != relay1_LastState)  {
 80a2008:	7842      	ldrb	r2, [r0, #1]
{
 80a200a:	4604      	mov	r4, r0
    if(timerState != relay1_LastState)  {
 80a200c:	429a      	cmp	r2, r3
{
 80a200e:	b086      	sub	sp, #24
    timerState = relay1TimerActive();  //State Change method this block
 80a2010:	71c3      	strb	r3, [r0, #7]
    if(timerState != relay1_LastState)  {
 80a2012:	d01a      	beq.n	80a204a <_ZN13Relay_Control10relay_loopEv+0x46>
        delay(1000);
 80a2014:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a2018:	f000 ff50 	bl	80a2ebc <delay>
        if(timerState)  {
 80a201c:	79e3      	ldrb	r3, [r4, #7]
 80a201e:	2b00      	cmp	r3, #0
 80a2020:	d054      	beq.n	80a20cc <_ZN13Relay_Control10relay_loopEv+0xc8>
            digitalWrite(RELAY1PIN, LOW);
 80a2022:	2100      	movs	r1, #0
 80a2024:	2004      	movs	r0, #4
 80a2026:	f001 fe0a 	bl	80a3c3e <digitalWrite>
            DEBUG_PRINT("relay1 = ON");
 80a202a:	4931      	ldr	r1, [pc, #196]	; (80a20f0 <_ZN13Relay_Control10relay_loopEv+0xec>)
        } else  {
            digitalWrite(RELAY1PIN, HIGH);
            DEBUG_PRINT("relay1 = OFF");
 80a202c:	a802      	add	r0, sp, #8
 80a202e:	f000 fcf3 	bl	80a2a18 <_ZN6String6formatEPKcz>
 80a2032:	9902      	ldr	r1, [sp, #8]
 80a2034:	4668      	mov	r0, sp
 80a2036:	f7ff ff59 	bl	80a1eec <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>
 80a203a:	a801      	add	r0, sp, #4
 80a203c:	f7fe f996 	bl	80a036c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a2040:	a802      	add	r0, sp, #8
 80a2042:	f000 fb6b 	bl	80a271c <_ZN6StringD1Ev>
        }
        relay1_LastState = timerState;
 80a2046:	79e3      	ldrb	r3, [r4, #7]
 80a2048:	7063      	strb	r3, [r4, #1]
        relay2 
 80a204a:	7963      	ldrb	r3, [r4, #5]
    }
    
    timerState = relay2TimerActive();  //State Change method this block
    if(timerState != relay2_LastState) {
 80a204c:	78a2      	ldrb	r2, [r4, #2]
    timerState = relay2TimerActive();  //State Change method this block
 80a204e:	71e3      	strb	r3, [r4, #7]
    if(timerState != relay2_LastState) {
 80a2050:	429a      	cmp	r2, r3
 80a2052:	d01a      	beq.n	80a208a <_ZN13Relay_Control10relay_loopEv+0x86>
        delay(1000);
 80a2054:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a2058:	f000 ff30 	bl	80a2ebc <delay>
        if(timerState) {
 80a205c:	79e3      	ldrb	r3, [r4, #7]
 80a205e:	2b00      	cmp	r3, #0
 80a2060:	d03a      	beq.n	80a20d8 <_ZN13Relay_Control10relay_loopEv+0xd4>
            digitalWrite(RELAY2PIN, LOW);
 80a2062:	2100      	movs	r1, #0
 80a2064:	2005      	movs	r0, #5
 80a2066:	f001 fdea 	bl	80a3c3e <digitalWrite>
            DEBUG_PRINT("relay2 = ON");
 80a206a:	4922      	ldr	r1, [pc, #136]	; (80a20f4 <_ZN13Relay_Control10relay_loopEv+0xf0>)
        } else {
            digitalWrite(RELAY2PIN, HIGH);
            DEBUG_PRINT("relay2 = OFF");
 80a206c:	a802      	add	r0, sp, #8
 80a206e:	f000 fcd3 	bl	80a2a18 <_ZN6String6formatEPKcz>
 80a2072:	9902      	ldr	r1, [sp, #8]
 80a2074:	4668      	mov	r0, sp
 80a2076:	f7ff ff39 	bl	80a1eec <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>
 80a207a:	a801      	add	r0, sp, #4
 80a207c:	f7fe f976 	bl	80a036c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a2080:	a802      	add	r0, sp, #8
 80a2082:	f000 fb4b 	bl	80a271c <_ZN6StringD1Ev>
        }
        relay2_LastState = timerState;
 80a2086:	79e3      	ldrb	r3, [r4, #7]
 80a2088:	70a3      	strb	r3, [r4, #2]
        relay3
 80a208a:	79a3      	ldrb	r3, [r4, #6]
    }
    
    timerState = relay3TimerActive();  //State Change method this block
    if(timerState != relay3_LastState) {
 80a208c:	78e2      	ldrb	r2, [r4, #3]
    timerState = relay3TimerActive();  //State Change method this block
 80a208e:	71e3      	strb	r3, [r4, #7]
    if(timerState != relay3_LastState) {
 80a2090:	429a      	cmp	r2, r3
 80a2092:	d019      	beq.n	80a20c8 <_ZN13Relay_Control10relay_loopEv+0xc4>
        delay(1000);
 80a2094:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a2098:	f000 ff10 	bl	80a2ebc <delay>
        if(timerState) {
 80a209c:	79e3      	ldrb	r3, [r4, #7]
 80a209e:	b30b      	cbz	r3, 80a20e4 <_ZN13Relay_Control10relay_loopEv+0xe0>
            digitalWrite(RELAY3PIN, LOW);
 80a20a0:	2100      	movs	r1, #0
 80a20a2:	2006      	movs	r0, #6
 80a20a4:	f001 fdcb 	bl	80a3c3e <digitalWrite>
            DEBUG_PRINT("relay3 = ON");
 80a20a8:	4913      	ldr	r1, [pc, #76]	; (80a20f8 <_ZN13Relay_Control10relay_loopEv+0xf4>)
        } else {
            digitalWrite(RELAY3PIN, HIGH);
            DEBUG_PRINT("relay3 = OFF");
 80a20aa:	a802      	add	r0, sp, #8
 80a20ac:	f000 fcb4 	bl	80a2a18 <_ZN6String6formatEPKcz>
 80a20b0:	9902      	ldr	r1, [sp, #8]
 80a20b2:	4668      	mov	r0, sp
 80a20b4:	f7ff ff1a 	bl	80a1eec <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>
 80a20b8:	a801      	add	r0, sp, #4
 80a20ba:	f7fe f957 	bl	80a036c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a20be:	a802      	add	r0, sp, #8
 80a20c0:	f000 fb2c 	bl	80a271c <_ZN6StringD1Ev>
        }
        relay3_LastState = timerState;
 80a20c4:	79e3      	ldrb	r3, [r4, #7]
 80a20c6:	70e3      	strb	r3, [r4, #3]
    } 

}
 80a20c8:	b006      	add	sp, #24
 80a20ca:	bd10      	pop	{r4, pc}
            digitalWrite(RELAY1PIN, HIGH);
 80a20cc:	2101      	movs	r1, #1
 80a20ce:	2004      	movs	r0, #4
 80a20d0:	f001 fdb5 	bl	80a3c3e <digitalWrite>
            DEBUG_PRINT("relay1 = OFF");
 80a20d4:	4909      	ldr	r1, [pc, #36]	; (80a20fc <_ZN13Relay_Control10relay_loopEv+0xf8>)
 80a20d6:	e7a9      	b.n	80a202c <_ZN13Relay_Control10relay_loopEv+0x28>
            digitalWrite(RELAY2PIN, HIGH);
 80a20d8:	2101      	movs	r1, #1
 80a20da:	2005      	movs	r0, #5
 80a20dc:	f001 fdaf 	bl	80a3c3e <digitalWrite>
            DEBUG_PRINT("relay2 = OFF");
 80a20e0:	4907      	ldr	r1, [pc, #28]	; (80a2100 <_ZN13Relay_Control10relay_loopEv+0xfc>)
 80a20e2:	e7c3      	b.n	80a206c <_ZN13Relay_Control10relay_loopEv+0x68>
            digitalWrite(RELAY3PIN, HIGH);
 80a20e4:	2101      	movs	r1, #1
 80a20e6:	2006      	movs	r0, #6
 80a20e8:	f001 fda9 	bl	80a3c3e <digitalWrite>
            DEBUG_PRINT("relay3 = OFF");
 80a20ec:	4905      	ldr	r1, [pc, #20]	; (80a2104 <_ZN13Relay_Control10relay_loopEv+0x100>)
 80a20ee:	e7dc      	b.n	80a20aa <_ZN13Relay_Control10relay_loopEv+0xa6>
 80a20f0:	080a7456 	.word	0x080a7456
 80a20f4:	080a746f 	.word	0x080a746f
 80a20f8:	080a7488 	.word	0x080a7488
 80a20fc:	080a7462 	.word	0x080a7462
 80a2100:	080a747b 	.word	0x080a747b
 80a2104:	080a7494 	.word	0x080a7494

080a2108 <_ZN13Relay_Control13control_relayEib>:
    switch (relay_num)
 80a2108:	2903      	cmp	r1, #3
 80a210a:	d806      	bhi.n	80a211a <_ZN13Relay_Control13control_relayEib+0x12>
 80a210c:	e8df f001 	tbb	[pc, r1]
 80a2110:	09070402 	.word	0x09070402
            relay2 = state;
 80a2114:	7142      	strb	r2, [r0, #5]
            relay3 = state;
 80a2116:	7182      	strb	r2, [r0, #6]
            relay1 = state;
 80a2118:	7102      	strb	r2, [r0, #4]
    relay_loop();
 80a211a:	f7ff bf73 	b.w	80a2004 <_ZN13Relay_Control10relay_loopEv>
            relay2 = state;
 80a211e:	7142      	strb	r2, [r0, #5]
            break;
 80a2120:	e7fb      	b.n	80a211a <_ZN13Relay_Control13control_relayEib+0x12>
            relay3 = state;
 80a2122:	7182      	strb	r2, [r0, #6]
            break;
 80a2124:	e7f9      	b.n	80a211a <_ZN13Relay_Control13control_relayEib+0x12>
	...

080a2128 <_ZN13Relay_Control15turn_off_relaysEv>:
void Relay_Control::turn_off_relays() {
 80a2128:	b510      	push	{r4, lr}
 80a212a:	4604      	mov	r4, r0
 80a212c:	b086      	sub	sp, #24
    delay(1000);
 80a212e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a2132:	f000 fec3 	bl	80a2ebc <delay>
    DEBUG_PRINT("Turning off relays");
 80a2136:	a802      	add	r0, sp, #8
 80a2138:	490a      	ldr	r1, [pc, #40]	; (80a2164 <_ZN13Relay_Control15turn_off_relaysEv+0x3c>)
 80a213a:	f000 fc6d 	bl	80a2a18 <_ZN6String6formatEPKcz>
 80a213e:	9902      	ldr	r1, [sp, #8]
 80a2140:	4668      	mov	r0, sp
 80a2142:	f7ff fed3 	bl	80a1eec <_ZN10CloudClass7publishEPKcS1_.isra.0.constprop.0>
 80a2146:	a801      	add	r0, sp, #4
 80a2148:	f7fe f910 	bl	80a036c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a214c:	a802      	add	r0, sp, #8
 80a214e:	f000 fae5 	bl	80a271c <_ZN6StringD1Ev>
            relay1 = state;
 80a2152:	2300      	movs	r3, #0
    relay_loop();
 80a2154:	4620      	mov	r0, r4
            relay1 = state;
 80a2156:	80a3      	strh	r3, [r4, #4]
            relay3 = state;
 80a2158:	71a3      	strb	r3, [r4, #6]
    relay_loop();
 80a215a:	f7ff ff53 	bl	80a2004 <_ZN13Relay_Control10relay_loopEv>
}
 80a215e:	b006      	add	sp, #24
 80a2160:	bd10      	pop	{r4, pc}
 80a2162:	bf00      	nop
 80a2164:	080a74a1 	.word	0x080a74a1

080a2168 <_GLOBAL__sub_I__ZN13Relay_ControlC2ERKa>:
        val_(val) {
 80a2168:	2200      	movs	r2, #0
 80a216a:	4b01      	ldr	r3, [pc, #4]	; (80a2170 <_GLOBAL__sub_I__ZN13Relay_ControlC2ERKa+0x8>)
 80a216c:	701a      	strb	r2, [r3, #0]
}
 80a216e:	4770      	bx	lr
 80a2170:	200003c0 	.word	0x200003c0

080a2174 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a2174:	b508      	push	{r3, lr}
 80a2176:	4b02      	ldr	r3, [pc, #8]	; (80a2180 <HAL_Pin_Mode+0xc>)
 80a2178:	681b      	ldr	r3, [r3, #0]
 80a217a:	689b      	ldr	r3, [r3, #8]
 80a217c:	9301      	str	r3, [sp, #4]
 80a217e:	bd08      	pop	{r3, pc}
 80a2180:	080601b0 	.word	0x080601b0

080a2184 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a2184:	b508      	push	{r3, lr}
 80a2186:	4b02      	ldr	r3, [pc, #8]	; (80a2190 <HAL_Get_Pin_Mode+0xc>)
 80a2188:	681b      	ldr	r3, [r3, #0]
 80a218a:	68db      	ldr	r3, [r3, #12]
 80a218c:	9301      	str	r3, [sp, #4]
 80a218e:	bd08      	pop	{r3, pc}
 80a2190:	080601b0 	.word	0x080601b0

080a2194 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a2194:	b508      	push	{r3, lr}
 80a2196:	4b02      	ldr	r3, [pc, #8]	; (80a21a0 <HAL_GPIO_Write+0xc>)
 80a2198:	681b      	ldr	r3, [r3, #0]
 80a219a:	691b      	ldr	r3, [r3, #16]
 80a219c:	9301      	str	r3, [sp, #4]
 80a219e:	bd08      	pop	{r3, pc}
 80a21a0:	080601b0 	.word	0x080601b0

080a21a4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a21a4:	b508      	push	{r3, lr}
 80a21a6:	4b02      	ldr	r3, [pc, #8]	; (80a21b0 <HAL_RNG_GetRandomNumber+0xc>)
 80a21a8:	681b      	ldr	r3, [r3, #0]
 80a21aa:	685b      	ldr	r3, [r3, #4]
 80a21ac:	9301      	str	r3, [sp, #4]
 80a21ae:	bd08      	pop	{r3, pc}
 80a21b0:	0806019c 	.word	0x0806019c

080a21b4 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a21b4:	b508      	push	{r3, lr}
 80a21b6:	4b02      	ldr	r3, [pc, #8]	; (80a21c0 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a21b8:	681b      	ldr	r3, [r3, #0]
 80a21ba:	695b      	ldr	r3, [r3, #20]
 80a21bc:	9301      	str	r3, [sp, #4]
 80a21be:	bd08      	pop	{r3, pc}
 80a21c0:	0806019c 	.word	0x0806019c

080a21c4 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
 80a21c4:	b508      	push	{r3, lr}
 80a21c6:	4b02      	ldr	r3, [pc, #8]	; (80a21d0 <HAL_EEPROM_Init+0xc>)
 80a21c8:	681b      	ldr	r3, [r3, #0]
 80a21ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a21cc:	9301      	str	r3, [sp, #4]
 80a21ce:	bd08      	pop	{r3, pc}
 80a21d0:	0806019c 	.word	0x0806019c

080a21d4 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
 80a21d4:	b508      	push	{r3, lr}
 80a21d6:	4b02      	ldr	r3, [pc, #8]	; (80a21e0 <HAL_EEPROM_Get+0xc>)
 80a21d8:	681b      	ldr	r3, [r3, #0]
 80a21da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a21dc:	9301      	str	r3, [sp, #4]
 80a21de:	bd08      	pop	{r3, pc}
 80a21e0:	0806019c 	.word	0x0806019c

080a21e4 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
 80a21e4:	b508      	push	{r3, lr}
 80a21e6:	4b02      	ldr	r3, [pc, #8]	; (80a21f0 <HAL_EEPROM_Put+0xc>)
 80a21e8:	681b      	ldr	r3, [r3, #0]
 80a21ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a21ec:	9301      	str	r3, [sp, #4]
 80a21ee:	bd08      	pop	{r3, pc}
 80a21f0:	0806019c 	.word	0x0806019c

080a21f4 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
 80a21f4:	b508      	push	{r3, lr}
 80a21f6:	4b02      	ldr	r3, [pc, #8]	; (80a2200 <hal_rtc_time_is_valid+0xc>)
 80a21f8:	681b      	ldr	r3, [r3, #0]
 80a21fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a21fc:	9301      	str	r3, [sp, #4]
 80a21fe:	bd08      	pop	{r3, pc}
 80a2200:	0806019c 	.word	0x0806019c

080a2204 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
 80a2204:	b508      	push	{r3, lr}
 80a2206:	4b02      	ldr	r3, [pc, #8]	; (80a2210 <hal_rtc_get_time+0xc>)
 80a2208:	681b      	ldr	r3, [r3, #0]
 80a220a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a220c:	9301      	str	r3, [sp, #4]
 80a220e:	bd08      	pop	{r3, pc}
 80a2210:	0806019c 	.word	0x0806019c

080a2214 <HAL_Core_Runtime_Info>:
DYNALIB_FN(16, hal_core, HAL_watchdog_reset_flagged, bool(void))
DYNALIB_FN(17, hal_core, HAL_Notify_WDT, void(void))
DYNALIB_FN(18, hal_core, HAL_Bootloader_Get_Flag, uint16_t(BootloaderFlag))
DYNALIB_FN(19, hal_core, HAL_Bootloader_Lock, void(bool))
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
 80a2214:	b508      	push	{r3, lr}
 80a2216:	4b02      	ldr	r3, [pc, #8]	; (80a2220 <HAL_Core_Runtime_Info+0xc>)
 80a2218:	681b      	ldr	r3, [r3, #0]
 80a221a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a221c:	9301      	str	r3, [sp, #4]
 80a221e:	bd08      	pop	{r3, pc}
 80a2220:	080601b8 	.word	0x080601b8

080a2224 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a2224:	b508      	push	{r3, lr}
 80a2226:	4b02      	ldr	r3, [pc, #8]	; (80a2230 <os_mutex_recursive_create+0xc>)
 80a2228:	681b      	ldr	r3, [r3, #0]
 80a222a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a222c:	9301      	str	r3, [sp, #4]
 80a222e:	bd08      	pop	{r3, pc}
 80a2230:	080601d0 	.word	0x080601d0

080a2234 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a2234:	b508      	push	{r3, lr}
 80a2236:	4b02      	ldr	r3, [pc, #8]	; (80a2240 <os_mutex_recursive_destroy+0xc>)
 80a2238:	681b      	ldr	r3, [r3, #0]
 80a223a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a223c:	9301      	str	r3, [sp, #4]
 80a223e:	bd08      	pop	{r3, pc}
 80a2240:	080601d0 	.word	0x080601d0

080a2244 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80a2244:	b508      	push	{r3, lr}
 80a2246:	4b02      	ldr	r3, [pc, #8]	; (80a2250 <hal_usart_init+0xc>)
 80a2248:	681b      	ldr	r3, [r3, #0]
 80a224a:	699b      	ldr	r3, [r3, #24]
 80a224c:	9301      	str	r3, [sp, #4]
 80a224e:	bd08      	pop	{r3, pc}
 80a2250:	080601c4 	.word	0x080601c4

080a2254 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a2254:	b508      	push	{r3, lr}
 80a2256:	4b02      	ldr	r3, [pc, #8]	; (80a2260 <hal_usart_write+0xc>)
 80a2258:	681b      	ldr	r3, [r3, #0]
 80a225a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a225c:	9301      	str	r3, [sp, #4]
 80a225e:	bd08      	pop	{r3, pc}
 80a2260:	080601c4 	.word	0x080601c4

080a2264 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a2264:	b508      	push	{r3, lr}
 80a2266:	4b02      	ldr	r3, [pc, #8]	; (80a2270 <hal_usart_available+0xc>)
 80a2268:	681b      	ldr	r3, [r3, #0]
 80a226a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a226c:	9301      	str	r3, [sp, #4]
 80a226e:	bd08      	pop	{r3, pc}
 80a2270:	080601c4 	.word	0x080601c4

080a2274 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a2274:	b508      	push	{r3, lr}
 80a2276:	4b02      	ldr	r3, [pc, #8]	; (80a2280 <hal_usart_read+0xc>)
 80a2278:	681b      	ldr	r3, [r3, #0]
 80a227a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a227c:	9301      	str	r3, [sp, #4]
 80a227e:	bd08      	pop	{r3, pc}
 80a2280:	080601c4 	.word	0x080601c4

080a2284 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a2284:	b508      	push	{r3, lr}
 80a2286:	4b02      	ldr	r3, [pc, #8]	; (80a2290 <hal_usart_peek+0xc>)
 80a2288:	681b      	ldr	r3, [r3, #0]
 80a228a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a228c:	9301      	str	r3, [sp, #4]
 80a228e:	bd08      	pop	{r3, pc}
 80a2290:	080601c4 	.word	0x080601c4

080a2294 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a2294:	b508      	push	{r3, lr}
 80a2296:	4b02      	ldr	r3, [pc, #8]	; (80a22a0 <hal_usart_flush+0xc>)
 80a2298:	681b      	ldr	r3, [r3, #0]
 80a229a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a229c:	9301      	str	r3, [sp, #4]
 80a229e:	bd08      	pop	{r3, pc}
 80a22a0:	080601c4 	.word	0x080601c4

080a22a4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a22a4:	b508      	push	{r3, lr}
 80a22a6:	4b02      	ldr	r3, [pc, #8]	; (80a22b0 <hal_usart_is_enabled+0xc>)
 80a22a8:	681b      	ldr	r3, [r3, #0]
 80a22aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a22ac:	9301      	str	r3, [sp, #4]
 80a22ae:	bd08      	pop	{r3, pc}
 80a22b0:	080601c4 	.word	0x080601c4

080a22b4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a22b4:	b508      	push	{r3, lr}
 80a22b6:	4b02      	ldr	r3, [pc, #8]	; (80a22c0 <hal_usart_available_data_for_write+0xc>)
 80a22b8:	681b      	ldr	r3, [r3, #0]
 80a22ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a22bc:	9301      	str	r3, [sp, #4]
 80a22be:	bd08      	pop	{r3, pc}
 80a22c0:	080601c4 	.word	0x080601c4

080a22c4 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a22c4:	b508      	push	{r3, lr}
 80a22c6:	4b02      	ldr	r3, [pc, #8]	; (80a22d0 <hal_i2c_write+0xc>)
 80a22c8:	681b      	ldr	r3, [r3, #0]
 80a22ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a22cc:	9301      	str	r3, [sp, #4]
 80a22ce:	bd08      	pop	{r3, pc}
 80a22d0:	080601ac 	.word	0x080601ac

080a22d4 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a22d4:	b508      	push	{r3, lr}
 80a22d6:	4b02      	ldr	r3, [pc, #8]	; (80a22e0 <hal_i2c_available+0xc>)
 80a22d8:	681b      	ldr	r3, [r3, #0]
 80a22da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a22dc:	9301      	str	r3, [sp, #4]
 80a22de:	bd08      	pop	{r3, pc}
 80a22e0:	080601ac 	.word	0x080601ac

080a22e4 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a22e4:	b508      	push	{r3, lr}
 80a22e6:	4b02      	ldr	r3, [pc, #8]	; (80a22f0 <hal_i2c_read+0xc>)
 80a22e8:	681b      	ldr	r3, [r3, #0]
 80a22ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a22ec:	9301      	str	r3, [sp, #4]
 80a22ee:	bd08      	pop	{r3, pc}
 80a22f0:	080601ac 	.word	0x080601ac

080a22f4 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a22f4:	b508      	push	{r3, lr}
 80a22f6:	4b02      	ldr	r3, [pc, #8]	; (80a2300 <hal_i2c_peek+0xc>)
 80a22f8:	681b      	ldr	r3, [r3, #0]
 80a22fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a22fc:	9301      	str	r3, [sp, #4]
 80a22fe:	bd08      	pop	{r3, pc}
 80a2300:	080601ac 	.word	0x080601ac

080a2304 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a2304:	b508      	push	{r3, lr}
 80a2306:	4b02      	ldr	r3, [pc, #8]	; (80a2310 <hal_i2c_flush+0xc>)
 80a2308:	681b      	ldr	r3, [r3, #0]
 80a230a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a230c:	9301      	str	r3, [sp, #4]
 80a230e:	bd08      	pop	{r3, pc}
 80a2310:	080601ac 	.word	0x080601ac

080a2314 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a2314:	b508      	push	{r3, lr}
 80a2316:	4b02      	ldr	r3, [pc, #8]	; (80a2320 <hal_i2c_is_enabled+0xc>)
 80a2318:	681b      	ldr	r3, [r3, #0]
 80a231a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a231c:	9301      	str	r3, [sp, #4]
 80a231e:	bd08      	pop	{r3, pc}
 80a2320:	080601ac 	.word	0x080601ac

080a2324 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a2324:	b508      	push	{r3, lr}
 80a2326:	4b03      	ldr	r3, [pc, #12]	; (80a2334 <hal_i2c_init+0x10>)
 80a2328:	681b      	ldr	r3, [r3, #0]
 80a232a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a232e:	9301      	str	r3, [sp, #4]
 80a2330:	bd08      	pop	{r3, pc}
 80a2332:	0000      	.short	0x0000
 80a2334:	080601ac 	.word	0x080601ac

080a2338 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a2338:	b508      	push	{r3, lr}
 80a233a:	4b02      	ldr	r3, [pc, #8]	; (80a2344 <hal_spi_init+0xc>)
 80a233c:	681b      	ldr	r3, [r3, #0]
 80a233e:	69db      	ldr	r3, [r3, #28]
 80a2340:	9301      	str	r3, [sp, #4]
 80a2342:	bd08      	pop	{r3, pc}
 80a2344:	080601b4 	.word	0x080601b4

080a2348 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a2348:	b508      	push	{r3, lr}
 80a234a:	4b02      	ldr	r3, [pc, #8]	; (80a2354 <hal_spi_is_enabled+0xc>)
 80a234c:	681b      	ldr	r3, [r3, #0]
 80a234e:	6a1b      	ldr	r3, [r3, #32]
 80a2350:	9301      	str	r3, [sp, #4]
 80a2352:	bd08      	pop	{r3, pc}
 80a2354:	080601b4 	.word	0x080601b4

080a2358 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a2358:	b508      	push	{r3, lr}
 80a235a:	4b02      	ldr	r3, [pc, #8]	; (80a2364 <HAL_USB_USART_Init+0xc>)
 80a235c:	681b      	ldr	r3, [r3, #0]
 80a235e:	681b      	ldr	r3, [r3, #0]
 80a2360:	9301      	str	r3, [sp, #4]
 80a2362:	bd08      	pop	{r3, pc}
 80a2364:	080601d8 	.word	0x080601d8

080a2368 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a2368:	b508      	push	{r3, lr}
 80a236a:	4b02      	ldr	r3, [pc, #8]	; (80a2374 <HAL_USB_USART_Available_Data+0xc>)
 80a236c:	681b      	ldr	r3, [r3, #0]
 80a236e:	691b      	ldr	r3, [r3, #16]
 80a2370:	9301      	str	r3, [sp, #4]
 80a2372:	bd08      	pop	{r3, pc}
 80a2374:	080601d8 	.word	0x080601d8

080a2378 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a2378:	b508      	push	{r3, lr}
 80a237a:	4b02      	ldr	r3, [pc, #8]	; (80a2384 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a237c:	681b      	ldr	r3, [r3, #0]
 80a237e:	695b      	ldr	r3, [r3, #20]
 80a2380:	9301      	str	r3, [sp, #4]
 80a2382:	bd08      	pop	{r3, pc}
 80a2384:	080601d8 	.word	0x080601d8

080a2388 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a2388:	b508      	push	{r3, lr}
 80a238a:	4b02      	ldr	r3, [pc, #8]	; (80a2394 <HAL_USB_USART_Receive_Data+0xc>)
 80a238c:	681b      	ldr	r3, [r3, #0]
 80a238e:	699b      	ldr	r3, [r3, #24]
 80a2390:	9301      	str	r3, [sp, #4]
 80a2392:	bd08      	pop	{r3, pc}
 80a2394:	080601d8 	.word	0x080601d8

080a2398 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a2398:	b508      	push	{r3, lr}
 80a239a:	4b02      	ldr	r3, [pc, #8]	; (80a23a4 <HAL_USB_USART_Send_Data+0xc>)
 80a239c:	681b      	ldr	r3, [r3, #0]
 80a239e:	69db      	ldr	r3, [r3, #28]
 80a23a0:	9301      	str	r3, [sp, #4]
 80a23a2:	bd08      	pop	{r3, pc}
 80a23a4:	080601d8 	.word	0x080601d8

080a23a8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a23a8:	b508      	push	{r3, lr}
 80a23aa:	4b02      	ldr	r3, [pc, #8]	; (80a23b4 <HAL_USB_USART_Flush_Data+0xc>)
 80a23ac:	681b      	ldr	r3, [r3, #0]
 80a23ae:	6a1b      	ldr	r3, [r3, #32]
 80a23b0:	9301      	str	r3, [sp, #4]
 80a23b2:	bd08      	pop	{r3, pc}
 80a23b4:	080601d8 	.word	0x080601d8

080a23b8 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a23b8:	b508      	push	{r3, lr}
 80a23ba:	4b02      	ldr	r3, [pc, #8]	; (80a23c4 <inet_gethostbyname+0xc>)
 80a23bc:	681b      	ldr	r3, [r3, #0]
 80a23be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a23c0:	9301      	str	r3, [sp, #4]
 80a23c2:	bd08      	pop	{r3, pc}
 80a23c4:	080601c0 	.word	0x080601c0

080a23c8 <wlan_select_antenna>:
DYNALIB_FN(19, hal_wlan, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(20, hal_wlan, wlan_select_antenna, int(WLanSelectAntenna_TypeDef))
 80a23c8:	b508      	push	{r3, lr}
 80a23ca:	4b02      	ldr	r3, [pc, #8]	; (80a23d4 <wlan_select_antenna+0xc>)
 80a23cc:	681b      	ldr	r3, [r3, #0]
 80a23ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80a23d0:	9301      	str	r3, [sp, #4]
 80a23d2:	bd08      	pop	{r3, pc}
 80a23d4:	080601c0 	.word	0x080601c0

080a23d8 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80a23d8:	b508      	push	{r3, lr}
 80a23da:	4b02      	ldr	r3, [pc, #8]	; (80a23e4 <system_mode+0xc>)
 80a23dc:	681b      	ldr	r3, [r3, #0]
 80a23de:	681b      	ldr	r3, [r3, #0]
 80a23e0:	9301      	str	r3, [sp, #4]
 80a23e2:	bd08      	pop	{r3, pc}
 80a23e4:	080601a4 	.word	0x080601a4

080a23e8 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a23e8:	b508      	push	{r3, lr}
 80a23ea:	4b02      	ldr	r3, [pc, #8]	; (80a23f4 <set_system_mode+0xc>)
 80a23ec:	681b      	ldr	r3, [r3, #0]
 80a23ee:	685b      	ldr	r3, [r3, #4]
 80a23f0:	9301      	str	r3, [sp, #4]
 80a23f2:	bd08      	pop	{r3, pc}
 80a23f4:	080601a4 	.word	0x080601a4

080a23f8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a23f8:	b508      	push	{r3, lr}
 80a23fa:	4b02      	ldr	r3, [pc, #8]	; (80a2404 <system_delay_ms+0xc>)
 80a23fc:	681b      	ldr	r3, [r3, #0]
 80a23fe:	695b      	ldr	r3, [r3, #20]
 80a2400:	9301      	str	r3, [sp, #4]
 80a2402:	bd08      	pop	{r3, pc}
 80a2404:	080601a4 	.word	0x080601a4

080a2408 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a2408:	b508      	push	{r3, lr}
 80a240a:	4b02      	ldr	r3, [pc, #8]	; (80a2414 <application_thread_current+0xc>)
 80a240c:	681b      	ldr	r3, [r3, #0]
 80a240e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a2410:	9301      	str	r3, [sp, #4]
 80a2412:	bd08      	pop	{r3, pc}
 80a2414:	080601a4 	.word	0x080601a4

080a2418 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a2418:	b508      	push	{r3, lr}
 80a241a:	4b02      	ldr	r3, [pc, #8]	; (80a2424 <application_thread_invoke+0xc>)
 80a241c:	681b      	ldr	r3, [r3, #0]
 80a241e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a2420:	9301      	str	r3, [sp, #4]
 80a2422:	bd08      	pop	{r3, pc}
 80a2424:	080601a4 	.word	0x080601a4

080a2428 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80a2428:	b508      	push	{r3, lr}
 80a242a:	4b02      	ldr	r3, [pc, #8]	; (80a2434 <system_thread_get_state+0xc>)
 80a242c:	681b      	ldr	r3, [r3, #0]
 80a242e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a2430:	9301      	str	r3, [sp, #4]
 80a2432:	bd08      	pop	{r3, pc}
 80a2434:	080601a4 	.word	0x080601a4

080a2438 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a2438:	b508      	push	{r3, lr}
 80a243a:	4b03      	ldr	r3, [pc, #12]	; (80a2448 <system_ctrl_set_app_request_handler+0x10>)
 80a243c:	681b      	ldr	r3, [r3, #0]
 80a243e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a2442:	9301      	str	r3, [sp, #4]
 80a2444:	bd08      	pop	{r3, pc}
 80a2446:	0000      	.short	0x0000
 80a2448:	080601a4 	.word	0x080601a4

080a244c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a244c:	b508      	push	{r3, lr}
 80a244e:	4b03      	ldr	r3, [pc, #12]	; (80a245c <system_ctrl_set_result+0x10>)
 80a2450:	681b      	ldr	r3, [r3, #0]
 80a2452:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a2456:	9301      	str	r3, [sp, #4]
 80a2458:	bd08      	pop	{r3, pc}
 80a245a:	0000      	.short	0x0000
 80a245c:	080601a4 	.word	0x080601a4

080a2460 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a2460:	b508      	push	{r3, lr}
 80a2462:	4b02      	ldr	r3, [pc, #8]	; (80a246c <network_connect+0xc>)
 80a2464:	681b      	ldr	r3, [r3, #0]
 80a2466:	685b      	ldr	r3, [r3, #4]
 80a2468:	9301      	str	r3, [sp, #4]
 80a246a:	bd08      	pop	{r3, pc}
 80a246c:	080601c8 	.word	0x080601c8

080a2470 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a2470:	b508      	push	{r3, lr}
 80a2472:	4b02      	ldr	r3, [pc, #8]	; (80a247c <network_connecting+0xc>)
 80a2474:	681b      	ldr	r3, [r3, #0]
 80a2476:	689b      	ldr	r3, [r3, #8]
 80a2478:	9301      	str	r3, [sp, #4]
 80a247a:	bd08      	pop	{r3, pc}
 80a247c:	080601c8 	.word	0x080601c8

080a2480 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a2480:	b508      	push	{r3, lr}
 80a2482:	4b02      	ldr	r3, [pc, #8]	; (80a248c <network_disconnect+0xc>)
 80a2484:	681b      	ldr	r3, [r3, #0]
 80a2486:	68db      	ldr	r3, [r3, #12]
 80a2488:	9301      	str	r3, [sp, #4]
 80a248a:	bd08      	pop	{r3, pc}
 80a248c:	080601c8 	.word	0x080601c8

080a2490 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a2490:	b508      	push	{r3, lr}
 80a2492:	4b02      	ldr	r3, [pc, #8]	; (80a249c <network_ready+0xc>)
 80a2494:	681b      	ldr	r3, [r3, #0]
 80a2496:	691b      	ldr	r3, [r3, #16]
 80a2498:	9301      	str	r3, [sp, #4]
 80a249a:	bd08      	pop	{r3, pc}
 80a249c:	080601c8 	.word	0x080601c8

080a24a0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a24a0:	b508      	push	{r3, lr}
 80a24a2:	4b02      	ldr	r3, [pc, #8]	; (80a24ac <network_on+0xc>)
 80a24a4:	681b      	ldr	r3, [r3, #0]
 80a24a6:	695b      	ldr	r3, [r3, #20]
 80a24a8:	9301      	str	r3, [sp, #4]
 80a24aa:	bd08      	pop	{r3, pc}
 80a24ac:	080601c8 	.word	0x080601c8

080a24b0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a24b0:	b508      	push	{r3, lr}
 80a24b2:	4b02      	ldr	r3, [pc, #8]	; (80a24bc <network_off+0xc>)
 80a24b4:	681b      	ldr	r3, [r3, #0]
 80a24b6:	699b      	ldr	r3, [r3, #24]
 80a24b8:	9301      	str	r3, [sp, #4]
 80a24ba:	bd08      	pop	{r3, pc}
 80a24bc:	080601c8 	.word	0x080601c8

080a24c0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a24c0:	b508      	push	{r3, lr}
 80a24c2:	4b02      	ldr	r3, [pc, #8]	; (80a24cc <network_listen+0xc>)
 80a24c4:	681b      	ldr	r3, [r3, #0]
 80a24c6:	69db      	ldr	r3, [r3, #28]
 80a24c8:	9301      	str	r3, [sp, #4]
 80a24ca:	bd08      	pop	{r3, pc}
 80a24cc:	080601c8 	.word	0x080601c8

080a24d0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a24d0:	b508      	push	{r3, lr}
 80a24d2:	4b02      	ldr	r3, [pc, #8]	; (80a24dc <network_listening+0xc>)
 80a24d4:	681b      	ldr	r3, [r3, #0]
 80a24d6:	6a1b      	ldr	r3, [r3, #32]
 80a24d8:	9301      	str	r3, [sp, #4]
 80a24da:	bd08      	pop	{r3, pc}
 80a24dc:	080601c8 	.word	0x080601c8

080a24e0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a24e0:	b508      	push	{r3, lr}
 80a24e2:	4b02      	ldr	r3, [pc, #8]	; (80a24ec <network_set_listen_timeout+0xc>)
 80a24e4:	681b      	ldr	r3, [r3, #0]
 80a24e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a24e8:	9301      	str	r3, [sp, #4]
 80a24ea:	bd08      	pop	{r3, pc}
 80a24ec:	080601c8 	.word	0x080601c8

080a24f0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a24f0:	b508      	push	{r3, lr}
 80a24f2:	4b02      	ldr	r3, [pc, #8]	; (80a24fc <network_get_listen_timeout+0xc>)
 80a24f4:	681b      	ldr	r3, [r3, #0]
 80a24f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a24f8:	9301      	str	r3, [sp, #4]
 80a24fa:	bd08      	pop	{r3, pc}
 80a24fc:	080601c8 	.word	0x080601c8

080a2500 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a2500:	b508      	push	{r3, lr}
 80a2502:	4b02      	ldr	r3, [pc, #8]	; (80a250c <network_is_on+0xc>)
 80a2504:	681b      	ldr	r3, [r3, #0]
 80a2506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a2508:	9301      	str	r3, [sp, #4]
 80a250a:	bd08      	pop	{r3, pc}
 80a250c:	080601c8 	.word	0x080601c8

080a2510 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a2510:	b508      	push	{r3, lr}
 80a2512:	4b02      	ldr	r3, [pc, #8]	; (80a251c <network_is_off+0xc>)
 80a2514:	681b      	ldr	r3, [r3, #0]
 80a2516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a2518:	9301      	str	r3, [sp, #4]
 80a251a:	bd08      	pop	{r3, pc}
 80a251c:	080601c8 	.word	0x080601c8

080a2520 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 80a2520:	b508      	push	{r3, lr}
 80a2522:	4b02      	ldr	r3, [pc, #8]	; (80a252c <spark_variable+0xc>)
 80a2524:	681b      	ldr	r3, [r3, #0]
 80a2526:	681b      	ldr	r3, [r3, #0]
 80a2528:	9301      	str	r3, [sp, #4]
 80a252a:	bd08      	pop	{r3, pc}
 80a252c:	080601cc 	.word	0x080601cc

080a2530 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 80a2530:	b508      	push	{r3, lr}
 80a2532:	4b02      	ldr	r3, [pc, #8]	; (80a253c <spark_function+0xc>)
 80a2534:	681b      	ldr	r3, [r3, #0]
 80a2536:	685b      	ldr	r3, [r3, #4]
 80a2538:	9301      	str	r3, [sp, #4]
 80a253a:	bd08      	pop	{r3, pc}
 80a253c:	080601cc 	.word	0x080601cc

080a2540 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a2540:	b508      	push	{r3, lr}
 80a2542:	4b02      	ldr	r3, [pc, #8]	; (80a254c <spark_process+0xc>)
 80a2544:	681b      	ldr	r3, [r3, #0]
 80a2546:	689b      	ldr	r3, [r3, #8]
 80a2548:	9301      	str	r3, [sp, #4]
 80a254a:	bd08      	pop	{r3, pc}
 80a254c:	080601cc 	.word	0x080601cc

080a2550 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a2550:	b508      	push	{r3, lr}
 80a2552:	4b02      	ldr	r3, [pc, #8]	; (80a255c <spark_cloud_flag_connected+0xc>)
 80a2554:	681b      	ldr	r3, [r3, #0]
 80a2556:	695b      	ldr	r3, [r3, #20]
 80a2558:	9301      	str	r3, [sp, #4]
 80a255a:	bd08      	pop	{r3, pc}
 80a255c:	080601cc 	.word	0x080601cc

080a2560 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
 80a2560:	b508      	push	{r3, lr}
 80a2562:	4b02      	ldr	r3, [pc, #8]	; (80a256c <spark_deviceID+0xc>)
 80a2564:	681b      	ldr	r3, [r3, #0]
 80a2566:	69db      	ldr	r3, [r3, #28]
 80a2568:	9301      	str	r3, [sp, #4]
 80a256a:	bd08      	pop	{r3, pc}
 80a256c:	080601cc 	.word	0x080601cc

080a2570 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a2570:	b508      	push	{r3, lr}
 80a2572:	4b02      	ldr	r3, [pc, #8]	; (80a257c <spark_send_event+0xc>)
 80a2574:	681b      	ldr	r3, [r3, #0]
 80a2576:	6a1b      	ldr	r3, [r3, #32]
 80a2578:	9301      	str	r3, [sp, #4]
 80a257a:	bd08      	pop	{r3, pc}
 80a257c:	080601cc 	.word	0x080601cc

080a2580 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
 80a2580:	b508      	push	{r3, lr}
 80a2582:	4b02      	ldr	r3, [pc, #8]	; (80a258c <spark_subscribe+0xc>)
 80a2584:	681b      	ldr	r3, [r3, #0]
 80a2586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a2588:	9301      	str	r3, [sp, #4]
 80a258a:	bd08      	pop	{r3, pc}
 80a258c:	080601cc 	.word	0x080601cc

080a2590 <spark_unsubscribe>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
 80a2590:	b508      	push	{r3, lr}
 80a2592:	4b02      	ldr	r3, [pc, #8]	; (80a259c <spark_unsubscribe+0xc>)
 80a2594:	681b      	ldr	r3, [r3, #0]
 80a2596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a2598:	9301      	str	r3, [sp, #4]
 80a259a:	bd08      	pop	{r3, pc}
 80a259c:	080601cc 	.word	0x080601cc

080a25a0 <spark_sync_time_pending>:
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 80a25a0:	b508      	push	{r3, lr}
 80a25a2:	4b02      	ldr	r3, [pc, #8]	; (80a25ac <spark_sync_time_pending+0xc>)
 80a25a4:	681b      	ldr	r3, [r3, #0]
 80a25a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a25a8:	9301      	str	r3, [sp, #4]
 80a25aa:	bd08      	pop	{r3, pc}
 80a25ac:	080601cc 	.word	0x080601cc

080a25b0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a25b0:	b508      	push	{r3, lr}
 80a25b2:	4b02      	ldr	r3, [pc, #8]	; (80a25bc <spark_set_random_seed_from_cloud_handler+0xc>)
 80a25b4:	681b      	ldr	r3, [r3, #0]
 80a25b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a25b8:	9301      	str	r3, [sp, #4]
 80a25ba:	bd08      	pop	{r3, pc}
 80a25bc:	080601cc 	.word	0x080601cc

080a25c0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a25c0:	b508      	push	{r3, lr}
 80a25c2:	4b02      	ldr	r3, [pc, #8]	; (80a25cc <malloc+0xc>)
 80a25c4:	681b      	ldr	r3, [r3, #0]
 80a25c6:	681b      	ldr	r3, [r3, #0]
 80a25c8:	9301      	str	r3, [sp, #4]
 80a25ca:	bd08      	pop	{r3, pc}
 80a25cc:	080601a0 	.word	0x080601a0

080a25d0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a25d0:	b508      	push	{r3, lr}
 80a25d2:	4b02      	ldr	r3, [pc, #8]	; (80a25dc <free+0xc>)
 80a25d4:	681b      	ldr	r3, [r3, #0]
 80a25d6:	685b      	ldr	r3, [r3, #4]
 80a25d8:	9301      	str	r3, [sp, #4]
 80a25da:	bd08      	pop	{r3, pc}
 80a25dc:	080601a0 	.word	0x080601a0

080a25e0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a25e0:	b508      	push	{r3, lr}
 80a25e2:	4b02      	ldr	r3, [pc, #8]	; (80a25ec <realloc+0xc>)
 80a25e4:	681b      	ldr	r3, [r3, #0]
 80a25e6:	689b      	ldr	r3, [r3, #8]
 80a25e8:	9301      	str	r3, [sp, #4]
 80a25ea:	bd08      	pop	{r3, pc}
 80a25ec:	080601a0 	.word	0x080601a0

080a25f0 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
 80a25f0:	b508      	push	{r3, lr}
 80a25f2:	4b02      	ldr	r3, [pc, #8]	; (80a25fc <sprintf+0xc>)
 80a25f4:	681b      	ldr	r3, [r3, #0]
 80a25f6:	68db      	ldr	r3, [r3, #12]
 80a25f8:	9301      	str	r3, [sp, #4]
 80a25fa:	bd08      	pop	{r3, pc}
 80a25fc:	080601a0 	.word	0x080601a0

080a2600 <siprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 80a2600:	b508      	push	{r3, lr}
 80a2602:	4b02      	ldr	r3, [pc, #8]	; (80a260c <siprintf+0xc>)
 80a2604:	681b      	ldr	r3, [r3, #0]
 80a2606:	691b      	ldr	r3, [r3, #16]
 80a2608:	9301      	str	r3, [sp, #4]
 80a260a:	bd08      	pop	{r3, pc}
 80a260c:	080601a0 	.word	0x080601a0

080a2610 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 80a2610:	b508      	push	{r3, lr}
 80a2612:	4b02      	ldr	r3, [pc, #8]	; (80a261c <siscanf+0xc>)
 80a2614:	681b      	ldr	r3, [r3, #0]
 80a2616:	699b      	ldr	r3, [r3, #24]
 80a2618:	9301      	str	r3, [sp, #4]
 80a261a:	bd08      	pop	{r3, pc}
 80a261c:	080601a0 	.word	0x080601a0

080a2620 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 80a2620:	b508      	push	{r3, lr}
 80a2622:	4b02      	ldr	r3, [pc, #8]	; (80a262c <snprintf+0xc>)
 80a2624:	681b      	ldr	r3, [r3, #0]
 80a2626:	69db      	ldr	r3, [r3, #28]
 80a2628:	9301      	str	r3, [sp, #4]
 80a262a:	bd08      	pop	{r3, pc}
 80a262c:	080601a0 	.word	0x080601a0

080a2630 <sniprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
 80a2630:	b508      	push	{r3, lr}
 80a2632:	4b02      	ldr	r3, [pc, #8]	; (80a263c <sniprintf+0xc>)
 80a2634:	681b      	ldr	r3, [r3, #0]
 80a2636:	6a1b      	ldr	r3, [r3, #32]
 80a2638:	9301      	str	r3, [sp, #4]
 80a263a:	bd08      	pop	{r3, pc}
 80a263c:	080601a0 	.word	0x080601a0

080a2640 <vsnprintf>:
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a2640:	b508      	push	{r3, lr}
 80a2642:	4b02      	ldr	r3, [pc, #8]	; (80a264c <vsnprintf+0xc>)
 80a2644:	681b      	ldr	r3, [r3, #0]
 80a2646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a2648:	9301      	str	r3, [sp, #4]
 80a264a:	bd08      	pop	{r3, pc}
 80a264c:	080601a0 	.word	0x080601a0

080a2650 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a2650:	b508      	push	{r3, lr}
 80a2652:	4b02      	ldr	r3, [pc, #8]	; (80a265c <abort+0xc>)
 80a2654:	681b      	ldr	r3, [r3, #0]
 80a2656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a2658:	9301      	str	r3, [sp, #4]
 80a265a:	bd08      	pop	{r3, pc}
 80a265c:	080601a0 	.word	0x080601a0

080a2660 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a2660:	b508      	push	{r3, lr}
 80a2662:	4b02      	ldr	r3, [pc, #8]	; (80a266c <_malloc_r+0xc>)
 80a2664:	681b      	ldr	r3, [r3, #0]
 80a2666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2668:	9301      	str	r3, [sp, #4]
 80a266a:	bd08      	pop	{r3, pc}
 80a266c:	080601a0 	.word	0x080601a0

080a2670 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a2670:	b508      	push	{r3, lr}
 80a2672:	4b02      	ldr	r3, [pc, #8]	; (80a267c <newlib_impure_ptr_callback+0xc>)
 80a2674:	681b      	ldr	r3, [r3, #0]
 80a2676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a2678:	9301      	str	r3, [sp, #4]
 80a267a:	bd08      	pop	{r3, pc}
 80a267c:	080601a0 	.word	0x080601a0

080a2680 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a2680:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a2682:	2600      	movs	r6, #0
 80a2684:	4604      	mov	r4, r0
 80a2686:	460d      	mov	r5, r1
 80a2688:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a268c:	f7ff fdca 	bl	80a2224 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a2690:	4628      	mov	r0, r5
    _spi = spi;
 80a2692:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a2694:	f7ff fe50 	bl	80a2338 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a2698:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a269a:	6066      	str	r6, [r4, #4]
}
 80a269c:	bd70      	pop	{r4, r5, r6, pc}

080a269e <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80a269e:	b510      	push	{r4, lr}
 80a26a0:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a26a2:	6800      	ldr	r0, [r0, #0]
 80a26a4:	b118      	cbz	r0, 80a26ae <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
 80a26a6:	f7ff ff93 	bl	80a25d0 <free>
            wakeupSource_ = nullptr;
 80a26aa:	2300      	movs	r3, #0
 80a26ac:	6023      	str	r3, [r4, #0]
        }
    }
 80a26ae:	bd10      	pop	{r4, pc}

080a26b0 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a26b0:	b510      	push	{r4, lr}
 80a26b2:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
 80a26b4:	f7ff fff3 	bl	80a269e <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
 80a26b8:	4620      	mov	r0, r4
 80a26ba:	bd10      	pop	{r4, pc}

080a26bc <_ZN11SystemClass10freeMemoryEv>:
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
    return System.systemSleepResult_;
}

uint32_t SystemClass::freeMemory()
{
 80a26bc:	b510      	push	{r4, lr}
    runtime_info_t info;
    memset(&info, 0, sizeof(info));
 80a26be:	2420      	movs	r4, #32
{
 80a26c0:	b088      	sub	sp, #32
    memset(&info, 0, sizeof(info));
 80a26c2:	4622      	mov	r2, r4
 80a26c4:	2100      	movs	r1, #0
 80a26c6:	4668      	mov	r0, sp
 80a26c8:	f002 fce2 	bl	80a5090 <memset>
    info.size = sizeof(info);
    HAL_Core_Runtime_Info(&info, NULL);
 80a26cc:	2100      	movs	r1, #0
 80a26ce:	4668      	mov	r0, sp
    info.size = sizeof(info);
 80a26d0:	f8ad 4000 	strh.w	r4, [sp]
    HAL_Core_Runtime_Info(&info, NULL);
 80a26d4:	f7ff fd9e 	bl	80a2214 <HAL_Core_Runtime_Info>
    return info.freeheap;
}
 80a26d8:	9801      	ldr	r0, [sp, #4]
 80a26da:	b008      	add	sp, #32
 80a26dc:	bd10      	pop	{r4, pc}
	...

080a26e0 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a26e0:	2202      	movs	r2, #2
              error_(SYSTEM_ERROR_NONE) {
 80a26e2:	2000      	movs	r0, #0
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a26e4:	b510      	push	{r4, lr}
 80a26e6:	4b08      	ldr	r3, [pc, #32]	; (80a2708 <_GLOBAL__sub_I_System+0x28>)
 80a26e8:	4c08      	ldr	r4, [pc, #32]	; (80a270c <_GLOBAL__sub_I_System+0x2c>)
 80a26ea:	601a      	str	r2, [r3, #0]
    SleepResult() {}
 80a26ec:	4b08      	ldr	r3, [pc, #32]	; (80a2710 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
 80a26ee:	6020      	str	r0, [r4, #0]
 80a26f0:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
 80a26f2:	71a0      	strb	r0, [r4, #6]
 80a26f4:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a26f6:	f7ff fe77 	bl	80a23e8 <set_system_mode>
SystemClass System;
 80a26fa:	4620      	mov	r0, r4
 80a26fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
 80a2700:	4a04      	ldr	r2, [pc, #16]	; (80a2714 <_GLOBAL__sub_I_System+0x34>)
 80a2702:	4905      	ldr	r1, [pc, #20]	; (80a2718 <_GLOBAL__sub_I_System+0x38>)
 80a2704:	f001 bb22 	b.w	80a3d4c <__aeabi_atexit>
 80a2708:	200003d0 	.word	0x200003d0
 80a270c:	200003c4 	.word	0x200003c4
 80a2710:	ffff0000 	.word	0xffff0000
 80a2714:	20000240 	.word	0x20000240
 80a2718:	080a26b1 	.word	0x080a26b1

080a271c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a271c:	b510      	push	{r4, lr}
 80a271e:	4604      	mov	r4, r0
{
	free(buffer);
 80a2720:	6800      	ldr	r0, [r0, #0]
 80a2722:	f7ff ff55 	bl	80a25d0 <free>
}
 80a2726:	4620      	mov	r0, r4
 80a2728:	bd10      	pop	{r4, pc}

080a272a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a272a:	b510      	push	{r4, lr}
 80a272c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a272e:	6800      	ldr	r0, [r0, #0]
 80a2730:	b108      	cbz	r0, 80a2736 <_ZN6String10invalidateEv+0xc>
 80a2732:	f7ff ff4d 	bl	80a25d0 <free>
	buffer = NULL;
 80a2736:	2300      	movs	r3, #0
	capacity = len = 0;
 80a2738:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 80a273c:	6023      	str	r3, [r4, #0]
}
 80a273e:	bd10      	pop	{r4, pc}

080a2740 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a2740:	b538      	push	{r3, r4, r5, lr}
 80a2742:	4604      	mov	r4, r0
 80a2744:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a2746:	6800      	ldr	r0, [r0, #0]
 80a2748:	3101      	adds	r1, #1
 80a274a:	f7ff ff49 	bl	80a25e0 <realloc>
	if (newbuffer) {
 80a274e:	b110      	cbz	r0, 80a2756 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a2750:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80a2754:	2001      	movs	r0, #1
	}
	return 0;
}
 80a2756:	bd38      	pop	{r3, r4, r5, pc}

080a2758 <_ZN6String7reserveEj>:
{
 80a2758:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a275a:	6803      	ldr	r3, [r0, #0]
{
 80a275c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a275e:	b123      	cbz	r3, 80a276a <_ZN6String7reserveEj+0x12>
 80a2760:	6843      	ldr	r3, [r0, #4]
 80a2762:	428b      	cmp	r3, r1
 80a2764:	d301      	bcc.n	80a276a <_ZN6String7reserveEj+0x12>
 80a2766:	2001      	movs	r0, #1
}
 80a2768:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80a276a:	4620      	mov	r0, r4
 80a276c:	f7ff ffe8 	bl	80a2740 <_ZN6String12changeBufferEj>
 80a2770:	2800      	cmp	r0, #0
 80a2772:	d0f9      	beq.n	80a2768 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80a2774:	68a3      	ldr	r3, [r4, #8]
 80a2776:	2b00      	cmp	r3, #0
 80a2778:	d1f5      	bne.n	80a2766 <_ZN6String7reserveEj+0xe>
 80a277a:	6822      	ldr	r2, [r4, #0]
 80a277c:	7013      	strb	r3, [r2, #0]
 80a277e:	e7f2      	b.n	80a2766 <_ZN6String7reserveEj+0xe>

080a2780 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a2780:	b570      	push	{r4, r5, r6, lr}
 80a2782:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a2784:	4611      	mov	r1, r2
{
 80a2786:	4604      	mov	r4, r0
 80a2788:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a278a:	f7ff ffe5 	bl	80a2758 <_ZN6String7reserveEj>
 80a278e:	b920      	cbnz	r0, 80a279a <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 80a2790:	4620      	mov	r0, r4
 80a2792:	f7ff ffca 	bl	80a272a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 80a2796:	4620      	mov	r0, r4
 80a2798:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 80a279a:	462a      	mov	r2, r5
 80a279c:	4631      	mov	r1, r6
 80a279e:	6820      	ldr	r0, [r4, #0]
	len = length;
 80a27a0:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a27a2:	f002 fc67 	bl	80a5074 <memcpy>
	buffer[len] = 0;
 80a27a6:	2100      	movs	r1, #0
 80a27a8:	6822      	ldr	r2, [r4, #0]
 80a27aa:	68a3      	ldr	r3, [r4, #8]
 80a27ac:	54d1      	strb	r1, [r2, r3]
	return *this;
 80a27ae:	e7f2      	b.n	80a2796 <_ZN6String4copyEPKcj+0x16>

080a27b0 <_ZN6StringC1EPKc>:
String::String(const char *cstr)
 80a27b0:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 80a27b2:	2300      	movs	r3, #0
String::String(const char *cstr)
 80a27b4:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a27b6:	460d      	mov	r5, r1
	capacity = 0;
 80a27b8:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a27bc:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a27be:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 80a27c0:	b139      	cbz	r1, 80a27d2 <_ZN6StringC1EPKc+0x22>
 80a27c2:	4608      	mov	r0, r1
 80a27c4:	f003 fcae 	bl	80a6124 <strlen>
 80a27c8:	4629      	mov	r1, r5
 80a27ca:	4602      	mov	r2, r0
 80a27cc:	4620      	mov	r0, r4
 80a27ce:	f7ff ffd7 	bl	80a2780 <_ZN6String4copyEPKcj>
}
 80a27d2:	4620      	mov	r0, r4
 80a27d4:	bd38      	pop	{r3, r4, r5, pc}

080a27d6 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 80a27d6:	b538      	push	{r3, r4, r5, lr}
 80a27d8:	4605      	mov	r5, r0
	if (buffer) {
 80a27da:	6800      	ldr	r0, [r0, #0]
{
 80a27dc:	460c      	mov	r4, r1
	if (buffer) {
 80a27de:	b168      	cbz	r0, 80a27fc <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
 80a27e0:	686a      	ldr	r2, [r5, #4]
 80a27e2:	688b      	ldr	r3, [r1, #8]
 80a27e4:	429a      	cmp	r2, r3
 80a27e6:	d307      	bcc.n	80a27f8 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
 80a27e8:	6809      	ldr	r1, [r1, #0]
 80a27ea:	f002 ff14 	bl	80a5616 <strcpy>
			len = rhs.len;
 80a27ee:	68a3      	ldr	r3, [r4, #8]
 80a27f0:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 80a27f2:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 80a27f4:	60a3      	str	r3, [r4, #8]
}
 80a27f6:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 80a27f8:	f7ff feea 	bl	80a25d0 <free>
	buffer = rhs.buffer;
 80a27fc:	6823      	ldr	r3, [r4, #0]
 80a27fe:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 80a2800:	6863      	ldr	r3, [r4, #4]
 80a2802:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 80a2804:	68a3      	ldr	r3, [r4, #8]
 80a2806:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 80a2808:	2300      	movs	r3, #0
	rhs.capacity = 0;
 80a280a:	e9c4 3300 	strd	r3, r3, [r4]
 80a280e:	e7f1      	b.n	80a27f4 <_ZN6String4moveERS_+0x1e>

080a2810 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a2810:	4288      	cmp	r0, r1
{
 80a2812:	b510      	push	{r4, lr}
 80a2814:	460b      	mov	r3, r1
 80a2816:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a2818:	d004      	beq.n	80a2824 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a281a:	6809      	ldr	r1, [r1, #0]
 80a281c:	b121      	cbz	r1, 80a2828 <_ZN6StringaSERKS_+0x18>
 80a281e:	689a      	ldr	r2, [r3, #8]
 80a2820:	f7ff ffae 	bl	80a2780 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a2824:	4620      	mov	r0, r4
 80a2826:	bd10      	pop	{r4, pc}
	else invalidate();
 80a2828:	f7ff ff7f 	bl	80a272a <_ZN6String10invalidateEv>
 80a282c:	e7fa      	b.n	80a2824 <_ZN6StringaSERKS_+0x14>

080a282e <_ZN6StringC1ERKS_>:
	buffer = NULL;
 80a282e:	2300      	movs	r3, #0
String::String(const String &value)
 80a2830:	b510      	push	{r4, lr}
 80a2832:	4604      	mov	r4, r0
	capacity = 0;
 80a2834:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a2838:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a283a:	7303      	strb	r3, [r0, #12]
	*this = value;
 80a283c:	f7ff ffe8 	bl	80a2810 <_ZN6StringaSERKS_>
}
 80a2840:	4620      	mov	r0, r4
 80a2842:	bd10      	pop	{r4, pc}

080a2844 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
 80a2844:	4288      	cmp	r0, r1
{
 80a2846:	b510      	push	{r4, lr}
 80a2848:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
 80a284a:	d001      	beq.n	80a2850 <_ZN6StringaSEOS_+0xc>
 80a284c:	f7ff ffc3 	bl	80a27d6 <_ZN6String4moveERS_>
	return *this;
}
 80a2850:	4620      	mov	r0, r4
 80a2852:	bd10      	pop	{r4, pc}

080a2854 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a2854:	b538      	push	{r3, r4, r5, lr}
 80a2856:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a2858:	460c      	mov	r4, r1
 80a285a:	b149      	cbz	r1, 80a2870 <_ZN6StringaSEPKc+0x1c>
 80a285c:	4608      	mov	r0, r1
 80a285e:	f003 fc61 	bl	80a6124 <strlen>
 80a2862:	4621      	mov	r1, r4
 80a2864:	4602      	mov	r2, r0
 80a2866:	4628      	mov	r0, r5
 80a2868:	f7ff ff8a 	bl	80a2780 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a286c:	4628      	mov	r0, r5
 80a286e:	bd38      	pop	{r3, r4, r5, pc}
	else invalidate();
 80a2870:	f7ff ff5b 	bl	80a272a <_ZN6String10invalidateEv>
 80a2874:	e7fa      	b.n	80a286c <_ZN6StringaSEPKc+0x18>

080a2876 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 80a2876:	b570      	push	{r4, r5, r6, lr}
 80a2878:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 80a287a:	460e      	mov	r6, r1
 80a287c:	b909      	cbnz	r1, 80a2882 <_ZN6String6concatEPKcj+0xc>
 80a287e:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 80a2880:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 80a2882:	b16a      	cbz	r2, 80a28a0 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
 80a2884:	6884      	ldr	r4, [r0, #8]
 80a2886:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
 80a2888:	4621      	mov	r1, r4
 80a288a:	f7ff ff65 	bl	80a2758 <_ZN6String7reserveEj>
 80a288e:	2800      	cmp	r0, #0
 80a2890:	d0f5      	beq.n	80a287e <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 80a2892:	6828      	ldr	r0, [r5, #0]
 80a2894:	68ab      	ldr	r3, [r5, #8]
 80a2896:	4631      	mov	r1, r6
 80a2898:	4418      	add	r0, r3
 80a289a:	f002 febc 	bl	80a5616 <strcpy>
	len = newlen;
 80a289e:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
 80a28a0:	2001      	movs	r0, #1
 80a28a2:	e7ed      	b.n	80a2880 <_ZN6String6concatEPKcj+0xa>

080a28a4 <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
 80a28a4:	688a      	ldr	r2, [r1, #8]
 80a28a6:	6809      	ldr	r1, [r1, #0]
 80a28a8:	f7ff bfe5 	b.w	80a2876 <_ZN6String6concatEPKcj>

080a28ac <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
 80a28ac:	b538      	push	{r3, r4, r5, lr}
 80a28ae:	4605      	mov	r5, r0
	if (!cstr) return 0;
 80a28b0:	460c      	mov	r4, r1
	return concat(cstr, strlen(cstr));
}
 80a28b2:	4608      	mov	r0, r1
	if (!cstr) return 0;
 80a28b4:	b141      	cbz	r1, 80a28c8 <_ZN6String6concatEPKc+0x1c>
	return concat(cstr, strlen(cstr));
 80a28b6:	f003 fc35 	bl	80a6124 <strlen>
 80a28ba:	4621      	mov	r1, r4
 80a28bc:	4602      	mov	r2, r0
 80a28be:	4628      	mov	r0, r5
}
 80a28c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return concat(cstr, strlen(cstr));
 80a28c4:	f7ff bfd7 	b.w	80a2876 <_ZN6String6concatEPKcj>
}
 80a28c8:	bd38      	pop	{r3, r4, r5, pc}

080a28ca <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80a28ca:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a28cc:	688a      	ldr	r2, [r1, #8]
 80a28ce:	6809      	ldr	r1, [r1, #0]
{
 80a28d0:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a28d2:	f7ff ffd0 	bl	80a2876 <_ZN6String6concatEPKcj>
 80a28d6:	b910      	cbnz	r0, 80a28de <_ZplRK15StringSumHelperRK6String+0x14>
 80a28d8:	4620      	mov	r0, r4
 80a28da:	f7ff ff26 	bl	80a272a <_ZN6String10invalidateEv>
	return a;
}
 80a28de:	4620      	mov	r0, r4
 80a28e0:	bd10      	pop	{r4, pc}

080a28e2 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 80a28e2:	b538      	push	{r3, r4, r5, lr}
 80a28e4:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 80a28e6:	460d      	mov	r5, r1
 80a28e8:	b921      	cbnz	r1, 80a28f4 <_ZplRK15StringSumHelperPKc+0x12>
 80a28ea:	4620      	mov	r0, r4
 80a28ec:	f7ff ff1d 	bl	80a272a <_ZN6String10invalidateEv>
	return a;
}
 80a28f0:	4620      	mov	r0, r4
 80a28f2:	bd38      	pop	{r3, r4, r5, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 80a28f4:	4608      	mov	r0, r1
 80a28f6:	f003 fc15 	bl	80a6124 <strlen>
 80a28fa:	4629      	mov	r1, r5
 80a28fc:	4602      	mov	r2, r0
 80a28fe:	4620      	mov	r0, r4
 80a2900:	f7ff ffb9 	bl	80a2876 <_ZN6String6concatEPKcj>
 80a2904:	2800      	cmp	r0, #0
 80a2906:	d0f0      	beq.n	80a28ea <_ZplRK15StringSumHelperPKc+0x8>
 80a2908:	e7f2      	b.n	80a28f0 <_ZplRK15StringSumHelperPKc+0xe>

080a290a <_ZNK6String9compareToERKS_>:
/*********************************************/
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
 80a290a:	4602      	mov	r2, r0
	if (!buffer || !s.buffer) {
 80a290c:	6800      	ldr	r0, [r0, #0]
{
 80a290e:	460b      	mov	r3, r1
 80a2910:	6809      	ldr	r1, [r1, #0]
	if (!buffer || !s.buffer) {
 80a2912:	b158      	cbz	r0, 80a292c <_ZNK6String9compareToERKS_+0x22>
 80a2914:	b941      	cbnz	r1, 80a2928 <_ZNK6String9compareToERKS_+0x1e>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
 80a2916:	6891      	ldr	r1, [r2, #8]
 80a2918:	b151      	cbz	r1, 80a2930 <_ZNK6String9compareToERKS_+0x26>
 80a291a:	7800      	ldrb	r0, [r0, #0]
 80a291c:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
 80a291e:	6898      	ldr	r0, [r3, #8]
 80a2920:	b138      	cbz	r0, 80a2932 <_ZNK6String9compareToERKS_+0x28>
 80a2922:	7809      	ldrb	r1, [r1, #0]
 80a2924:	4248      	negs	r0, r1
 80a2926:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
 80a2928:	f002 be6b 	b.w	80a5602 <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
 80a292c:	2900      	cmp	r1, #0
 80a292e:	d1f6      	bne.n	80a291e <_ZNK6String9compareToERKS_+0x14>
		return 0;
 80a2930:	4608      	mov	r0, r1
}
 80a2932:	4770      	bx	lr

080a2934 <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
 80a2934:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
 80a2936:	6882      	ldr	r2, [r0, #8]
 80a2938:	688b      	ldr	r3, [r1, #8]
 80a293a:	429a      	cmp	r2, r3
 80a293c:	d105      	bne.n	80a294a <_ZNK6String6equalsERKS_+0x16>
 80a293e:	f7ff ffe4 	bl	80a290a <_ZNK6String9compareToERKS_>
 80a2942:	fab0 f080 	clz	r0, r0
 80a2946:	0940      	lsrs	r0, r0, #5
}
 80a2948:	bd08      	pop	{r3, pc}
	return (len == s2.len && compareTo(s2) == 0);
 80a294a:	2000      	movs	r0, #0
 80a294c:	e7fc      	b.n	80a2948 <_ZNK6String6equalsERKS_+0x14>

080a294e <_ZNK6String6equalsEPKc>:

unsigned char String::equals(const char *cstr) const
{
 80a294e:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a2950:	6882      	ldr	r2, [r0, #8]
 80a2952:	b93a      	cbnz	r2, 80a2964 <_ZNK6String6equalsEPKc+0x16>
 80a2954:	b121      	cbz	r1, 80a2960 <_ZNK6String6equalsEPKc+0x12>
 80a2956:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
 80a2958:	fab0 f080 	clz	r0, r0
 80a295c:	0940      	lsrs	r0, r0, #5
 80a295e:	e000      	b.n	80a2962 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a2960:	2001      	movs	r0, #1
}
 80a2962:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 80a2964:	6800      	ldr	r0, [r0, #0]
 80a2966:	b909      	cbnz	r1, 80a296c <_ZNK6String6equalsEPKc+0x1e>
 80a2968:	7800      	ldrb	r0, [r0, #0]
 80a296a:	e7f5      	b.n	80a2958 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
 80a296c:	f002 fe49 	bl	80a5602 <strcmp>
 80a2970:	e7f2      	b.n	80a2958 <_ZNK6String6equalsEPKc+0xa>

080a2972 <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
 80a2972:	6883      	ldr	r3, [r0, #8]
 80a2974:	428b      	cmp	r3, r1
 80a2976:	d903      	bls.n	80a2980 <_ZNK6StringixEj+0xe>
 80a2978:	6800      	ldr	r0, [r0, #0]
 80a297a:	b110      	cbz	r0, 80a2982 <_ZNK6StringixEj+0x10>
	return buffer[index];
 80a297c:	5c40      	ldrb	r0, [r0, r1]
 80a297e:	4770      	bx	lr
	if (index >= len || !buffer) return 0;
 80a2980:	2000      	movs	r0, #0
}
 80a2982:	4770      	bx	lr

080a2984 <_ZNK6String6charAtEj>:
	return operator[](loc);
 80a2984:	f7ff bff5 	b.w	80a2972 <_ZNK6StringixEj>

080a2988 <_ZNK6String7indexOfEcj>:
{
	return indexOf(c, 0);
}

int String::indexOf( char ch, unsigned int fromIndex ) const
{
 80a2988:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
 80a298a:	6883      	ldr	r3, [r0, #8]
 80a298c:	4293      	cmp	r3, r2
 80a298e:	d906      	bls.n	80a299e <_ZNK6String7indexOfEcj+0x16>
	const char* temp = strchr(buffer + fromIndex, ch);
 80a2990:	6804      	ldr	r4, [r0, #0]
 80a2992:	18a0      	adds	r0, r4, r2
 80a2994:	f002 fe28 	bl	80a55e8 <strchr>
	if (temp == NULL) return -1;
 80a2998:	b108      	cbz	r0, 80a299e <_ZNK6String7indexOfEcj+0x16>
	return temp - buffer;
 80a299a:	1b00      	subs	r0, r0, r4
}
 80a299c:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
 80a299e:	f04f 30ff 	mov.w	r0, #4294967295
 80a29a2:	e7fb      	b.n	80a299c <_ZNK6String7indexOfEcj+0x14>

080a29a4 <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
 80a29a4:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
 80a29a6:	6883      	ldr	r3, [r0, #8]
 80a29a8:	4293      	cmp	r3, r2
 80a29aa:	d907      	bls.n	80a29bc <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
 80a29ac:	6804      	ldr	r4, [r0, #0]
 80a29ae:	6809      	ldr	r1, [r1, #0]
 80a29b0:	18a0      	adds	r0, r4, r2
 80a29b2:	f003 fbe4 	bl	80a617e <strstr>
	if (found == NULL) return -1;
 80a29b6:	b108      	cbz	r0, 80a29bc <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
 80a29b8:	1b00      	subs	r0, r0, r4
}
 80a29ba:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
 80a29bc:	f04f 30ff 	mov.w	r0, #4294967295
 80a29c0:	e7fb      	b.n	80a29ba <_ZNK6String7indexOfERKS_j+0x16>

080a29c2 <_ZNK6String7indexOfERKS_>:
	return indexOf(s2, 0);
 80a29c2:	2200      	movs	r2, #0
 80a29c4:	f7ff bfee 	b.w	80a29a4 <_ZNK6String7indexOfERKS_j>

080a29c8 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 80a29c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a29ca:	461d      	mov	r5, r3
	if (left > right) {
 80a29cc:	429a      	cmp	r2, r3
 80a29ce:	bf88      	it	hi
 80a29d0:	4613      	movhi	r3, r2
{
 80a29d2:	460f      	mov	r7, r1
 80a29d4:	4614      	mov	r4, r2
	if (left > right) {
 80a29d6:	bf88      	it	hi
 80a29d8:	462c      	movhi	r4, r5
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 80a29da:	490b      	ldr	r1, [pc, #44]	; (80a2a08 <_ZNK6String9substringEjj+0x40>)
	if (left > right) {
 80a29dc:	bf88      	it	hi
 80a29de:	461d      	movhi	r5, r3
{
 80a29e0:	4606      	mov	r6, r0
	String out;
 80a29e2:	f7ff fee5 	bl	80a27b0 <_ZN6StringC1EPKc>
	if (left > len) return out;
 80a29e6:	68ba      	ldr	r2, [r7, #8]
 80a29e8:	42a2      	cmp	r2, r4
 80a29ea:	d30a      	bcc.n	80a2a02 <_ZNK6String9substringEjj+0x3a>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
 80a29ec:	6839      	ldr	r1, [r7, #0]
 80a29ee:	42aa      	cmp	r2, r5
 80a29f0:	bf94      	ite	ls
 80a29f2:	ebc4 0202 	rsbls	r2, r4, r2
 80a29f6:	ebc4 0205 	rsbhi	r2, r4, r5
 80a29fa:	4630      	mov	r0, r6
 80a29fc:	4421      	add	r1, r4
 80a29fe:	f7ff febf 	bl	80a2780 <_ZN6String4copyEPKcj>
	return out;
}
 80a2a02:	4630      	mov	r0, r6
 80a2a04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a2a06:	bf00      	nop
 80a2a08:	080a6c3b 	.word	0x080a6c3b

080a2a0c <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
 80a2a0c:	6800      	ldr	r0, [r0, #0]
 80a2a0e:	b108      	cbz	r0, 80a2a14 <_ZNK6String5toIntEv+0x8>
 80a2a10:	f002 ba28 	b.w	80a4e64 <atol>
	return 0;
}
 80a2a14:	4770      	bx	lr
	...

080a2a18 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
 80a2a18:	b40e      	push	{r1, r2, r3}
 80a2a1a:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
 80a2a1c:	ad09      	add	r5, sp, #36	; 0x24
 80a2a1e:	f855 7b04 	ldr.w	r7, [r5], #4
 80a2a22:	4604      	mov	r4, r0
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 80a2a24:	462b      	mov	r3, r5
 80a2a26:	463a      	mov	r2, r7
 80a2a28:	2105      	movs	r1, #5
 80a2a2a:	a802      	add	r0, sp, #8
    va_start(marker, fmt);
 80a2a2c:	9501      	str	r5, [sp, #4]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 80a2a2e:	f7ff fe07 	bl	80a2640 <vsnprintf>
 80a2a32:	4606      	mov	r6, r0
    va_end(marker);

    String result;
 80a2a34:	490b      	ldr	r1, [pc, #44]	; (80a2a64 <_ZN6String6formatEPKcz+0x4c>)
 80a2a36:	4620      	mov	r0, r4
 80a2a38:	f7ff feba 	bl	80a27b0 <_ZN6StringC1EPKc>
    result.reserve(n);  // internally adds +1 for null terminator
 80a2a3c:	4631      	mov	r1, r6
 80a2a3e:	4620      	mov	r0, r4
 80a2a40:	f7ff fe8a 	bl	80a2758 <_ZN6String7reserveEj>
    if (result.buffer) {
 80a2a44:	6820      	ldr	r0, [r4, #0]
 80a2a46:	b130      	cbz	r0, 80a2a56 <_ZN6String6formatEPKcz+0x3e>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 80a2a48:	462b      	mov	r3, r5
 80a2a4a:	463a      	mov	r2, r7
 80a2a4c:	1c71      	adds	r1, r6, #1
        va_start(marker, fmt);
 80a2a4e:	9501      	str	r5, [sp, #4]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 80a2a50:	f7ff fdf6 	bl	80a2640 <vsnprintf>
        va_end(marker);
        result.len = n;
 80a2a54:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
 80a2a56:	4620      	mov	r0, r4
 80a2a58:	b004      	add	sp, #16
 80a2a5a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80a2a5e:	b003      	add	sp, #12
 80a2a60:	4770      	bx	lr
 80a2a62:	bf00      	nop
 80a2a64:	080a6c3b 	.word	0x080a6c3b

080a2a68 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a2a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2a6a:	4606      	mov	r6, r0
 80a2a6c:	460d      	mov	r5, r1
  size_t n = 0;
 80a2a6e:	2400      	movs	r4, #0
 80a2a70:	188f      	adds	r7, r1, r2
  while (size--) {
 80a2a72:	42bd      	cmp	r5, r7
 80a2a74:	d00c      	beq.n	80a2a90 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a2a76:	6833      	ldr	r3, [r6, #0]
 80a2a78:	4630      	mov	r0, r6
 80a2a7a:	689b      	ldr	r3, [r3, #8]
 80a2a7c:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a2a80:	4798      	blx	r3
     if (chunk>=0)
 80a2a82:	1e03      	subs	r3, r0, #0
 80a2a84:	db01      	blt.n	80a2a8a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a2a86:	441c      	add	r4, r3
  while (size--) {
 80a2a88:	e7f3      	b.n	80a2a72 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a2a8a:	2c00      	cmp	r4, #0
 80a2a8c:	bf08      	it	eq
 80a2a8e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a2a90:	4620      	mov	r0, r4
 80a2a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2a94 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a2a94:	b570      	push	{r4, r5, r6, lr}
 80a2a96:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a2a98:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a2a9a:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a2a9c:	b149      	cbz	r1, 80a2ab2 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a2a9e:	f003 fb41 	bl	80a6124 <strlen>
 80a2aa2:	682b      	ldr	r3, [r5, #0]
 80a2aa4:	4602      	mov	r2, r0
 80a2aa6:	4621      	mov	r1, r4
 80a2aa8:	4628      	mov	r0, r5
    }
 80a2aaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a2aae:	68db      	ldr	r3, [r3, #12]
 80a2ab0:	4718      	bx	r3
    }
 80a2ab2:	bd70      	pop	{r4, r5, r6, pc}

080a2ab4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a2ab4:	6803      	ldr	r3, [r0, #0]
 80a2ab6:	689b      	ldr	r3, [r3, #8]
 80a2ab8:	4718      	bx	r3

080a2aba <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a2aba:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a2abc:	2a01      	cmp	r2, #1
 80a2abe:	bf98      	it	ls
 80a2ac0:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a2ac2:	b530      	push	{r4, r5, lr}
 80a2ac4:	b08b      	sub	sp, #44	; 0x2c
 80a2ac6:	460c      	mov	r4, r1
  *str = '\0';
 80a2ac8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a2acc:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a2ace:	4625      	mov	r5, r4
 80a2ad0:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a2ad4:	fb04 5312 	mls	r3, r4, r2, r5
 80a2ad8:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a2ada:	2b09      	cmp	r3, #9
 80a2adc:	bf94      	ite	ls
 80a2ade:	3330      	addls	r3, #48	; 0x30
 80a2ae0:	3337      	addhi	r3, #55	; 0x37
 80a2ae2:	b2db      	uxtb	r3, r3
  } while(n);
 80a2ae4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a2ae6:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a2aea:	d9f0      	bls.n	80a2ace <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a2aec:	f7ff ffd2 	bl	80a2a94 <_ZN5Print5writeEPKc>
}
 80a2af0:	b00b      	add	sp, #44	; 0x2c
 80a2af2:	bd30      	pop	{r4, r5, pc}

080a2af4 <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a2af4:	2300      	movs	r3, #0
 80a2af6:	6840      	ldr	r0, [r0, #4]
 80a2af8:	461a      	mov	r2, r3
 80a2afa:	4619      	mov	r1, r3
 80a2afc:	f7ff bcd0 	b.w	80a24a0 <network_on>

080a2b00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
 80a2b00:	680b      	ldr	r3, [r1, #0]
 80a2b02:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
 80a2b04:	b113      	cbz	r3, 80a2b0c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
 80a2b06:	685a      	ldr	r2, [r3, #4]
 80a2b08:	3201      	adds	r2, #1
 80a2b0a:	605a      	str	r2, [r3, #4]
      }
 80a2b0c:	4770      	bx	lr
	...

080a2b10 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a2b10:	4b01      	ldr	r3, [pc, #4]	; (80a2b18 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a2b12:	4a02      	ldr	r2, [pc, #8]	; (80a2b1c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a2b14:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a2b16:	4770      	bx	lr
 80a2b18:	200003d4 	.word	0x200003d4
 80a2b1c:	080a74b4 	.word	0x080a74b4

080a2b20 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 80a2b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
 80a2b24:	4a15      	ldr	r2, [pc, #84]	; (80a2b7c <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 80a2b26:	f8df 8060 	ldr.w	r8, [pc, #96]	; 80a2b88 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
 80a2b2a:	e9d2 3200 	ldrd	r3, r2, [r2]
 80a2b2e:	18c0      	adds	r0, r0, r3
 80a2b30:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
 80a2b34:	4a12      	ldr	r2, [pc, #72]	; (80a2b80 <_ZL22Refresh_UnixTime_Cachex+0x60>)
{
 80a2b36:	b08c      	sub	sp, #48	; 0x30
    unix_time += dst_current_cache;
 80a2b38:	e9d2 3200 	ldrd	r3, r2, [r2]
 80a2b3c:	18c6      	adds	r6, r0, r3
 80a2b3e:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
 80a2b42:	e9d8 2300 	ldrd	r2, r3, [r8]
 80a2b46:	42bb      	cmp	r3, r7
 80a2b48:	bf08      	it	eq
 80a2b4a:	42b2      	cmpeq	r2, r6
 80a2b4c:	d013      	beq.n	80a2b76 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
 80a2b4e:	a903      	add	r1, sp, #12
 80a2b50:	4668      	mov	r0, sp
 80a2b52:	e9cd 6700 	strd	r6, r7, [sp]
 80a2b56:	f002 f997 	bl	80a4e88 <localtime_r>
	calendar_time.tm_year += 1900;
 80a2b5a:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a2b5c:	4d09      	ldr	r5, [pc, #36]	; (80a2b84 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
 80a2b5e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a2b62:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
 80a2b64:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a2b66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a2b68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a2b6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a2b6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 80a2b6e:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a2b72:	6823      	ldr	r3, [r4, #0]
 80a2b74:	602b      	str	r3, [r5, #0]
    }
}
 80a2b76:	b00c      	add	sp, #48	; 0x30
 80a2b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a2b7c:	20000410 	.word	0x20000410
 80a2b80:	20000408 	.word	0x20000408
 80a2b84:	200003e0 	.word	0x200003e0
 80a2b88:	20000418 	.word	0x20000418

080a2b8c <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
 80a2b8c:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a2b8e:	2000      	movs	r0, #0
 80a2b90:	f7ff fd06 	bl	80a25a0 <spark_sync_time_pending>
 80a2b94:	b128      	cbz	r0, 80a2ba2 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a2b96:	f7ff fcdb 	bl	80a2550 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a2b9a:	f080 0001 	eor.w	r0, r0, #1
 80a2b9e:	b2c0      	uxtb	r0, r0
    }
 80a2ba0:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a2ba2:	2001      	movs	r0, #1
 80a2ba4:	e7fc      	b.n	80a2ba0 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

080a2ba8 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
 80a2ba8:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 80a2baa:	f7ff ffb9 	bl	80a2b20 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
 80a2bae:	4b02      	ldr	r3, [pc, #8]	; (80a2bb8 <_ZN9TimeClass5monthEx+0x10>)
 80a2bb0:	6918      	ldr	r0, [r3, #16]
}
 80a2bb2:	3001      	adds	r0, #1
 80a2bb4:	bd08      	pop	{r3, pc}
 80a2bb6:	bf00      	nop
 80a2bb8:	200003e0 	.word	0x200003e0

080a2bbc <_ZN9TimeClass4zoneEf>:
	return now() + time_zone_cache + dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 80a2bbc:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 80a2bbe:	490a      	ldr	r1, [pc, #40]	; (80a2be8 <_ZN9TimeClass4zoneEf+0x2c>)
{
 80a2bc0:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 80a2bc2:	f001 ff69 	bl	80a4a98 <__aeabi_fcmplt>
 80a2bc6:	b968      	cbnz	r0, 80a2be4 <_ZN9TimeClass4zoneEf+0x28>
 80a2bc8:	4620      	mov	r0, r4
 80a2bca:	4908      	ldr	r1, [pc, #32]	; (80a2bec <_ZN9TimeClass4zoneEf+0x30>)
 80a2bcc:	f001 ff82 	bl	80a4ad4 <__aeabi_fcmpgt>
 80a2bd0:	b940      	cbnz	r0, 80a2be4 <_ZN9TimeClass4zoneEf+0x28>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 80a2bd2:	4907      	ldr	r1, [pc, #28]	; (80a2bf0 <_ZN9TimeClass4zoneEf+0x34>)
 80a2bd4:	4620      	mov	r0, r4
 80a2bd6:	f001 fdc1 	bl	80a475c <__aeabi_fmul>
 80a2bda:	f001 ff85 	bl	80a4ae8 <__aeabi_f2lz>
 80a2bde:	4b05      	ldr	r3, [pc, #20]	; (80a2bf4 <_ZN9TimeClass4zoneEf+0x38>)
 80a2be0:	e9c3 0100 	strd	r0, r1, [r3]
}
 80a2be4:	bd10      	pop	{r4, pc}
 80a2be6:	bf00      	nop
 80a2be8:	c1400000 	.word	0xc1400000
 80a2bec:	41600000 	.word	0x41600000
 80a2bf0:	45610000 	.word	0x45610000
 80a2bf4:	20000410 	.word	0x20000410

080a2bf8 <_ZN9TimeClass7timeStrEx>:
    }
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 80a2bf8:	b530      	push	{r4, r5, lr}
 80a2bfa:	4604      	mov	r4, r0
    t += time_zone_cache;
 80a2bfc:	4818      	ldr	r0, [pc, #96]	; (80a2c60 <_ZN9TimeClass7timeStrEx+0x68>)
{
 80a2bfe:	b093      	sub	sp, #76	; 0x4c
    t += time_zone_cache;
 80a2c00:	e9d0 1000 	ldrd	r1, r0, [r0]
 80a2c04:	1852      	adds	r2, r2, r1
 80a2c06:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
 80a2c0a:	4816      	ldr	r0, [pc, #88]	; (80a2c64 <_ZN9TimeClass7timeStrEx+0x6c>)
    struct tm calendar_time = {};
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
 80a2c0c:	2500      	movs	r5, #0
    t += dst_current_cache;
 80a2c0e:	e9d0 1000 	ldrd	r1, r0, [r0]
 80a2c12:	1852      	adds	r2, r2, r1
 80a2c14:	eb40 0303 	adc.w	r3, r0, r3
 80a2c18:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
 80a2c1c:	2224      	movs	r2, #36	; 0x24
 80a2c1e:	2100      	movs	r1, #0
 80a2c20:	eb0d 0002 	add.w	r0, sp, r2
 80a2c24:	f002 fa34 	bl	80a5090 <memset>
    localtime_r(&t, &calendar_time);
 80a2c28:	a909      	add	r1, sp, #36	; 0x24
 80a2c2a:	4668      	mov	r0, sp
 80a2c2c:	f002 f92c 	bl	80a4e88 <localtime_r>
    char ascstr[26] = {};
 80a2c30:	2216      	movs	r2, #22
 80a2c32:	4629      	mov	r1, r5
 80a2c34:	a803      	add	r0, sp, #12
 80a2c36:	9502      	str	r5, [sp, #8]
 80a2c38:	f002 fa2a 	bl	80a5090 <memset>
    asctime_r(&calendar_time, ascstr);
 80a2c3c:	a902      	add	r1, sp, #8
 80a2c3e:	a809      	add	r0, sp, #36	; 0x24
 80a2c40:	f002 f8ea 	bl	80a4e18 <asctime_r>
    int len = strlen(ascstr);
 80a2c44:	a802      	add	r0, sp, #8
 80a2c46:	f003 fa6d 	bl	80a6124 <strlen>
    ascstr[len-1] = 0; // remove final newline
 80a2c4a:	ab12      	add	r3, sp, #72	; 0x48
 80a2c4c:	4418      	add	r0, r3
 80a2c4e:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
 80a2c52:	a902      	add	r1, sp, #8
 80a2c54:	4620      	mov	r0, r4
 80a2c56:	f7ff fdab 	bl	80a27b0 <_ZN6StringC1EPKc>
}
 80a2c5a:	4620      	mov	r0, r4
 80a2c5c:	b013      	add	sp, #76	; 0x4c
 80a2c5e:	bd30      	pop	{r4, r5, pc}
 80a2c60:	20000410 	.word	0x20000410
 80a2c64:	20000408 	.word	0x20000408

080a2c68 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 80a2c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a2c6c:	b0a5      	sub	sp, #148	; 0x94
 80a2c6e:	4607      	mov	r7, r0
 80a2c70:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 80a2c72:	a814      	add	r0, sp, #80	; 0x50
{
 80a2c74:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 80a2c76:	223f      	movs	r2, #63	; 0x3f
{
 80a2c78:	461d      	mov	r5, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 80a2c7a:	f003 fa6d 	bl	80a6158 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 80a2c7e:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 80a2c80:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 80a2c82:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 80a2c86:	f003 fa4d 	bl	80a6124 <strlen>
 80a2c8a:	4604      	mov	r4, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
 80a2c8c:	bb5d      	cbnz	r5, 80a2ce6 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7e>
        strcpy(time_zone_str, "Z");
 80a2c8e:	492a      	ldr	r1, [pc, #168]	; (80a2d38 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
 80a2c90:	a803      	add	r0, sp, #12
 80a2c92:	f002 fcc0 	bl	80a5616 <strcpy>
{
 80a2c96:	2500      	movs	r5, #0
 80a2c98:	ae14      	add	r6, sp, #80	; 0x50
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 80a2c9a:	f104 3bff 	add.w	fp, r4, #4294967295
 80a2c9e:	45ab      	cmp	fp, r5
 80a2ca0:	d936      	bls.n	80a2d10 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa8>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
 80a2ca2:	46b1      	mov	r9, r6
 80a2ca4:	f819 3b01 	ldrb.w	r3, [r9], #1
 80a2ca8:	f105 0a01 	add.w	sl, r5, #1
 80a2cac:	2b25      	cmp	r3, #37	; 0x25
 80a2cae:	d117      	bne.n	80a2ce0 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
 80a2cb0:	7873      	ldrb	r3, [r6, #1]
 80a2cb2:	2b7a      	cmp	r3, #122	; 0x7a
 80a2cb4:	d114      	bne.n	80a2ce0 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
        {
            size_t tzlen = strlen(time_zone_str);
 80a2cb6:	a803      	add	r0, sp, #12
 80a2cb8:	f003 fa34 	bl	80a6124 <strlen>
 80a2cbc:	4604      	mov	r4, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
 80a2cbe:	ab14      	add	r3, sp, #80	; 0x50
 80a2cc0:	1828      	adds	r0, r5, r0
 80a2cc2:	4418      	add	r0, r3
 80a2cc4:	ebab 0205 	sub.w	r2, fp, r5
 80a2cc8:	1cb1      	adds	r1, r6, #2
 80a2cca:	f002 f9d3 	bl	80a5074 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
 80a2cce:	4622      	mov	r2, r4
 80a2cd0:	a903      	add	r1, sp, #12
 80a2cd2:	4630      	mov	r0, r6
 80a2cd4:	f002 f9ce 	bl	80a5074 <memcpy>
            len = strlen(format_str);
 80a2cd8:	a814      	add	r0, sp, #80	; 0x50
 80a2cda:	f003 fa23 	bl	80a6124 <strlen>
 80a2cde:	4604      	mov	r4, r0
    for (size_t i=0; i<len-1; i++)
 80a2ce0:	464e      	mov	r6, r9
 80a2ce2:	4655      	mov	r5, sl
 80a2ce4:	e7d9      	b.n	80a2c9a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
 80a2ce6:	213c      	movs	r1, #60	; 0x3c
 80a2ce8:	fb95 f3f1 	sdiv	r3, r5, r1
 80a2cec:	2b00      	cmp	r3, #0
 80a2cee:	bfb8      	it	lt
 80a2cf0:	425b      	neglt	r3, r3
 80a2cf2:	fbb3 f2f1 	udiv	r2, r3, r1
 80a2cf6:	fb01 3312 	mls	r3, r1, r2, r3
 80a2cfa:	9300      	str	r3, [sp, #0]
 80a2cfc:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80a2d00:	2110      	movs	r1, #16
 80a2d02:	fb95 f3f3 	sdiv	r3, r5, r3
 80a2d06:	4a0d      	ldr	r2, [pc, #52]	; (80a2d3c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd4>)
 80a2d08:	a803      	add	r0, sp, #12
 80a2d0a:	f7ff fc89 	bl	80a2620 <snprintf>
 80a2d0e:	e7c2      	b.n	80a2c96 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
 80a2d10:	2100      	movs	r1, #0
 80a2d12:	222e      	movs	r2, #46	; 0x2e
 80a2d14:	a808      	add	r0, sp, #32
 80a2d16:	9107      	str	r1, [sp, #28]
 80a2d18:	f002 f9ba 	bl	80a5090 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
 80a2d1c:	4643      	mov	r3, r8
 80a2d1e:	aa14      	add	r2, sp, #80	; 0x50
 80a2d20:	2132      	movs	r1, #50	; 0x32
 80a2d22:	a807      	add	r0, sp, #28
 80a2d24:	f003 f9f4 	bl	80a6110 <strftime>
    return String(buf);
 80a2d28:	4638      	mov	r0, r7
 80a2d2a:	a907      	add	r1, sp, #28
 80a2d2c:	f7ff fd40 	bl	80a27b0 <_ZN6StringC1EPKc>
}
 80a2d30:	4638      	mov	r0, r7
 80a2d32:	b025      	add	sp, #148	; 0x94
 80a2d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2d38:	080a79b1 	.word	0x080a79b1
 80a2d3c:	080a74b8 	.word	0x080a74b8

080a2d40 <_ZN9TimeClass6formatExPKc>:
{
 80a2d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2d42:	b08d      	sub	sp, #52	; 0x34
 80a2d44:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80a2d46:	4604      	mov	r4, r0
 80a2d48:	e9cd 2300 	strd	r2, r3, [sp]
    if (format_spec == nullptr)
 80a2d4c:	b915      	cbnz	r5, 80a2d54 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
 80a2d4e:	4b19      	ldr	r3, [pc, #100]	; (80a2db4 <_ZN9TimeClass6formatExPKc+0x74>)
 80a2d50:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
 80a2d52:	b12d      	cbz	r5, 80a2d60 <_ZN9TimeClass6formatExPKc+0x20>
 80a2d54:	4b18      	ldr	r3, [pc, #96]	; (80a2db8 <_ZN9TimeClass6formatExPKc+0x78>)
 80a2d56:	4628      	mov	r0, r5
 80a2d58:	6819      	ldr	r1, [r3, #0]
 80a2d5a:	f002 fc52 	bl	80a5602 <strcmp>
 80a2d5e:	b938      	cbnz	r0, 80a2d70 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
 80a2d60:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a2d64:	4620      	mov	r0, r4
 80a2d66:	f7ff ff47 	bl	80a2bf8 <_ZN9TimeClass7timeStrEx>
}
 80a2d6a:	4620      	mov	r0, r4
 80a2d6c:	b00d      	add	sp, #52	; 0x34
 80a2d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
 80a2d70:	9900      	ldr	r1, [sp, #0]
 80a2d72:	4e12      	ldr	r6, [pc, #72]	; (80a2dbc <_ZN9TimeClass6formatExPKc+0x7c>)
    t += dst_current_cache;
 80a2d74:	4f12      	ldr	r7, [pc, #72]	; (80a2dc0 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
 80a2d76:	e9d6 3200 	ldrd	r3, r2, [r6]
 80a2d7a:	185b      	adds	r3, r3, r1
 80a2d7c:	9901      	ldr	r1, [sp, #4]
 80a2d7e:	eb41 0202 	adc.w	r2, r1, r2
    t += dst_current_cache;
 80a2d82:	e9d7 0100 	ldrd	r0, r1, [r7]
 80a2d86:	181b      	adds	r3, r3, r0
 80a2d88:	eb41 0202 	adc.w	r2, r1, r2
 80a2d8c:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
 80a2d90:	2100      	movs	r1, #0
 80a2d92:	2224      	movs	r2, #36	; 0x24
 80a2d94:	a803      	add	r0, sp, #12
 80a2d96:	f002 f97b 	bl	80a5090 <memset>
    localtime_r(&t, &calendar_time);
 80a2d9a:	a903      	add	r1, sp, #12
 80a2d9c:	4668      	mov	r0, sp
 80a2d9e:	f002 f873 	bl	80a4e88 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
 80a2da2:	6832      	ldr	r2, [r6, #0]
 80a2da4:	683b      	ldr	r3, [r7, #0]
 80a2da6:	4620      	mov	r0, r4
 80a2da8:	4413      	add	r3, r2
 80a2daa:	a903      	add	r1, sp, #12
 80a2dac:	462a      	mov	r2, r5
 80a2dae:	f7ff ff5b 	bl	80a2c68 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
 80a2db2:	e7da      	b.n	80a2d6a <_ZN9TimeClass6formatExPKc+0x2a>
 80a2db4:	200003dc 	.word	0x200003dc
 80a2db8:	20000000 	.word	0x20000000
 80a2dbc:	20000410 	.word	0x20000410
 80a2dc0:	20000408 	.word	0x20000408

080a2dc4 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
 80a2dc4:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
 80a2dc6:	2000      	movs	r0, #0
 80a2dc8:	f7ff fa14 	bl	80a21f4 <hal_rtc_time_is_valid>
    if (rtcstate)
 80a2dcc:	4604      	mov	r4, r0
 80a2dce:	b9a0      	cbnz	r0, 80a2dfa <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80a2dd0:	f7ff fb02 	bl	80a23d8 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80a2dd4:	2801      	cmp	r0, #1
 80a2dd6:	d110      	bne.n	80a2dfa <_ZN9TimeClass7isValidEv+0x36>
 80a2dd8:	4620      	mov	r0, r4
 80a2dda:	f7ff fb25 	bl	80a2428 <system_thread_get_state>
 80a2dde:	b960      	cbnz	r0, 80a2dfa <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
 80a2de0:	f7ff fed4 	bl	80a2b8c <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a2de4:	b910      	cbnz	r0, 80a2dec <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
 80a2de6:	f7ff fbab 	bl	80a2540 <spark_process>
        while (_while() && !_condition()) {
 80a2dea:	e7f9      	b.n	80a2de0 <_ZN9TimeClass7isValidEv+0x1c>
 80a2dec:	f7ff fece 	bl	80a2b8c <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
 80a2df0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
 80a2df4:	2000      	movs	r0, #0
 80a2df6:	f7ff b9fd 	b.w	80a21f4 <hal_rtc_time_is_valid>
}
 80a2dfa:	4620      	mov	r0, r4
 80a2dfc:	bd10      	pop	{r4, pc}

080a2dfe <_ZN9TimeClass3nowEv>:
{
 80a2dfe:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
 80a2e00:	f7ff ffe0 	bl	80a2dc4 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
 80a2e04:	2210      	movs	r2, #16
 80a2e06:	2100      	movs	r1, #0
 80a2e08:	4668      	mov	r0, sp
 80a2e0a:	f002 f941 	bl	80a5090 <memset>
    hal_rtc_get_time(&tv, nullptr);
 80a2e0e:	2100      	movs	r1, #0
 80a2e10:	4668      	mov	r0, sp
 80a2e12:	f7ff f9f7 	bl	80a2204 <hal_rtc_get_time>
}
 80a2e16:	9800      	ldr	r0, [sp, #0]
 80a2e18:	b005      	add	sp, #20
 80a2e1a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a2e20 <_ZN9TimeClass4hourEv>:
{
 80a2e20:	b508      	push	{r3, lr}
	return hour(now());
 80a2e22:	f7ff ffec 	bl	80a2dfe <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 80a2e26:	17c1      	asrs	r1, r0, #31
 80a2e28:	f7ff fe7a 	bl	80a2b20 <_ZL22Refresh_UnixTime_Cachex>
}
 80a2e2c:	4b01      	ldr	r3, [pc, #4]	; (80a2e34 <_ZN9TimeClass4hourEv+0x14>)
 80a2e2e:	6898      	ldr	r0, [r3, #8]
 80a2e30:	bd08      	pop	{r3, pc}
 80a2e32:	bf00      	nop
 80a2e34:	200003e0 	.word	0x200003e0

080a2e38 <_ZN9TimeClass6minuteEv>:
{
 80a2e38:	b508      	push	{r3, lr}
	return minute(now());
 80a2e3a:	f7ff ffe0 	bl	80a2dfe <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 80a2e3e:	17c1      	asrs	r1, r0, #31
 80a2e40:	f7ff fe6e 	bl	80a2b20 <_ZL22Refresh_UnixTime_Cachex>
}
 80a2e44:	4b01      	ldr	r3, [pc, #4]	; (80a2e4c <_ZN9TimeClass6minuteEv+0x14>)
 80a2e46:	6858      	ldr	r0, [r3, #4]
 80a2e48:	bd08      	pop	{r3, pc}
 80a2e4a:	bf00      	nop
 80a2e4c:	200003e0 	.word	0x200003e0

080a2e50 <_ZN9TimeClass6secondEv>:
{
 80a2e50:	b508      	push	{r3, lr}
	return second(now());
 80a2e52:	f7ff ffd4 	bl	80a2dfe <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 80a2e56:	17c1      	asrs	r1, r0, #31
 80a2e58:	f7ff fe62 	bl	80a2b20 <_ZL22Refresh_UnixTime_Cachex>
}
 80a2e5c:	4b01      	ldr	r3, [pc, #4]	; (80a2e64 <_ZN9TimeClass6secondEv+0x14>)
 80a2e5e:	6818      	ldr	r0, [r3, #0]
 80a2e60:	bd08      	pop	{r3, pc}
 80a2e62:	bf00      	nop
 80a2e64:	200003e0 	.word	0x200003e0

080a2e68 <_ZN9TimeClass3dayEv>:
{
 80a2e68:	b508      	push	{r3, lr}
	return day(now());
 80a2e6a:	f7ff ffc8 	bl	80a2dfe <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 80a2e6e:	17c1      	asrs	r1, r0, #31
 80a2e70:	f7ff fe56 	bl	80a2b20 <_ZL22Refresh_UnixTime_Cachex>
}
 80a2e74:	4b01      	ldr	r3, [pc, #4]	; (80a2e7c <_ZN9TimeClass3dayEv+0x14>)
 80a2e76:	68d8      	ldr	r0, [r3, #12]
 80a2e78:	bd08      	pop	{r3, pc}
 80a2e7a:	bf00      	nop
 80a2e7c:	200003e0 	.word	0x200003e0

080a2e80 <_ZN9TimeClass5monthEv>:
{
 80a2e80:	b508      	push	{r3, lr}
	return month(now());
 80a2e82:	f7ff ffbc 	bl	80a2dfe <_ZN9TimeClass3nowEv>
}
 80a2e86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
 80a2e8a:	17c1      	asrs	r1, r0, #31
 80a2e8c:	f7ff be8c 	b.w	80a2ba8 <_ZN9TimeClass5monthEx>

080a2e90 <_ZN9TimeClass4yearEv>:
{
 80a2e90:	b508      	push	{r3, lr}
	return year(now());
 80a2e92:	f7ff ffb4 	bl	80a2dfe <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 80a2e96:	17c1      	asrs	r1, r0, #31
 80a2e98:	f7ff fe42 	bl	80a2b20 <_ZL22Refresh_UnixTime_Cachex>
}
 80a2e9c:	4b01      	ldr	r3, [pc, #4]	; (80a2ea4 <_ZN9TimeClass4yearEv+0x14>)
 80a2e9e:	6958      	ldr	r0, [r3, #20]
 80a2ea0:	bd08      	pop	{r3, pc}
 80a2ea2:	bf00      	nop
 80a2ea4:	200003e0 	.word	0x200003e0

080a2ea8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a2ea8:	4b02      	ldr	r3, [pc, #8]	; (80a2eb4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a2eaa:	681a      	ldr	r2, [r3, #0]
 80a2eac:	4b02      	ldr	r3, [pc, #8]	; (80a2eb8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a2eae:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a2eb0:	4770      	bx	lr
 80a2eb2:	bf00      	nop
 80a2eb4:	20000000 	.word	0x20000000
 80a2eb8:	200003dc 	.word	0x200003dc

080a2ebc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a2ebc:	2100      	movs	r1, #0
 80a2ebe:	f7ff ba9b 	b.w	80a23f8 <system_delay_ms>

080a2ec2 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a2ec2:	b510      	push	{r4, lr}
 80a2ec4:	4604      	mov	r4, r0
 80a2ec6:	f7fd f965 	bl	80a0194 <_ZNSt14_Function_baseD1Ev>
 80a2eca:	4620      	mov	r0, r4
 80a2ecc:	bd10      	pop	{r4, pc}

080a2ece <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
 80a2ece:	b513      	push	{r0, r1, r4, lr}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2ed0:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 80a2ed2:	460b      	mov	r3, r1
 80a2ed4:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2ed6:	c803      	ldmia	r0, {r0, r1}
 80a2ed8:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a2edc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a2ee0:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a2ee4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80a2ee8:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a2eec:	b002      	add	sp, #8
 80a2eee:	bd10      	pop	{r4, pc}

080a2ef0 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 80a2ef0:	2300      	movs	r3, #0
 80a2ef2:	4803      	ldr	r0, [pc, #12]	; (80a2f00 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a2ef4:	4a03      	ldr	r2, [pc, #12]	; (80a2f04 <_GLOBAL__sub_I_RGB+0x14>)
 80a2ef6:	4904      	ldr	r1, [pc, #16]	; (80a2f08 <_GLOBAL__sub_I_RGB+0x18>)
 80a2ef8:	6083      	str	r3, [r0, #8]
 80a2efa:	f000 bf27 	b.w	80a3d4c <__aeabi_atexit>
 80a2efe:	bf00      	nop
 80a2f00:	20000420 	.word	0x20000420
 80a2f04:	20000240 	.word	0x20000240
 80a2f08:	080a2ec3 	.word	0x080a2ec3

080a2f0c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a2f0c:	4b01      	ldr	r3, [pc, #4]	; (80a2f14 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a2f0e:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a2f10:	4770      	bx	lr
 80a2f12:	bf00      	nop
 80a2f14:	20000008 	.word	0x20000008

080a2f18 <serialEventRun>:
{
 80a2f18:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a2f1a:	4b13      	ldr	r3, [pc, #76]	; (80a2f68 <serialEventRun+0x50>)
 80a2f1c:	b143      	cbz	r3, 80a2f30 <serialEventRun+0x18>
 80a2f1e:	f000 fc29 	bl	80a3774 <_Z16_fetch_usbserialv>
 80a2f22:	6803      	ldr	r3, [r0, #0]
 80a2f24:	691b      	ldr	r3, [r3, #16]
 80a2f26:	4798      	blx	r3
 80a2f28:	2800      	cmp	r0, #0
 80a2f2a:	dd01      	ble.n	80a2f30 <serialEventRun+0x18>
        serialEvent();
 80a2f2c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a2f30:	4b0e      	ldr	r3, [pc, #56]	; (80a2f6c <serialEventRun+0x54>)
 80a2f32:	b143      	cbz	r3, 80a2f46 <serialEventRun+0x2e>
 80a2f34:	f000 fcc8 	bl	80a38c8 <_Z22__fetch_global_Serial1v>
 80a2f38:	6803      	ldr	r3, [r0, #0]
 80a2f3a:	691b      	ldr	r3, [r3, #16]
 80a2f3c:	4798      	blx	r3
 80a2f3e:	2800      	cmp	r0, #0
 80a2f40:	dd01      	ble.n	80a2f46 <serialEventRun+0x2e>
        serialEvent1();
 80a2f42:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a2f46:	4b0a      	ldr	r3, [pc, #40]	; (80a2f70 <serialEventRun+0x58>)
 80a2f48:	b10b      	cbz	r3, 80a2f4e <serialEventRun+0x36>
 80a2f4a:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a2f4e:	4b09      	ldr	r3, [pc, #36]	; (80a2f74 <serialEventRun+0x5c>)
 80a2f50:	b143      	cbz	r3, 80a2f64 <serialEventRun+0x4c>
 80a2f52:	f000 fc3f 	bl	80a37d4 <_Z17_fetch_usbserial1v>
 80a2f56:	6803      	ldr	r3, [r0, #0]
 80a2f58:	691b      	ldr	r3, [r3, #16]
 80a2f5a:	4798      	blx	r3
 80a2f5c:	2800      	cmp	r0, #0
 80a2f5e:	dd01      	ble.n	80a2f64 <serialEventRun+0x4c>
        usbSerialEvent1();
 80a2f60:	f3af 8000 	nop.w
}
 80a2f64:	bd08      	pop	{r3, pc}
 80a2f66:	bf00      	nop
	...

080a2f78 <_post_loop>:
{
 80a2f78:	b508      	push	{r3, lr}
	serialEventRun();
 80a2f7a:	f7ff ffcd 	bl	80a2f18 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a2f7e:	f7ff f919 	bl	80a21b4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a2f82:	4b01      	ldr	r3, [pc, #4]	; (80a2f88 <_post_loop+0x10>)
 80a2f84:	6018      	str	r0, [r3, #0]
}
 80a2f86:	bd08      	pop	{r3, pc}
 80a2f88:	200004a8 	.word	0x200004a8

080a2f8c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a2f8c:	4802      	ldr	r0, [pc, #8]	; (80a2f98 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a2f8e:	4a03      	ldr	r2, [pc, #12]	; (80a2f9c <_Z33system_initialize_user_backup_ramv+0x10>)
 80a2f90:	4903      	ldr	r1, [pc, #12]	; (80a2fa0 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a2f92:	1a12      	subs	r2, r2, r0
 80a2f94:	f002 b86e 	b.w	80a5074 <memcpy>
 80a2f98:	40024000 	.word	0x40024000
 80a2f9c:	40024004 	.word	0x40024004
 80a2fa0:	080a7b38 	.word	0x080a7b38

080a2fa4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2fa4:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a2fa6:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2fa8:	461a      	mov	r2, r3
 80a2faa:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2fae:	9300      	str	r3, [sp, #0]
 80a2fb0:	f7ff fa4c 	bl	80a244c <system_ctrl_set_result>
}
 80a2fb4:	b003      	add	sp, #12
 80a2fb6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a2fbc <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a2fbc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a2fbe:	8843      	ldrh	r3, [r0, #2]
 80a2fc0:	2b0a      	cmp	r3, #10
 80a2fc2:	d008      	beq.n	80a2fd6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a2fc4:	2b50      	cmp	r3, #80	; 0x50
 80a2fc6:	d10b      	bne.n	80a2fe0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a2fc8:	4b09      	ldr	r3, [pc, #36]	; (80a2ff0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a2fca:	681b      	ldr	r3, [r3, #0]
 80a2fcc:	b14b      	cbz	r3, 80a2fe2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a2fce:	b003      	add	sp, #12
 80a2fd0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a2fd4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a2fd6:	f7ff ffe5 	bl	80a2fa4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a2fda:	b003      	add	sp, #12
 80a2fdc:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2fe0:	2300      	movs	r3, #0
 80a2fe2:	461a      	mov	r2, r3
 80a2fe4:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2fe8:	9300      	str	r3, [sp, #0]
 80a2fea:	f7ff fa2f 	bl	80a244c <system_ctrl_set_result>
}
 80a2fee:	e7f4      	b.n	80a2fda <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a2ff0:	20000434 	.word	0x20000434

080a2ff4 <module_user_init_hook>:
{
 80a2ff4:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a2ff6:	4c12      	ldr	r4, [pc, #72]	; (80a3040 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a2ff8:	2100      	movs	r1, #0
 80a2ffa:	4812      	ldr	r0, [pc, #72]	; (80a3044 <module_user_init_hook+0x50>)
 80a2ffc:	f7ff fb38 	bl	80a2670 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a3000:	4d11      	ldr	r5, [pc, #68]	; (80a3048 <module_user_init_hook+0x54>)
 80a3002:	6823      	ldr	r3, [r4, #0]
 80a3004:	42ab      	cmp	r3, r5
 80a3006:	bf0c      	ite	eq
 80a3008:	2201      	moveq	r2, #1
 80a300a:	2200      	movne	r2, #0
 80a300c:	4b0f      	ldr	r3, [pc, #60]	; (80a304c <module_user_init_hook+0x58>)
 80a300e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a3010:	d002      	beq.n	80a3018 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
 80a3012:	f7ff ffbb 	bl	80a2f8c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a3016:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a3018:	f7ff f8c4 	bl	80a21a4 <HAL_RNG_GetRandomNumber>
 80a301c:	4604      	mov	r4, r0
    srand(seed);
 80a301e:	f002 fabf 	bl	80a55a0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a3022:	4b0b      	ldr	r3, [pc, #44]	; (80a3050 <module_user_init_hook+0x5c>)
 80a3024:	b113      	cbz	r3, 80a302c <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
 80a3026:	4620      	mov	r0, r4
 80a3028:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a302c:	2100      	movs	r1, #0
 80a302e:	4808      	ldr	r0, [pc, #32]	; (80a3050 <module_user_init_hook+0x5c>)
 80a3030:	f7ff fabe 	bl	80a25b0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a3034:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a3038:	2100      	movs	r1, #0
 80a303a:	4806      	ldr	r0, [pc, #24]	; (80a3054 <module_user_init_hook+0x60>)
 80a303c:	f7ff b9fc 	b.w	80a2438 <system_ctrl_set_app_request_handler>
 80a3040:	40024000 	.word	0x40024000
 80a3044:	080a2f0d 	.word	0x080a2f0d
 80a3048:	9a271c1e 	.word	0x9a271c1e
 80a304c:	20000430 	.word	0x20000430
 80a3050:	00000000 	.word	0x00000000
 80a3054:	080a2fbd 	.word	0x080a2fbd

080a3058 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a3058:	4770      	bx	lr

080a305a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 80a305a:	2000      	movs	r0, #0
 80a305c:	4770      	bx	lr

080a305e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a305e:	b510      	push	{r4, lr}
 80a3060:	4604      	mov	r4, r0
 80a3062:	2110      	movs	r1, #16
 80a3064:	f000 fe77 	bl	80a3d56 <_ZdlPvj>
 80a3068:	4620      	mov	r0, r4
 80a306a:	bd10      	pop	{r4, pc}

080a306c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80a306c:	b508      	push	{r3, lr}
      { delete this; }
 80a306e:	f7ff fff6 	bl	80a305e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a3072:	bd08      	pop	{r3, pc}

080a3074 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a3074:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a3076:	b530      	push	{r4, r5, lr}
        type_(type) {
 80a3078:	f64f 749c 	movw	r4, #65436	; 0xff9c
 80a307c:	6002      	str	r2, [r0, #0]
 80a307e:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a3080:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a3082:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a3084:	680c      	ldr	r4, [r1, #0]
 80a3086:	8085      	strh	r5, [r0, #4]
 80a3088:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a308a:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a308c:	bd30      	pop	{r4, r5, pc}

080a308e <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a308e:	b510      	push	{r4, lr}
 80a3090:	4604      	mov	r4, r0
    free((void*)msg_);
 80a3092:	6800      	ldr	r0, [r0, #0]
 80a3094:	f7ff fa9c 	bl	80a25d0 <free>
}
 80a3098:	4620      	mov	r0, r4
 80a309a:	bd10      	pop	{r4, pc}

080a309c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 80a309c:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a309e:	68c4      	ldr	r4, [r0, #12]
 80a30a0:	b1f4      	cbz	r4, 80a30e0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 80a30a2:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a30a4:	2b02      	cmp	r3, #2
 80a30a6:	d103      	bne.n	80a30b0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a30a8:	f104 000c 	add.w	r0, r4, #12
 80a30ac:	f7ff ffef 	bl	80a308e <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 80a30b0:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
 80a30b2:	b135      	cbz	r5, 80a30c2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
 80a30b4:	4628      	mov	r0, r5
 80a30b6:	f7fd f86d 	bl	80a0194 <_ZNSt14_Function_baseD1Ev>
 80a30ba:	2110      	movs	r1, #16
 80a30bc:	4628      	mov	r0, r5
 80a30be:	f000 fe4a 	bl	80a3d56 <_ZdlPvj>
 80a30c2:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a30c4:	b135      	cbz	r5, 80a30d4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a30c6:	4628      	mov	r0, r5
 80a30c8:	f7fd f864 	bl	80a0194 <_ZNSt14_Function_baseD1Ev>
 80a30cc:	2110      	movs	r1, #16
 80a30ce:	4628      	mov	r0, r5
 80a30d0:	f000 fe41 	bl	80a3d56 <_ZdlPvj>
 80a30d4:	4620      	mov	r0, r4
 80a30d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a30da:	2114      	movs	r1, #20
 80a30dc:	f000 be3b 	b.w	80a3d56 <_ZdlPvj>
 80a30e0:	bd38      	pop	{r3, r4, r5, pc}

080a30e2 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
{
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 80a30e2:	b510      	push	{r4, lr}
 80a30e4:	b088      	sub	sp, #32
 80a30e6:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a30e8:	4668      	mov	r0, sp
 80a30ea:	f7ff fb61 	bl	80a27b0 <_ZN6StringC1EPKc>
    return (*fn)(p);
 80a30ee:	4669      	mov	r1, sp
 80a30f0:	a804      	add	r0, sp, #16
 80a30f2:	f7ff fb9c 	bl	80a282e <_ZN6StringC1ERKS_>
 80a30f6:	a804      	add	r0, sp, #16
 80a30f8:	47a0      	blx	r4
 80a30fa:	4604      	mov	r4, r0
 80a30fc:	a804      	add	r0, sp, #16
 80a30fe:	f7ff fb0d 	bl	80a271c <_ZN6StringD1Ev>
    String p(param);
 80a3102:	4668      	mov	r0, sp
 80a3104:	f7ff fb0a 	bl	80a271c <_ZN6StringD1Ev>
}
 80a3108:	4620      	mov	r0, r4
 80a310a:	b008      	add	sp, #32
 80a310c:	bd10      	pop	{r4, pc}

080a310e <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_>:
    user_std_function_int_str_t* fn = (user_std_function_int_str_t*)(data);
    return (*fn)(String(param));
}

void CloudClass::call_wiring_event_handler(const void* handler_data, const char *event_name, const char *data)
{
 80a310e:	b507      	push	{r0, r1, r2, lr}
 80a3110:	e9cd 1200 	strd	r1, r2, [sp]
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a3114:	6882      	ldr	r2, [r0, #8]
 80a3116:	b90a      	cbnz	r2, 80a311c <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_+0xe>
	__throw_bad_function_call();
 80a3118:	f000 fe21 	bl	80a3d5e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a311c:	4669      	mov	r1, sp
 80a311e:	68c3      	ldr	r3, [r0, #12]
 80a3120:	aa01      	add	r2, sp, #4
 80a3122:	4798      	blx	r3
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}
 80a3124:	b003      	add	sp, #12
 80a3126:	f85d fb04 	ldr.w	pc, [sp], #4

080a312a <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 80a312a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 80a312c:	2300      	movs	r3, #0
         size = sizeof(*this);
 80a312e:	2410      	movs	r4, #16
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
 80a3130:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
 80a3134:	9201      	str	r2, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a3136:	4669      	mov	r1, sp
 80a3138:	461a      	mov	r2, r3
 80a313a:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
 80a313c:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
 80a3140:	f8ad 4000 	strh.w	r4, [sp]
 80a3144:	f7ff f9f4 	bl	80a2530 <spark_function>
}
 80a3148:	b004      	add	sp, #16
 80a314a:	bd10      	pop	{r4, pc}

080a314c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a314c:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a314e:	460e      	mov	r6, r1
 80a3150:	4604      	mov	r4, r0
 80a3152:	f856 3b04 	ldr.w	r3, [r6], #4
 80a3156:	460d      	mov	r5, r1
 80a3158:	a801      	add	r0, sp, #4
 80a315a:	4631      	mov	r1, r6
 80a315c:	9300      	str	r3, [sp, #0]
 80a315e:	f7ff fccf 	bl	80a2b00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a3162:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a3164:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a3166:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 80a3168:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a316a:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 80a316c:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 80a316e:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a3170:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 80a3172:	f7fd f8fb 	bl	80a036c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a3176:	4630      	mov	r0, r6
 80a3178:	f7fd f8f8 	bl	80a036c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 80a317c:	4628      	mov	r0, r5
 80a317e:	2108      	movs	r1, #8
 80a3180:	f000 fde9 	bl	80a3d56 <_ZdlPvj>
        return p;
    }
 80a3184:	4620      	mov	r0, r4
 80a3186:	b002      	add	sp, #8
 80a3188:	bd70      	pop	{r4, r5, r6, pc}

080a318a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
 80a318a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a318c:	b510      	push	{r4, lr}
      if (_M_empty())
 80a318e:	b90a      	cbnz	r2, 80a3194 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a3190:	f000 fde5 	bl	80a3d5e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a3194:	68c3      	ldr	r3, [r0, #12]
    }
 80a3196:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a319a:	4718      	bx	r3

080a319c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a319c:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a319e:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80a31a0:	f100 0110 	add.w	r1, r0, #16
 80a31a4:	f7ff fff1 	bl	80a318a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 80a31a8:	bd08      	pop	{r3, pc}

080a31aa <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 80a31aa:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a31ac:	b510      	push	{r4, lr}
      if (_M_empty())
 80a31ae:	b90a      	cbnz	r2, 80a31b4 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a31b0:	f000 fdd5 	bl	80a3d5e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a31b4:	68c3      	ldr	r3, [r0, #12]
    }
 80a31b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a31ba:	4718      	bx	r3

080a31bc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a31bc:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a31be:	6800      	ldr	r0, [r0, #0]
 80a31c0:	f100 0110 	add.w	r1, r0, #16
 80a31c4:	f7ff fff1 	bl	80a31aa <_ZNKSt8functionIFvRKbEEclES1_>
      }
 80a31c8:	bd08      	pop	{r3, pc}
	...

080a31cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 80a31cc:	b538      	push	{r3, r4, r5, lr}
 80a31ce:	2300      	movs	r3, #0
 80a31d0:	4604      	mov	r4, r0
 80a31d2:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a31d4:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 80a31d6:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a31d8:	f7fc ff5d 	bl	80a0096 <_Znwj>
 80a31dc:	b128      	cbz	r0, 80a31ea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 80a31de:	2301      	movs	r3, #1
 80a31e0:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 80a31e4:	4b02      	ldr	r3, [pc, #8]	; (80a31f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a31e6:	60c5      	str	r5, [r0, #12]
 80a31e8:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a31ea:	6020      	str	r0, [r4, #0]
	}
 80a31ec:	4620      	mov	r0, r4
 80a31ee:	bd38      	pop	{r3, r4, r5, pc}
 80a31f0:	080a74e8 	.word	0x080a74e8

080a31f4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 80a31f4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a31f6:	2300      	movs	r3, #0
 80a31f8:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 80a31fa:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a31fc:	4604      	mov	r4, r0
 80a31fe:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a3200:	b12b      	cbz	r3, 80a320e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a3202:	2202      	movs	r2, #2
 80a3204:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a3206:	68eb      	ldr	r3, [r5, #12]
 80a3208:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a320a:	68ab      	ldr	r3, [r5, #8]
 80a320c:	60a3      	str	r3, [r4, #8]
    }
 80a320e:	4620      	mov	r0, r4
 80a3210:	bd38      	pop	{r3, r4, r5, pc}
	...

080a3214 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 80a3214:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a3216:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a3218:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a321a:	4668      	mov	r0, sp
 80a321c:	f7ff ff2a 	bl	80a3074 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a3220:	f04f 0302 	mov.w	r3, #2
 80a3224:	e8d4 2f4f 	ldrexb	r2, [r4]
 80a3228:	2a00      	cmp	r2, #0
 80a322a:	d103      	bne.n	80a3234 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 80a322c:	e8c4 3f41 	strexb	r1, r3, [r4]
 80a3230:	2900      	cmp	r1, #0
 80a3232:	d1f7      	bne.n	80a3224 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 80a3234:	d125      	bne.n	80a3282 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
 80a3236:	f104 050c 	add.w	r5, r4, #12
 80a323a:	4669      	mov	r1, sp
 80a323c:	4628      	mov	r0, r5
 80a323e:	f7ff ff19 	bl	80a3074 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 80a3242:	2301      	movs	r3, #1
 80a3244:	f3bf 8f5b 	dmb	ish
 80a3248:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a324a:	2000      	movs	r0, #0
 80a324c:	f3bf 8f5b 	dmb	ish
 80a3250:	f104 0308 	add.w	r3, r4, #8
 80a3254:	e853 6f00 	ldrex	r6, [r3]
 80a3258:	e843 0200 	strex	r2, r0, [r3]
 80a325c:	2a00      	cmp	r2, #0
 80a325e:	d1f9      	bne.n	80a3254 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
 80a3260:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a3264:	b16e      	cbz	r6, 80a3282 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
 80a3266:	f7ff f8cf 	bl	80a2408 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a326a:	b178      	cbz	r0, 80a328c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a326c:	4629      	mov	r1, r5
 80a326e:	4630      	mov	r0, r6
 80a3270:	f7ff ff8b 	bl	80a318a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 80a3274:	4630      	mov	r0, r6
 80a3276:	f7fc ff8d 	bl	80a0194 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a327a:	2110      	movs	r1, #16
 80a327c:	4630      	mov	r0, r6
 80a327e:	f000 fd6a 	bl	80a3d56 <_ZdlPvj>
        p_->setError(std::move(error));
 80a3282:	4668      	mov	r0, sp
 80a3284:	f7ff ff03 	bl	80a308e <_ZN8particle5ErrorD1Ev>
    }
 80a3288:	b009      	add	sp, #36	; 0x24
 80a328a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a328c:	4631      	mov	r1, r6
 80a328e:	a802      	add	r0, sp, #8
 80a3290:	f7ff ffb0 	bl	80a31f4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a3294:	68e0      	ldr	r0, [r4, #12]
 80a3296:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a329a:	b108      	cbz	r0, 80a32a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
 80a329c:	f002 f9c4 	bl	80a5628 <strdup>
        type_(type) {
 80a32a0:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a32a2:	2010      	movs	r0, #16
 80a32a4:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a32a8:	f7fc fef5 	bl	80a0096 <_Znwj>
 80a32ac:	4605      	mov	r5, r0
 80a32ae:	b1e8      	cbz	r0, 80a32ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
 80a32b0:	2700      	movs	r7, #0
 80a32b2:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a32b4:	2018      	movs	r0, #24
 80a32b6:	f7fc feee 	bl	80a0096 <_Znwj>
 80a32ba:	4604      	mov	r4, r0
 80a32bc:	b188      	cbz	r0, 80a32e2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
 80a32be:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a32c0:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a32c2:	a802      	add	r0, sp, #8
 80a32c4:	f7ff fe03 	bl	80a2ece <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a32c8:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a32ca:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a32cc:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a32ce:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a32d0:	9204      	str	r2, [sp, #16]
 80a32d2:	68e2      	ldr	r2, [r4, #12]
 80a32d4:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a32d6:	60e3      	str	r3, [r4, #12]
 80a32d8:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 80a32dc:	9205      	str	r2, [sp, #20]
 80a32de:	f7ff fec9 	bl	80a3074 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 80a32e2:	4b08      	ldr	r3, [pc, #32]	; (80a3304 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a32e4:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a32e6:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a32e8:	4b07      	ldr	r3, [pc, #28]	; (80a3308 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
 80a32ea:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 80a32ec:	a806      	add	r0, sp, #24
 80a32ee:	f7ff fece 	bl	80a308e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a32f2:	a802      	add	r0, sp, #8
 80a32f4:	f7fc ff4e 	bl	80a0194 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a32f8:	2200      	movs	r2, #0
 80a32fa:	4629      	mov	r1, r5
 80a32fc:	4803      	ldr	r0, [pc, #12]	; (80a330c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
 80a32fe:	f7ff f88b 	bl	80a2418 <application_thread_invoke>
 80a3302:	e7b7      	b.n	80a3274 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
 80a3304:	080a319d 	.word	0x080a319d
 80a3308:	080a3435 	.word	0x080a3435
 80a330c:	080a394d 	.word	0x080a394d

080a3310 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a3310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a3314:	b08a      	sub	sp, #40	; 0x28
 80a3316:	4605      	mov	r5, r0
 80a3318:	460c      	mov	r4, r1
 80a331a:	4617      	mov	r7, r2
 80a331c:	4698      	mov	r8, r3
 80a331e:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a3322:	f7ff f915 	bl	80a2550 <spark_cloud_flag_connected>
 80a3326:	ae07      	add	r6, sp, #28
    if (!connected()) {
 80a3328:	4682      	mov	sl, r0
 80a332a:	bb38      	cbnz	r0, 80a337c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 80a332c:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a3330:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a3332:	a905      	add	r1, sp, #20
 80a3334:	4630      	mov	r0, r6
 80a3336:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a333a:	f7ff fe9b 	bl	80a3074 <_ZN8particle5ErrorC1EOS0_>
 80a333e:	2014      	movs	r0, #20
 80a3340:	f7fc fea9 	bl	80a0096 <_Znwj>
 80a3344:	4604      	mov	r4, r0
 80a3346:	b148      	cbz	r0, 80a335c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a3348:	2302      	movs	r3, #2
 80a334a:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a334c:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a334e:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a3352:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 80a3354:	4631      	mov	r1, r6
 80a3356:	300c      	adds	r0, #12
 80a3358:	f7ff fe8c 	bl	80a3074 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a335c:	4628      	mov	r0, r5
	: __shared_count(__p)
 80a335e:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a3360:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 80a3364:	f7ff ff32 	bl	80a31cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a3368:	4630      	mov	r0, r6
 80a336a:	f7ff fe90 	bl	80a308e <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a336e:	a805      	add	r0, sp, #20
 80a3370:	f7ff fe8d 	bl	80a308e <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
 80a3374:	4628      	mov	r0, r5
 80a3376:	b00a      	add	sp, #40	; 0x28
 80a3378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a337c:	230c      	movs	r3, #12
 80a337e:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a3382:	2014      	movs	r0, #20
 80a3384:	e9cd aa08 	strd	sl, sl, [sp, #32]
 80a3388:	9307      	str	r3, [sp, #28]
 80a338a:	f7fc fe84 	bl	80a0096 <_Znwj>
 80a338e:	4601      	mov	r1, r0
 80a3390:	b128      	cbz	r0, 80a339e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a3392:	e9c0 aa01 	strd	sl, sl, [r0, #4]
 80a3396:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a339a:	f880 a001 	strb.w	sl, [r0, #1]
 80a339e:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a33a0:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 80a33a2:	f7ff ff13 	bl	80a31cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 80a33a6:	4b22      	ldr	r3, [pc, #136]	; (80a3430 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a33a8:	2008      	movs	r0, #8
 80a33aa:	9308      	str	r3, [sp, #32]
 80a33ac:	f7fc fe73 	bl	80a0096 <_Znwj>
 80a33b0:	4682      	mov	sl, r0
 80a33b2:	b128      	cbz	r0, 80a33c0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a33b4:	9b03      	ldr	r3, [sp, #12]
 80a33b6:	a904      	add	r1, sp, #16
 80a33b8:	f840 3b04 	str.w	r3, [r0], #4
 80a33bc:	f7ff fba0 	bl	80a2b00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a33c0:	4642      	mov	r2, r8
 80a33c2:	4639      	mov	r1, r7
 80a33c4:	4620      	mov	r0, r4
 80a33c6:	9600      	str	r6, [sp, #0]
 80a33c8:	fa5f f389 	uxtb.w	r3, r9
    d.handler_data = p.dataPtr();
 80a33cc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a33d0:	f7ff f8ce 	bl	80a2570 <spark_send_event>
 80a33d4:	b9b8      	cbnz	r0, 80a3406 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
 80a33d6:	9b03      	ldr	r3, [sp, #12]
 80a33d8:	785b      	ldrb	r3, [r3, #1]
 80a33da:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a33de:	b993      	cbnz	r3, 80a3406 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
 80a33e0:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 80a33e4:	a905      	add	r1, sp, #20
 80a33e6:	a803      	add	r0, sp, #12
 80a33e8:	9205      	str	r2, [sp, #20]
 80a33ea:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a33ee:	f7ff ff11 	bl	80a3214 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a33f2:	a805      	add	r0, sp, #20
 80a33f4:	f7ff fe4b 	bl	80a308e <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a33f8:	a805      	add	r0, sp, #20
 80a33fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a33fc:	f7ff fea6 	bl	80a314c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 80a3400:	a806      	add	r0, sp, #24
 80a3402:	f7fc ffb3 	bl	80a036c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a3406:	9b03      	ldr	r3, [sp, #12]
 80a3408:	a904      	add	r1, sp, #16
 80a340a:	a806      	add	r0, sp, #24
 80a340c:	9305      	str	r3, [sp, #20]
 80a340e:	f7ff fb77 	bl	80a2b00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a3412:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a3414:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a3416:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 80a3418:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a341a:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 80a341c:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 80a341e:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 80a3420:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 80a3422:	f7fc ffa3 	bl	80a036c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a3426:	a804      	add	r0, sp, #16
 80a3428:	f7fc ffa0 	bl	80a036c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 80a342c:	e7a2      	b.n	80a3374 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 80a342e:	bf00      	nop
 80a3430:	080a34f9 	.word	0x080a34f9

080a3434 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
 80a3434:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a3436:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3438:	4605      	mov	r5, r0
	  switch (__op)
 80a343a:	d007      	beq.n	80a344c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
 80a343c:	2a03      	cmp	r2, #3
 80a343e:	d018      	beq.n	80a3472 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
 80a3440:	2a01      	cmp	r2, #1
 80a3442:	d101      	bne.n	80a3448 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80a3444:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a3446:	6003      	str	r3, [r0, #0]
	}
 80a3448:	2000      	movs	r0, #0
 80a344a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80a344c:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 80a344e:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a3450:	f7fc fe21 	bl	80a0096 <_Znwj>
 80a3454:	4604      	mov	r4, r0
 80a3456:	b150      	cbz	r0, 80a346e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      _Bind(const _Bind&) = default;
 80a3458:	4631      	mov	r1, r6
 80a345a:	f7ff fecb 	bl	80a31f4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a345e:	6930      	ldr	r0, [r6, #16]
 80a3460:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a3464:	b108      	cbz	r0, 80a346a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 80a3466:	f002 f8df 	bl	80a5628 <strdup>
        type_(type) {
 80a346a:	6120      	str	r0, [r4, #16]
 80a346c:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 80a346e:	602c      	str	r4, [r5, #0]
	}
 80a3470:	e7ea      	b.n	80a3448 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 80a3472:	6804      	ldr	r4, [r0, #0]
 80a3474:	2c00      	cmp	r4, #0
 80a3476:	d0e7      	beq.n	80a3448 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
 80a3478:	f104 0010 	add.w	r0, r4, #16
 80a347c:	f7ff fe07 	bl	80a308e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a3480:	4620      	mov	r0, r4
 80a3482:	f7fc fe87 	bl	80a0194 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a3486:	2118      	movs	r1, #24
 80a3488:	4620      	mov	r0, r4
 80a348a:	f000 fc64 	bl	80a3d56 <_ZdlPvj>
 80a348e:	e7db      	b.n	80a3448 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

080a3490 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 80a3490:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a3492:	2300      	movs	r3, #0
 80a3494:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 80a3496:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a3498:	4604      	mov	r4, r0
 80a349a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a349c:	b12b      	cbz	r3, 80a34aa <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a349e:	2202      	movs	r2, #2
 80a34a0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a34a2:	68eb      	ldr	r3, [r5, #12]
 80a34a4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a34a6:	68ab      	ldr	r3, [r5, #8]
 80a34a8:	60a3      	str	r3, [r4, #8]
    }
 80a34aa:	4620      	mov	r0, r4
 80a34ac:	bd38      	pop	{r3, r4, r5, pc}

080a34ae <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
 80a34ae:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a34b0:	b570      	push	{r4, r5, r6, lr}
 80a34b2:	4604      	mov	r4, r0
	  switch (__op)
 80a34b4:	d007      	beq.n	80a34c6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
 80a34b6:	2a03      	cmp	r2, #3
 80a34b8:	d012      	beq.n	80a34e0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
 80a34ba:	2a01      	cmp	r2, #1
 80a34bc:	d101      	bne.n	80a34c2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80a34be:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a34c0:	6003      	str	r3, [r0, #0]
	}
 80a34c2:	2000      	movs	r0, #0
 80a34c4:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80a34c6:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 80a34c8:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a34ca:	f7fc fde4 	bl	80a0096 <_Znwj>
 80a34ce:	4605      	mov	r5, r0
 80a34d0:	b120      	cbz	r0, 80a34dc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 80a34d2:	4631      	mov	r1, r6
 80a34d4:	f7ff ffdc 	bl	80a3490 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a34d8:	7c33      	ldrb	r3, [r6, #16]
 80a34da:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 80a34dc:	6025      	str	r5, [r4, #0]
	}
 80a34de:	e7f0      	b.n	80a34c2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 80a34e0:	6804      	ldr	r4, [r0, #0]
 80a34e2:	2c00      	cmp	r4, #0
 80a34e4:	d0ed      	beq.n	80a34c2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
 80a34e6:	4620      	mov	r0, r4
 80a34e8:	f7fc fe54 	bl	80a0194 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a34ec:	2114      	movs	r1, #20
 80a34ee:	4620      	mov	r0, r4
 80a34f0:	f000 fc31 	bl	80a3d56 <_ZdlPvj>
 80a34f4:	e7e5      	b.n	80a34c2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

080a34f8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a34f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a34fa:	4604      	mov	r4, r0
 80a34fc:	b089      	sub	sp, #36	; 0x24
 80a34fe:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a3500:	a801      	add	r0, sp, #4
 80a3502:	4611      	mov	r1, r2
 80a3504:	f7ff fe22 	bl	80a314c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a3508:	b1a4      	cbz	r4, 80a3534 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a350a:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a350c:	b11d      	cbz	r5, 80a3516 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 80a350e:	4628      	mov	r0, r5
 80a3510:	f002 f88a 	bl	80a5628 <strdup>
 80a3514:	4605      	mov	r5, r0
 80a3516:	a801      	add	r0, sp, #4
 80a3518:	a903      	add	r1, sp, #12
        type_(type) {
 80a351a:	9503      	str	r5, [sp, #12]
 80a351c:	f8ad 4010 	strh.w	r4, [sp, #16]
 80a3520:	f7ff fe78 	bl	80a3214 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a3524:	a803      	add	r0, sp, #12
 80a3526:	f7ff fdb2 	bl	80a308e <_ZN8particle5ErrorD1Ev>
 80a352a:	a802      	add	r0, sp, #8
 80a352c:	f7fc ff1e 	bl	80a036c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a3530:	b009      	add	sp, #36	; 0x24
 80a3532:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a3534:	2301      	movs	r3, #1
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a3536:	9d01      	ldr	r5, [sp, #4]
 80a3538:	e8d5 2f4f 	ldrexb	r2, [r5]
 80a353c:	2a00      	cmp	r2, #0
 80a353e:	d103      	bne.n	80a3548 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 80a3540:	e8c5 3f41 	strexb	r1, r3, [r5]
 80a3544:	2900      	cmp	r1, #0
 80a3546:	d1f7      	bne.n	80a3538 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 80a3548:	d1ef      	bne.n	80a352a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 80a354a:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 80a354c:	f3bf 8f5b 	dmb	ish
 80a3550:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a3552:	f3bf 8f5b 	dmb	ish
 80a3556:	1d2b      	adds	r3, r5, #4
 80a3558:	e853 6f00 	ldrex	r6, [r3]
 80a355c:	e843 4200 	strex	r2, r4, [r3]
 80a3560:	2a00      	cmp	r2, #0
 80a3562:	d1f9      	bne.n	80a3558 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
 80a3564:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a3568:	2e00      	cmp	r6, #0
 80a356a:	d0de      	beq.n	80a352a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 80a356c:	4620      	mov	r0, r4
 80a356e:	f7fe ff4b 	bl	80a2408 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a3572:	4607      	mov	r7, r0
 80a3574:	b160      	cbz	r0, 80a3590 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a3576:	4630      	mov	r0, r6
 80a3578:	f105 010c 	add.w	r1, r5, #12
 80a357c:	f7ff fe15 	bl	80a31aa <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 80a3580:	4630      	mov	r0, r6
 80a3582:	f7fc fe07 	bl	80a0194 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a3586:	2110      	movs	r1, #16
 80a3588:	4630      	mov	r0, r6
 80a358a:	f000 fbe4 	bl	80a3d56 <_ZdlPvj>
 80a358e:	e7cc      	b.n	80a352a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a3590:	4631      	mov	r1, r6
 80a3592:	a803      	add	r0, sp, #12
 80a3594:	f7ff ff7c 	bl	80a3490 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a3598:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a359a:	2010      	movs	r0, #16
 80a359c:	f88d 301c 	strb.w	r3, [sp, #28]
 80a35a0:	f7fc fd79 	bl	80a0096 <_Znwj>
 80a35a4:	4605      	mov	r5, r0
 80a35a6:	b1d0      	cbz	r0, 80a35de <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
 80a35a8:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a35aa:	2014      	movs	r0, #20
 80a35ac:	f7fc fd73 	bl	80a0096 <_Znwj>
 80a35b0:	4604      	mov	r4, r0
 80a35b2:	b178      	cbz	r0, 80a35d4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
	std::swap(_M_functor, __x._M_functor);
 80a35b4:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a35b6:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a35b8:	a803      	add	r0, sp, #12
 80a35ba:	f7ff fc88 	bl	80a2ece <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a35be:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a35c0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a35c2:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a35c4:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 80a35c6:	9205      	str	r2, [sp, #20]
 80a35c8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a35ca:	60e3      	str	r3, [r4, #12]
 80a35cc:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 80a35d0:	9206      	str	r2, [sp, #24]
 80a35d2:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 80a35d4:	4b06      	ldr	r3, [pc, #24]	; (80a35f0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a35d6:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a35d8:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a35da:	4b06      	ldr	r3, [pc, #24]	; (80a35f4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 80a35dc:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 80a35de:	a803      	add	r0, sp, #12
 80a35e0:	f7fc fdd8 	bl	80a0194 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a35e4:	2200      	movs	r2, #0
 80a35e6:	4629      	mov	r1, r5
 80a35e8:	4803      	ldr	r0, [pc, #12]	; (80a35f8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
 80a35ea:	f7fe ff15 	bl	80a2418 <application_thread_invoke>
 80a35ee:	e7c7      	b.n	80a3580 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
 80a35f0:	080a31bd 	.word	0x080a31bd
 80a35f4:	080a34af 	.word	0x080a34af
 80a35f8:	080a394d 	.word	0x080a394d

080a35fc <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a35fc:	4770      	bx	lr

080a35fe <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a35fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3600:	460e      	mov	r6, r1
 80a3602:	2400      	movs	r4, #0
 80a3604:	f100 0708 	add.w	r7, r0, #8
 80a3608:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a360a:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a360e:	220a      	movs	r2, #10
 80a3610:	4630      	mov	r0, r6
 80a3612:	f7ff fa52 	bl	80a2aba <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a3616:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a3618:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a361a:	d101      	bne.n	80a3620 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a361c:	4620      	mov	r0, r4
 80a361e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a3620:	2c00      	cmp	r4, #0
 80a3622:	d0f2      	beq.n	80a360a <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a3624:	212e      	movs	r1, #46	; 0x2e
 80a3626:	4630      	mov	r0, r6
 80a3628:	f7ff fa44 	bl	80a2ab4 <_ZN5Print5printEc>
 80a362c:	4404      	add	r4, r0
 80a362e:	e7ec      	b.n	80a360a <_ZNK9IPAddress7printToER5Print+0xc>

080a3630 <_ZN9IPAddressD0Ev>:
 80a3630:	b510      	push	{r4, lr}
 80a3632:	4604      	mov	r4, r0
 80a3634:	2118      	movs	r1, #24
 80a3636:	f000 fb8e 	bl	80a3d56 <_ZdlPvj>
 80a363a:	4620      	mov	r0, r4
 80a363c:	bd10      	pop	{r4, pc}
	...

080a3640 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a3640:	b510      	push	{r4, lr}
 80a3642:	4604      	mov	r4, r0
 80a3644:	4b04      	ldr	r3, [pc, #16]	; (80a3658 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a3646:	2211      	movs	r2, #17
 80a3648:	2100      	movs	r1, #0
 80a364a:	f840 3b04 	str.w	r3, [r0], #4
 80a364e:	f001 fd1f 	bl	80a5090 <memset>
}
 80a3652:	4620      	mov	r0, r4
 80a3654:	bd10      	pop	{r4, pc}
 80a3656:	bf00      	nop
 80a3658:	080a7504 	.word	0x080a7504

080a365c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a365c:	4603      	mov	r3, r0
 80a365e:	4a07      	ldr	r2, [pc, #28]	; (80a367c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a3660:	b510      	push	{r4, lr}
 80a3662:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a3666:	f101 0210 	add.w	r2, r1, #16
 80a366a:	f851 4b04 	ldr.w	r4, [r1], #4
 80a366e:	4291      	cmp	r1, r2
 80a3670:	f843 4b04 	str.w	r4, [r3], #4
 80a3674:	d1f9      	bne.n	80a366a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a3676:	780a      	ldrb	r2, [r1, #0]
 80a3678:	701a      	strb	r2, [r3, #0]
}
 80a367a:	bd10      	pop	{r4, pc}
 80a367c:	080a7504 	.word	0x080a7504

080a3680 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t addr)
 80a3680:	4a02      	ldr	r2, [pc, #8]	; (80a368c <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = addr;
 80a3682:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a3686:	2204      	movs	r2, #4
 80a3688:	7502      	strb	r2, [r0, #20]
}
 80a368a:	4770      	bx	lr
 80a368c:	080a7504 	.word	0x080a7504

080a3690 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a3690:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a3692:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a3696:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a369a:	2304      	movs	r3, #4
 80a369c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a36a0:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a36a4:	6044      	str	r4, [r0, #4]
 80a36a6:	7503      	strb	r3, [r0, #20]
}
 80a36a8:	bd10      	pop	{r4, pc}
	...

080a36ac <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a36ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a36ae:	4d04      	ldr	r5, [pc, #16]	; (80a36c0 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a36b0:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a36b2:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a36b6:	9500      	str	r5, [sp, #0]
 80a36b8:	f7ff ffea 	bl	80a3690 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a36bc:	b003      	add	sp, #12
 80a36be:	bd30      	pop	{r4, r5, pc}
 80a36c0:	080a7504 	.word	0x080a7504

080a36c4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a36c4:	7441      	strb	r1, [r0, #17]
}
 80a36c6:	4770      	bx	lr

080a36c8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a36c8:	4770      	bx	lr

080a36ca <_ZN9USBSerial4readEv>:
{
 80a36ca:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a36cc:	2100      	movs	r1, #0
 80a36ce:	7c00      	ldrb	r0, [r0, #16]
 80a36d0:	f7fe fe5a 	bl	80a2388 <HAL_USB_USART_Receive_Data>
}
 80a36d4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a36d8:	bd08      	pop	{r3, pc}

080a36da <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
 80a36da:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a36dc:	2101      	movs	r1, #1
 80a36de:	7c00      	ldrb	r0, [r0, #16]
 80a36e0:	f7fe fe52 	bl	80a2388 <HAL_USB_USART_Receive_Data>
}
 80a36e4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a36e8:	bd08      	pop	{r3, pc}

080a36ea <_ZN9USBSerial17availableForWriteEv>:
{
 80a36ea:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a36ec:	7c00      	ldrb	r0, [r0, #16]
 80a36ee:	f7fe fe43 	bl	80a2378 <HAL_USB_USART_Available_Data_For_Write>
}
 80a36f2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a36f6:	bd08      	pop	{r3, pc}

080a36f8 <_ZN9USBSerial9availableEv>:
{
 80a36f8:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a36fa:	7c00      	ldrb	r0, [r0, #16]
 80a36fc:	f7fe fe34 	bl	80a2368 <HAL_USB_USART_Available_Data>
}
 80a3700:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a3704:	bd08      	pop	{r3, pc}

080a3706 <_ZN9USBSerial5writeEh>:
{
 80a3706:	b538      	push	{r3, r4, r5, lr}
 80a3708:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a370a:	7c00      	ldrb	r0, [r0, #16]
{
 80a370c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a370e:	f7fe fe33 	bl	80a2378 <HAL_USB_USART_Available_Data_For_Write>
 80a3712:	2800      	cmp	r0, #0
 80a3714:	dc01      	bgt.n	80a371a <_ZN9USBSerial5writeEh+0x14>
 80a3716:	7c60      	ldrb	r0, [r4, #17]
 80a3718:	b128      	cbz	r0, 80a3726 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a371a:	4629      	mov	r1, r5
 80a371c:	7c20      	ldrb	r0, [r4, #16]
 80a371e:	f7fe fe3b 	bl	80a2398 <HAL_USB_USART_Send_Data>
 80a3722:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a3726:	bd38      	pop	{r3, r4, r5, pc}

080a3728 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a3728:	7c00      	ldrb	r0, [r0, #16]
 80a372a:	f7fe be3d 	b.w	80a23a8 <HAL_USB_USART_Flush_Data>

080a372e <_ZN9USBSerialD0Ev>:
 80a372e:	b510      	push	{r4, lr}
 80a3730:	4604      	mov	r4, r0
 80a3732:	2114      	movs	r1, #20
 80a3734:	f000 fb0f 	bl	80a3d56 <_ZdlPvj>
 80a3738:	4620      	mov	r0, r4
 80a373a:	bd10      	pop	{r4, pc}

080a373c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a373c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a373e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a3742:	4604      	mov	r4, r0
 80a3744:	4608      	mov	r0, r1
 80a3746:	2100      	movs	r1, #0
 80a3748:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a374c:	4b04      	ldr	r3, [pc, #16]	; (80a3760 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a374e:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a3750:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a3752:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a3754:	4611      	mov	r1, r2
  _blocking = true;
 80a3756:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a3758:	f7fe fdfe 	bl	80a2358 <HAL_USB_USART_Init>
}
 80a375c:	4620      	mov	r0, r4
 80a375e:	bd10      	pop	{r4, pc}
 80a3760:	080a7518 	.word	0x080a7518

080a3764 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a3764:	b510      	push	{r4, lr}
 80a3766:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a3768:	2214      	movs	r2, #20
 80a376a:	2100      	movs	r1, #0
 80a376c:	f001 fc90 	bl	80a5090 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a3770:	4620      	mov	r0, r4
 80a3772:	bd10      	pop	{r4, pc}

080a3774 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a3774:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a3776:	4d0f      	ldr	r5, [pc, #60]	; (80a37b4 <_Z16_fetch_usbserialv+0x40>)
{
 80a3778:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a377a:	a801      	add	r0, sp, #4
 80a377c:	f7ff fff2 	bl	80a3764 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a3780:	7829      	ldrb	r1, [r5, #0]
 80a3782:	f3bf 8f5b 	dmb	ish
 80a3786:	f011 0401 	ands.w	r4, r1, #1
 80a378a:	d110      	bne.n	80a37ae <_Z16_fetch_usbserialv+0x3a>
 80a378c:	4628      	mov	r0, r5
 80a378e:	f7fc fc88 	bl	80a00a2 <__cxa_guard_acquire>
 80a3792:	b160      	cbz	r0, 80a37ae <_Z16_fetch_usbserialv+0x3a>
 80a3794:	4621      	mov	r1, r4
 80a3796:	aa01      	add	r2, sp, #4
 80a3798:	4807      	ldr	r0, [pc, #28]	; (80a37b8 <_Z16_fetch_usbserialv+0x44>)
 80a379a:	f7ff ffcf 	bl	80a373c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a379e:	4628      	mov	r0, r5
 80a37a0:	f7fc fc84 	bl	80a00ac <__cxa_guard_release>
 80a37a4:	4a05      	ldr	r2, [pc, #20]	; (80a37bc <_Z16_fetch_usbserialv+0x48>)
 80a37a6:	4906      	ldr	r1, [pc, #24]	; (80a37c0 <_Z16_fetch_usbserialv+0x4c>)
 80a37a8:	4803      	ldr	r0, [pc, #12]	; (80a37b8 <_Z16_fetch_usbserialv+0x44>)
 80a37aa:	f000 facf 	bl	80a3d4c <__aeabi_atexit>
	return _usbserial;
}
 80a37ae:	4802      	ldr	r0, [pc, #8]	; (80a37b8 <_Z16_fetch_usbserialv+0x44>)
 80a37b0:	b007      	add	sp, #28
 80a37b2:	bd30      	pop	{r4, r5, pc}
 80a37b4:	20000438 	.word	0x20000438
 80a37b8:	20000440 	.word	0x20000440
 80a37bc:	20000240 	.word	0x20000240
 80a37c0:	080a36c9 	.word	0x080a36c9

080a37c4 <_Z23acquireUSBSerial1Bufferv>:
 80a37c4:	b510      	push	{r4, lr}
 80a37c6:	4604      	mov	r4, r0
 80a37c8:	2214      	movs	r2, #20
 80a37ca:	2100      	movs	r1, #0
 80a37cc:	f001 fc60 	bl	80a5090 <memset>
 80a37d0:	4620      	mov	r0, r4
 80a37d2:	bd10      	pop	{r4, pc}

080a37d4 <_Z17_fetch_usbserial1v>:

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a37d4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a37d6:	4c0f      	ldr	r4, [pc, #60]	; (80a3814 <_Z17_fetch_usbserial1v+0x40>)
{
 80a37d8:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a37da:	a801      	add	r0, sp, #4
 80a37dc:	f7ff fff2 	bl	80a37c4 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a37e0:	7823      	ldrb	r3, [r4, #0]
 80a37e2:	f3bf 8f5b 	dmb	ish
 80a37e6:	07db      	lsls	r3, r3, #31
 80a37e8:	d410      	bmi.n	80a380c <_Z17_fetch_usbserial1v+0x38>
 80a37ea:	4620      	mov	r0, r4
 80a37ec:	f7fc fc59 	bl	80a00a2 <__cxa_guard_acquire>
 80a37f0:	b160      	cbz	r0, 80a380c <_Z17_fetch_usbserial1v+0x38>
 80a37f2:	2101      	movs	r1, #1
 80a37f4:	aa01      	add	r2, sp, #4
 80a37f6:	4808      	ldr	r0, [pc, #32]	; (80a3818 <_Z17_fetch_usbserial1v+0x44>)
 80a37f8:	f7ff ffa0 	bl	80a373c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a37fc:	4620      	mov	r0, r4
 80a37fe:	f7fc fc55 	bl	80a00ac <__cxa_guard_release>
 80a3802:	4a06      	ldr	r2, [pc, #24]	; (80a381c <_Z17_fetch_usbserial1v+0x48>)
 80a3804:	4906      	ldr	r1, [pc, #24]	; (80a3820 <_Z17_fetch_usbserial1v+0x4c>)
 80a3806:	4804      	ldr	r0, [pc, #16]	; (80a3818 <_Z17_fetch_usbserial1v+0x44>)
 80a3808:	f000 faa0 	bl	80a3d4c <__aeabi_atexit>
  return _usbserial1;
}
 80a380c:	4802      	ldr	r0, [pc, #8]	; (80a3818 <_Z17_fetch_usbserial1v+0x44>)
 80a380e:	b006      	add	sp, #24
 80a3810:	bd10      	pop	{r4, pc}
 80a3812:	bf00      	nop
 80a3814:	2000043c 	.word	0x2000043c
 80a3818:	20000454 	.word	0x20000454
 80a381c:	20000240 	.word	0x20000240
 80a3820:	080a36c9 	.word	0x080a36c9

080a3824 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80a3824:	4770      	bx	lr

080a3826 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a3826:	7441      	strb	r1, [r0, #17]
}
 80a3828:	4770      	bx	lr

080a382a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80a382a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a382c:	7c00      	ldrb	r0, [r0, #16]
 80a382e:	f7fe fd41 	bl	80a22b4 <hal_usart_available_data_for_write>
}
 80a3832:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a3836:	bd08      	pop	{r3, pc}

080a3838 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a3838:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a383a:	7c00      	ldrb	r0, [r0, #16]
 80a383c:	f7fe fd12 	bl	80a2264 <hal_usart_available>
}
 80a3840:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a3844:	bd08      	pop	{r3, pc}

080a3846 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a3846:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a3848:	7c00      	ldrb	r0, [r0, #16]
 80a384a:	f7fe fd1b 	bl	80a2284 <hal_usart_peek>
}
 80a384e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a3852:	bd08      	pop	{r3, pc}

080a3854 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a3854:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a3856:	7c00      	ldrb	r0, [r0, #16]
 80a3858:	f7fe fd0c 	bl	80a2274 <hal_usart_read>
}
 80a385c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a3860:	bd08      	pop	{r3, pc}

080a3862 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80a3862:	7c00      	ldrb	r0, [r0, #16]
 80a3864:	f7fe bd16 	b.w	80a2294 <hal_usart_flush>

080a3868 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a3868:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a386a:	7c46      	ldrb	r6, [r0, #17]
{
 80a386c:	4604      	mov	r4, r0
 80a386e:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a3870:	b12e      	cbz	r6, 80a387e <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80a3872:	4629      	mov	r1, r5
 80a3874:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a3876:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a387a:	f7fe bceb 	b.w	80a2254 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a387e:	7c00      	ldrb	r0, [r0, #16]
 80a3880:	f7fe fd18 	bl	80a22b4 <hal_usart_available_data_for_write>
 80a3884:	2800      	cmp	r0, #0
 80a3886:	dcf4      	bgt.n	80a3872 <_ZN11USARTSerial5writeEh+0xa>
}
 80a3888:	4630      	mov	r0, r6
 80a388a:	bd70      	pop	{r4, r5, r6, pc}

080a388c <_ZN11USARTSerialD0Ev>:
 80a388c:	b510      	push	{r4, lr}
 80a388e:	4604      	mov	r4, r0
 80a3890:	2114      	movs	r1, #20
 80a3892:	f000 fa60 	bl	80a3d56 <_ZdlPvj>
 80a3896:	4620      	mov	r0, r4
 80a3898:	bd10      	pop	{r4, pc}
	...

080a389c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80a389c:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a38a0:	b510      	push	{r4, lr}
 80a38a2:	4604      	mov	r4, r0
 80a38a4:	4608      	mov	r0, r1
 80a38a6:	4611      	mov	r1, r2
 80a38a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a38ac:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80a38b0:	4a04      	ldr	r2, [pc, #16]	; (80a38c4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80a38b2:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a38b4:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80a38b6:	2201      	movs	r2, #1
 80a38b8:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80a38ba:	461a      	mov	r2, r3
 80a38bc:	f7fe fcc2 	bl	80a2244 <hal_usart_init>
}
 80a38c0:	4620      	mov	r0, r4
 80a38c2:	bd10      	pop	{r4, pc}
 80a38c4:	080a7548 	.word	0x080a7548

080a38c8 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a38c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
 80a38ca:	4c1a      	ldr	r4, [pc, #104]	; (80a3934 <_Z22__fetch_global_Serial1v+0x6c>)
 80a38cc:	6826      	ldr	r6, [r4, #0]
 80a38ce:	b94e      	cbnz	r6, 80a38e4 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new hal_usart_ring_buffer_t();
 80a38d0:	2084      	movs	r0, #132	; 0x84
 80a38d2:	f7fc fbe0 	bl	80a0096 <_Znwj>
 80a38d6:	4605      	mov	r5, r0
 80a38d8:	b118      	cbz	r0, 80a38e2 <_Z22__fetch_global_Serial1v+0x1a>
 80a38da:	2284      	movs	r2, #132	; 0x84
 80a38dc:	4631      	mov	r1, r6
 80a38de:	f001 fbd7 	bl	80a5090 <memset>
 80a38e2:	6025      	str	r5, [r4, #0]
  }
  if (!serial1_tx_buffer) {
 80a38e4:	4d14      	ldr	r5, [pc, #80]	; (80a3938 <_Z22__fetch_global_Serial1v+0x70>)
 80a38e6:	682f      	ldr	r7, [r5, #0]
 80a38e8:	b94f      	cbnz	r7, 80a38fe <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
 80a38ea:	2084      	movs	r0, #132	; 0x84
 80a38ec:	f7fc fbd3 	bl	80a0096 <_Znwj>
 80a38f0:	4606      	mov	r6, r0
 80a38f2:	b118      	cbz	r0, 80a38fc <_Z22__fetch_global_Serial1v+0x34>
 80a38f4:	2284      	movs	r2, #132	; 0x84
 80a38f6:	4639      	mov	r1, r7
 80a38f8:	f001 fbca 	bl	80a5090 <memset>
 80a38fc:	602e      	str	r6, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
 80a38fe:	4f0f      	ldr	r7, [pc, #60]	; (80a393c <_Z22__fetch_global_Serial1v+0x74>)
 80a3900:	7839      	ldrb	r1, [r7, #0]
 80a3902:	f3bf 8f5b 	dmb	ish
 80a3906:	f011 0601 	ands.w	r6, r1, #1
 80a390a:	d111      	bne.n	80a3930 <_Z22__fetch_global_Serial1v+0x68>
 80a390c:	4638      	mov	r0, r7
 80a390e:	f7fc fbc8 	bl	80a00a2 <__cxa_guard_acquire>
 80a3912:	b168      	cbz	r0, 80a3930 <_Z22__fetch_global_Serial1v+0x68>
 80a3914:	4631      	mov	r1, r6
 80a3916:	6822      	ldr	r2, [r4, #0]
 80a3918:	682b      	ldr	r3, [r5, #0]
 80a391a:	4809      	ldr	r0, [pc, #36]	; (80a3940 <_Z22__fetch_global_Serial1v+0x78>)
 80a391c:	f7ff ffbe 	bl	80a389c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80a3920:	4638      	mov	r0, r7
 80a3922:	f7fc fbc3 	bl	80a00ac <__cxa_guard_release>
 80a3926:	4a07      	ldr	r2, [pc, #28]	; (80a3944 <_Z22__fetch_global_Serial1v+0x7c>)
 80a3928:	4907      	ldr	r1, [pc, #28]	; (80a3948 <_Z22__fetch_global_Serial1v+0x80>)
 80a392a:	4805      	ldr	r0, [pc, #20]	; (80a3940 <_Z22__fetch_global_Serial1v+0x78>)
 80a392c:	f000 fa0e 	bl	80a3d4c <__aeabi_atexit>
#endif
	return serial1;
}
 80a3930:	4803      	ldr	r0, [pc, #12]	; (80a3940 <_Z22__fetch_global_Serial1v+0x78>)
 80a3932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a3934:	2000046c 	.word	0x2000046c
 80a3938:	20000470 	.word	0x20000470
 80a393c:	20000468 	.word	0x20000468
 80a3940:	20000474 	.word	0x20000474
 80a3944:	20000240 	.word	0x20000240
 80a3948:	080a3825 	.word	0x080a3825

080a394c <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a394c:	b510      	push	{r4, lr}
      if (_M_empty())
 80a394e:	6883      	ldr	r3, [r0, #8]
 80a3950:	4604      	mov	r4, r0
 80a3952:	b90b      	cbnz	r3, 80a3958 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a3954:	f000 fa03 	bl	80a3d5e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a3958:	68c3      	ldr	r3, [r0, #12]
 80a395a:	4798      	blx	r3
      if (_M_manager)
 80a395c:	68a3      	ldr	r3, [r4, #8]
 80a395e:	b11b      	cbz	r3, 80a3968 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a3960:	2203      	movs	r2, #3
 80a3962:	4621      	mov	r1, r4
 80a3964:	4620      	mov	r0, r4
 80a3966:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a3968:	4620      	mov	r0, r4
}
 80a396a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 80a396e:	2110      	movs	r1, #16
 80a3970:	f000 b9f1 	b.w	80a3d56 <_ZdlPvj>

080a3974 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a3974:	4770      	bx	lr

080a3976 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a3976:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3978:	4606      	mov	r6, r0
 80a397a:	4615      	mov	r5, r2
 80a397c:	460c      	mov	r4, r1
 80a397e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a3980:	42bc      	cmp	r4, r7
 80a3982:	d006      	beq.n	80a3992 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a3984:	6833      	ldr	r3, [r6, #0]
 80a3986:	4630      	mov	r0, r6
 80a3988:	689b      	ldr	r3, [r3, #8]
 80a398a:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a398e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a3990:	e7f6      	b.n	80a3980 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a3992:	4628      	mov	r0, r5
 80a3994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a3996 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a3996:	2200      	movs	r2, #0
 80a3998:	7c00      	ldrb	r0, [r0, #16]
 80a399a:	f7fe bc93 	b.w	80a22c4 <hal_i2c_write>

080a399e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a399e:	2100      	movs	r1, #0
 80a39a0:	7c00      	ldrb	r0, [r0, #16]
 80a39a2:	f7fe bc97 	b.w	80a22d4 <hal_i2c_available>

080a39a6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a39a6:	2100      	movs	r1, #0
 80a39a8:	7c00      	ldrb	r0, [r0, #16]
 80a39aa:	f7fe bc9b 	b.w	80a22e4 <hal_i2c_read>

080a39ae <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a39ae:	2100      	movs	r1, #0
 80a39b0:	7c00      	ldrb	r0, [r0, #16]
 80a39b2:	f7fe bc9f 	b.w	80a22f4 <hal_i2c_peek>

080a39b6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a39b6:	2100      	movs	r1, #0
 80a39b8:	7c00      	ldrb	r0, [r0, #16]
 80a39ba:	f7fe bca3 	b.w	80a2304 <hal_i2c_flush>

080a39be <_ZN7TwoWireD0Ev>:
 80a39be:	b510      	push	{r4, lr}
 80a39c0:	4604      	mov	r4, r0
 80a39c2:	2114      	movs	r1, #20
 80a39c4:	f000 f9c7 	bl	80a3d56 <_ZdlPvj>
 80a39c8:	4620      	mov	r0, r4
 80a39ca:	bd10      	pop	{r4, pc}

080a39cc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a39cc:	b510      	push	{r4, lr}
 80a39ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a39d2:	4604      	mov	r4, r0
 80a39d4:	4608      	mov	r0, r1
 80a39d6:	2100      	movs	r1, #0
 80a39d8:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a39dc:	4b03      	ldr	r3, [pc, #12]	; (80a39ec <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a39de:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a39e0:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a39e2:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a39e4:	f7fe fc9e 	bl	80a2324 <hal_i2c_init>
}
 80a39e8:	4620      	mov	r0, r4
 80a39ea:	bd10      	pop	{r4, pc}
 80a39ec:	080a7578 	.word	0x080a7578

080a39f0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a39f0:	2200      	movs	r2, #0
 80a39f2:	6840      	ldr	r0, [r0, #4]
 80a39f4:	4611      	mov	r1, r2
 80a39f6:	f7fe bd4b 	b.w	80a2490 <network_ready>

080a39fa <_ZN5spark9WiFiClass7resolveEPKc>:
    bool clearCredentials(void) {
        return network_clear_credentials(*this, 0, NULL, NULL);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a39fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a39fc:	4615      	mov	r5, r2
 80a39fe:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a3a00:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a3a02:	460e      	mov	r6, r1
 80a3a04:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a3a06:	2100      	movs	r1, #0
 80a3a08:	a803      	add	r0, sp, #12
 80a3a0a:	f001 fb41 	bl	80a5090 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a3a0e:	4628      	mov	r0, r5
 80a3a10:	f002 fb88 	bl	80a6124 <strlen>
 80a3a14:	2700      	movs	r7, #0
 80a3a16:	b281      	uxth	r1, r0
 80a3a18:	6873      	ldr	r3, [r6, #4]
 80a3a1a:	4628      	mov	r0, r5
 80a3a1c:	9700      	str	r7, [sp, #0]
 80a3a1e:	aa03      	add	r2, sp, #12
 80a3a20:	f7fe fcca 	bl	80a23b8 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a3a24:	b130      	cbz	r0, 80a3a34 <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a3a26:	4639      	mov	r1, r7
 80a3a28:	4620      	mov	r0, r4
 80a3a2a:	f7ff fe29 	bl	80a3680 <_ZN9IPAddressC1Em>
    }
 80a3a2e:	4620      	mov	r0, r4
 80a3a30:	b009      	add	sp, #36	; 0x24
 80a3a32:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a3a34:	4620      	mov	r0, r4
 80a3a36:	a903      	add	r1, sp, #12
 80a3a38:	f7ff fe10 	bl	80a365c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a3a3c:	e7f7      	b.n	80a3a2e <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a3a3e <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a3a3e:	2200      	movs	r2, #0
 80a3a40:	6840      	ldr	r0, [r0, #4]
 80a3a42:	4611      	mov	r1, r2
 80a3a44:	f7fe bd44 	b.w	80a24d0 <network_listening>

080a3a48 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a3a48:	2200      	movs	r2, #0
 80a3a4a:	6840      	ldr	r0, [r0, #4]
 80a3a4c:	4611      	mov	r1, r2
 80a3a4e:	f7fe bd4f 	b.w	80a24f0 <network_get_listen_timeout>

080a3a52 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a3a52:	2200      	movs	r2, #0
 80a3a54:	6840      	ldr	r0, [r0, #4]
 80a3a56:	f7fe bd43 	b.w	80a24e0 <network_set_listen_timeout>

080a3a5a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a3a5a:	2200      	movs	r2, #0
 80a3a5c:	6840      	ldr	r0, [r0, #4]
 80a3a5e:	f081 0101 	eor.w	r1, r1, #1
 80a3a62:	f7fe bd2d 	b.w	80a24c0 <network_listen>

080a3a66 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a3a66:	2300      	movs	r3, #0
 80a3a68:	6840      	ldr	r0, [r0, #4]
 80a3a6a:	461a      	mov	r2, r3
 80a3a6c:	4619      	mov	r1, r3
 80a3a6e:	f7fe bd1f 	b.w	80a24b0 <network_off>

080a3a72 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a3a72:	2200      	movs	r2, #0
 80a3a74:	6840      	ldr	r0, [r0, #4]
 80a3a76:	4611      	mov	r1, r2
 80a3a78:	f7fe bcfa 	b.w	80a2470 <network_connecting>

080a3a7c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a3a7c:	2200      	movs	r2, #0
 80a3a7e:	2102      	movs	r1, #2
 80a3a80:	6840      	ldr	r0, [r0, #4]
 80a3a82:	f7fe bcfd 	b.w	80a2480 <network_disconnect>

080a3a86 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a3a86:	2300      	movs	r3, #0
 80a3a88:	6840      	ldr	r0, [r0, #4]
 80a3a8a:	461a      	mov	r2, r3
 80a3a8c:	f7fe bce8 	b.w	80a2460 <network_connect>

080a3a90 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a3a90:	2204      	movs	r2, #4
 80a3a92:	4b02      	ldr	r3, [pc, #8]	; (80a3a9c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a3a94:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a3a96:	4a02      	ldr	r2, [pc, #8]	; (80a3aa0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a3a98:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a3a9a:	4770      	bx	lr
 80a3a9c:	20000488 	.word	0x20000488
 80a3aa0:	080a75a0 	.word	0x080a75a0

080a3aa4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a3aa4:	2300      	movs	r3, #0
 80a3aa6:	6840      	ldr	r0, [r0, #4]
 80a3aa8:	461a      	mov	r2, r3
 80a3aaa:	f7fe bcd9 	b.w	80a2460 <network_connect>

080a3aae <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a3aae:	2200      	movs	r2, #0
 80a3ab0:	2102      	movs	r1, #2
 80a3ab2:	6840      	ldr	r0, [r0, #4]
 80a3ab4:	f7fe bce4 	b.w	80a2480 <network_disconnect>

080a3ab8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a3ab8:	2200      	movs	r2, #0
 80a3aba:	6840      	ldr	r0, [r0, #4]
 80a3abc:	4611      	mov	r1, r2
 80a3abe:	f7fe bcd7 	b.w	80a2470 <network_connecting>

080a3ac2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a3ac2:	2200      	movs	r2, #0
 80a3ac4:	6840      	ldr	r0, [r0, #4]
 80a3ac6:	4611      	mov	r1, r2
 80a3ac8:	f7fe bce2 	b.w	80a2490 <network_ready>

080a3acc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a3acc:	2300      	movs	r3, #0
 80a3ace:	6840      	ldr	r0, [r0, #4]
 80a3ad0:	461a      	mov	r2, r3
 80a3ad2:	4619      	mov	r1, r3
 80a3ad4:	f7fe bce4 	b.w	80a24a0 <network_on>

080a3ad8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a3ad8:	2300      	movs	r3, #0
 80a3ada:	6840      	ldr	r0, [r0, #4]
 80a3adc:	461a      	mov	r2, r3
 80a3ade:	4619      	mov	r1, r3
 80a3ae0:	f7fe bce6 	b.w	80a24b0 <network_off>

080a3ae4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a3ae4:	2100      	movs	r1, #0
 80a3ae6:	6840      	ldr	r0, [r0, #4]
 80a3ae8:	f7fe bd0a 	b.w	80a2500 <network_is_on>

080a3aec <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a3aec:	2100      	movs	r1, #0
 80a3aee:	6840      	ldr	r0, [r0, #4]
 80a3af0:	f7fe bd0e 	b.w	80a2510 <network_is_off>

080a3af4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a3af4:	2200      	movs	r2, #0
 80a3af6:	6840      	ldr	r0, [r0, #4]
 80a3af8:	f081 0101 	eor.w	r1, r1, #1
 80a3afc:	f7fe bce0 	b.w	80a24c0 <network_listen>

080a3b00 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a3b00:	2200      	movs	r2, #0
 80a3b02:	6840      	ldr	r0, [r0, #4]
 80a3b04:	f7fe bcec 	b.w	80a24e0 <network_set_listen_timeout>

080a3b08 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a3b08:	2200      	movs	r2, #0
 80a3b0a:	6840      	ldr	r0, [r0, #4]
 80a3b0c:	4611      	mov	r1, r2
 80a3b0e:	f7fe bcef 	b.w	80a24f0 <network_get_listen_timeout>

080a3b12 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a3b12:	2200      	movs	r2, #0
 80a3b14:	6840      	ldr	r0, [r0, #4]
 80a3b16:	4611      	mov	r1, r2
 80a3b18:	f7fe bcda 	b.w	80a24d0 <network_listening>

080a3b1c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a3b1c:	b570      	push	{r4, r5, r6, lr}
 80a3b1e:	4615      	mov	r5, r2
 80a3b20:	b08e      	sub	sp, #56	; 0x38
 80a3b22:	4604      	mov	r4, r0
    IPAddress addr;
 80a3b24:	a808      	add	r0, sp, #32
 80a3b26:	f7ff fd8b 	bl	80a3640 <_ZN9IPAddressC1Ev>
        HAL_IPAddress ip = {};
 80a3b2a:	2211      	movs	r2, #17
 80a3b2c:	2100      	movs	r1, #0
 80a3b2e:	a803      	add	r0, sp, #12
 80a3b30:	f001 faae 	bl	80a5090 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a3b34:	2600      	movs	r6, #0
 80a3b36:	4628      	mov	r0, r5
 80a3b38:	f002 faf4 	bl	80a6124 <strlen>
 80a3b3c:	4b0a      	ldr	r3, [pc, #40]	; (80a3b68 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a3b3e:	9600      	str	r6, [sp, #0]
 80a3b40:	b281      	uxth	r1, r0
 80a3b42:	685b      	ldr	r3, [r3, #4]
 80a3b44:	4628      	mov	r0, r5
 80a3b46:	aa03      	add	r2, sp, #12
 80a3b48:	f7fe fc36 	bl	80a23b8 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a3b4c:	b130      	cbz	r0, 80a3b5c <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a3b4e:	4631      	mov	r1, r6
 80a3b50:	4620      	mov	r0, r4
 80a3b52:	f7ff fd95 	bl	80a3680 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a3b56:	4620      	mov	r0, r4
 80a3b58:	b00e      	add	sp, #56	; 0x38
 80a3b5a:	bd70      	pop	{r4, r5, r6, pc}
 80a3b5c:	4620      	mov	r0, r4
 80a3b5e:	a903      	add	r1, sp, #12
 80a3b60:	f7ff fd7c 	bl	80a365c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a3b64:	e7f7      	b.n	80a3b56 <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a3b66:	bf00      	nop
 80a3b68:	20000488 	.word	0x20000488

080a3b6c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a3b6c:	4b02      	ldr	r3, [pc, #8]	; (80a3b78 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a3b6e:	4a03      	ldr	r2, [pc, #12]	; (80a3b7c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a3b70:	601a      	str	r2, [r3, #0]
 80a3b72:	2200      	movs	r2, #0
 80a3b74:	605a      	str	r2, [r3, #4]

} // spark
 80a3b76:	4770      	bx	lr
 80a3b78:	20000490 	.word	0x20000490
 80a3b7c:	080a75dc 	.word	0x080a75dc

080a3b80 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(hal_spi_interface_t spi);
  ~SPIClass() = default;
 80a3b80:	b510      	push	{r4, lr}
 80a3b82:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a3b84:	6880      	ldr	r0, [r0, #8]
 80a3b86:	b108      	cbz	r0, 80a3b8c <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80a3b88:	f7fe fb54 	bl	80a2234 <os_mutex_recursive_destroy>
 80a3b8c:	4620      	mov	r0, r4
 80a3b8e:	bd10      	pop	{r4, pc}

080a3b90 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a3b90:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a3b92:	b570      	push	{r4, r5, r6, lr}
 80a3b94:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a3b96:	d901      	bls.n	80a3b9c <pinAvailable+0xc>
    return false;
 80a3b98:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a3b9a:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a3b9c:	f1a0 030d 	sub.w	r3, r0, #13
 80a3ba0:	2b02      	cmp	r3, #2
 80a3ba2:	d90b      	bls.n	80a3bbc <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a3ba4:	2801      	cmp	r0, #1
 80a3ba6:	d826      	bhi.n	80a3bf6 <pinAvailable+0x66>
 80a3ba8:	f000 f8a8 	bl	80a3cfc <_Z19__fetch_global_Wirev>
 80a3bac:	2100      	movs	r1, #0
 80a3bae:	7c00      	ldrb	r0, [r0, #16]
 80a3bb0:	f7fe fbb0 	bl	80a2314 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a3bb4:	f080 0001 	eor.w	r0, r0, #1
 80a3bb8:	b2c0      	uxtb	r0, r0
 80a3bba:	e7ee      	b.n	80a3b9a <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a3bbc:	4e13      	ldr	r6, [pc, #76]	; (80a3c0c <pinAvailable+0x7c>)
 80a3bbe:	7831      	ldrb	r1, [r6, #0]
 80a3bc0:	f3bf 8f5b 	dmb	ish
 80a3bc4:	f011 0501 	ands.w	r5, r1, #1
 80a3bc8:	d10f      	bne.n	80a3bea <pinAvailable+0x5a>
 80a3bca:	4630      	mov	r0, r6
 80a3bcc:	f7fc fa69 	bl	80a00a2 <__cxa_guard_acquire>
 80a3bd0:	b158      	cbz	r0, 80a3bea <pinAvailable+0x5a>
 80a3bd2:	4629      	mov	r1, r5
 80a3bd4:	480e      	ldr	r0, [pc, #56]	; (80a3c10 <pinAvailable+0x80>)
 80a3bd6:	f7fe fd53 	bl	80a2680 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a3bda:	4630      	mov	r0, r6
 80a3bdc:	f7fc fa66 	bl	80a00ac <__cxa_guard_release>
 80a3be0:	4a0c      	ldr	r2, [pc, #48]	; (80a3c14 <pinAvailable+0x84>)
 80a3be2:	490d      	ldr	r1, [pc, #52]	; (80a3c18 <pinAvailable+0x88>)
 80a3be4:	480a      	ldr	r0, [pc, #40]	; (80a3c10 <pinAvailable+0x80>)
 80a3be6:	f000 f8b1 	bl	80a3d4c <__aeabi_atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a3bea:	4b09      	ldr	r3, [pc, #36]	; (80a3c10 <pinAvailable+0x80>)
 80a3bec:	7818      	ldrb	r0, [r3, #0]
 80a3bee:	f7fe fbab 	bl	80a2348 <hal_spi_is_enabled>
 80a3bf2:	2800      	cmp	r0, #0
 80a3bf4:	d1d0      	bne.n	80a3b98 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a3bf6:	3c12      	subs	r4, #18
 80a3bf8:	2c01      	cmp	r4, #1
 80a3bfa:	d805      	bhi.n	80a3c08 <pinAvailable+0x78>
 80a3bfc:	f7ff fe64 	bl	80a38c8 <_Z22__fetch_global_Serial1v>
 80a3c00:	7c00      	ldrb	r0, [r0, #16]
 80a3c02:	f7fe fb4f 	bl	80a22a4 <hal_usart_is_enabled>
 80a3c06:	e7d5      	b.n	80a3bb4 <pinAvailable+0x24>
  return true; // 'pin' is available
 80a3c08:	2001      	movs	r0, #1
 80a3c0a:	e7c6      	b.n	80a3b9a <pinAvailable+0xa>
 80a3c0c:	20000498 	.word	0x20000498
 80a3c10:	2000049c 	.word	0x2000049c
 80a3c14:	20000240 	.word	0x20000240
 80a3c18:	080a3b81 	.word	0x080a3b81

080a3c1c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a3c1c:	2817      	cmp	r0, #23
{
 80a3c1e:	b538      	push	{r3, r4, r5, lr}
 80a3c20:	4604      	mov	r4, r0
 80a3c22:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a3c24:	d80a      	bhi.n	80a3c3c <pinMode+0x20>
 80a3c26:	29ff      	cmp	r1, #255	; 0xff
 80a3c28:	d008      	beq.n	80a3c3c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a3c2a:	f7ff ffb1 	bl	80a3b90 <pinAvailable>
 80a3c2e:	b128      	cbz	r0, 80a3c3c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a3c30:	4629      	mov	r1, r5
 80a3c32:	4620      	mov	r0, r4
}
 80a3c34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a3c38:	f7fe ba9c 	b.w	80a2174 <HAL_Pin_Mode>
}
 80a3c3c:	bd38      	pop	{r3, r4, r5, pc}

080a3c3e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a3c3e:	b538      	push	{r3, r4, r5, lr}
 80a3c40:	4604      	mov	r4, r0
 80a3c42:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a3c44:	f7fe fa9e 	bl	80a2184 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a3c48:	28ff      	cmp	r0, #255	; 0xff
 80a3c4a:	d010      	beq.n	80a3c6e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80a3c4c:	2806      	cmp	r0, #6
 80a3c4e:	d804      	bhi.n	80a3c5a <digitalWrite+0x1c>
 80a3c50:	234d      	movs	r3, #77	; 0x4d
 80a3c52:	fa23 f000 	lsr.w	r0, r3, r0
 80a3c56:	07c3      	lsls	r3, r0, #31
 80a3c58:	d409      	bmi.n	80a3c6e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a3c5a:	4620      	mov	r0, r4
 80a3c5c:	f7ff ff98 	bl	80a3b90 <pinAvailable>
 80a3c60:	b128      	cbz	r0, 80a3c6e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a3c62:	4629      	mov	r1, r5
 80a3c64:	4620      	mov	r0, r4
}
 80a3c66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80a3c6a:	f7fe ba93 	b.w	80a2194 <HAL_GPIO_Write>
}
 80a3c6e:	bd38      	pop	{r3, r4, r5, pc}

080a3c70 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
 80a3c70:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
 80a3c72:	4c08      	ldr	r4, [pc, #32]	; (80a3c94 <_Z21__fetch_global_EEPROMv+0x24>)
 80a3c74:	7823      	ldrb	r3, [r4, #0]
 80a3c76:	f3bf 8f5b 	dmb	ish
 80a3c7a:	07db      	lsls	r3, r3, #31
 80a3c7c:	d408      	bmi.n	80a3c90 <_Z21__fetch_global_EEPROMv+0x20>
 80a3c7e:	4620      	mov	r0, r4
 80a3c80:	f7fc fa0f 	bl	80a00a2 <__cxa_guard_acquire>
 80a3c84:	b120      	cbz	r0, 80a3c90 <_Z21__fetch_global_EEPROMv+0x20>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
 80a3c86:	f7fe fa9d 	bl	80a21c4 <HAL_EEPROM_Init>
 80a3c8a:	4620      	mov	r0, r4
 80a3c8c:	f7fc fa0e 	bl	80a00ac <__cxa_guard_release>
	return eeprom;
}
 80a3c90:	4801      	ldr	r0, [pc, #4]	; (80a3c98 <_Z21__fetch_global_EEPROMv+0x28>)
 80a3c92:	bd10      	pop	{r4, pc}
 80a3c94:	200004ac 	.word	0x200004ac
 80a3c98:	200004b0 	.word	0x200004b0

080a3c9c <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a3c9c:	2300      	movs	r3, #0
 80a3c9e:	b513      	push	{r0, r1, r4, lr}
 80a3ca0:	4c07      	ldr	r4, [pc, #28]	; (80a3cc0 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a3ca2:	461a      	mov	r2, r3
 80a3ca4:	4619      	mov	r1, r3
 80a3ca6:	4620      	mov	r0, r4
 80a3ca8:	9300      	str	r3, [sp, #0]
 80a3caa:	f7ff fcff 	bl	80a36ac <_ZN9IPAddressC1Ehhhh>
 80a3cae:	4620      	mov	r0, r4
 80a3cb0:	4a04      	ldr	r2, [pc, #16]	; (80a3cc4 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a3cb2:	4905      	ldr	r1, [pc, #20]	; (80a3cc8 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a3cb4:	b002      	add	sp, #8
 80a3cb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a3cba:	f000 b847 	b.w	80a3d4c <__aeabi_atexit>
 80a3cbe:	bf00      	nop
 80a3cc0:	200004b4 	.word	0x200004b4
 80a3cc4:	20000240 	.word	0x20000240
 80a3cc8:	080a35fd 	.word	0x080a35fd

080a3ccc <_Z17acquireWireBufferv>:
#ifndef SPARK_WIRING_NO_I2C

namespace {

hal_i2c_config_t defaultWireConfig() {
	hal_i2c_config_t config = {
 80a3ccc:	2300      	movs	r3, #0
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
 80a3cce:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a3cd0:	2520      	movs	r5, #32
 80a3cd2:	8043      	strh	r3, [r0, #2]
 80a3cd4:	2314      	movs	r3, #20
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3cd6:	4e08      	ldr	r6, [pc, #32]	; (80a3cf8 <_Z17acquireWireBufferv+0x2c>)
{
 80a3cd8:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a3cda:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3cdc:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a3cde:	6085      	str	r5, [r0, #8]
 80a3ce0:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3ce2:	4628      	mov	r0, r5
 80a3ce4:	f000 f839 	bl	80a3d5a <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3ce8:	4631      	mov	r1, r6
	};
 80a3cea:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3cec:	4628      	mov	r0, r5
 80a3cee:	f000 f834 	bl	80a3d5a <_ZnajRKSt9nothrow_t>
	};
 80a3cf2:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
 80a3cf4:	4620      	mov	r0, r4
 80a3cf6:	bd70      	pop	{r4, r5, r6, pc}
 80a3cf8:	080a7610 	.word	0x080a7610

080a3cfc <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a3cfc:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a3cfe:	4d0f      	ldr	r5, [pc, #60]	; (80a3d3c <_Z19__fetch_global_Wirev+0x40>)
{
 80a3d00:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a3d02:	7829      	ldrb	r1, [r5, #0]
 80a3d04:	f3bf 8f5b 	dmb	ish
 80a3d08:	f011 0401 	ands.w	r4, r1, #1
 80a3d0c:	d113      	bne.n	80a3d36 <_Z19__fetch_global_Wirev+0x3a>
 80a3d0e:	4628      	mov	r0, r5
 80a3d10:	f7fc f9c7 	bl	80a00a2 <__cxa_guard_acquire>
 80a3d14:	b178      	cbz	r0, 80a3d36 <_Z19__fetch_global_Wirev+0x3a>
 80a3d16:	a801      	add	r0, sp, #4
 80a3d18:	f7ff ffd8 	bl	80a3ccc <_Z17acquireWireBufferv>
 80a3d1c:	4621      	mov	r1, r4
 80a3d1e:	aa01      	add	r2, sp, #4
 80a3d20:	4807      	ldr	r0, [pc, #28]	; (80a3d40 <_Z19__fetch_global_Wirev+0x44>)
 80a3d22:	f7ff fe53 	bl	80a39cc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a3d26:	4628      	mov	r0, r5
 80a3d28:	f7fc f9c0 	bl	80a00ac <__cxa_guard_release>
 80a3d2c:	4a05      	ldr	r2, [pc, #20]	; (80a3d44 <_Z19__fetch_global_Wirev+0x48>)
 80a3d2e:	4906      	ldr	r1, [pc, #24]	; (80a3d48 <_Z19__fetch_global_Wirev+0x4c>)
 80a3d30:	4803      	ldr	r0, [pc, #12]	; (80a3d40 <_Z19__fetch_global_Wirev+0x44>)
 80a3d32:	f000 f80b 	bl	80a3d4c <__aeabi_atexit>
	return wire;
}
 80a3d36:	4802      	ldr	r0, [pc, #8]	; (80a3d40 <_Z19__fetch_global_Wirev+0x44>)
 80a3d38:	b007      	add	sp, #28
 80a3d3a:	bd30      	pop	{r4, r5, pc}
 80a3d3c:	200004cc 	.word	0x200004cc
 80a3d40:	200004d0 	.word	0x200004d0
 80a3d44:	20000240 	.word	0x20000240
 80a3d48:	080a3975 	.word	0x080a3975

080a3d4c <__aeabi_atexit>:
 80a3d4c:	460b      	mov	r3, r1
 80a3d4e:	4601      	mov	r1, r0
 80a3d50:	4618      	mov	r0, r3
 80a3d52:	f001 b88b 	b.w	80a4e6c <__cxa_atexit>

080a3d56 <_ZdlPvj>:
 80a3d56:	f7fc b9a2 	b.w	80a009e <_ZdlPv>

080a3d5a <_ZnajRKSt9nothrow_t>:
 80a3d5a:	f7fc b99e 	b.w	80a009a <_Znaj>

080a3d5e <_ZSt25__throw_bad_function_callv>:
 80a3d5e:	b508      	push	{r3, lr}
 80a3d60:	f7fe fc76 	bl	80a2650 <abort>

080a3d64 <__aeabi_drsub>:
 80a3d64:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a3d68:	e002      	b.n	80a3d70 <__adddf3>
 80a3d6a:	bf00      	nop

080a3d6c <__aeabi_dsub>:
 80a3d6c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a3d70 <__adddf3>:
 80a3d70:	b530      	push	{r4, r5, lr}
 80a3d72:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a3d76:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a3d7a:	ea94 0f05 	teq	r4, r5
 80a3d7e:	bf08      	it	eq
 80a3d80:	ea90 0f02 	teqeq	r0, r2
 80a3d84:	bf1f      	itttt	ne
 80a3d86:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a3d8a:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a3d8e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a3d92:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a3d96:	f000 80e2 	beq.w	80a3f5e <__adddf3+0x1ee>
 80a3d9a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a3d9e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a3da2:	bfb8      	it	lt
 80a3da4:	426d      	neglt	r5, r5
 80a3da6:	dd0c      	ble.n	80a3dc2 <__adddf3+0x52>
 80a3da8:	442c      	add	r4, r5
 80a3daa:	ea80 0202 	eor.w	r2, r0, r2
 80a3dae:	ea81 0303 	eor.w	r3, r1, r3
 80a3db2:	ea82 0000 	eor.w	r0, r2, r0
 80a3db6:	ea83 0101 	eor.w	r1, r3, r1
 80a3dba:	ea80 0202 	eor.w	r2, r0, r2
 80a3dbe:	ea81 0303 	eor.w	r3, r1, r3
 80a3dc2:	2d36      	cmp	r5, #54	; 0x36
 80a3dc4:	bf88      	it	hi
 80a3dc6:	bd30      	pophi	{r4, r5, pc}
 80a3dc8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a3dcc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a3dd0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a3dd4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a3dd8:	d002      	beq.n	80a3de0 <__adddf3+0x70>
 80a3dda:	4240      	negs	r0, r0
 80a3ddc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a3de0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a3de4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a3de8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a3dec:	d002      	beq.n	80a3df4 <__adddf3+0x84>
 80a3dee:	4252      	negs	r2, r2
 80a3df0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a3df4:	ea94 0f05 	teq	r4, r5
 80a3df8:	f000 80a7 	beq.w	80a3f4a <__adddf3+0x1da>
 80a3dfc:	f1a4 0401 	sub.w	r4, r4, #1
 80a3e00:	f1d5 0e20 	rsbs	lr, r5, #32
 80a3e04:	db0d      	blt.n	80a3e22 <__adddf3+0xb2>
 80a3e06:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a3e0a:	fa22 f205 	lsr.w	r2, r2, r5
 80a3e0e:	1880      	adds	r0, r0, r2
 80a3e10:	f141 0100 	adc.w	r1, r1, #0
 80a3e14:	fa03 f20e 	lsl.w	r2, r3, lr
 80a3e18:	1880      	adds	r0, r0, r2
 80a3e1a:	fa43 f305 	asr.w	r3, r3, r5
 80a3e1e:	4159      	adcs	r1, r3
 80a3e20:	e00e      	b.n	80a3e40 <__adddf3+0xd0>
 80a3e22:	f1a5 0520 	sub.w	r5, r5, #32
 80a3e26:	f10e 0e20 	add.w	lr, lr, #32
 80a3e2a:	2a01      	cmp	r2, #1
 80a3e2c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a3e30:	bf28      	it	cs
 80a3e32:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a3e36:	fa43 f305 	asr.w	r3, r3, r5
 80a3e3a:	18c0      	adds	r0, r0, r3
 80a3e3c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a3e40:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a3e44:	d507      	bpl.n	80a3e56 <__adddf3+0xe6>
 80a3e46:	f04f 0e00 	mov.w	lr, #0
 80a3e4a:	f1dc 0c00 	rsbs	ip, ip, #0
 80a3e4e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a3e52:	eb6e 0101 	sbc.w	r1, lr, r1
 80a3e56:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a3e5a:	d31b      	bcc.n	80a3e94 <__adddf3+0x124>
 80a3e5c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a3e60:	d30c      	bcc.n	80a3e7c <__adddf3+0x10c>
 80a3e62:	0849      	lsrs	r1, r1, #1
 80a3e64:	ea5f 0030 	movs.w	r0, r0, rrx
 80a3e68:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a3e6c:	f104 0401 	add.w	r4, r4, #1
 80a3e70:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a3e74:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a3e78:	f080 809a 	bcs.w	80a3fb0 <__adddf3+0x240>
 80a3e7c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a3e80:	bf08      	it	eq
 80a3e82:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a3e86:	f150 0000 	adcs.w	r0, r0, #0
 80a3e8a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a3e8e:	ea41 0105 	orr.w	r1, r1, r5
 80a3e92:	bd30      	pop	{r4, r5, pc}
 80a3e94:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a3e98:	4140      	adcs	r0, r0
 80a3e9a:	eb41 0101 	adc.w	r1, r1, r1
 80a3e9e:	3c01      	subs	r4, #1
 80a3ea0:	bf28      	it	cs
 80a3ea2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80a3ea6:	d2e9      	bcs.n	80a3e7c <__adddf3+0x10c>
 80a3ea8:	f091 0f00 	teq	r1, #0
 80a3eac:	bf04      	itt	eq
 80a3eae:	4601      	moveq	r1, r0
 80a3eb0:	2000      	moveq	r0, #0
 80a3eb2:	fab1 f381 	clz	r3, r1
 80a3eb6:	bf08      	it	eq
 80a3eb8:	3320      	addeq	r3, #32
 80a3eba:	f1a3 030b 	sub.w	r3, r3, #11
 80a3ebe:	f1b3 0220 	subs.w	r2, r3, #32
 80a3ec2:	da0c      	bge.n	80a3ede <__adddf3+0x16e>
 80a3ec4:	320c      	adds	r2, #12
 80a3ec6:	dd08      	ble.n	80a3eda <__adddf3+0x16a>
 80a3ec8:	f102 0c14 	add.w	ip, r2, #20
 80a3ecc:	f1c2 020c 	rsb	r2, r2, #12
 80a3ed0:	fa01 f00c 	lsl.w	r0, r1, ip
 80a3ed4:	fa21 f102 	lsr.w	r1, r1, r2
 80a3ed8:	e00c      	b.n	80a3ef4 <__adddf3+0x184>
 80a3eda:	f102 0214 	add.w	r2, r2, #20
 80a3ede:	bfd8      	it	le
 80a3ee0:	f1c2 0c20 	rsble	ip, r2, #32
 80a3ee4:	fa01 f102 	lsl.w	r1, r1, r2
 80a3ee8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a3eec:	bfdc      	itt	le
 80a3eee:	ea41 010c 	orrle.w	r1, r1, ip
 80a3ef2:	4090      	lslle	r0, r2
 80a3ef4:	1ae4      	subs	r4, r4, r3
 80a3ef6:	bfa2      	ittt	ge
 80a3ef8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a3efc:	4329      	orrge	r1, r5
 80a3efe:	bd30      	popge	{r4, r5, pc}
 80a3f00:	ea6f 0404 	mvn.w	r4, r4
 80a3f04:	3c1f      	subs	r4, #31
 80a3f06:	da1c      	bge.n	80a3f42 <__adddf3+0x1d2>
 80a3f08:	340c      	adds	r4, #12
 80a3f0a:	dc0e      	bgt.n	80a3f2a <__adddf3+0x1ba>
 80a3f0c:	f104 0414 	add.w	r4, r4, #20
 80a3f10:	f1c4 0220 	rsb	r2, r4, #32
 80a3f14:	fa20 f004 	lsr.w	r0, r0, r4
 80a3f18:	fa01 f302 	lsl.w	r3, r1, r2
 80a3f1c:	ea40 0003 	orr.w	r0, r0, r3
 80a3f20:	fa21 f304 	lsr.w	r3, r1, r4
 80a3f24:	ea45 0103 	orr.w	r1, r5, r3
 80a3f28:	bd30      	pop	{r4, r5, pc}
 80a3f2a:	f1c4 040c 	rsb	r4, r4, #12
 80a3f2e:	f1c4 0220 	rsb	r2, r4, #32
 80a3f32:	fa20 f002 	lsr.w	r0, r0, r2
 80a3f36:	fa01 f304 	lsl.w	r3, r1, r4
 80a3f3a:	ea40 0003 	orr.w	r0, r0, r3
 80a3f3e:	4629      	mov	r1, r5
 80a3f40:	bd30      	pop	{r4, r5, pc}
 80a3f42:	fa21 f004 	lsr.w	r0, r1, r4
 80a3f46:	4629      	mov	r1, r5
 80a3f48:	bd30      	pop	{r4, r5, pc}
 80a3f4a:	f094 0f00 	teq	r4, #0
 80a3f4e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a3f52:	bf06      	itte	eq
 80a3f54:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a3f58:	3401      	addeq	r4, #1
 80a3f5a:	3d01      	subne	r5, #1
 80a3f5c:	e74e      	b.n	80a3dfc <__adddf3+0x8c>
 80a3f5e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a3f62:	bf18      	it	ne
 80a3f64:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a3f68:	d029      	beq.n	80a3fbe <__adddf3+0x24e>
 80a3f6a:	ea94 0f05 	teq	r4, r5
 80a3f6e:	bf08      	it	eq
 80a3f70:	ea90 0f02 	teqeq	r0, r2
 80a3f74:	d005      	beq.n	80a3f82 <__adddf3+0x212>
 80a3f76:	ea54 0c00 	orrs.w	ip, r4, r0
 80a3f7a:	bf04      	itt	eq
 80a3f7c:	4619      	moveq	r1, r3
 80a3f7e:	4610      	moveq	r0, r2
 80a3f80:	bd30      	pop	{r4, r5, pc}
 80a3f82:	ea91 0f03 	teq	r1, r3
 80a3f86:	bf1e      	ittt	ne
 80a3f88:	2100      	movne	r1, #0
 80a3f8a:	2000      	movne	r0, #0
 80a3f8c:	bd30      	popne	{r4, r5, pc}
 80a3f8e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a3f92:	d105      	bne.n	80a3fa0 <__adddf3+0x230>
 80a3f94:	0040      	lsls	r0, r0, #1
 80a3f96:	4149      	adcs	r1, r1
 80a3f98:	bf28      	it	cs
 80a3f9a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a3f9e:	bd30      	pop	{r4, r5, pc}
 80a3fa0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a3fa4:	bf3c      	itt	cc
 80a3fa6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a3faa:	bd30      	popcc	{r4, r5, pc}
 80a3fac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a3fb0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a3fb4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a3fb8:	f04f 0000 	mov.w	r0, #0
 80a3fbc:	bd30      	pop	{r4, r5, pc}
 80a3fbe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a3fc2:	bf1a      	itte	ne
 80a3fc4:	4619      	movne	r1, r3
 80a3fc6:	4610      	movne	r0, r2
 80a3fc8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a3fcc:	bf1c      	itt	ne
 80a3fce:	460b      	movne	r3, r1
 80a3fd0:	4602      	movne	r2, r0
 80a3fd2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a3fd6:	bf06      	itte	eq
 80a3fd8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a3fdc:	ea91 0f03 	teqeq	r1, r3
 80a3fe0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a3fe4:	bd30      	pop	{r4, r5, pc}
 80a3fe6:	bf00      	nop

080a3fe8 <__aeabi_ui2d>:
 80a3fe8:	f090 0f00 	teq	r0, #0
 80a3fec:	bf04      	itt	eq
 80a3fee:	2100      	moveq	r1, #0
 80a3ff0:	4770      	bxeq	lr
 80a3ff2:	b530      	push	{r4, r5, lr}
 80a3ff4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a3ff8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a3ffc:	f04f 0500 	mov.w	r5, #0
 80a4000:	f04f 0100 	mov.w	r1, #0
 80a4004:	e750      	b.n	80a3ea8 <__adddf3+0x138>
 80a4006:	bf00      	nop

080a4008 <__aeabi_i2d>:
 80a4008:	f090 0f00 	teq	r0, #0
 80a400c:	bf04      	itt	eq
 80a400e:	2100      	moveq	r1, #0
 80a4010:	4770      	bxeq	lr
 80a4012:	b530      	push	{r4, r5, lr}
 80a4014:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a4018:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a401c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a4020:	bf48      	it	mi
 80a4022:	4240      	negmi	r0, r0
 80a4024:	f04f 0100 	mov.w	r1, #0
 80a4028:	e73e      	b.n	80a3ea8 <__adddf3+0x138>
 80a402a:	bf00      	nop

080a402c <__aeabi_f2d>:
 80a402c:	0042      	lsls	r2, r0, #1
 80a402e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a4032:	ea4f 0131 	mov.w	r1, r1, rrx
 80a4036:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a403a:	bf1f      	itttt	ne
 80a403c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a4040:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a4044:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a4048:	4770      	bxne	lr
 80a404a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80a404e:	bf08      	it	eq
 80a4050:	4770      	bxeq	lr
 80a4052:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80a4056:	bf04      	itt	eq
 80a4058:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80a405c:	4770      	bxeq	lr
 80a405e:	b530      	push	{r4, r5, lr}
 80a4060:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a4064:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a4068:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a406c:	e71c      	b.n	80a3ea8 <__adddf3+0x138>
 80a406e:	bf00      	nop

080a4070 <__aeabi_ul2d>:
 80a4070:	ea50 0201 	orrs.w	r2, r0, r1
 80a4074:	bf08      	it	eq
 80a4076:	4770      	bxeq	lr
 80a4078:	b530      	push	{r4, r5, lr}
 80a407a:	f04f 0500 	mov.w	r5, #0
 80a407e:	e00a      	b.n	80a4096 <__aeabi_l2d+0x16>

080a4080 <__aeabi_l2d>:
 80a4080:	ea50 0201 	orrs.w	r2, r0, r1
 80a4084:	bf08      	it	eq
 80a4086:	4770      	bxeq	lr
 80a4088:	b530      	push	{r4, r5, lr}
 80a408a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a408e:	d502      	bpl.n	80a4096 <__aeabi_l2d+0x16>
 80a4090:	4240      	negs	r0, r0
 80a4092:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a4096:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a409a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a409e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a40a2:	f43f aed8 	beq.w	80a3e56 <__adddf3+0xe6>
 80a40a6:	f04f 0203 	mov.w	r2, #3
 80a40aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a40ae:	bf18      	it	ne
 80a40b0:	3203      	addne	r2, #3
 80a40b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a40b6:	bf18      	it	ne
 80a40b8:	3203      	addne	r2, #3
 80a40ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a40be:	f1c2 0320 	rsb	r3, r2, #32
 80a40c2:	fa00 fc03 	lsl.w	ip, r0, r3
 80a40c6:	fa20 f002 	lsr.w	r0, r0, r2
 80a40ca:	fa01 fe03 	lsl.w	lr, r1, r3
 80a40ce:	ea40 000e 	orr.w	r0, r0, lr
 80a40d2:	fa21 f102 	lsr.w	r1, r1, r2
 80a40d6:	4414      	add	r4, r2
 80a40d8:	e6bd      	b.n	80a3e56 <__adddf3+0xe6>
 80a40da:	bf00      	nop

080a40dc <__aeabi_dmul>:
 80a40dc:	b570      	push	{r4, r5, r6, lr}
 80a40de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a40e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a40e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a40ea:	bf1d      	ittte	ne
 80a40ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a40f0:	ea94 0f0c 	teqne	r4, ip
 80a40f4:	ea95 0f0c 	teqne	r5, ip
 80a40f8:	f000 f8de 	bleq	80a42b8 <__aeabi_dmul+0x1dc>
 80a40fc:	442c      	add	r4, r5
 80a40fe:	ea81 0603 	eor.w	r6, r1, r3
 80a4102:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a4106:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a410a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a410e:	bf18      	it	ne
 80a4110:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a4114:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a4118:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a411c:	d038      	beq.n	80a4190 <__aeabi_dmul+0xb4>
 80a411e:	fba0 ce02 	umull	ip, lr, r0, r2
 80a4122:	f04f 0500 	mov.w	r5, #0
 80a4126:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a412a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a412e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a4132:	f04f 0600 	mov.w	r6, #0
 80a4136:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a413a:	f09c 0f00 	teq	ip, #0
 80a413e:	bf18      	it	ne
 80a4140:	f04e 0e01 	orrne.w	lr, lr, #1
 80a4144:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a4148:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a414c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a4150:	d204      	bcs.n	80a415c <__aeabi_dmul+0x80>
 80a4152:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a4156:	416d      	adcs	r5, r5
 80a4158:	eb46 0606 	adc.w	r6, r6, r6
 80a415c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a4160:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a4164:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a4168:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a416c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a4170:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a4174:	bf88      	it	hi
 80a4176:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a417a:	d81e      	bhi.n	80a41ba <__aeabi_dmul+0xde>
 80a417c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a4180:	bf08      	it	eq
 80a4182:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a4186:	f150 0000 	adcs.w	r0, r0, #0
 80a418a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a418e:	bd70      	pop	{r4, r5, r6, pc}
 80a4190:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a4194:	ea46 0101 	orr.w	r1, r6, r1
 80a4198:	ea40 0002 	orr.w	r0, r0, r2
 80a419c:	ea81 0103 	eor.w	r1, r1, r3
 80a41a0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a41a4:	bfc2      	ittt	gt
 80a41a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a41aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a41ae:	bd70      	popgt	{r4, r5, r6, pc}
 80a41b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a41b4:	f04f 0e00 	mov.w	lr, #0
 80a41b8:	3c01      	subs	r4, #1
 80a41ba:	f300 80ab 	bgt.w	80a4314 <__aeabi_dmul+0x238>
 80a41be:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a41c2:	bfde      	ittt	le
 80a41c4:	2000      	movle	r0, #0
 80a41c6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a41ca:	bd70      	pople	{r4, r5, r6, pc}
 80a41cc:	f1c4 0400 	rsb	r4, r4, #0
 80a41d0:	3c20      	subs	r4, #32
 80a41d2:	da35      	bge.n	80a4240 <__aeabi_dmul+0x164>
 80a41d4:	340c      	adds	r4, #12
 80a41d6:	dc1b      	bgt.n	80a4210 <__aeabi_dmul+0x134>
 80a41d8:	f104 0414 	add.w	r4, r4, #20
 80a41dc:	f1c4 0520 	rsb	r5, r4, #32
 80a41e0:	fa00 f305 	lsl.w	r3, r0, r5
 80a41e4:	fa20 f004 	lsr.w	r0, r0, r4
 80a41e8:	fa01 f205 	lsl.w	r2, r1, r5
 80a41ec:	ea40 0002 	orr.w	r0, r0, r2
 80a41f0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a41f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a41f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a41fc:	fa21 f604 	lsr.w	r6, r1, r4
 80a4200:	eb42 0106 	adc.w	r1, r2, r6
 80a4204:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a4208:	bf08      	it	eq
 80a420a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a420e:	bd70      	pop	{r4, r5, r6, pc}
 80a4210:	f1c4 040c 	rsb	r4, r4, #12
 80a4214:	f1c4 0520 	rsb	r5, r4, #32
 80a4218:	fa00 f304 	lsl.w	r3, r0, r4
 80a421c:	fa20 f005 	lsr.w	r0, r0, r5
 80a4220:	fa01 f204 	lsl.w	r2, r1, r4
 80a4224:	ea40 0002 	orr.w	r0, r0, r2
 80a4228:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a422c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a4230:	f141 0100 	adc.w	r1, r1, #0
 80a4234:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a4238:	bf08      	it	eq
 80a423a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a423e:	bd70      	pop	{r4, r5, r6, pc}
 80a4240:	f1c4 0520 	rsb	r5, r4, #32
 80a4244:	fa00 f205 	lsl.w	r2, r0, r5
 80a4248:	ea4e 0e02 	orr.w	lr, lr, r2
 80a424c:	fa20 f304 	lsr.w	r3, r0, r4
 80a4250:	fa01 f205 	lsl.w	r2, r1, r5
 80a4254:	ea43 0302 	orr.w	r3, r3, r2
 80a4258:	fa21 f004 	lsr.w	r0, r1, r4
 80a425c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a4260:	fa21 f204 	lsr.w	r2, r1, r4
 80a4264:	ea20 0002 	bic.w	r0, r0, r2
 80a4268:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a426c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a4270:	bf08      	it	eq
 80a4272:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a4276:	bd70      	pop	{r4, r5, r6, pc}
 80a4278:	f094 0f00 	teq	r4, #0
 80a427c:	d10f      	bne.n	80a429e <__aeabi_dmul+0x1c2>
 80a427e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a4282:	0040      	lsls	r0, r0, #1
 80a4284:	eb41 0101 	adc.w	r1, r1, r1
 80a4288:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a428c:	bf08      	it	eq
 80a428e:	3c01      	subeq	r4, #1
 80a4290:	d0f7      	beq.n	80a4282 <__aeabi_dmul+0x1a6>
 80a4292:	ea41 0106 	orr.w	r1, r1, r6
 80a4296:	f095 0f00 	teq	r5, #0
 80a429a:	bf18      	it	ne
 80a429c:	4770      	bxne	lr
 80a429e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a42a2:	0052      	lsls	r2, r2, #1
 80a42a4:	eb43 0303 	adc.w	r3, r3, r3
 80a42a8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a42ac:	bf08      	it	eq
 80a42ae:	3d01      	subeq	r5, #1
 80a42b0:	d0f7      	beq.n	80a42a2 <__aeabi_dmul+0x1c6>
 80a42b2:	ea43 0306 	orr.w	r3, r3, r6
 80a42b6:	4770      	bx	lr
 80a42b8:	ea94 0f0c 	teq	r4, ip
 80a42bc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a42c0:	bf18      	it	ne
 80a42c2:	ea95 0f0c 	teqne	r5, ip
 80a42c6:	d00c      	beq.n	80a42e2 <__aeabi_dmul+0x206>
 80a42c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a42cc:	bf18      	it	ne
 80a42ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a42d2:	d1d1      	bne.n	80a4278 <__aeabi_dmul+0x19c>
 80a42d4:	ea81 0103 	eor.w	r1, r1, r3
 80a42d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a42dc:	f04f 0000 	mov.w	r0, #0
 80a42e0:	bd70      	pop	{r4, r5, r6, pc}
 80a42e2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a42e6:	bf06      	itte	eq
 80a42e8:	4610      	moveq	r0, r2
 80a42ea:	4619      	moveq	r1, r3
 80a42ec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a42f0:	d019      	beq.n	80a4326 <__aeabi_dmul+0x24a>
 80a42f2:	ea94 0f0c 	teq	r4, ip
 80a42f6:	d102      	bne.n	80a42fe <__aeabi_dmul+0x222>
 80a42f8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a42fc:	d113      	bne.n	80a4326 <__aeabi_dmul+0x24a>
 80a42fe:	ea95 0f0c 	teq	r5, ip
 80a4302:	d105      	bne.n	80a4310 <__aeabi_dmul+0x234>
 80a4304:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a4308:	bf1c      	itt	ne
 80a430a:	4610      	movne	r0, r2
 80a430c:	4619      	movne	r1, r3
 80a430e:	d10a      	bne.n	80a4326 <__aeabi_dmul+0x24a>
 80a4310:	ea81 0103 	eor.w	r1, r1, r3
 80a4314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a4318:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a431c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a4320:	f04f 0000 	mov.w	r0, #0
 80a4324:	bd70      	pop	{r4, r5, r6, pc}
 80a4326:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a432a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a432e:	bd70      	pop	{r4, r5, r6, pc}

080a4330 <__aeabi_ddiv>:
 80a4330:	b570      	push	{r4, r5, r6, lr}
 80a4332:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a4336:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a433a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a433e:	bf1d      	ittte	ne
 80a4340:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a4344:	ea94 0f0c 	teqne	r4, ip
 80a4348:	ea95 0f0c 	teqne	r5, ip
 80a434c:	f000 f8a7 	bleq	80a449e <__aeabi_ddiv+0x16e>
 80a4350:	eba4 0405 	sub.w	r4, r4, r5
 80a4354:	ea81 0e03 	eor.w	lr, r1, r3
 80a4358:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a435c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a4360:	f000 8088 	beq.w	80a4474 <__aeabi_ddiv+0x144>
 80a4364:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a4368:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a436c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a4370:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a4374:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a4378:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a437c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a4380:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a4384:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a4388:	429d      	cmp	r5, r3
 80a438a:	bf08      	it	eq
 80a438c:	4296      	cmpeq	r6, r2
 80a438e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a4392:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a4396:	d202      	bcs.n	80a439e <__aeabi_ddiv+0x6e>
 80a4398:	085b      	lsrs	r3, r3, #1
 80a439a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a439e:	1ab6      	subs	r6, r6, r2
 80a43a0:	eb65 0503 	sbc.w	r5, r5, r3
 80a43a4:	085b      	lsrs	r3, r3, #1
 80a43a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80a43aa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a43ae:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a43b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80a43b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a43ba:	bf22      	ittt	cs
 80a43bc:	1ab6      	subcs	r6, r6, r2
 80a43be:	4675      	movcs	r5, lr
 80a43c0:	ea40 000c 	orrcs.w	r0, r0, ip
 80a43c4:	085b      	lsrs	r3, r3, #1
 80a43c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80a43ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80a43ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a43d2:	bf22      	ittt	cs
 80a43d4:	1ab6      	subcs	r6, r6, r2
 80a43d6:	4675      	movcs	r5, lr
 80a43d8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a43dc:	085b      	lsrs	r3, r3, #1
 80a43de:	ea4f 0232 	mov.w	r2, r2, rrx
 80a43e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80a43e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a43ea:	bf22      	ittt	cs
 80a43ec:	1ab6      	subcs	r6, r6, r2
 80a43ee:	4675      	movcs	r5, lr
 80a43f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a43f4:	085b      	lsrs	r3, r3, #1
 80a43f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80a43fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80a43fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a4402:	bf22      	ittt	cs
 80a4404:	1ab6      	subcs	r6, r6, r2
 80a4406:	4675      	movcs	r5, lr
 80a4408:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a440c:	ea55 0e06 	orrs.w	lr, r5, r6
 80a4410:	d018      	beq.n	80a4444 <__aeabi_ddiv+0x114>
 80a4412:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a4416:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a441a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a441e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a4422:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a4426:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a442a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a442e:	d1c0      	bne.n	80a43b2 <__aeabi_ddiv+0x82>
 80a4430:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a4434:	d10b      	bne.n	80a444e <__aeabi_ddiv+0x11e>
 80a4436:	ea41 0100 	orr.w	r1, r1, r0
 80a443a:	f04f 0000 	mov.w	r0, #0
 80a443e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a4442:	e7b6      	b.n	80a43b2 <__aeabi_ddiv+0x82>
 80a4444:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a4448:	bf04      	itt	eq
 80a444a:	4301      	orreq	r1, r0
 80a444c:	2000      	moveq	r0, #0
 80a444e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a4452:	bf88      	it	hi
 80a4454:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a4458:	f63f aeaf 	bhi.w	80a41ba <__aeabi_dmul+0xde>
 80a445c:	ebb5 0c03 	subs.w	ip, r5, r3
 80a4460:	bf04      	itt	eq
 80a4462:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a4466:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a446a:	f150 0000 	adcs.w	r0, r0, #0
 80a446e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a4472:	bd70      	pop	{r4, r5, r6, pc}
 80a4474:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a4478:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a447c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a4480:	bfc2      	ittt	gt
 80a4482:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a4486:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a448a:	bd70      	popgt	{r4, r5, r6, pc}
 80a448c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a4490:	f04f 0e00 	mov.w	lr, #0
 80a4494:	3c01      	subs	r4, #1
 80a4496:	e690      	b.n	80a41ba <__aeabi_dmul+0xde>
 80a4498:	ea45 0e06 	orr.w	lr, r5, r6
 80a449c:	e68d      	b.n	80a41ba <__aeabi_dmul+0xde>
 80a449e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a44a2:	ea94 0f0c 	teq	r4, ip
 80a44a6:	bf08      	it	eq
 80a44a8:	ea95 0f0c 	teqeq	r5, ip
 80a44ac:	f43f af3b 	beq.w	80a4326 <__aeabi_dmul+0x24a>
 80a44b0:	ea94 0f0c 	teq	r4, ip
 80a44b4:	d10a      	bne.n	80a44cc <__aeabi_ddiv+0x19c>
 80a44b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a44ba:	f47f af34 	bne.w	80a4326 <__aeabi_dmul+0x24a>
 80a44be:	ea95 0f0c 	teq	r5, ip
 80a44c2:	f47f af25 	bne.w	80a4310 <__aeabi_dmul+0x234>
 80a44c6:	4610      	mov	r0, r2
 80a44c8:	4619      	mov	r1, r3
 80a44ca:	e72c      	b.n	80a4326 <__aeabi_dmul+0x24a>
 80a44cc:	ea95 0f0c 	teq	r5, ip
 80a44d0:	d106      	bne.n	80a44e0 <__aeabi_ddiv+0x1b0>
 80a44d2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a44d6:	f43f aefd 	beq.w	80a42d4 <__aeabi_dmul+0x1f8>
 80a44da:	4610      	mov	r0, r2
 80a44dc:	4619      	mov	r1, r3
 80a44de:	e722      	b.n	80a4326 <__aeabi_dmul+0x24a>
 80a44e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a44e4:	bf18      	it	ne
 80a44e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a44ea:	f47f aec5 	bne.w	80a4278 <__aeabi_dmul+0x19c>
 80a44ee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a44f2:	f47f af0d 	bne.w	80a4310 <__aeabi_dmul+0x234>
 80a44f6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a44fa:	f47f aeeb 	bne.w	80a42d4 <__aeabi_dmul+0x1f8>
 80a44fe:	e712      	b.n	80a4326 <__aeabi_dmul+0x24a>

080a4500 <__aeabi_d2uiz>:
 80a4500:	004a      	lsls	r2, r1, #1
 80a4502:	d211      	bcs.n	80a4528 <__aeabi_d2uiz+0x28>
 80a4504:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a4508:	d211      	bcs.n	80a452e <__aeabi_d2uiz+0x2e>
 80a450a:	d50d      	bpl.n	80a4528 <__aeabi_d2uiz+0x28>
 80a450c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a4510:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a4514:	d40e      	bmi.n	80a4534 <__aeabi_d2uiz+0x34>
 80a4516:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a451a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a451e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a4522:	fa23 f002 	lsr.w	r0, r3, r2
 80a4526:	4770      	bx	lr
 80a4528:	f04f 0000 	mov.w	r0, #0
 80a452c:	4770      	bx	lr
 80a452e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a4532:	d102      	bne.n	80a453a <__aeabi_d2uiz+0x3a>
 80a4534:	f04f 30ff 	mov.w	r0, #4294967295
 80a4538:	4770      	bx	lr
 80a453a:	f04f 0000 	mov.w	r0, #0
 80a453e:	4770      	bx	lr

080a4540 <__aeabi_frsub>:
 80a4540:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a4544:	e002      	b.n	80a454c <__addsf3>
 80a4546:	bf00      	nop

080a4548 <__aeabi_fsub>:
 80a4548:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a454c <__addsf3>:
 80a454c:	0042      	lsls	r2, r0, #1
 80a454e:	bf1f      	itttt	ne
 80a4550:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a4554:	ea92 0f03 	teqne	r2, r3
 80a4558:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a455c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a4560:	d06a      	beq.n	80a4638 <__addsf3+0xec>
 80a4562:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a4566:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a456a:	bfc1      	itttt	gt
 80a456c:	18d2      	addgt	r2, r2, r3
 80a456e:	4041      	eorgt	r1, r0
 80a4570:	4048      	eorgt	r0, r1
 80a4572:	4041      	eorgt	r1, r0
 80a4574:	bfb8      	it	lt
 80a4576:	425b      	neglt	r3, r3
 80a4578:	2b19      	cmp	r3, #25
 80a457a:	bf88      	it	hi
 80a457c:	4770      	bxhi	lr
 80a457e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a4582:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4586:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a458a:	bf18      	it	ne
 80a458c:	4240      	negne	r0, r0
 80a458e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a4592:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a4596:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a459a:	bf18      	it	ne
 80a459c:	4249      	negne	r1, r1
 80a459e:	ea92 0f03 	teq	r2, r3
 80a45a2:	d03f      	beq.n	80a4624 <__addsf3+0xd8>
 80a45a4:	f1a2 0201 	sub.w	r2, r2, #1
 80a45a8:	fa41 fc03 	asr.w	ip, r1, r3
 80a45ac:	eb10 000c 	adds.w	r0, r0, ip
 80a45b0:	f1c3 0320 	rsb	r3, r3, #32
 80a45b4:	fa01 f103 	lsl.w	r1, r1, r3
 80a45b8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a45bc:	d502      	bpl.n	80a45c4 <__addsf3+0x78>
 80a45be:	4249      	negs	r1, r1
 80a45c0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a45c4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a45c8:	d313      	bcc.n	80a45f2 <__addsf3+0xa6>
 80a45ca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a45ce:	d306      	bcc.n	80a45de <__addsf3+0x92>
 80a45d0:	0840      	lsrs	r0, r0, #1
 80a45d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80a45d6:	f102 0201 	add.w	r2, r2, #1
 80a45da:	2afe      	cmp	r2, #254	; 0xfe
 80a45dc:	d251      	bcs.n	80a4682 <__addsf3+0x136>
 80a45de:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a45e2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a45e6:	bf08      	it	eq
 80a45e8:	f020 0001 	biceq.w	r0, r0, #1
 80a45ec:	ea40 0003 	orr.w	r0, r0, r3
 80a45f0:	4770      	bx	lr
 80a45f2:	0049      	lsls	r1, r1, #1
 80a45f4:	eb40 0000 	adc.w	r0, r0, r0
 80a45f8:	3a01      	subs	r2, #1
 80a45fa:	bf28      	it	cs
 80a45fc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80a4600:	d2ed      	bcs.n	80a45de <__addsf3+0x92>
 80a4602:	fab0 fc80 	clz	ip, r0
 80a4606:	f1ac 0c08 	sub.w	ip, ip, #8
 80a460a:	ebb2 020c 	subs.w	r2, r2, ip
 80a460e:	fa00 f00c 	lsl.w	r0, r0, ip
 80a4612:	bfaa      	itet	ge
 80a4614:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a4618:	4252      	neglt	r2, r2
 80a461a:	4318      	orrge	r0, r3
 80a461c:	bfbc      	itt	lt
 80a461e:	40d0      	lsrlt	r0, r2
 80a4620:	4318      	orrlt	r0, r3
 80a4622:	4770      	bx	lr
 80a4624:	f092 0f00 	teq	r2, #0
 80a4628:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a462c:	bf06      	itte	eq
 80a462e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a4632:	3201      	addeq	r2, #1
 80a4634:	3b01      	subne	r3, #1
 80a4636:	e7b5      	b.n	80a45a4 <__addsf3+0x58>
 80a4638:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a463c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a4640:	bf18      	it	ne
 80a4642:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a4646:	d021      	beq.n	80a468c <__addsf3+0x140>
 80a4648:	ea92 0f03 	teq	r2, r3
 80a464c:	d004      	beq.n	80a4658 <__addsf3+0x10c>
 80a464e:	f092 0f00 	teq	r2, #0
 80a4652:	bf08      	it	eq
 80a4654:	4608      	moveq	r0, r1
 80a4656:	4770      	bx	lr
 80a4658:	ea90 0f01 	teq	r0, r1
 80a465c:	bf1c      	itt	ne
 80a465e:	2000      	movne	r0, #0
 80a4660:	4770      	bxne	lr
 80a4662:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a4666:	d104      	bne.n	80a4672 <__addsf3+0x126>
 80a4668:	0040      	lsls	r0, r0, #1
 80a466a:	bf28      	it	cs
 80a466c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a4670:	4770      	bx	lr
 80a4672:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a4676:	bf3c      	itt	cc
 80a4678:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a467c:	4770      	bxcc	lr
 80a467e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a4682:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a4686:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a468a:	4770      	bx	lr
 80a468c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a4690:	bf16      	itet	ne
 80a4692:	4608      	movne	r0, r1
 80a4694:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a4698:	4601      	movne	r1, r0
 80a469a:	0242      	lsls	r2, r0, #9
 80a469c:	bf06      	itte	eq
 80a469e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a46a2:	ea90 0f01 	teqeq	r0, r1
 80a46a6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a46aa:	4770      	bx	lr

080a46ac <__aeabi_ui2f>:
 80a46ac:	f04f 0300 	mov.w	r3, #0
 80a46b0:	e004      	b.n	80a46bc <__aeabi_i2f+0x8>
 80a46b2:	bf00      	nop

080a46b4 <__aeabi_i2f>:
 80a46b4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a46b8:	bf48      	it	mi
 80a46ba:	4240      	negmi	r0, r0
 80a46bc:	ea5f 0c00 	movs.w	ip, r0
 80a46c0:	bf08      	it	eq
 80a46c2:	4770      	bxeq	lr
 80a46c4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a46c8:	4601      	mov	r1, r0
 80a46ca:	f04f 0000 	mov.w	r0, #0
 80a46ce:	e01c      	b.n	80a470a <__aeabi_l2f+0x2a>

080a46d0 <__aeabi_ul2f>:
 80a46d0:	ea50 0201 	orrs.w	r2, r0, r1
 80a46d4:	bf08      	it	eq
 80a46d6:	4770      	bxeq	lr
 80a46d8:	f04f 0300 	mov.w	r3, #0
 80a46dc:	e00a      	b.n	80a46f4 <__aeabi_l2f+0x14>
 80a46de:	bf00      	nop

080a46e0 <__aeabi_l2f>:
 80a46e0:	ea50 0201 	orrs.w	r2, r0, r1
 80a46e4:	bf08      	it	eq
 80a46e6:	4770      	bxeq	lr
 80a46e8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a46ec:	d502      	bpl.n	80a46f4 <__aeabi_l2f+0x14>
 80a46ee:	4240      	negs	r0, r0
 80a46f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a46f4:	ea5f 0c01 	movs.w	ip, r1
 80a46f8:	bf02      	ittt	eq
 80a46fa:	4684      	moveq	ip, r0
 80a46fc:	4601      	moveq	r1, r0
 80a46fe:	2000      	moveq	r0, #0
 80a4700:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a4704:	bf08      	it	eq
 80a4706:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a470a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a470e:	fabc f28c 	clz	r2, ip
 80a4712:	3a08      	subs	r2, #8
 80a4714:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a4718:	db10      	blt.n	80a473c <__aeabi_l2f+0x5c>
 80a471a:	fa01 fc02 	lsl.w	ip, r1, r2
 80a471e:	4463      	add	r3, ip
 80a4720:	fa00 fc02 	lsl.w	ip, r0, r2
 80a4724:	f1c2 0220 	rsb	r2, r2, #32
 80a4728:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a472c:	fa20 f202 	lsr.w	r2, r0, r2
 80a4730:	eb43 0002 	adc.w	r0, r3, r2
 80a4734:	bf08      	it	eq
 80a4736:	f020 0001 	biceq.w	r0, r0, #1
 80a473a:	4770      	bx	lr
 80a473c:	f102 0220 	add.w	r2, r2, #32
 80a4740:	fa01 fc02 	lsl.w	ip, r1, r2
 80a4744:	f1c2 0220 	rsb	r2, r2, #32
 80a4748:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a474c:	fa21 f202 	lsr.w	r2, r1, r2
 80a4750:	eb43 0002 	adc.w	r0, r3, r2
 80a4754:	bf08      	it	eq
 80a4756:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a475a:	4770      	bx	lr

080a475c <__aeabi_fmul>:
 80a475c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a4760:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a4764:	bf1e      	ittt	ne
 80a4766:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a476a:	ea92 0f0c 	teqne	r2, ip
 80a476e:	ea93 0f0c 	teqne	r3, ip
 80a4772:	d06f      	beq.n	80a4854 <__aeabi_fmul+0xf8>
 80a4774:	441a      	add	r2, r3
 80a4776:	ea80 0c01 	eor.w	ip, r0, r1
 80a477a:	0240      	lsls	r0, r0, #9
 80a477c:	bf18      	it	ne
 80a477e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a4782:	d01e      	beq.n	80a47c2 <__aeabi_fmul+0x66>
 80a4784:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a4788:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a478c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a4790:	fba0 3101 	umull	r3, r1, r0, r1
 80a4794:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a4798:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a479c:	bf3e      	ittt	cc
 80a479e:	0049      	lslcc	r1, r1, #1
 80a47a0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a47a4:	005b      	lslcc	r3, r3, #1
 80a47a6:	ea40 0001 	orr.w	r0, r0, r1
 80a47aa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a47ae:	2afd      	cmp	r2, #253	; 0xfd
 80a47b0:	d81d      	bhi.n	80a47ee <__aeabi_fmul+0x92>
 80a47b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a47b6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a47ba:	bf08      	it	eq
 80a47bc:	f020 0001 	biceq.w	r0, r0, #1
 80a47c0:	4770      	bx	lr
 80a47c2:	f090 0f00 	teq	r0, #0
 80a47c6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a47ca:	bf08      	it	eq
 80a47cc:	0249      	lsleq	r1, r1, #9
 80a47ce:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a47d2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a47d6:	3a7f      	subs	r2, #127	; 0x7f
 80a47d8:	bfc2      	ittt	gt
 80a47da:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a47de:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a47e2:	4770      	bxgt	lr
 80a47e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a47e8:	f04f 0300 	mov.w	r3, #0
 80a47ec:	3a01      	subs	r2, #1
 80a47ee:	dc5d      	bgt.n	80a48ac <__aeabi_fmul+0x150>
 80a47f0:	f112 0f19 	cmn.w	r2, #25
 80a47f4:	bfdc      	itt	le
 80a47f6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a47fa:	4770      	bxle	lr
 80a47fc:	f1c2 0200 	rsb	r2, r2, #0
 80a4800:	0041      	lsls	r1, r0, #1
 80a4802:	fa21 f102 	lsr.w	r1, r1, r2
 80a4806:	f1c2 0220 	rsb	r2, r2, #32
 80a480a:	fa00 fc02 	lsl.w	ip, r0, r2
 80a480e:	ea5f 0031 	movs.w	r0, r1, rrx
 80a4812:	f140 0000 	adc.w	r0, r0, #0
 80a4816:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a481a:	bf08      	it	eq
 80a481c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a4820:	4770      	bx	lr
 80a4822:	f092 0f00 	teq	r2, #0
 80a4826:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a482a:	bf02      	ittt	eq
 80a482c:	0040      	lsleq	r0, r0, #1
 80a482e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a4832:	3a01      	subeq	r2, #1
 80a4834:	d0f9      	beq.n	80a482a <__aeabi_fmul+0xce>
 80a4836:	ea40 000c 	orr.w	r0, r0, ip
 80a483a:	f093 0f00 	teq	r3, #0
 80a483e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a4842:	bf02      	ittt	eq
 80a4844:	0049      	lsleq	r1, r1, #1
 80a4846:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a484a:	3b01      	subeq	r3, #1
 80a484c:	d0f9      	beq.n	80a4842 <__aeabi_fmul+0xe6>
 80a484e:	ea41 010c 	orr.w	r1, r1, ip
 80a4852:	e78f      	b.n	80a4774 <__aeabi_fmul+0x18>
 80a4854:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a4858:	ea92 0f0c 	teq	r2, ip
 80a485c:	bf18      	it	ne
 80a485e:	ea93 0f0c 	teqne	r3, ip
 80a4862:	d00a      	beq.n	80a487a <__aeabi_fmul+0x11e>
 80a4864:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a4868:	bf18      	it	ne
 80a486a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a486e:	d1d8      	bne.n	80a4822 <__aeabi_fmul+0xc6>
 80a4870:	ea80 0001 	eor.w	r0, r0, r1
 80a4874:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a4878:	4770      	bx	lr
 80a487a:	f090 0f00 	teq	r0, #0
 80a487e:	bf17      	itett	ne
 80a4880:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a4884:	4608      	moveq	r0, r1
 80a4886:	f091 0f00 	teqne	r1, #0
 80a488a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a488e:	d014      	beq.n	80a48ba <__aeabi_fmul+0x15e>
 80a4890:	ea92 0f0c 	teq	r2, ip
 80a4894:	d101      	bne.n	80a489a <__aeabi_fmul+0x13e>
 80a4896:	0242      	lsls	r2, r0, #9
 80a4898:	d10f      	bne.n	80a48ba <__aeabi_fmul+0x15e>
 80a489a:	ea93 0f0c 	teq	r3, ip
 80a489e:	d103      	bne.n	80a48a8 <__aeabi_fmul+0x14c>
 80a48a0:	024b      	lsls	r3, r1, #9
 80a48a2:	bf18      	it	ne
 80a48a4:	4608      	movne	r0, r1
 80a48a6:	d108      	bne.n	80a48ba <__aeabi_fmul+0x15e>
 80a48a8:	ea80 0001 	eor.w	r0, r0, r1
 80a48ac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a48b0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a48b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a48b8:	4770      	bx	lr
 80a48ba:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a48be:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a48c2:	4770      	bx	lr

080a48c4 <__aeabi_fdiv>:
 80a48c4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a48c8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a48cc:	bf1e      	ittt	ne
 80a48ce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a48d2:	ea92 0f0c 	teqne	r2, ip
 80a48d6:	ea93 0f0c 	teqne	r3, ip
 80a48da:	d069      	beq.n	80a49b0 <__aeabi_fdiv+0xec>
 80a48dc:	eba2 0203 	sub.w	r2, r2, r3
 80a48e0:	ea80 0c01 	eor.w	ip, r0, r1
 80a48e4:	0249      	lsls	r1, r1, #9
 80a48e6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a48ea:	d037      	beq.n	80a495c <__aeabi_fdiv+0x98>
 80a48ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a48f0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a48f4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a48f8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a48fc:	428b      	cmp	r3, r1
 80a48fe:	bf38      	it	cc
 80a4900:	005b      	lslcc	r3, r3, #1
 80a4902:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a4906:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a490a:	428b      	cmp	r3, r1
 80a490c:	bf24      	itt	cs
 80a490e:	1a5b      	subcs	r3, r3, r1
 80a4910:	ea40 000c 	orrcs.w	r0, r0, ip
 80a4914:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a4918:	bf24      	itt	cs
 80a491a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a491e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a4922:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a4926:	bf24      	itt	cs
 80a4928:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a492c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a4930:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a4934:	bf24      	itt	cs
 80a4936:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a493a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a493e:	011b      	lsls	r3, r3, #4
 80a4940:	bf18      	it	ne
 80a4942:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a4946:	d1e0      	bne.n	80a490a <__aeabi_fdiv+0x46>
 80a4948:	2afd      	cmp	r2, #253	; 0xfd
 80a494a:	f63f af50 	bhi.w	80a47ee <__aeabi_fmul+0x92>
 80a494e:	428b      	cmp	r3, r1
 80a4950:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a4954:	bf08      	it	eq
 80a4956:	f020 0001 	biceq.w	r0, r0, #1
 80a495a:	4770      	bx	lr
 80a495c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a4960:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a4964:	327f      	adds	r2, #127	; 0x7f
 80a4966:	bfc2      	ittt	gt
 80a4968:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a496c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a4970:	4770      	bxgt	lr
 80a4972:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4976:	f04f 0300 	mov.w	r3, #0
 80a497a:	3a01      	subs	r2, #1
 80a497c:	e737      	b.n	80a47ee <__aeabi_fmul+0x92>
 80a497e:	f092 0f00 	teq	r2, #0
 80a4982:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a4986:	bf02      	ittt	eq
 80a4988:	0040      	lsleq	r0, r0, #1
 80a498a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a498e:	3a01      	subeq	r2, #1
 80a4990:	d0f9      	beq.n	80a4986 <__aeabi_fdiv+0xc2>
 80a4992:	ea40 000c 	orr.w	r0, r0, ip
 80a4996:	f093 0f00 	teq	r3, #0
 80a499a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a499e:	bf02      	ittt	eq
 80a49a0:	0049      	lsleq	r1, r1, #1
 80a49a2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a49a6:	3b01      	subeq	r3, #1
 80a49a8:	d0f9      	beq.n	80a499e <__aeabi_fdiv+0xda>
 80a49aa:	ea41 010c 	orr.w	r1, r1, ip
 80a49ae:	e795      	b.n	80a48dc <__aeabi_fdiv+0x18>
 80a49b0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a49b4:	ea92 0f0c 	teq	r2, ip
 80a49b8:	d108      	bne.n	80a49cc <__aeabi_fdiv+0x108>
 80a49ba:	0242      	lsls	r2, r0, #9
 80a49bc:	f47f af7d 	bne.w	80a48ba <__aeabi_fmul+0x15e>
 80a49c0:	ea93 0f0c 	teq	r3, ip
 80a49c4:	f47f af70 	bne.w	80a48a8 <__aeabi_fmul+0x14c>
 80a49c8:	4608      	mov	r0, r1
 80a49ca:	e776      	b.n	80a48ba <__aeabi_fmul+0x15e>
 80a49cc:	ea93 0f0c 	teq	r3, ip
 80a49d0:	d104      	bne.n	80a49dc <__aeabi_fdiv+0x118>
 80a49d2:	024b      	lsls	r3, r1, #9
 80a49d4:	f43f af4c 	beq.w	80a4870 <__aeabi_fmul+0x114>
 80a49d8:	4608      	mov	r0, r1
 80a49da:	e76e      	b.n	80a48ba <__aeabi_fmul+0x15e>
 80a49dc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a49e0:	bf18      	it	ne
 80a49e2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a49e6:	d1ca      	bne.n	80a497e <__aeabi_fdiv+0xba>
 80a49e8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a49ec:	f47f af5c 	bne.w	80a48a8 <__aeabi_fmul+0x14c>
 80a49f0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a49f4:	f47f af3c 	bne.w	80a4870 <__aeabi_fmul+0x114>
 80a49f8:	e75f      	b.n	80a48ba <__aeabi_fmul+0x15e>
 80a49fa:	bf00      	nop

080a49fc <__gesf2>:
 80a49fc:	f04f 3cff 	mov.w	ip, #4294967295
 80a4a00:	e006      	b.n	80a4a10 <__cmpsf2+0x4>
 80a4a02:	bf00      	nop

080a4a04 <__lesf2>:
 80a4a04:	f04f 0c01 	mov.w	ip, #1
 80a4a08:	e002      	b.n	80a4a10 <__cmpsf2+0x4>
 80a4a0a:	bf00      	nop

080a4a0c <__cmpsf2>:
 80a4a0c:	f04f 0c01 	mov.w	ip, #1
 80a4a10:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a4a14:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a4a18:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a4a1c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a4a20:	bf18      	it	ne
 80a4a22:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a4a26:	d011      	beq.n	80a4a4c <__cmpsf2+0x40>
 80a4a28:	b001      	add	sp, #4
 80a4a2a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a4a2e:	bf18      	it	ne
 80a4a30:	ea90 0f01 	teqne	r0, r1
 80a4a34:	bf58      	it	pl
 80a4a36:	ebb2 0003 	subspl.w	r0, r2, r3
 80a4a3a:	bf88      	it	hi
 80a4a3c:	17c8      	asrhi	r0, r1, #31
 80a4a3e:	bf38      	it	cc
 80a4a40:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a4a44:	bf18      	it	ne
 80a4a46:	f040 0001 	orrne.w	r0, r0, #1
 80a4a4a:	4770      	bx	lr
 80a4a4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a4a50:	d102      	bne.n	80a4a58 <__cmpsf2+0x4c>
 80a4a52:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a4a56:	d105      	bne.n	80a4a64 <__cmpsf2+0x58>
 80a4a58:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a4a5c:	d1e4      	bne.n	80a4a28 <__cmpsf2+0x1c>
 80a4a5e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a4a62:	d0e1      	beq.n	80a4a28 <__cmpsf2+0x1c>
 80a4a64:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a4a68:	4770      	bx	lr
 80a4a6a:	bf00      	nop

080a4a6c <__aeabi_cfrcmple>:
 80a4a6c:	4684      	mov	ip, r0
 80a4a6e:	4608      	mov	r0, r1
 80a4a70:	4661      	mov	r1, ip
 80a4a72:	e7ff      	b.n	80a4a74 <__aeabi_cfcmpeq>

080a4a74 <__aeabi_cfcmpeq>:
 80a4a74:	b50f      	push	{r0, r1, r2, r3, lr}
 80a4a76:	f7ff ffc9 	bl	80a4a0c <__cmpsf2>
 80a4a7a:	2800      	cmp	r0, #0
 80a4a7c:	bf48      	it	mi
 80a4a7e:	f110 0f00 	cmnmi.w	r0, #0
 80a4a82:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a4a84 <__aeabi_fcmpeq>:
 80a4a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4a88:	f7ff fff4 	bl	80a4a74 <__aeabi_cfcmpeq>
 80a4a8c:	bf0c      	ite	eq
 80a4a8e:	2001      	moveq	r0, #1
 80a4a90:	2000      	movne	r0, #0
 80a4a92:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4a96:	bf00      	nop

080a4a98 <__aeabi_fcmplt>:
 80a4a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4a9c:	f7ff ffea 	bl	80a4a74 <__aeabi_cfcmpeq>
 80a4aa0:	bf34      	ite	cc
 80a4aa2:	2001      	movcc	r0, #1
 80a4aa4:	2000      	movcs	r0, #0
 80a4aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4aaa:	bf00      	nop

080a4aac <__aeabi_fcmple>:
 80a4aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4ab0:	f7ff ffe0 	bl	80a4a74 <__aeabi_cfcmpeq>
 80a4ab4:	bf94      	ite	ls
 80a4ab6:	2001      	movls	r0, #1
 80a4ab8:	2000      	movhi	r0, #0
 80a4aba:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4abe:	bf00      	nop

080a4ac0 <__aeabi_fcmpge>:
 80a4ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4ac4:	f7ff ffd2 	bl	80a4a6c <__aeabi_cfrcmple>
 80a4ac8:	bf94      	ite	ls
 80a4aca:	2001      	movls	r0, #1
 80a4acc:	2000      	movhi	r0, #0
 80a4ace:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4ad2:	bf00      	nop

080a4ad4 <__aeabi_fcmpgt>:
 80a4ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4ad8:	f7ff ffc8 	bl	80a4a6c <__aeabi_cfrcmple>
 80a4adc:	bf34      	ite	cc
 80a4ade:	2001      	movcc	r0, #1
 80a4ae0:	2000      	movcs	r0, #0
 80a4ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4ae6:	bf00      	nop

080a4ae8 <__aeabi_f2lz>:
 80a4ae8:	b510      	push	{r4, lr}
 80a4aea:	2100      	movs	r1, #0
 80a4aec:	4604      	mov	r4, r0
 80a4aee:	f7ff ffd3 	bl	80a4a98 <__aeabi_fcmplt>
 80a4af2:	b920      	cbnz	r0, 80a4afe <__aeabi_f2lz+0x16>
 80a4af4:	4620      	mov	r0, r4
 80a4af6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a4afa:	f000 b809 	b.w	80a4b10 <__aeabi_f2ulz>
 80a4afe:	f104 4000 	add.w	r0, r4, #2147483648	; 0x80000000
 80a4b02:	f000 f805 	bl	80a4b10 <__aeabi_f2ulz>
 80a4b06:	4240      	negs	r0, r0
 80a4b08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a4b0c:	bd10      	pop	{r4, pc}
 80a4b0e:	bf00      	nop

080a4b10 <__aeabi_f2ulz>:
 80a4b10:	b5d0      	push	{r4, r6, r7, lr}
 80a4b12:	f7ff fa8b 	bl	80a402c <__aeabi_f2d>
 80a4b16:	2200      	movs	r2, #0
 80a4b18:	4b0b      	ldr	r3, [pc, #44]	; (80a4b48 <__aeabi_f2ulz+0x38>)
 80a4b1a:	4606      	mov	r6, r0
 80a4b1c:	460f      	mov	r7, r1
 80a4b1e:	f7ff fadd 	bl	80a40dc <__aeabi_dmul>
 80a4b22:	f7ff fced 	bl	80a4500 <__aeabi_d2uiz>
 80a4b26:	4604      	mov	r4, r0
 80a4b28:	f7ff fa5e 	bl	80a3fe8 <__aeabi_ui2d>
 80a4b2c:	2200      	movs	r2, #0
 80a4b2e:	4b07      	ldr	r3, [pc, #28]	; (80a4b4c <__aeabi_f2ulz+0x3c>)
 80a4b30:	f7ff fad4 	bl	80a40dc <__aeabi_dmul>
 80a4b34:	4602      	mov	r2, r0
 80a4b36:	460b      	mov	r3, r1
 80a4b38:	4630      	mov	r0, r6
 80a4b3a:	4639      	mov	r1, r7
 80a4b3c:	f7ff f916 	bl	80a3d6c <__aeabi_dsub>
 80a4b40:	f7ff fcde 	bl	80a4500 <__aeabi_d2uiz>
 80a4b44:	4621      	mov	r1, r4
 80a4b46:	bdd0      	pop	{r4, r6, r7, pc}
 80a4b48:	3df00000 	.word	0x3df00000
 80a4b4c:	41f00000 	.word	0x41f00000

080a4b50 <__udivmoddi4>:
 80a4b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a4b54:	9e08      	ldr	r6, [sp, #32]
 80a4b56:	460d      	mov	r5, r1
 80a4b58:	4604      	mov	r4, r0
 80a4b5a:	468e      	mov	lr, r1
 80a4b5c:	2b00      	cmp	r3, #0
 80a4b5e:	f040 8083 	bne.w	80a4c68 <__udivmoddi4+0x118>
 80a4b62:	428a      	cmp	r2, r1
 80a4b64:	4617      	mov	r7, r2
 80a4b66:	d947      	bls.n	80a4bf8 <__udivmoddi4+0xa8>
 80a4b68:	fab2 f382 	clz	r3, r2
 80a4b6c:	b14b      	cbz	r3, 80a4b82 <__udivmoddi4+0x32>
 80a4b6e:	f1c3 0120 	rsb	r1, r3, #32
 80a4b72:	fa05 fe03 	lsl.w	lr, r5, r3
 80a4b76:	fa20 f101 	lsr.w	r1, r0, r1
 80a4b7a:	409f      	lsls	r7, r3
 80a4b7c:	ea41 0e0e 	orr.w	lr, r1, lr
 80a4b80:	409c      	lsls	r4, r3
 80a4b82:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80a4b86:	fbbe fcf8 	udiv	ip, lr, r8
 80a4b8a:	fa1f f987 	uxth.w	r9, r7
 80a4b8e:	fb08 e21c 	mls	r2, r8, ip, lr
 80a4b92:	fb0c f009 	mul.w	r0, ip, r9
 80a4b96:	0c21      	lsrs	r1, r4, #16
 80a4b98:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80a4b9c:	4290      	cmp	r0, r2
 80a4b9e:	d90a      	bls.n	80a4bb6 <__udivmoddi4+0x66>
 80a4ba0:	18ba      	adds	r2, r7, r2
 80a4ba2:	f10c 31ff 	add.w	r1, ip, #4294967295
 80a4ba6:	f080 8118 	bcs.w	80a4dda <__udivmoddi4+0x28a>
 80a4baa:	4290      	cmp	r0, r2
 80a4bac:	f240 8115 	bls.w	80a4dda <__udivmoddi4+0x28a>
 80a4bb0:	f1ac 0c02 	sub.w	ip, ip, #2
 80a4bb4:	443a      	add	r2, r7
 80a4bb6:	1a12      	subs	r2, r2, r0
 80a4bb8:	fbb2 f0f8 	udiv	r0, r2, r8
 80a4bbc:	fb08 2210 	mls	r2, r8, r0, r2
 80a4bc0:	fb00 f109 	mul.w	r1, r0, r9
 80a4bc4:	b2a4      	uxth	r4, r4
 80a4bc6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a4bca:	42a1      	cmp	r1, r4
 80a4bcc:	d909      	bls.n	80a4be2 <__udivmoddi4+0x92>
 80a4bce:	193c      	adds	r4, r7, r4
 80a4bd0:	f100 32ff 	add.w	r2, r0, #4294967295
 80a4bd4:	f080 8103 	bcs.w	80a4dde <__udivmoddi4+0x28e>
 80a4bd8:	42a1      	cmp	r1, r4
 80a4bda:	f240 8100 	bls.w	80a4dde <__udivmoddi4+0x28e>
 80a4bde:	3802      	subs	r0, #2
 80a4be0:	443c      	add	r4, r7
 80a4be2:	1a64      	subs	r4, r4, r1
 80a4be4:	2100      	movs	r1, #0
 80a4be6:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80a4bea:	b11e      	cbz	r6, 80a4bf4 <__udivmoddi4+0xa4>
 80a4bec:	2200      	movs	r2, #0
 80a4bee:	40dc      	lsrs	r4, r3
 80a4bf0:	e9c6 4200 	strd	r4, r2, [r6]
 80a4bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a4bf8:	b902      	cbnz	r2, 80a4bfc <__udivmoddi4+0xac>
 80a4bfa:	deff      	udf	#255	; 0xff
 80a4bfc:	fab2 f382 	clz	r3, r2
 80a4c00:	2b00      	cmp	r3, #0
 80a4c02:	d14f      	bne.n	80a4ca4 <__udivmoddi4+0x154>
 80a4c04:	1a8d      	subs	r5, r1, r2
 80a4c06:	2101      	movs	r1, #1
 80a4c08:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80a4c0c:	fa1f f882 	uxth.w	r8, r2
 80a4c10:	fbb5 fcfe 	udiv	ip, r5, lr
 80a4c14:	fb0e 551c 	mls	r5, lr, ip, r5
 80a4c18:	fb08 f00c 	mul.w	r0, r8, ip
 80a4c1c:	0c22      	lsrs	r2, r4, #16
 80a4c1e:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 80a4c22:	42a8      	cmp	r0, r5
 80a4c24:	d907      	bls.n	80a4c36 <__udivmoddi4+0xe6>
 80a4c26:	197d      	adds	r5, r7, r5
 80a4c28:	f10c 32ff 	add.w	r2, ip, #4294967295
 80a4c2c:	d202      	bcs.n	80a4c34 <__udivmoddi4+0xe4>
 80a4c2e:	42a8      	cmp	r0, r5
 80a4c30:	f200 80e9 	bhi.w	80a4e06 <__udivmoddi4+0x2b6>
 80a4c34:	4694      	mov	ip, r2
 80a4c36:	1a2d      	subs	r5, r5, r0
 80a4c38:	fbb5 f0fe 	udiv	r0, r5, lr
 80a4c3c:	fb0e 5510 	mls	r5, lr, r0, r5
 80a4c40:	fb08 f800 	mul.w	r8, r8, r0
 80a4c44:	b2a4      	uxth	r4, r4
 80a4c46:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80a4c4a:	45a0      	cmp	r8, r4
 80a4c4c:	d907      	bls.n	80a4c5e <__udivmoddi4+0x10e>
 80a4c4e:	193c      	adds	r4, r7, r4
 80a4c50:	f100 32ff 	add.w	r2, r0, #4294967295
 80a4c54:	d202      	bcs.n	80a4c5c <__udivmoddi4+0x10c>
 80a4c56:	45a0      	cmp	r8, r4
 80a4c58:	f200 80d9 	bhi.w	80a4e0e <__udivmoddi4+0x2be>
 80a4c5c:	4610      	mov	r0, r2
 80a4c5e:	eba4 0408 	sub.w	r4, r4, r8
 80a4c62:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80a4c66:	e7c0      	b.n	80a4bea <__udivmoddi4+0x9a>
 80a4c68:	428b      	cmp	r3, r1
 80a4c6a:	d908      	bls.n	80a4c7e <__udivmoddi4+0x12e>
 80a4c6c:	2e00      	cmp	r6, #0
 80a4c6e:	f000 80b1 	beq.w	80a4dd4 <__udivmoddi4+0x284>
 80a4c72:	2100      	movs	r1, #0
 80a4c74:	e9c6 0500 	strd	r0, r5, [r6]
 80a4c78:	4608      	mov	r0, r1
 80a4c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a4c7e:	fab3 f183 	clz	r1, r3
 80a4c82:	2900      	cmp	r1, #0
 80a4c84:	d14b      	bne.n	80a4d1e <__udivmoddi4+0x1ce>
 80a4c86:	42ab      	cmp	r3, r5
 80a4c88:	d302      	bcc.n	80a4c90 <__udivmoddi4+0x140>
 80a4c8a:	4282      	cmp	r2, r0
 80a4c8c:	f200 80b9 	bhi.w	80a4e02 <__udivmoddi4+0x2b2>
 80a4c90:	1a84      	subs	r4, r0, r2
 80a4c92:	eb65 0303 	sbc.w	r3, r5, r3
 80a4c96:	2001      	movs	r0, #1
 80a4c98:	469e      	mov	lr, r3
 80a4c9a:	2e00      	cmp	r6, #0
 80a4c9c:	d0aa      	beq.n	80a4bf4 <__udivmoddi4+0xa4>
 80a4c9e:	e9c6 4e00 	strd	r4, lr, [r6]
 80a4ca2:	e7a7      	b.n	80a4bf4 <__udivmoddi4+0xa4>
 80a4ca4:	409f      	lsls	r7, r3
 80a4ca6:	f1c3 0220 	rsb	r2, r3, #32
 80a4caa:	40d1      	lsrs	r1, r2
 80a4cac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80a4cb0:	fbb1 f0fe 	udiv	r0, r1, lr
 80a4cb4:	fa1f f887 	uxth.w	r8, r7
 80a4cb8:	fb0e 1110 	mls	r1, lr, r0, r1
 80a4cbc:	fa24 f202 	lsr.w	r2, r4, r2
 80a4cc0:	409d      	lsls	r5, r3
 80a4cc2:	fb00 fc08 	mul.w	ip, r0, r8
 80a4cc6:	432a      	orrs	r2, r5
 80a4cc8:	0c15      	lsrs	r5, r2, #16
 80a4cca:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80a4cce:	45ac      	cmp	ip, r5
 80a4cd0:	fa04 f403 	lsl.w	r4, r4, r3
 80a4cd4:	d909      	bls.n	80a4cea <__udivmoddi4+0x19a>
 80a4cd6:	197d      	adds	r5, r7, r5
 80a4cd8:	f100 31ff 	add.w	r1, r0, #4294967295
 80a4cdc:	f080 808f 	bcs.w	80a4dfe <__udivmoddi4+0x2ae>
 80a4ce0:	45ac      	cmp	ip, r5
 80a4ce2:	f240 808c 	bls.w	80a4dfe <__udivmoddi4+0x2ae>
 80a4ce6:	3802      	subs	r0, #2
 80a4ce8:	443d      	add	r5, r7
 80a4cea:	eba5 050c 	sub.w	r5, r5, ip
 80a4cee:	fbb5 f1fe 	udiv	r1, r5, lr
 80a4cf2:	fb0e 5c11 	mls	ip, lr, r1, r5
 80a4cf6:	fb01 f908 	mul.w	r9, r1, r8
 80a4cfa:	b295      	uxth	r5, r2
 80a4cfc:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80a4d00:	45a9      	cmp	r9, r5
 80a4d02:	d907      	bls.n	80a4d14 <__udivmoddi4+0x1c4>
 80a4d04:	197d      	adds	r5, r7, r5
 80a4d06:	f101 32ff 	add.w	r2, r1, #4294967295
 80a4d0a:	d274      	bcs.n	80a4df6 <__udivmoddi4+0x2a6>
 80a4d0c:	45a9      	cmp	r9, r5
 80a4d0e:	d972      	bls.n	80a4df6 <__udivmoddi4+0x2a6>
 80a4d10:	3902      	subs	r1, #2
 80a4d12:	443d      	add	r5, r7
 80a4d14:	eba5 0509 	sub.w	r5, r5, r9
 80a4d18:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80a4d1c:	e778      	b.n	80a4c10 <__udivmoddi4+0xc0>
 80a4d1e:	f1c1 0720 	rsb	r7, r1, #32
 80a4d22:	408b      	lsls	r3, r1
 80a4d24:	fa22 fc07 	lsr.w	ip, r2, r7
 80a4d28:	ea4c 0c03 	orr.w	ip, ip, r3
 80a4d2c:	fa25 f407 	lsr.w	r4, r5, r7
 80a4d30:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80a4d34:	fbb4 f9fe 	udiv	r9, r4, lr
 80a4d38:	fa1f f88c 	uxth.w	r8, ip
 80a4d3c:	fb0e 4419 	mls	r4, lr, r9, r4
 80a4d40:	fa20 f307 	lsr.w	r3, r0, r7
 80a4d44:	fb09 fa08 	mul.w	sl, r9, r8
 80a4d48:	408d      	lsls	r5, r1
 80a4d4a:	431d      	orrs	r5, r3
 80a4d4c:	0c2b      	lsrs	r3, r5, #16
 80a4d4e:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80a4d52:	45a2      	cmp	sl, r4
 80a4d54:	fa02 f201 	lsl.w	r2, r2, r1
 80a4d58:	fa00 f301 	lsl.w	r3, r0, r1
 80a4d5c:	d909      	bls.n	80a4d72 <__udivmoddi4+0x222>
 80a4d5e:	eb1c 0404 	adds.w	r4, ip, r4
 80a4d62:	f109 30ff 	add.w	r0, r9, #4294967295
 80a4d66:	d248      	bcs.n	80a4dfa <__udivmoddi4+0x2aa>
 80a4d68:	45a2      	cmp	sl, r4
 80a4d6a:	d946      	bls.n	80a4dfa <__udivmoddi4+0x2aa>
 80a4d6c:	f1a9 0902 	sub.w	r9, r9, #2
 80a4d70:	4464      	add	r4, ip
 80a4d72:	eba4 040a 	sub.w	r4, r4, sl
 80a4d76:	fbb4 f0fe 	udiv	r0, r4, lr
 80a4d7a:	fb0e 4410 	mls	r4, lr, r0, r4
 80a4d7e:	fb00 fa08 	mul.w	sl, r0, r8
 80a4d82:	b2ad      	uxth	r5, r5
 80a4d84:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80a4d88:	45a2      	cmp	sl, r4
 80a4d8a:	d908      	bls.n	80a4d9e <__udivmoddi4+0x24e>
 80a4d8c:	eb1c 0404 	adds.w	r4, ip, r4
 80a4d90:	f100 35ff 	add.w	r5, r0, #4294967295
 80a4d94:	d22d      	bcs.n	80a4df2 <__udivmoddi4+0x2a2>
 80a4d96:	45a2      	cmp	sl, r4
 80a4d98:	d92b      	bls.n	80a4df2 <__udivmoddi4+0x2a2>
 80a4d9a:	3802      	subs	r0, #2
 80a4d9c:	4464      	add	r4, ip
 80a4d9e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80a4da2:	fba0 8902 	umull	r8, r9, r0, r2
 80a4da6:	eba4 040a 	sub.w	r4, r4, sl
 80a4daa:	454c      	cmp	r4, r9
 80a4dac:	46c6      	mov	lr, r8
 80a4dae:	464d      	mov	r5, r9
 80a4db0:	d319      	bcc.n	80a4de6 <__udivmoddi4+0x296>
 80a4db2:	d016      	beq.n	80a4de2 <__udivmoddi4+0x292>
 80a4db4:	b15e      	cbz	r6, 80a4dce <__udivmoddi4+0x27e>
 80a4db6:	ebb3 020e 	subs.w	r2, r3, lr
 80a4dba:	eb64 0405 	sbc.w	r4, r4, r5
 80a4dbe:	fa04 f707 	lsl.w	r7, r4, r7
 80a4dc2:	fa22 f301 	lsr.w	r3, r2, r1
 80a4dc6:	431f      	orrs	r7, r3
 80a4dc8:	40cc      	lsrs	r4, r1
 80a4dca:	e9c6 7400 	strd	r7, r4, [r6]
 80a4dce:	2100      	movs	r1, #0
 80a4dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a4dd4:	4631      	mov	r1, r6
 80a4dd6:	4630      	mov	r0, r6
 80a4dd8:	e70c      	b.n	80a4bf4 <__udivmoddi4+0xa4>
 80a4dda:	468c      	mov	ip, r1
 80a4ddc:	e6eb      	b.n	80a4bb6 <__udivmoddi4+0x66>
 80a4dde:	4610      	mov	r0, r2
 80a4de0:	e6ff      	b.n	80a4be2 <__udivmoddi4+0x92>
 80a4de2:	4543      	cmp	r3, r8
 80a4de4:	d2e6      	bcs.n	80a4db4 <__udivmoddi4+0x264>
 80a4de6:	ebb8 0e02 	subs.w	lr, r8, r2
 80a4dea:	eb69 050c 	sbc.w	r5, r9, ip
 80a4dee:	3801      	subs	r0, #1
 80a4df0:	e7e0      	b.n	80a4db4 <__udivmoddi4+0x264>
 80a4df2:	4628      	mov	r0, r5
 80a4df4:	e7d3      	b.n	80a4d9e <__udivmoddi4+0x24e>
 80a4df6:	4611      	mov	r1, r2
 80a4df8:	e78c      	b.n	80a4d14 <__udivmoddi4+0x1c4>
 80a4dfa:	4681      	mov	r9, r0
 80a4dfc:	e7b9      	b.n	80a4d72 <__udivmoddi4+0x222>
 80a4dfe:	4608      	mov	r0, r1
 80a4e00:	e773      	b.n	80a4cea <__udivmoddi4+0x19a>
 80a4e02:	4608      	mov	r0, r1
 80a4e04:	e749      	b.n	80a4c9a <__udivmoddi4+0x14a>
 80a4e06:	f1ac 0c02 	sub.w	ip, ip, #2
 80a4e0a:	443d      	add	r5, r7
 80a4e0c:	e713      	b.n	80a4c36 <__udivmoddi4+0xe6>
 80a4e0e:	3802      	subs	r0, #2
 80a4e10:	443c      	add	r4, r7
 80a4e12:	e724      	b.n	80a4c5e <__udivmoddi4+0x10e>

080a4e14 <__aeabi_idiv0>:
 80a4e14:	4770      	bx	lr
 80a4e16:	bf00      	nop

080a4e18 <asctime_r>:
 80a4e18:	b510      	push	{r4, lr}
 80a4e1a:	460c      	mov	r4, r1
 80a4e1c:	6941      	ldr	r1, [r0, #20]
 80a4e1e:	b086      	sub	sp, #24
 80a4e20:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 80a4e24:	6903      	ldr	r3, [r0, #16]
 80a4e26:	6982      	ldr	r2, [r0, #24]
 80a4e28:	9104      	str	r1, [sp, #16]
 80a4e2a:	6801      	ldr	r1, [r0, #0]
 80a4e2c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80a4e30:	9103      	str	r1, [sp, #12]
 80a4e32:	6841      	ldr	r1, [r0, #4]
 80a4e34:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80a4e38:	9102      	str	r1, [sp, #8]
 80a4e3a:	6881      	ldr	r1, [r0, #8]
 80a4e3c:	9101      	str	r1, [sp, #4]
 80a4e3e:	68c1      	ldr	r1, [r0, #12]
 80a4e40:	4620      	mov	r0, r4
 80a4e42:	9100      	str	r1, [sp, #0]
 80a4e44:	4904      	ldr	r1, [pc, #16]	; (80a4e58 <asctime_r+0x40>)
 80a4e46:	440b      	add	r3, r1
 80a4e48:	4904      	ldr	r1, [pc, #16]	; (80a4e5c <asctime_r+0x44>)
 80a4e4a:	440a      	add	r2, r1
 80a4e4c:	4904      	ldr	r1, [pc, #16]	; (80a4e60 <asctime_r+0x48>)
 80a4e4e:	f7fd fbd7 	bl	80a2600 <siprintf>
 80a4e52:	4620      	mov	r0, r4
 80a4e54:	b006      	add	sp, #24
 80a4e56:	bd10      	pop	{r4, pc}
 80a4e58:	080a7646 	.word	0x080a7646
 80a4e5c:	080a7631 	.word	0x080a7631
 80a4e60:	080a7611 	.word	0x080a7611

080a4e64 <atol>:
 80a4e64:	220a      	movs	r2, #10
 80a4e66:	2100      	movs	r1, #0
 80a4e68:	f001 ba1a 	b.w	80a62a0 <strtol>

080a4e6c <__cxa_atexit>:
 80a4e6c:	b510      	push	{r4, lr}
 80a4e6e:	4604      	mov	r4, r0
 80a4e70:	4804      	ldr	r0, [pc, #16]	; (80a4e84 <__cxa_atexit+0x18>)
 80a4e72:	4613      	mov	r3, r2
 80a4e74:	b120      	cbz	r0, 80a4e80 <__cxa_atexit+0x14>
 80a4e76:	460a      	mov	r2, r1
 80a4e78:	2002      	movs	r0, #2
 80a4e7a:	4621      	mov	r1, r4
 80a4e7c:	f3af 8000 	nop.w
 80a4e80:	bd10      	pop	{r4, pc}
 80a4e82:	bf00      	nop
 80a4e84:	00000000 	.word	0x00000000

080a4e88 <localtime_r>:
 80a4e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a4e8c:	460c      	mov	r4, r1
 80a4e8e:	4607      	mov	r7, r0
 80a4e90:	f001 fd2a 	bl	80a68e8 <__gettzinfo>
 80a4e94:	4621      	mov	r1, r4
 80a4e96:	4680      	mov	r8, r0
 80a4e98:	4638      	mov	r0, r7
 80a4e9a:	f001 fd29 	bl	80a68f0 <gmtime_r>
 80a4e9e:	6943      	ldr	r3, [r0, #20]
 80a4ea0:	4604      	mov	r4, r0
 80a4ea2:	079a      	lsls	r2, r3, #30
 80a4ea4:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 80a4ea8:	d105      	bne.n	80a4eb6 <localtime_r+0x2e>
 80a4eaa:	2264      	movs	r2, #100	; 0x64
 80a4eac:	fb96 f3f2 	sdiv	r3, r6, r2
 80a4eb0:	fb02 6313 	mls	r3, r2, r3, r6
 80a4eb4:	bb7b      	cbnz	r3, 80a4f16 <localtime_r+0x8e>
 80a4eb6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80a4eba:	fb96 f5f3 	sdiv	r5, r6, r3
 80a4ebe:	fb03 6515 	mls	r5, r3, r5, r6
 80a4ec2:	fab5 f585 	clz	r5, r5
 80a4ec6:	096d      	lsrs	r5, r5, #5
 80a4ec8:	2230      	movs	r2, #48	; 0x30
 80a4eca:	4b68      	ldr	r3, [pc, #416]	; (80a506c <localtime_r+0x1e4>)
 80a4ecc:	fb02 3505 	mla	r5, r2, r5, r3
 80a4ed0:	f001 fb1e 	bl	80a6510 <__tz_lock>
 80a4ed4:	f001 fb28 	bl	80a6528 <_tzset_unlocked>
 80a4ed8:	4b65      	ldr	r3, [pc, #404]	; (80a5070 <localtime_r+0x1e8>)
 80a4eda:	681b      	ldr	r3, [r3, #0]
 80a4edc:	b353      	cbz	r3, 80a4f34 <localtime_r+0xac>
 80a4ede:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80a4ee2:	42b3      	cmp	r3, r6
 80a4ee4:	d119      	bne.n	80a4f1a <localtime_r+0x92>
 80a4ee6:	e9d7 6700 	ldrd	r6, r7, [r7]
 80a4eea:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 80a4eee:	f8d8 1000 	ldr.w	r1, [r8]
 80a4ef2:	b9d1      	cbnz	r1, 80a4f2a <localtime_r+0xa2>
 80a4ef4:	4296      	cmp	r6, r2
 80a4ef6:	eb77 0303 	sbcs.w	r3, r7, r3
 80a4efa:	da23      	bge.n	80a4f44 <localtime_r+0xbc>
 80a4efc:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 80a4f00:	4296      	cmp	r6, r2
 80a4f02:	eb77 0303 	sbcs.w	r3, r7, r3
 80a4f06:	bfb4      	ite	lt
 80a4f08:	2301      	movlt	r3, #1
 80a4f0a:	2300      	movge	r3, #0
 80a4f0c:	6223      	str	r3, [r4, #32]
 80a4f0e:	db1b      	blt.n	80a4f48 <localtime_r+0xc0>
 80a4f10:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 80a4f14:	e01a      	b.n	80a4f4c <localtime_r+0xc4>
 80a4f16:	2501      	movs	r5, #1
 80a4f18:	e7d6      	b.n	80a4ec8 <localtime_r+0x40>
 80a4f1a:	4630      	mov	r0, r6
 80a4f1c:	f001 fa50 	bl	80a63c0 <__tzcalc_limits>
 80a4f20:	2800      	cmp	r0, #0
 80a4f22:	d1e0      	bne.n	80a4ee6 <localtime_r+0x5e>
 80a4f24:	f04f 33ff 	mov.w	r3, #4294967295
 80a4f28:	e004      	b.n	80a4f34 <localtime_r+0xac>
 80a4f2a:	4296      	cmp	r6, r2
 80a4f2c:	eb77 0303 	sbcs.w	r3, r7, r3
 80a4f30:	da02      	bge.n	80a4f38 <localtime_r+0xb0>
 80a4f32:	2300      	movs	r3, #0
 80a4f34:	6223      	str	r3, [r4, #32]
 80a4f36:	e7eb      	b.n	80a4f10 <localtime_r+0x88>
 80a4f38:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 80a4f3c:	4296      	cmp	r6, r2
 80a4f3e:	eb77 0303 	sbcs.w	r3, r7, r3
 80a4f42:	daf6      	bge.n	80a4f32 <localtime_r+0xaa>
 80a4f44:	2301      	movs	r3, #1
 80a4f46:	6223      	str	r3, [r4, #32]
 80a4f48:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 80a4f4c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80a4f50:	fb91 f6f3 	sdiv	r6, r1, r3
 80a4f54:	203c      	movs	r0, #60	; 0x3c
 80a4f56:	fb03 1316 	mls	r3, r3, r6, r1
 80a4f5a:	fb93 f2f0 	sdiv	r2, r3, r0
 80a4f5e:	fb00 3012 	mls	r0, r0, r2, r3
 80a4f62:	6861      	ldr	r1, [r4, #4]
 80a4f64:	6823      	ldr	r3, [r4, #0]
 80a4f66:	1a89      	subs	r1, r1, r2
 80a4f68:	68a2      	ldr	r2, [r4, #8]
 80a4f6a:	1a1b      	subs	r3, r3, r0
 80a4f6c:	1b92      	subs	r2, r2, r6
 80a4f6e:	2b3b      	cmp	r3, #59	; 0x3b
 80a4f70:	6023      	str	r3, [r4, #0]
 80a4f72:	6061      	str	r1, [r4, #4]
 80a4f74:	60a2      	str	r2, [r4, #8]
 80a4f76:	dd34      	ble.n	80a4fe2 <localtime_r+0x15a>
 80a4f78:	3101      	adds	r1, #1
 80a4f7a:	6061      	str	r1, [r4, #4]
 80a4f7c:	3b3c      	subs	r3, #60	; 0x3c
 80a4f7e:	6023      	str	r3, [r4, #0]
 80a4f80:	6863      	ldr	r3, [r4, #4]
 80a4f82:	2b3b      	cmp	r3, #59	; 0x3b
 80a4f84:	dd33      	ble.n	80a4fee <localtime_r+0x166>
 80a4f86:	3201      	adds	r2, #1
 80a4f88:	60a2      	str	r2, [r4, #8]
 80a4f8a:	3b3c      	subs	r3, #60	; 0x3c
 80a4f8c:	6063      	str	r3, [r4, #4]
 80a4f8e:	68a3      	ldr	r3, [r4, #8]
 80a4f90:	2b17      	cmp	r3, #23
 80a4f92:	dd32      	ble.n	80a4ffa <localtime_r+0x172>
 80a4f94:	69e2      	ldr	r2, [r4, #28]
 80a4f96:	3b18      	subs	r3, #24
 80a4f98:	3201      	adds	r2, #1
 80a4f9a:	61e2      	str	r2, [r4, #28]
 80a4f9c:	69a2      	ldr	r2, [r4, #24]
 80a4f9e:	60a3      	str	r3, [r4, #8]
 80a4fa0:	3201      	adds	r2, #1
 80a4fa2:	2a06      	cmp	r2, #6
 80a4fa4:	bfc8      	it	gt
 80a4fa6:	2200      	movgt	r2, #0
 80a4fa8:	61a2      	str	r2, [r4, #24]
 80a4faa:	68e2      	ldr	r2, [r4, #12]
 80a4fac:	6923      	ldr	r3, [r4, #16]
 80a4fae:	3201      	adds	r2, #1
 80a4fb0:	60e2      	str	r2, [r4, #12]
 80a4fb2:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 80a4fb6:	428a      	cmp	r2, r1
 80a4fb8:	dd0e      	ble.n	80a4fd8 <localtime_r+0x150>
 80a4fba:	2b0b      	cmp	r3, #11
 80a4fbc:	eba2 0201 	sub.w	r2, r2, r1
 80a4fc0:	60e2      	str	r2, [r4, #12]
 80a4fc2:	f103 0201 	add.w	r2, r3, #1
 80a4fc6:	bf05      	ittet	eq
 80a4fc8:	2200      	moveq	r2, #0
 80a4fca:	6963      	ldreq	r3, [r4, #20]
 80a4fcc:	6122      	strne	r2, [r4, #16]
 80a4fce:	3301      	addeq	r3, #1
 80a4fd0:	bf02      	ittt	eq
 80a4fd2:	6122      	streq	r2, [r4, #16]
 80a4fd4:	6163      	streq	r3, [r4, #20]
 80a4fd6:	61e2      	streq	r2, [r4, #28]
 80a4fd8:	f001 faa0 	bl	80a651c <__tz_unlock>
 80a4fdc:	4620      	mov	r0, r4
 80a4fde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a4fe2:	2b00      	cmp	r3, #0
 80a4fe4:	dacc      	bge.n	80a4f80 <localtime_r+0xf8>
 80a4fe6:	3901      	subs	r1, #1
 80a4fe8:	6061      	str	r1, [r4, #4]
 80a4fea:	333c      	adds	r3, #60	; 0x3c
 80a4fec:	e7c7      	b.n	80a4f7e <localtime_r+0xf6>
 80a4fee:	2b00      	cmp	r3, #0
 80a4ff0:	dacd      	bge.n	80a4f8e <localtime_r+0x106>
 80a4ff2:	3a01      	subs	r2, #1
 80a4ff4:	60a2      	str	r2, [r4, #8]
 80a4ff6:	333c      	adds	r3, #60	; 0x3c
 80a4ff8:	e7c8      	b.n	80a4f8c <localtime_r+0x104>
 80a4ffa:	2b00      	cmp	r3, #0
 80a4ffc:	daec      	bge.n	80a4fd8 <localtime_r+0x150>
 80a4ffe:	69e2      	ldr	r2, [r4, #28]
 80a5000:	3318      	adds	r3, #24
 80a5002:	3a01      	subs	r2, #1
 80a5004:	61e2      	str	r2, [r4, #28]
 80a5006:	69a2      	ldr	r2, [r4, #24]
 80a5008:	60a3      	str	r3, [r4, #8]
 80a500a:	3a01      	subs	r2, #1
 80a500c:	bf48      	it	mi
 80a500e:	2206      	movmi	r2, #6
 80a5010:	61a2      	str	r2, [r4, #24]
 80a5012:	68e2      	ldr	r2, [r4, #12]
 80a5014:	3a01      	subs	r2, #1
 80a5016:	60e2      	str	r2, [r4, #12]
 80a5018:	2a00      	cmp	r2, #0
 80a501a:	d1dd      	bne.n	80a4fd8 <localtime_r+0x150>
 80a501c:	6923      	ldr	r3, [r4, #16]
 80a501e:	3b01      	subs	r3, #1
 80a5020:	d405      	bmi.n	80a502e <localtime_r+0x1a6>
 80a5022:	6123      	str	r3, [r4, #16]
 80a5024:	6923      	ldr	r3, [r4, #16]
 80a5026:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80a502a:	60e3      	str	r3, [r4, #12]
 80a502c:	e7d4      	b.n	80a4fd8 <localtime_r+0x150>
 80a502e:	230b      	movs	r3, #11
 80a5030:	6123      	str	r3, [r4, #16]
 80a5032:	6963      	ldr	r3, [r4, #20]
 80a5034:	1e5a      	subs	r2, r3, #1
 80a5036:	6162      	str	r2, [r4, #20]
 80a5038:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 80a503c:	0793      	lsls	r3, r2, #30
 80a503e:	d105      	bne.n	80a504c <localtime_r+0x1c4>
 80a5040:	2164      	movs	r1, #100	; 0x64
 80a5042:	fb92 f3f1 	sdiv	r3, r2, r1
 80a5046:	fb01 2313 	mls	r3, r1, r3, r2
 80a504a:	b963      	cbnz	r3, 80a5066 <localtime_r+0x1de>
 80a504c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80a5050:	fb92 f3f1 	sdiv	r3, r2, r1
 80a5054:	fb01 2313 	mls	r3, r1, r3, r2
 80a5058:	fab3 f383 	clz	r3, r3
 80a505c:	095b      	lsrs	r3, r3, #5
 80a505e:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80a5062:	61e3      	str	r3, [r4, #28]
 80a5064:	e7de      	b.n	80a5024 <localtime_r+0x19c>
 80a5066:	2301      	movs	r3, #1
 80a5068:	e7f9      	b.n	80a505e <localtime_r+0x1d6>
 80a506a:	bf00      	nop
 80a506c:	080a76cc 	.word	0x080a76cc
 80a5070:	20000500 	.word	0x20000500

080a5074 <memcpy>:
 80a5074:	440a      	add	r2, r1
 80a5076:	4291      	cmp	r1, r2
 80a5078:	f100 33ff 	add.w	r3, r0, #4294967295
 80a507c:	d100      	bne.n	80a5080 <memcpy+0xc>
 80a507e:	4770      	bx	lr
 80a5080:	b510      	push	{r4, lr}
 80a5082:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a5086:	4291      	cmp	r1, r2
 80a5088:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a508c:	d1f9      	bne.n	80a5082 <memcpy+0xe>
 80a508e:	bd10      	pop	{r4, pc}

080a5090 <memset>:
 80a5090:	4603      	mov	r3, r0
 80a5092:	4402      	add	r2, r0
 80a5094:	4293      	cmp	r3, r2
 80a5096:	d100      	bne.n	80a509a <memset+0xa>
 80a5098:	4770      	bx	lr
 80a509a:	f803 1b01 	strb.w	r1, [r3], #1
 80a509e:	e7f9      	b.n	80a5094 <memset+0x4>

080a50a0 <validate_structure>:
 80a50a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a50a2:	6801      	ldr	r1, [r0, #0]
 80a50a4:	4604      	mov	r4, r0
 80a50a6:	293b      	cmp	r1, #59	; 0x3b
 80a50a8:	d911      	bls.n	80a50ce <validate_structure+0x2e>
 80a50aa:	223c      	movs	r2, #60	; 0x3c
 80a50ac:	4668      	mov	r0, sp
 80a50ae:	f001 fbc5 	bl	80a683c <div>
 80a50b2:	9a01      	ldr	r2, [sp, #4]
 80a50b4:	6863      	ldr	r3, [r4, #4]
 80a50b6:	9900      	ldr	r1, [sp, #0]
 80a50b8:	2a00      	cmp	r2, #0
 80a50ba:	440b      	add	r3, r1
 80a50bc:	6063      	str	r3, [r4, #4]
 80a50be:	bfbb      	ittet	lt
 80a50c0:	323c      	addlt	r2, #60	; 0x3c
 80a50c2:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80a50c6:	6022      	strge	r2, [r4, #0]
 80a50c8:	6022      	strlt	r2, [r4, #0]
 80a50ca:	bfb8      	it	lt
 80a50cc:	6063      	strlt	r3, [r4, #4]
 80a50ce:	6861      	ldr	r1, [r4, #4]
 80a50d0:	293b      	cmp	r1, #59	; 0x3b
 80a50d2:	d911      	bls.n	80a50f8 <validate_structure+0x58>
 80a50d4:	223c      	movs	r2, #60	; 0x3c
 80a50d6:	4668      	mov	r0, sp
 80a50d8:	f001 fbb0 	bl	80a683c <div>
 80a50dc:	9a01      	ldr	r2, [sp, #4]
 80a50de:	68a3      	ldr	r3, [r4, #8]
 80a50e0:	9900      	ldr	r1, [sp, #0]
 80a50e2:	2a00      	cmp	r2, #0
 80a50e4:	440b      	add	r3, r1
 80a50e6:	60a3      	str	r3, [r4, #8]
 80a50e8:	bfbb      	ittet	lt
 80a50ea:	323c      	addlt	r2, #60	; 0x3c
 80a50ec:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80a50f0:	6062      	strge	r2, [r4, #4]
 80a50f2:	6062      	strlt	r2, [r4, #4]
 80a50f4:	bfb8      	it	lt
 80a50f6:	60a3      	strlt	r3, [r4, #8]
 80a50f8:	68a1      	ldr	r1, [r4, #8]
 80a50fa:	2917      	cmp	r1, #23
 80a50fc:	d911      	bls.n	80a5122 <validate_structure+0x82>
 80a50fe:	2218      	movs	r2, #24
 80a5100:	4668      	mov	r0, sp
 80a5102:	f001 fb9b 	bl	80a683c <div>
 80a5106:	9a01      	ldr	r2, [sp, #4]
 80a5108:	68e3      	ldr	r3, [r4, #12]
 80a510a:	9900      	ldr	r1, [sp, #0]
 80a510c:	2a00      	cmp	r2, #0
 80a510e:	440b      	add	r3, r1
 80a5110:	60e3      	str	r3, [r4, #12]
 80a5112:	bfbb      	ittet	lt
 80a5114:	3218      	addlt	r2, #24
 80a5116:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80a511a:	60a2      	strge	r2, [r4, #8]
 80a511c:	60a2      	strlt	r2, [r4, #8]
 80a511e:	bfb8      	it	lt
 80a5120:	60e3      	strlt	r3, [r4, #12]
 80a5122:	6921      	ldr	r1, [r4, #16]
 80a5124:	290b      	cmp	r1, #11
 80a5126:	d911      	bls.n	80a514c <validate_structure+0xac>
 80a5128:	220c      	movs	r2, #12
 80a512a:	4668      	mov	r0, sp
 80a512c:	f001 fb86 	bl	80a683c <div>
 80a5130:	9a01      	ldr	r2, [sp, #4]
 80a5132:	6963      	ldr	r3, [r4, #20]
 80a5134:	9900      	ldr	r1, [sp, #0]
 80a5136:	2a00      	cmp	r2, #0
 80a5138:	440b      	add	r3, r1
 80a513a:	6163      	str	r3, [r4, #20]
 80a513c:	bfbb      	ittet	lt
 80a513e:	320c      	addlt	r2, #12
 80a5140:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80a5144:	6122      	strge	r2, [r4, #16]
 80a5146:	6122      	strlt	r2, [r4, #16]
 80a5148:	bfb8      	it	lt
 80a514a:	6163      	strlt	r3, [r4, #20]
 80a514c:	6963      	ldr	r3, [r4, #20]
 80a514e:	0799      	lsls	r1, r3, #30
 80a5150:	d120      	bne.n	80a5194 <validate_structure+0xf4>
 80a5152:	2164      	movs	r1, #100	; 0x64
 80a5154:	fb93 f2f1 	sdiv	r2, r3, r1
 80a5158:	fb01 3212 	mls	r2, r1, r2, r3
 80a515c:	b9e2      	cbnz	r2, 80a5198 <validate_structure+0xf8>
 80a515e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80a5162:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80a5166:	fb93 f2f1 	sdiv	r2, r3, r1
 80a516a:	fb01 3312 	mls	r3, r1, r2, r3
 80a516e:	2b00      	cmp	r3, #0
 80a5170:	bf14      	ite	ne
 80a5172:	231c      	movne	r3, #28
 80a5174:	231d      	moveq	r3, #29
 80a5176:	68e2      	ldr	r2, [r4, #12]
 80a5178:	2a00      	cmp	r2, #0
 80a517a:	dc0f      	bgt.n	80a519c <validate_structure+0xfc>
 80a517c:	260b      	movs	r6, #11
 80a517e:	2064      	movs	r0, #100	; 0x64
 80a5180:	f44f 75c8 	mov.w	r5, #400	; 0x190
 80a5184:	4f31      	ldr	r7, [pc, #196]	; (80a524c <validate_structure+0x1ac>)
 80a5186:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 80a518a:	f1bc 0f00 	cmp.w	ip, #0
 80a518e:	dd31      	ble.n	80a51f4 <validate_structure+0x154>
 80a5190:	b003      	add	sp, #12
 80a5192:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a5194:	231c      	movs	r3, #28
 80a5196:	e7ee      	b.n	80a5176 <validate_structure+0xd6>
 80a5198:	231d      	movs	r3, #29
 80a519a:	e7ec      	b.n	80a5176 <validate_structure+0xd6>
 80a519c:	f04f 0c00 	mov.w	ip, #0
 80a51a0:	2564      	movs	r5, #100	; 0x64
 80a51a2:	f44f 76c8 	mov.w	r6, #400	; 0x190
 80a51a6:	4f29      	ldr	r7, [pc, #164]	; (80a524c <validate_structure+0x1ac>)
 80a51a8:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 80a51ac:	2a01      	cmp	r2, #1
 80a51ae:	bf0c      	ite	eq
 80a51b0:	4618      	moveq	r0, r3
 80a51b2:	f857 0022 	ldrne.w	r0, [r7, r2, lsl #2]
 80a51b6:	4281      	cmp	r1, r0
 80a51b8:	ddea      	ble.n	80a5190 <validate_structure+0xf0>
 80a51ba:	3201      	adds	r2, #1
 80a51bc:	1a09      	subs	r1, r1, r0
 80a51be:	2a0c      	cmp	r2, #12
 80a51c0:	60e1      	str	r1, [r4, #12]
 80a51c2:	6122      	str	r2, [r4, #16]
 80a51c4:	d1f0      	bne.n	80a51a8 <validate_structure+0x108>
 80a51c6:	6963      	ldr	r3, [r4, #20]
 80a51c8:	1c5a      	adds	r2, r3, #1
 80a51ca:	0791      	lsls	r1, r2, #30
 80a51cc:	e9c4 c204 	strd	ip, r2, [r4, #16]
 80a51d0:	d137      	bne.n	80a5242 <validate_structure+0x1a2>
 80a51d2:	fb92 f1f5 	sdiv	r1, r2, r5
 80a51d6:	fb05 2211 	mls	r2, r5, r1, r2
 80a51da:	2a00      	cmp	r2, #0
 80a51dc:	d133      	bne.n	80a5246 <validate_structure+0x1a6>
 80a51de:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 80a51e2:	fb93 f2f6 	sdiv	r2, r3, r6
 80a51e6:	fb06 3312 	mls	r3, r6, r2, r3
 80a51ea:	2b00      	cmp	r3, #0
 80a51ec:	bf14      	ite	ne
 80a51ee:	231c      	movne	r3, #28
 80a51f0:	231d      	moveq	r3, #29
 80a51f2:	e7d9      	b.n	80a51a8 <validate_structure+0x108>
 80a51f4:	6921      	ldr	r1, [r4, #16]
 80a51f6:	3901      	subs	r1, #1
 80a51f8:	6121      	str	r1, [r4, #16]
 80a51fa:	3101      	adds	r1, #1
 80a51fc:	d114      	bne.n	80a5228 <validate_structure+0x188>
 80a51fe:	6963      	ldr	r3, [r4, #20]
 80a5200:	1e59      	subs	r1, r3, #1
 80a5202:	078a      	lsls	r2, r1, #30
 80a5204:	e9c4 6104 	strd	r6, r1, [r4, #16]
 80a5208:	d117      	bne.n	80a523a <validate_structure+0x19a>
 80a520a:	fb91 f2f0 	sdiv	r2, r1, r0
 80a520e:	fb00 1112 	mls	r1, r0, r2, r1
 80a5212:	b9a1      	cbnz	r1, 80a523e <validate_structure+0x19e>
 80a5214:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80a5218:	fb93 f2f5 	sdiv	r2, r3, r5
 80a521c:	fb05 3312 	mls	r3, r5, r2, r3
 80a5220:	2b00      	cmp	r3, #0
 80a5222:	bf14      	ite	ne
 80a5224:	231c      	movne	r3, #28
 80a5226:	231d      	moveq	r3, #29
 80a5228:	6922      	ldr	r2, [r4, #16]
 80a522a:	2a01      	cmp	r2, #1
 80a522c:	bf0c      	ite	eq
 80a522e:	461a      	moveq	r2, r3
 80a5230:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 80a5234:	4462      	add	r2, ip
 80a5236:	60e2      	str	r2, [r4, #12]
 80a5238:	e7a5      	b.n	80a5186 <validate_structure+0xe6>
 80a523a:	231c      	movs	r3, #28
 80a523c:	e7f4      	b.n	80a5228 <validate_structure+0x188>
 80a523e:	231d      	movs	r3, #29
 80a5240:	e7f2      	b.n	80a5228 <validate_structure+0x188>
 80a5242:	231c      	movs	r3, #28
 80a5244:	e7b0      	b.n	80a51a8 <validate_structure+0x108>
 80a5246:	231d      	movs	r3, #29
 80a5248:	e7ae      	b.n	80a51a8 <validate_structure+0x108>
 80a524a:	bf00      	nop
 80a524c:	080a766c 	.word	0x080a766c

080a5250 <mktime>:
 80a5250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a5254:	b08b      	sub	sp, #44	; 0x2c
 80a5256:	4605      	mov	r5, r0
 80a5258:	f001 fb46 	bl	80a68e8 <__gettzinfo>
 80a525c:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
 80a5260:	4607      	mov	r7, r0
 80a5262:	4628      	mov	r0, r5
 80a5264:	f7ff ff1c 	bl	80a50a0 <validate_structure>
 80a5268:	e9d5 2300 	ldrd	r2, r3, [r5]
 80a526c:	fb0a 2303 	mla	r3, sl, r3, r2
 80a5270:	f44f 6a61 	mov.w	sl, #3600	; 0xe10
 80a5274:	68a8      	ldr	r0, [r5, #8]
 80a5276:	4ab4      	ldr	r2, [pc, #720]	; (80a5548 <mktime+0x2f8>)
 80a5278:	fb0a 3a00 	mla	sl, sl, r0, r3
 80a527c:	e9d5 4303 	ldrd	r4, r3, [r5, #12]
 80a5280:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80a5284:	3c01      	subs	r4, #1
 80a5286:	2b01      	cmp	r3, #1
 80a5288:	696e      	ldr	r6, [r5, #20]
 80a528a:	4414      	add	r4, r2
 80a528c:	dd11      	ble.n	80a52b2 <mktime+0x62>
 80a528e:	07b1      	lsls	r1, r6, #30
 80a5290:	d10f      	bne.n	80a52b2 <mktime+0x62>
 80a5292:	2264      	movs	r2, #100	; 0x64
 80a5294:	fb96 f3f2 	sdiv	r3, r6, r2
 80a5298:	fb02 6313 	mls	r3, r2, r3, r6
 80a529c:	b943      	cbnz	r3, 80a52b0 <mktime+0x60>
 80a529e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a52a2:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 80a52a6:	fb91 f3f2 	sdiv	r3, r1, r2
 80a52aa:	fb02 1313 	mls	r3, r2, r3, r1
 80a52ae:	b903      	cbnz	r3, 80a52b2 <mktime+0x62>
 80a52b0:	3401      	adds	r4, #1
 80a52b2:	f644 6220 	movw	r2, #20000	; 0x4e20
 80a52b6:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 80a52ba:	3310      	adds	r3, #16
 80a52bc:	4293      	cmp	r3, r2
 80a52be:	61ec      	str	r4, [r5, #28]
 80a52c0:	f200 8168 	bhi.w	80a5594 <mktime+0x344>
 80a52c4:	2e46      	cmp	r6, #70	; 0x46
 80a52c6:	dd77      	ble.n	80a53b8 <mktime+0x168>
 80a52c8:	2346      	movs	r3, #70	; 0x46
 80a52ca:	f240 1e6d 	movw	lr, #365	; 0x16d
 80a52ce:	2164      	movs	r1, #100	; 0x64
 80a52d0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80a52d4:	079a      	lsls	r2, r3, #30
 80a52d6:	d169      	bne.n	80a53ac <mktime+0x15c>
 80a52d8:	fb93 f2f1 	sdiv	r2, r3, r1
 80a52dc:	fb01 3212 	mls	r2, r1, r2, r3
 80a52e0:	2a00      	cmp	r2, #0
 80a52e2:	d166      	bne.n	80a53b2 <mktime+0x162>
 80a52e4:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 80a52e8:	fb9c f2f0 	sdiv	r2, ip, r0
 80a52ec:	fb00 c212 	mls	r2, r0, r2, ip
 80a52f0:	2a00      	cmp	r2, #0
 80a52f2:	bf14      	ite	ne
 80a52f4:	4672      	movne	r2, lr
 80a52f6:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80a52fa:	3301      	adds	r3, #1
 80a52fc:	429e      	cmp	r6, r3
 80a52fe:	4414      	add	r4, r2
 80a5300:	d1e8      	bne.n	80a52d4 <mktime+0x84>
 80a5302:	4b92      	ldr	r3, [pc, #584]	; (80a554c <mktime+0x2fc>)
 80a5304:	ea4f 7bea 	mov.w	fp, sl, asr #31
 80a5308:	fbc3 ab04 	smlal	sl, fp, r3, r4
 80a530c:	f001 f900 	bl	80a6510 <__tz_lock>
 80a5310:	f001 f90a 	bl	80a6528 <_tzset_unlocked>
 80a5314:	4b8e      	ldr	r3, [pc, #568]	; (80a5550 <mktime+0x300>)
 80a5316:	f8d3 9000 	ldr.w	r9, [r3]
 80a531a:	f1b9 0f00 	cmp.w	r9, #0
 80a531e:	d03f      	beq.n	80a53a0 <mktime+0x150>
 80a5320:	f8d5 9020 	ldr.w	r9, [r5, #32]
 80a5324:	6968      	ldr	r0, [r5, #20]
 80a5326:	687b      	ldr	r3, [r7, #4]
 80a5328:	f1b9 0f01 	cmp.w	r9, #1
 80a532c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80a5330:	46c8      	mov	r8, r9
 80a5332:	bfa8      	it	ge
 80a5334:	f04f 0801 	movge.w	r8, #1
 80a5338:	4283      	cmp	r3, r0
 80a533a:	d17f      	bne.n	80a543c <mktime+0x1ec>
 80a533c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80a533e:	4619      	mov	r1, r3
 80a5340:	17da      	asrs	r2, r3, #31
 80a5342:	e9cd 1200 	strd	r1, r2, [sp]
 80a5346:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80a534a:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80a534e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a5352:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80a5354:	1a80      	subs	r0, r0, r2
 80a5356:	eb61 71e2 	sbc.w	r1, r1, r2, asr #31
 80a535a:	4582      	cmp	sl, r0
 80a535c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80a5360:	eb7b 0101 	sbcs.w	r1, fp, r1
 80a5364:	da71      	bge.n	80a544a <mktime+0x1fa>
 80a5366:	9800      	ldr	r0, [sp, #0]
 80a5368:	6a39      	ldr	r1, [r7, #32]
 80a536a:	1a09      	subs	r1, r1, r0
 80a536c:	9104      	str	r1, [sp, #16]
 80a536e:	9801      	ldr	r0, [sp, #4]
 80a5370:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80a5372:	eb61 0100 	sbc.w	r1, r1, r0
 80a5376:	9105      	str	r1, [sp, #20]
 80a5378:	6839      	ldr	r1, [r7, #0]
 80a537a:	2900      	cmp	r1, #0
 80a537c:	d075      	beq.n	80a546a <mktime+0x21a>
 80a537e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a5382:	4582      	cmp	sl, r0
 80a5384:	eb7b 0101 	sbcs.w	r1, fp, r1
 80a5388:	db05      	blt.n	80a5396 <mktime+0x146>
 80a538a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a538e:	4582      	cmp	sl, r0
 80a5390:	eb7b 0101 	sbcs.w	r1, fp, r1
 80a5394:	db6f      	blt.n	80a5476 <mktime+0x226>
 80a5396:	f1b9 0f00 	cmp.w	r9, #0
 80a539a:	f04f 0900 	mov.w	r9, #0
 80a539e:	da6f      	bge.n	80a5480 <mktime+0x230>
 80a53a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80a53a2:	eb1a 0a03 	adds.w	sl, sl, r3
 80a53a6:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 80a53aa:	e0ae      	b.n	80a550a <mktime+0x2ba>
 80a53ac:	f240 126d 	movw	r2, #365	; 0x16d
 80a53b0:	e7a3      	b.n	80a52fa <mktime+0xaa>
 80a53b2:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80a53b6:	e7a0      	b.n	80a52fa <mktime+0xaa>
 80a53b8:	d0a3      	beq.n	80a5302 <mktime+0xb2>
 80a53ba:	2345      	movs	r3, #69	; 0x45
 80a53bc:	f240 1e6d 	movw	lr, #365	; 0x16d
 80a53c0:	2164      	movs	r1, #100	; 0x64
 80a53c2:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80a53c6:	e012      	b.n	80a53ee <mktime+0x19e>
 80a53c8:	bb62      	cbnz	r2, 80a5424 <mktime+0x1d4>
 80a53ca:	fb93 f2f1 	sdiv	r2, r3, r1
 80a53ce:	fb01 3212 	mls	r2, r1, r2, r3
 80a53d2:	bb52      	cbnz	r2, 80a542a <mktime+0x1da>
 80a53d4:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 80a53d8:	fb9c f2f0 	sdiv	r2, ip, r0
 80a53dc:	fb00 c212 	mls	r2, r0, r2, ip
 80a53e0:	2a00      	cmp	r2, #0
 80a53e2:	bf14      	ite	ne
 80a53e4:	4672      	movne	r2, lr
 80a53e6:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80a53ea:	1aa4      	subs	r4, r4, r2
 80a53ec:	3b01      	subs	r3, #1
 80a53ee:	429e      	cmp	r6, r3
 80a53f0:	f003 0203 	and.w	r2, r3, #3
 80a53f4:	dbe8      	blt.n	80a53c8 <mktime+0x178>
 80a53f6:	b9da      	cbnz	r2, 80a5430 <mktime+0x1e0>
 80a53f8:	2264      	movs	r2, #100	; 0x64
 80a53fa:	fb96 f3f2 	sdiv	r3, r6, r2
 80a53fe:	fb02 6313 	mls	r3, r2, r3, r6
 80a5402:	b9c3      	cbnz	r3, 80a5436 <mktime+0x1e6>
 80a5404:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a5408:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 80a540c:	fb91 f3f2 	sdiv	r3, r1, r2
 80a5410:	fb02 1313 	mls	r3, r2, r3, r1
 80a5414:	2b00      	cmp	r3, #0
 80a5416:	f240 136d 	movw	r3, #365	; 0x16d
 80a541a:	bf08      	it	eq
 80a541c:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 80a5420:	1ae4      	subs	r4, r4, r3
 80a5422:	e76e      	b.n	80a5302 <mktime+0xb2>
 80a5424:	f240 126d 	movw	r2, #365	; 0x16d
 80a5428:	e7df      	b.n	80a53ea <mktime+0x19a>
 80a542a:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80a542e:	e7dc      	b.n	80a53ea <mktime+0x19a>
 80a5430:	f240 136d 	movw	r3, #365	; 0x16d
 80a5434:	e7f4      	b.n	80a5420 <mktime+0x1d0>
 80a5436:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 80a543a:	e7f1      	b.n	80a5420 <mktime+0x1d0>
 80a543c:	f000 ffc0 	bl	80a63c0 <__tzcalc_limits>
 80a5440:	2800      	cmp	r0, #0
 80a5442:	f47f af7b 	bne.w	80a533c <mktime+0xec>
 80a5446:	46c1      	mov	r9, r8
 80a5448:	e054      	b.n	80a54f4 <mktime+0x2a4>
 80a544a:	9800      	ldr	r0, [sp, #0]
 80a544c:	9902      	ldr	r1, [sp, #8]
 80a544e:	1a09      	subs	r1, r1, r0
 80a5450:	9108      	str	r1, [sp, #32]
 80a5452:	9801      	ldr	r0, [sp, #4]
 80a5454:	9903      	ldr	r1, [sp, #12]
 80a5456:	eb61 0100 	sbc.w	r1, r1, r0
 80a545a:	9109      	str	r1, [sp, #36]	; 0x24
 80a545c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80a5460:	4582      	cmp	sl, r0
 80a5462:	eb7b 0101 	sbcs.w	r1, fp, r1
 80a5466:	dbee      	blt.n	80a5446 <mktime+0x1f6>
 80a5468:	e77d      	b.n	80a5366 <mktime+0x116>
 80a546a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a546e:	4582      	cmp	sl, r0
 80a5470:	eb7b 0101 	sbcs.w	r1, fp, r1
 80a5474:	db89      	blt.n	80a538a <mktime+0x13a>
 80a5476:	f1b9 0f00 	cmp.w	r9, #0
 80a547a:	db3f      	blt.n	80a54fc <mktime+0x2ac>
 80a547c:	f04f 0901 	mov.w	r9, #1
 80a5480:	ea88 0809 	eor.w	r8, r8, r9
 80a5484:	f1b8 0f01 	cmp.w	r8, #1
 80a5488:	d134      	bne.n	80a54f4 <mktime+0x2a4>
 80a548a:	f1b9 0f00 	cmp.w	r9, #0
 80a548e:	d04f      	beq.n	80a5530 <mktime+0x2e0>
 80a5490:	1ad3      	subs	r3, r2, r3
 80a5492:	682a      	ldr	r2, [r5, #0]
 80a5494:	eb1a 0a03 	adds.w	sl, sl, r3
 80a5498:	441a      	add	r2, r3
 80a549a:	602a      	str	r2, [r5, #0]
 80a549c:	4628      	mov	r0, r5
 80a549e:	f8d5 800c 	ldr.w	r8, [r5, #12]
 80a54a2:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 80a54a6:	f7ff fdfb 	bl	80a50a0 <validate_structure>
 80a54aa:	68ea      	ldr	r2, [r5, #12]
 80a54ac:	ebb2 0208 	subs.w	r2, r2, r8
 80a54b0:	d020      	beq.n	80a54f4 <mktime+0x2a4>
 80a54b2:	2a01      	cmp	r2, #1
 80a54b4:	dc3e      	bgt.n	80a5534 <mktime+0x2e4>
 80a54b6:	1c90      	adds	r0, r2, #2
 80a54b8:	bfd8      	it	le
 80a54ba:	2201      	movle	r2, #1
 80a54bc:	69eb      	ldr	r3, [r5, #28]
 80a54be:	4414      	add	r4, r2
 80a54c0:	18d3      	adds	r3, r2, r3
 80a54c2:	d547      	bpl.n	80a5554 <mktime+0x304>
 80a54c4:	1e72      	subs	r2, r6, #1
 80a54c6:	0791      	lsls	r1, r2, #30
 80a54c8:	d137      	bne.n	80a553a <mktime+0x2ea>
 80a54ca:	2164      	movs	r1, #100	; 0x64
 80a54cc:	fb92 f3f1 	sdiv	r3, r2, r1
 80a54d0:	fb01 2313 	mls	r3, r1, r3, r2
 80a54d4:	bba3      	cbnz	r3, 80a5540 <mktime+0x2f0>
 80a54d6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a54da:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 80a54de:	fb96 f3f2 	sdiv	r3, r6, r2
 80a54e2:	fb02 6613 	mls	r6, r2, r3, r6
 80a54e6:	2e00      	cmp	r6, #0
 80a54e8:	f240 136d 	movw	r3, #365	; 0x16d
 80a54ec:	bf18      	it	ne
 80a54ee:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 80a54f2:	61eb      	str	r3, [r5, #28]
 80a54f4:	f1b9 0f01 	cmp.w	r9, #1
 80a54f8:	f47f af52 	bne.w	80a53a0 <mktime+0x150>
 80a54fc:	f04f 0901 	mov.w	r9, #1
 80a5500:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80a5502:	eb1a 0a03 	adds.w	sl, sl, r3
 80a5506:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 80a550a:	f001 f807 	bl	80a651c <__tz_unlock>
 80a550e:	2307      	movs	r3, #7
 80a5510:	3404      	adds	r4, #4
 80a5512:	fb94 f3f3 	sdiv	r3, r4, r3
 80a5516:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a551a:	1ae4      	subs	r4, r4, r3
 80a551c:	bf48      	it	mi
 80a551e:	3407      	addmi	r4, #7
 80a5520:	f8c5 9020 	str.w	r9, [r5, #32]
 80a5524:	61ac      	str	r4, [r5, #24]
 80a5526:	4650      	mov	r0, sl
 80a5528:	4659      	mov	r1, fp
 80a552a:	b00b      	add	sp, #44	; 0x2c
 80a552c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a5530:	1a9b      	subs	r3, r3, r2
 80a5532:	e7ae      	b.n	80a5492 <mktime+0x242>
 80a5534:	f04f 32ff 	mov.w	r2, #4294967295
 80a5538:	e7c0      	b.n	80a54bc <mktime+0x26c>
 80a553a:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 80a553e:	e7d8      	b.n	80a54f2 <mktime+0x2a2>
 80a5540:	f240 136d 	movw	r3, #365	; 0x16d
 80a5544:	e7d5      	b.n	80a54f2 <mktime+0x2a2>
 80a5546:	bf00      	nop
 80a5548:	080a769c 	.word	0x080a769c
 80a554c:	00015180 	.word	0x00015180
 80a5550:	20000500 	.word	0x20000500
 80a5554:	07b2      	lsls	r2, r6, #30
 80a5556:	d117      	bne.n	80a5588 <mktime+0x338>
 80a5558:	2164      	movs	r1, #100	; 0x64
 80a555a:	fb96 f2f1 	sdiv	r2, r6, r1
 80a555e:	fb01 6212 	mls	r2, r1, r2, r6
 80a5562:	b9a2      	cbnz	r2, 80a558e <mktime+0x33e>
 80a5564:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80a5568:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 80a556c:	fb96 f2f1 	sdiv	r2, r6, r1
 80a5570:	fb01 6612 	mls	r6, r1, r2, r6
 80a5574:	2e00      	cmp	r6, #0
 80a5576:	f240 126d 	movw	r2, #365	; 0x16d
 80a557a:	bf08      	it	eq
 80a557c:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80a5580:	4293      	cmp	r3, r2
 80a5582:	bfa8      	it	ge
 80a5584:	1a9b      	subge	r3, r3, r2
 80a5586:	e7b4      	b.n	80a54f2 <mktime+0x2a2>
 80a5588:	f240 126d 	movw	r2, #365	; 0x16d
 80a558c:	e7f8      	b.n	80a5580 <mktime+0x330>
 80a558e:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80a5592:	e7f5      	b.n	80a5580 <mktime+0x330>
 80a5594:	f04f 3aff 	mov.w	sl, #4294967295
 80a5598:	f04f 3bff 	mov.w	fp, #4294967295
 80a559c:	e7c3      	b.n	80a5526 <mktime+0x2d6>
 80a559e:	bf00      	nop

080a55a0 <srand>:
 80a55a0:	b538      	push	{r3, r4, r5, lr}
 80a55a2:	4b0d      	ldr	r3, [pc, #52]	; (80a55d8 <srand+0x38>)
 80a55a4:	4604      	mov	r4, r0
 80a55a6:	681d      	ldr	r5, [r3, #0]
 80a55a8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a55aa:	b97b      	cbnz	r3, 80a55cc <srand+0x2c>
 80a55ac:	2018      	movs	r0, #24
 80a55ae:	f7fd f807 	bl	80a25c0 <malloc>
 80a55b2:	4a0a      	ldr	r2, [pc, #40]	; (80a55dc <srand+0x3c>)
 80a55b4:	4b0a      	ldr	r3, [pc, #40]	; (80a55e0 <srand+0x40>)
 80a55b6:	63a8      	str	r0, [r5, #56]	; 0x38
 80a55b8:	e9c0 2300 	strd	r2, r3, [r0]
 80a55bc:	4b09      	ldr	r3, [pc, #36]	; (80a55e4 <srand+0x44>)
 80a55be:	2201      	movs	r2, #1
 80a55c0:	6083      	str	r3, [r0, #8]
 80a55c2:	230b      	movs	r3, #11
 80a55c4:	8183      	strh	r3, [r0, #12]
 80a55c6:	2300      	movs	r3, #0
 80a55c8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a55cc:	2200      	movs	r2, #0
 80a55ce:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a55d0:	611c      	str	r4, [r3, #16]
 80a55d2:	615a      	str	r2, [r3, #20]
 80a55d4:	bd38      	pop	{r3, r4, r5, pc}
 80a55d6:	bf00      	nop
 80a55d8:	20000008 	.word	0x20000008
 80a55dc:	abcd330e 	.word	0xabcd330e
 80a55e0:	e66d1234 	.word	0xe66d1234
 80a55e4:	0005deec 	.word	0x0005deec

080a55e8 <strchr>:
 80a55e8:	4603      	mov	r3, r0
 80a55ea:	b2c9      	uxtb	r1, r1
 80a55ec:	4618      	mov	r0, r3
 80a55ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a55f2:	b112      	cbz	r2, 80a55fa <strchr+0x12>
 80a55f4:	428a      	cmp	r2, r1
 80a55f6:	d1f9      	bne.n	80a55ec <strchr+0x4>
 80a55f8:	4770      	bx	lr
 80a55fa:	2900      	cmp	r1, #0
 80a55fc:	bf18      	it	ne
 80a55fe:	2000      	movne	r0, #0
 80a5600:	4770      	bx	lr

080a5602 <strcmp>:
 80a5602:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a5606:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a560a:	2a01      	cmp	r2, #1
 80a560c:	bf28      	it	cs
 80a560e:	429a      	cmpcs	r2, r3
 80a5610:	d0f7      	beq.n	80a5602 <strcmp>
 80a5612:	1ad0      	subs	r0, r2, r3
 80a5614:	4770      	bx	lr

080a5616 <strcpy>:
 80a5616:	4603      	mov	r3, r0
 80a5618:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a561c:	f803 2b01 	strb.w	r2, [r3], #1
 80a5620:	2a00      	cmp	r2, #0
 80a5622:	d1f9      	bne.n	80a5618 <strcpy+0x2>
 80a5624:	4770      	bx	lr
	...

080a5628 <strdup>:
 80a5628:	4b02      	ldr	r3, [pc, #8]	; (80a5634 <strdup+0xc>)
 80a562a:	4601      	mov	r1, r0
 80a562c:	6818      	ldr	r0, [r3, #0]
 80a562e:	f000 b803 	b.w	80a5638 <_strdup_r>
 80a5632:	bf00      	nop
 80a5634:	20000008 	.word	0x20000008

080a5638 <_strdup_r>:
 80a5638:	b570      	push	{r4, r5, r6, lr}
 80a563a:	4604      	mov	r4, r0
 80a563c:	4608      	mov	r0, r1
 80a563e:	460d      	mov	r5, r1
 80a5640:	f000 fd70 	bl	80a6124 <strlen>
 80a5644:	1c46      	adds	r6, r0, #1
 80a5646:	4631      	mov	r1, r6
 80a5648:	4620      	mov	r0, r4
 80a564a:	f7fd f809 	bl	80a2660 <_malloc_r>
 80a564e:	4604      	mov	r4, r0
 80a5650:	b118      	cbz	r0, 80a565a <_strdup_r+0x22>
 80a5652:	4632      	mov	r2, r6
 80a5654:	4629      	mov	r1, r5
 80a5656:	f7ff fd0d 	bl	80a5074 <memcpy>
 80a565a:	4620      	mov	r0, r4
 80a565c:	bd70      	pop	{r4, r5, r6, pc}
	...

080a5660 <iso_year_adjust>:
 80a5660:	6941      	ldr	r1, [r0, #20]
 80a5662:	f240 736c 	movw	r3, #1900	; 0x76c
 80a5666:	2900      	cmp	r1, #0
 80a5668:	bfa8      	it	ge
 80a566a:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 80a566e:	18ca      	adds	r2, r1, r3
 80a5670:	078b      	lsls	r3, r1, #30
 80a5672:	d105      	bne.n	80a5680 <iso_year_adjust+0x20>
 80a5674:	2164      	movs	r1, #100	; 0x64
 80a5676:	fb92 f3f1 	sdiv	r3, r2, r1
 80a567a:	fb01 2313 	mls	r3, r1, r3, r2
 80a567e:	b9db      	cbnz	r3, 80a56b8 <iso_year_adjust+0x58>
 80a5680:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80a5684:	fb92 f3f1 	sdiv	r3, r2, r1
 80a5688:	fb01 2313 	mls	r3, r1, r3, r2
 80a568c:	fab3 f383 	clz	r3, r3
 80a5690:	095b      	lsrs	r3, r3, #5
 80a5692:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 80a5696:	0040      	lsls	r0, r0, #1
 80a5698:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 80a569c:	4418      	add	r0, r3
 80a569e:	f241 63a2 	movw	r3, #5794	; 0x16a2
 80a56a2:	4298      	cmp	r0, r3
 80a56a4:	d03a      	beq.n	80a571c <iso_year_adjust+0xbc>
 80a56a6:	dc21      	bgt.n	80a56ec <iso_year_adjust+0x8c>
 80a56a8:	2801      	cmp	r0, #1
 80a56aa:	dc1a      	bgt.n	80a56e2 <iso_year_adjust+0x82>
 80a56ac:	2800      	cmp	r0, #0
 80a56ae:	bfb4      	ite	lt
 80a56b0:	2000      	movlt	r0, #0
 80a56b2:	f04f 30ff 	movge.w	r0, #4294967295
 80a56b6:	4770      	bx	lr
 80a56b8:	2301      	movs	r3, #1
 80a56ba:	e7ea      	b.n	80a5692 <iso_year_adjust+0x32>
 80a56bc:	2817      	cmp	r0, #23
 80a56be:	d813      	bhi.n	80a56e8 <iso_year_adjust+0x88>
 80a56c0:	e8df f000 	tbb	[pc, r0]
 80a56c4:	0c0c0c0c 	.word	0x0c0c0c0c
 80a56c8:	0c0c1212 	.word	0x0c0c1212
 80a56cc:	12121212 	.word	0x12121212
 80a56d0:	12121212 	.word	0x12121212
 80a56d4:	0c0c1212 	.word	0x0c0c1212
 80a56d8:	0c0c1212 	.word	0x0c0c1212
 80a56dc:	f04f 30ff 	mov.w	r0, #4294967295
 80a56e0:	4770      	bx	lr
 80a56e2:	380a      	subs	r0, #10
 80a56e4:	2817      	cmp	r0, #23
 80a56e6:	d9e9      	bls.n	80a56bc <iso_year_adjust+0x5c>
 80a56e8:	2000      	movs	r0, #0
 80a56ea:	4770      	bx	lr
 80a56ec:	f241 63b4 	movw	r3, #5812	; 0x16b4
 80a56f0:	4298      	cmp	r0, r3
 80a56f2:	dc06      	bgt.n	80a5702 <iso_year_adjust+0xa2>
 80a56f4:	f241 63b1 	movw	r3, #5809	; 0x16b1
 80a56f8:	4298      	cmp	r0, r3
 80a56fa:	bfd4      	ite	le
 80a56fc:	2000      	movle	r0, #0
 80a56fe:	2001      	movgt	r0, #1
 80a5700:	4770      	bx	lr
 80a5702:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 80a5706:	3802      	subs	r0, #2
 80a5708:	2815      	cmp	r0, #21
 80a570a:	d8ed      	bhi.n	80a56e8 <iso_year_adjust+0x88>
 80a570c:	2301      	movs	r3, #1
 80a570e:	4083      	lsls	r3, r0
 80a5710:	4803      	ldr	r0, [pc, #12]	; (80a5720 <iso_year_adjust+0xc0>)
 80a5712:	4018      	ands	r0, r3
 80a5714:	3800      	subs	r0, #0
 80a5716:	bf18      	it	ne
 80a5718:	2001      	movne	r0, #1
 80a571a:	4770      	bx	lr
 80a571c:	2001      	movs	r0, #1
 80a571e:	4770      	bx	lr
 80a5720:	002a001f 	.word	0x002a001f

080a5724 <__strftime>:
 80a5724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a5728:	461e      	mov	r6, r3
 80a572a:	2300      	movs	r3, #0
 80a572c:	4607      	mov	r7, r0
 80a572e:	460d      	mov	r5, r1
 80a5730:	461c      	mov	r4, r3
 80a5732:	b091      	sub	sp, #68	; 0x44
 80a5734:	9304      	str	r3, [sp, #16]
 80a5736:	7813      	ldrb	r3, [r2, #0]
 80a5738:	2b00      	cmp	r3, #0
 80a573a:	f000 84da 	beq.w	80a60f2 <__strftime+0x9ce>
 80a573e:	2b25      	cmp	r3, #37	; 0x25
 80a5740:	d11f      	bne.n	80a5782 <__strftime+0x5e>
 80a5742:	f892 9001 	ldrb.w	r9, [r2, #1]
 80a5746:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
 80a574a:	d024      	beq.n	80a5796 <__strftime+0x72>
 80a574c:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
 80a5750:	d021      	beq.n	80a5796 <__strftime+0x72>
 80a5752:	f04f 0900 	mov.w	r9, #0
 80a5756:	f102 0a01 	add.w	sl, r2, #1
 80a575a:	f89a 3000 	ldrb.w	r3, [sl]
 80a575e:	3b31      	subs	r3, #49	; 0x31
 80a5760:	2b08      	cmp	r3, #8
 80a5762:	d81b      	bhi.n	80a579c <__strftime+0x78>
 80a5764:	4650      	mov	r0, sl
 80a5766:	220a      	movs	r2, #10
 80a5768:	a908      	add	r1, sp, #32
 80a576a:	f000 fe1f 	bl	80a63ac <strtoul>
 80a576e:	4680      	mov	r8, r0
 80a5770:	f8dd a020 	ldr.w	sl, [sp, #32]
 80a5774:	f89a 3000 	ldrb.w	r3, [sl]
 80a5778:	2b45      	cmp	r3, #69	; 0x45
 80a577a:	d112      	bne.n	80a57a2 <__strftime+0x7e>
 80a577c:	f10a 0a01 	add.w	sl, sl, #1
 80a5780:	e011      	b.n	80a57a6 <__strftime+0x82>
 80a5782:	1e69      	subs	r1, r5, #1
 80a5784:	42a1      	cmp	r1, r4
 80a5786:	d802      	bhi.n	80a578e <__strftime+0x6a>
 80a5788:	2400      	movs	r4, #0
 80a578a:	f000 bcb5 	b.w	80a60f8 <__strftime+0x9d4>
 80a578e:	553b      	strb	r3, [r7, r4]
 80a5790:	3201      	adds	r2, #1
 80a5792:	3401      	adds	r4, #1
 80a5794:	e7cf      	b.n	80a5736 <__strftime+0x12>
 80a5796:	f102 0a02 	add.w	sl, r2, #2
 80a579a:	e7de      	b.n	80a575a <__strftime+0x36>
 80a579c:	f04f 0800 	mov.w	r8, #0
 80a57a0:	e7e8      	b.n	80a5774 <__strftime+0x50>
 80a57a2:	2b4f      	cmp	r3, #79	; 0x4f
 80a57a4:	d0ea      	beq.n	80a577c <__strftime+0x58>
 80a57a6:	f89a 0000 	ldrb.w	r0, [sl]
 80a57aa:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 80a57ae:	2b55      	cmp	r3, #85	; 0x55
 80a57b0:	d8ea      	bhi.n	80a5788 <__strftime+0x64>
 80a57b2:	a201      	add	r2, pc, #4	; (adr r2, 80a57b8 <__strftime+0x94>)
 80a57b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80a57b8:	080a60e7 	.word	0x080a60e7
 80a57bc:	080a5789 	.word	0x080a5789
 80a57c0:	080a5789 	.word	0x080a5789
 80a57c4:	080a5789 	.word	0x080a5789
 80a57c8:	080a5789 	.word	0x080a5789
 80a57cc:	080a5789 	.word	0x080a5789
 80a57d0:	080a5789 	.word	0x080a5789
 80a57d4:	080a5789 	.word	0x080a5789
 80a57d8:	080a5789 	.word	0x080a5789
 80a57dc:	080a5789 	.word	0x080a5789
 80a57e0:	080a5789 	.word	0x080a5789
 80a57e4:	080a5789 	.word	0x080a5789
 80a57e8:	080a5789 	.word	0x080a5789
 80a57ec:	080a5789 	.word	0x080a5789
 80a57f0:	080a5789 	.word	0x080a5789
 80a57f4:	080a5789 	.word	0x080a5789
 80a57f8:	080a5789 	.word	0x080a5789
 80a57fc:	080a5789 	.word	0x080a5789
 80a5800:	080a5789 	.word	0x080a5789
 80a5804:	080a5789 	.word	0x080a5789
 80a5808:	080a5789 	.word	0x080a5789
 80a580c:	080a5789 	.word	0x080a5789
 80a5810:	080a5789 	.word	0x080a5789
 80a5814:	080a5789 	.word	0x080a5789
 80a5818:	080a5789 	.word	0x080a5789
 80a581c:	080a5789 	.word	0x080a5789
 80a5820:	080a5789 	.word	0x080a5789
 80a5824:	080a5789 	.word	0x080a5789
 80a5828:	080a594d 	.word	0x080a594d
 80a582c:	080a59a5 	.word	0x080a59a5
 80a5830:	080a5a17 	.word	0x080a5a17
 80a5834:	080a5aaf 	.word	0x080a5aaf
 80a5838:	080a5789 	.word	0x080a5789
 80a583c:	080a5af9 	.word	0x080a5af9
 80a5840:	080a5bed 	.word	0x080a5bed
 80a5844:	080a5cf7 	.word	0x080a5cf7
 80a5848:	080a5d05 	.word	0x080a5d05
 80a584c:	080a5789 	.word	0x080a5789
 80a5850:	080a5789 	.word	0x080a5789
 80a5854:	080a5789 	.word	0x080a5789
 80a5858:	080a5d35 	.word	0x080a5d35
 80a585c:	080a5789 	.word	0x080a5789
 80a5860:	080a5789 	.word	0x080a5789
 80a5864:	080a5d49 	.word	0x080a5d49
 80a5868:	080a5789 	.word	0x080a5789
 80a586c:	080a5d99 	.word	0x080a5d99
 80a5870:	080a5eaf 	.word	0x080a5eaf
 80a5874:	080a5ebf 	.word	0x080a5ebf
 80a5878:	080a5f13 	.word	0x080a5f13
 80a587c:	080a5f23 	.word	0x080a5f23
 80a5880:	080a5f95 	.word	0x080a5f95
 80a5884:	080a5a0f 	.word	0x080a5a0f
 80a5888:	080a5fc9 	.word	0x080a5fc9
 80a588c:	080a6095 	.word	0x080a6095
 80a5890:	080a5789 	.word	0x080a5789
 80a5894:	080a5789 	.word	0x080a5789
 80a5898:	080a5789 	.word	0x080a5789
 80a589c:	080a5789 	.word	0x080a5789
 80a58a0:	080a5789 	.word	0x080a5789
 80a58a4:	080a5789 	.word	0x080a5789
 80a58a8:	080a5911 	.word	0x080a5911
 80a58ac:	080a597b 	.word	0x080a597b
 80a58b0:	080a59d1 	.word	0x080a59d1
 80a58b4:	080a5a8b 	.word	0x080a5a8b
 80a58b8:	080a5a8b 	.word	0x080a5a8b
 80a58bc:	080a5789 	.word	0x080a5789
 80a58c0:	080a5b4f 	.word	0x080a5b4f
 80a58c4:	080a597b 	.word	0x080a597b
 80a58c8:	080a5789 	.word	0x080a5789
 80a58cc:	080a5d27 	.word	0x080a5d27
 80a58d0:	080a5cf7 	.word	0x080a5cf7
 80a58d4:	080a5d05 	.word	0x080a5d05
 80a58d8:	080a5d2f 	.word	0x080a5d2f
 80a58dc:	080a5d39 	.word	0x080a5d39
 80a58e0:	080a5789 	.word	0x080a5789
 80a58e4:	080a5d49 	.word	0x080a5d49
 80a58e8:	080a5789 	.word	0x080a5789
 80a58ec:	080a59ff 	.word	0x080a59ff
 80a58f0:	080a5dab 	.word	0x080a5dab
 80a58f4:	080a5eb3 	.word	0x080a5eb3
 80a58f8:	080a5ef9 	.word	0x080a5ef9
 80a58fc:	080a5789 	.word	0x080a5789
 80a5900:	080a5f87 	.word	0x080a5f87
 80a5904:	080a5a07 	.word	0x080a5a07
 80a5908:	080a5fad 	.word	0x080a5fad
 80a590c:	080a6025 	.word	0x080a6025
 80a5910:	69b3      	ldr	r3, [r6, #24]
 80a5912:	4aa9      	ldr	r2, [pc, #676]	; (80a5bb8 <__strftime+0x494>)
 80a5914:	3318      	adds	r3, #24
 80a5916:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 80a591a:	4640      	mov	r0, r8
 80a591c:	f000 fc02 	bl	80a6124 <strlen>
 80a5920:	f108 38ff 	add.w	r8, r8, #4294967295
 80a5924:	4420      	add	r0, r4
 80a5926:	1e6b      	subs	r3, r5, #1
 80a5928:	42a0      	cmp	r0, r4
 80a592a:	d107      	bne.n	80a593c <__strftime+0x218>
 80a592c:	f89a 3000 	ldrb.w	r3, [sl]
 80a5930:	2b00      	cmp	r3, #0
 80a5932:	f000 83de 	beq.w	80a60f2 <__strftime+0x9ce>
 80a5936:	f10a 0201 	add.w	r2, sl, #1
 80a593a:	e6fc      	b.n	80a5736 <__strftime+0x12>
 80a593c:	42a3      	cmp	r3, r4
 80a593e:	f67f af23 	bls.w	80a5788 <__strftime+0x64>
 80a5942:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80a5946:	553a      	strb	r2, [r7, r4]
 80a5948:	3401      	adds	r4, #1
 80a594a:	e7ed      	b.n	80a5928 <__strftime+0x204>
 80a594c:	69b2      	ldr	r2, [r6, #24]
 80a594e:	4b9a      	ldr	r3, [pc, #616]	; (80a5bb8 <__strftime+0x494>)
 80a5950:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80a5954:	f8d3 807c 	ldr.w	r8, [r3, #124]	; 0x7c
 80a5958:	4640      	mov	r0, r8
 80a595a:	f000 fbe3 	bl	80a6124 <strlen>
 80a595e:	f108 38ff 	add.w	r8, r8, #4294967295
 80a5962:	4420      	add	r0, r4
 80a5964:	1e6b      	subs	r3, r5, #1
 80a5966:	42a0      	cmp	r0, r4
 80a5968:	d0e0      	beq.n	80a592c <__strftime+0x208>
 80a596a:	42a3      	cmp	r3, r4
 80a596c:	f67f af0c 	bls.w	80a5788 <__strftime+0x64>
 80a5970:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80a5974:	553a      	strb	r2, [r7, r4]
 80a5976:	3401      	adds	r4, #1
 80a5978:	e7f5      	b.n	80a5966 <__strftime+0x242>
 80a597a:	4b8f      	ldr	r3, [pc, #572]	; (80a5bb8 <__strftime+0x494>)
 80a597c:	6932      	ldr	r2, [r6, #16]
 80a597e:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 80a5982:	4640      	mov	r0, r8
 80a5984:	f000 fbce 	bl	80a6124 <strlen>
 80a5988:	f108 38ff 	add.w	r8, r8, #4294967295
 80a598c:	4420      	add	r0, r4
 80a598e:	1e6b      	subs	r3, r5, #1
 80a5990:	42a0      	cmp	r0, r4
 80a5992:	d0cb      	beq.n	80a592c <__strftime+0x208>
 80a5994:	42a3      	cmp	r3, r4
 80a5996:	f67f aef7 	bls.w	80a5788 <__strftime+0x64>
 80a599a:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80a599e:	553a      	strb	r2, [r7, r4]
 80a59a0:	3401      	adds	r4, #1
 80a59a2:	e7f5      	b.n	80a5990 <__strftime+0x26c>
 80a59a4:	6933      	ldr	r3, [r6, #16]
 80a59a6:	4a84      	ldr	r2, [pc, #528]	; (80a5bb8 <__strftime+0x494>)
 80a59a8:	330c      	adds	r3, #12
 80a59aa:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 80a59ae:	4640      	mov	r0, r8
 80a59b0:	f000 fbb8 	bl	80a6124 <strlen>
 80a59b4:	f108 38ff 	add.w	r8, r8, #4294967295
 80a59b8:	4420      	add	r0, r4
 80a59ba:	1e6b      	subs	r3, r5, #1
 80a59bc:	42a0      	cmp	r0, r4
 80a59be:	d0b5      	beq.n	80a592c <__strftime+0x208>
 80a59c0:	42a3      	cmp	r3, r4
 80a59c2:	f67f aee1 	bls.w	80a5788 <__strftime+0x64>
 80a59c6:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80a59ca:	553a      	strb	r2, [r7, r4]
 80a59cc:	3401      	adds	r4, #1
 80a59ce:	e7f5      	b.n	80a59bc <__strftime+0x298>
 80a59d0:	4b79      	ldr	r3, [pc, #484]	; (80a5bb8 <__strftime+0x494>)
 80a59d2:	f8d3 80a0 	ldr.w	r8, [r3, #160]	; 0xa0
 80a59d6:	4640      	mov	r0, r8
 80a59d8:	f000 fba4 	bl	80a6124 <strlen>
 80a59dc:	f898 3000 	ldrb.w	r3, [r8]
 80a59e0:	2b00      	cmp	r3, #0
 80a59e2:	d0a3      	beq.n	80a592c <__strftime+0x208>
 80a59e4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80a59e6:	4642      	mov	r2, r8
 80a59e8:	9300      	str	r3, [sp, #0]
 80a59ea:	4633      	mov	r3, r6
 80a59ec:	1b29      	subs	r1, r5, r4
 80a59ee:	1938      	adds	r0, r7, r4
 80a59f0:	f7ff fe98 	bl	80a5724 <__strftime>
 80a59f4:	2800      	cmp	r0, #0
 80a59f6:	f77f aec7 	ble.w	80a5788 <__strftime+0x64>
 80a59fa:	4404      	add	r4, r0
 80a59fc:	e796      	b.n	80a592c <__strftime+0x208>
 80a59fe:	4b6e      	ldr	r3, [pc, #440]	; (80a5bb8 <__strftime+0x494>)
 80a5a00:	f8d3 80e4 	ldr.w	r8, [r3, #228]	; 0xe4
 80a5a04:	e7e7      	b.n	80a59d6 <__strftime+0x2b2>
 80a5a06:	4b6c      	ldr	r3, [pc, #432]	; (80a5bb8 <__strftime+0x494>)
 80a5a08:	f8d3 809c 	ldr.w	r8, [r3, #156]	; 0x9c
 80a5a0c:	e7e3      	b.n	80a59d6 <__strftime+0x2b2>
 80a5a0e:	4b6a      	ldr	r3, [pc, #424]	; (80a5bb8 <__strftime+0x494>)
 80a5a10:	f8d3 8098 	ldr.w	r8, [r3, #152]	; 0x98
 80a5a14:	e7df      	b.n	80a59d6 <__strftime+0x2b2>
 80a5a16:	4969      	ldr	r1, [pc, #420]	; (80a5bbc <__strftime+0x498>)
 80a5a18:	f8d6 b014 	ldr.w	fp, [r6, #20]
 80a5a1c:	458b      	cmp	fp, r1
 80a5a1e:	bfac      	ite	ge
 80a5a20:	2100      	movge	r1, #0
 80a5a22:	2101      	movlt	r1, #1
 80a5a24:	f1bb 0f00 	cmp.w	fp, #0
 80a5a28:	db10      	blt.n	80a5a4c <__strftime+0x328>
 80a5a2a:	2064      	movs	r0, #100	; 0x64
 80a5a2c:	fb9b f0f0 	sdiv	r0, fp, r0
 80a5a30:	3013      	adds	r0, #19
 80a5a32:	f1b9 0f00 	cmp.w	r9, #0
 80a5a36:	d013      	beq.n	80a5a60 <__strftime+0x33c>
 80a5a38:	2863      	cmp	r0, #99	; 0x63
 80a5a3a:	dd24      	ble.n	80a5a86 <__strftime+0x362>
 80a5a3c:	4a60      	ldr	r2, [pc, #384]	; (80a5bc0 <__strftime+0x49c>)
 80a5a3e:	4b61      	ldr	r3, [pc, #388]	; (80a5bc4 <__strftime+0x4a0>)
 80a5a40:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
 80a5a44:	bf18      	it	ne
 80a5a46:	4613      	movne	r3, r2
 80a5a48:	4a5f      	ldr	r2, [pc, #380]	; (80a5bc8 <__strftime+0x4a4>)
 80a5a4a:	e00b      	b.n	80a5a64 <__strftime+0x340>
 80a5a4c:	f20b 706c 	addw	r0, fp, #1900	; 0x76c
 80a5a50:	9105      	str	r1, [sp, #20]
 80a5a52:	f000 feef 	bl	80a6834 <abs>
 80a5a56:	2364      	movs	r3, #100	; 0x64
 80a5a58:	9905      	ldr	r1, [sp, #20]
 80a5a5a:	fb90 f0f3 	sdiv	r0, r0, r3
 80a5a5e:	e7e8      	b.n	80a5a32 <__strftime+0x30e>
 80a5a60:	4b57      	ldr	r3, [pc, #348]	; (80a5bc0 <__strftime+0x49c>)
 80a5a62:	4a5a      	ldr	r2, [pc, #360]	; (80a5bcc <__strftime+0x4a8>)
 80a5a64:	f1b8 0f02 	cmp.w	r8, #2
 80a5a68:	bf2c      	ite	cs
 80a5a6a:	ebc1 0108 	rsbcs	r1, r1, r8
 80a5a6e:	f1c1 0102 	rsbcc	r1, r1, #2
 80a5a72:	9001      	str	r0, [sp, #4]
 80a5a74:	9100      	str	r1, [sp, #0]
 80a5a76:	4851      	ldr	r0, [pc, #324]	; (80a5bbc <__strftime+0x498>)
 80a5a78:	4955      	ldr	r1, [pc, #340]	; (80a5bd0 <__strftime+0x4ac>)
 80a5a7a:	4583      	cmp	fp, r0
 80a5a7c:	bfb8      	it	lt
 80a5a7e:	460b      	movlt	r3, r1
 80a5a80:	1b29      	subs	r1, r5, r4
 80a5a82:	1938      	adds	r0, r7, r4
 80a5a84:	e029      	b.n	80a5ada <__strftime+0x3b6>
 80a5a86:	4b4e      	ldr	r3, [pc, #312]	; (80a5bc0 <__strftime+0x49c>)
 80a5a88:	e7de      	b.n	80a5a48 <__strftime+0x324>
 80a5a8a:	4952      	ldr	r1, [pc, #328]	; (80a5bd4 <__strftime+0x4b0>)
 80a5a8c:	4a52      	ldr	r2, [pc, #328]	; (80a5bd8 <__strftime+0x4b4>)
 80a5a8e:	68f3      	ldr	r3, [r6, #12]
 80a5a90:	2864      	cmp	r0, #100	; 0x64
 80a5a92:	bf08      	it	eq
 80a5a94:	460a      	moveq	r2, r1
 80a5a96:	1b29      	subs	r1, r5, r4
 80a5a98:	1938      	adds	r0, r7, r4
 80a5a9a:	f7fc fdc9 	bl	80a2630 <sniprintf>
 80a5a9e:	2800      	cmp	r0, #0
 80a5aa0:	f6ff ae72 	blt.w	80a5788 <__strftime+0x64>
 80a5aa4:	4404      	add	r4, r0
 80a5aa6:	42a5      	cmp	r5, r4
 80a5aa8:	f63f af40 	bhi.w	80a592c <__strftime+0x208>
 80a5aac:	e66c      	b.n	80a5788 <__strftime+0x64>
 80a5aae:	6970      	ldr	r0, [r6, #20]
 80a5ab0:	6933      	ldr	r3, [r6, #16]
 80a5ab2:	2800      	cmp	r0, #0
 80a5ab4:	f103 0b01 	add.w	fp, r3, #1
 80a5ab8:	eb07 0804 	add.w	r8, r7, r4
 80a5abc:	68f3      	ldr	r3, [r6, #12]
 80a5abe:	eba5 0904 	sub.w	r9, r5, r4
 80a5ac2:	db0d      	blt.n	80a5ae0 <__strftime+0x3bc>
 80a5ac4:	2164      	movs	r1, #100	; 0x64
 80a5ac6:	fb90 f2f1 	sdiv	r2, r0, r1
 80a5aca:	fb01 0212 	mls	r2, r1, r2, r0
 80a5ace:	e9cd 3200 	strd	r3, r2, [sp]
 80a5ad2:	4649      	mov	r1, r9
 80a5ad4:	465b      	mov	r3, fp
 80a5ad6:	4640      	mov	r0, r8
 80a5ad8:	4a40      	ldr	r2, [pc, #256]	; (80a5bdc <__strftime+0x4b8>)
 80a5ada:	f7fc fda9 	bl	80a2630 <sniprintf>
 80a5ade:	e7de      	b.n	80a5a9e <__strftime+0x37a>
 80a5ae0:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80a5ae4:	9305      	str	r3, [sp, #20]
 80a5ae6:	f000 fea5 	bl	80a6834 <abs>
 80a5aea:	2264      	movs	r2, #100	; 0x64
 80a5aec:	fb90 f1f2 	sdiv	r1, r0, r2
 80a5af0:	9b05      	ldr	r3, [sp, #20]
 80a5af2:	fb01 0212 	mls	r2, r1, r2, r0
 80a5af6:	e7ea      	b.n	80a5ace <__strftime+0x3aa>
 80a5af8:	2325      	movs	r3, #37	; 0x25
 80a5afa:	f88d 3020 	strb.w	r3, [sp, #32]
 80a5afe:	f1b9 0f00 	cmp.w	r9, #0
 80a5b02:	d013      	beq.n	80a5b2c <__strftime+0x408>
 80a5b04:	f1b8 0f06 	cmp.w	r8, #6
 80a5b08:	bf38      	it	cc
 80a5b0a:	f04f 0806 	movcc.w	r8, #6
 80a5b0e:	f1b8 0306 	subs.w	r3, r8, #6
 80a5b12:	f88d 9021 	strb.w	r9, [sp, #33]	; 0x21
 80a5b16:	d10e      	bne.n	80a5b36 <__strftime+0x412>
 80a5b18:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 80a5b1c:	4930      	ldr	r1, [pc, #192]	; (80a5be0 <__strftime+0x4bc>)
 80a5b1e:	f7ff fd7a 	bl	80a5616 <strcpy>
 80a5b22:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80a5b24:	aa08      	add	r2, sp, #32
 80a5b26:	9300      	str	r3, [sp, #0]
 80a5b28:	4633      	mov	r3, r6
 80a5b2a:	e75f      	b.n	80a59ec <__strftime+0x2c8>
 80a5b2c:	f04f 092b 	mov.w	r9, #43	; 0x2b
 80a5b30:	f04f 080a 	mov.w	r8, #10
 80a5b34:	e7eb      	b.n	80a5b0e <__strftime+0x3ea>
 80a5b36:	211e      	movs	r1, #30
 80a5b38:	4a2a      	ldr	r2, [pc, #168]	; (80a5be4 <__strftime+0x4c0>)
 80a5b3a:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 80a5b3e:	f7fc fd77 	bl	80a2630 <sniprintf>
 80a5b42:	2800      	cmp	r0, #0
 80a5b44:	dde8      	ble.n	80a5b18 <__strftime+0x3f4>
 80a5b46:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 80a5b4a:	4418      	add	r0, r3
 80a5b4c:	e7e6      	b.n	80a5b1c <__strftime+0x3f8>
 80a5b4e:	4630      	mov	r0, r6
 80a5b50:	f7ff fd86 	bl	80a5660 <iso_year_adjust>
 80a5b54:	4680      	mov	r8, r0
 80a5b56:	6970      	ldr	r0, [r6, #20]
 80a5b58:	2800      	cmp	r0, #0
 80a5b5a:	db11      	blt.n	80a5b80 <__strftime+0x45c>
 80a5b5c:	2264      	movs	r2, #100	; 0x64
 80a5b5e:	fb90 f3f2 	sdiv	r3, r0, r2
 80a5b62:	fb02 0313 	mls	r3, r2, r3, r0
 80a5b66:	4498      	add	r8, r3
 80a5b68:	2364      	movs	r3, #100	; 0x64
 80a5b6a:	fb98 f0f3 	sdiv	r0, r8, r3
 80a5b6e:	fb03 8810 	mls	r8, r3, r0, r8
 80a5b72:	4498      	add	r8, r3
 80a5b74:	fbb8 f2f3 	udiv	r2, r8, r3
 80a5b78:	fb03 8312 	mls	r3, r3, r2, r8
 80a5b7c:	4a15      	ldr	r2, [pc, #84]	; (80a5bd4 <__strftime+0x4b0>)
 80a5b7e:	e78a      	b.n	80a5a96 <__strftime+0x372>
 80a5b80:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80a5b84:	f000 fe56 	bl	80a6834 <abs>
 80a5b88:	2364      	movs	r3, #100	; 0x64
 80a5b8a:	fb90 f2f3 	sdiv	r2, r0, r3
 80a5b8e:	f1b8 0f00 	cmp.w	r8, #0
 80a5b92:	fb02 0313 	mls	r3, r2, r3, r0
 80a5b96:	da06      	bge.n	80a5ba6 <__strftime+0x482>
 80a5b98:	6971      	ldr	r1, [r6, #20]
 80a5b9a:	4a13      	ldr	r2, [pc, #76]	; (80a5be8 <__strftime+0x4c4>)
 80a5b9c:	4291      	cmp	r1, r2
 80a5b9e:	bfb8      	it	lt
 80a5ba0:	f04f 0801 	movlt.w	r8, #1
 80a5ba4:	e7df      	b.n	80a5b66 <__strftime+0x442>
 80a5ba6:	d0de      	beq.n	80a5b66 <__strftime+0x442>
 80a5ba8:	6971      	ldr	r1, [r6, #20]
 80a5baa:	4a04      	ldr	r2, [pc, #16]	; (80a5bbc <__strftime+0x498>)
 80a5bac:	4291      	cmp	r1, r2
 80a5bae:	bfb8      	it	lt
 80a5bb0:	f04f 38ff 	movlt.w	r8, #4294967295
 80a5bb4:	e7d7      	b.n	80a5b66 <__strftime+0x442>
 80a5bb6:	bf00      	nop
 80a5bb8:	080a78b4 	.word	0x080a78b4
 80a5bbc:	fffff894 	.word	0xfffff894
 80a5bc0:	080a6c3b 	.word	0x080a6c3b
 80a5bc4:	080a773b 	.word	0x080a773b
 80a5bc8:	080a7733 	.word	0x080a7733
 80a5bcc:	080a772c 	.word	0x080a772c
 80a5bd0:	080a773d 	.word	0x080a773d
 80a5bd4:	080a774d 	.word	0x080a774d
 80a5bd8:	080a773f 	.word	0x080a773f
 80a5bdc:	080a7743 	.word	0x080a7743
 80a5be0:	080a7756 	.word	0x080a7756
 80a5be4:	080a7752 	.word	0x080a7752
 80a5be8:	fffff895 	.word	0xfffff895
 80a5bec:	4bb7      	ldr	r3, [pc, #732]	; (80a5ecc <__strftime+0x7a8>)
 80a5bee:	6971      	ldr	r1, [r6, #20]
 80a5bf0:	4630      	mov	r0, r6
 80a5bf2:	4299      	cmp	r1, r3
 80a5bf4:	bfac      	ite	ge
 80a5bf6:	2300      	movge	r3, #0
 80a5bf8:	2301      	movlt	r3, #1
 80a5bfa:	e9cd 3105 	strd	r3, r1, [sp, #20]
 80a5bfe:	f7ff fd2f 	bl	80a5660 <iso_year_adjust>
 80a5c02:	9906      	ldr	r1, [sp, #24]
 80a5c04:	4683      	mov	fp, r0
 80a5c06:	2900      	cmp	r1, #0
 80a5c08:	db2a      	blt.n	80a5c60 <__strftime+0x53c>
 80a5c0a:	2264      	movs	r2, #100	; 0x64
 80a5c0c:	fb91 f2f2 	sdiv	r2, r1, r2
 80a5c10:	3213      	adds	r2, #19
 80a5c12:	6970      	ldr	r0, [r6, #20]
 80a5c14:	2800      	cmp	r0, #0
 80a5c16:	db2d      	blt.n	80a5c74 <__strftime+0x550>
 80a5c18:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80a5c1c:	fb90 fefc 	sdiv	lr, r0, ip
 80a5c20:	fb0c 001e 	mls	r0, ip, lr, r0
 80a5c24:	f1bb 0f00 	cmp.w	fp, #0
 80a5c28:	da33      	bge.n	80a5c92 <__strftime+0x56e>
 80a5c2a:	6971      	ldr	r1, [r6, #20]
 80a5c2c:	4ba8      	ldr	r3, [pc, #672]	; (80a5ed0 <__strftime+0x7ac>)
 80a5c2e:	4299      	cmp	r1, r3
 80a5c30:	db39      	blt.n	80a5ca6 <__strftime+0x582>
 80a5c32:	eb0b 0300 	add.w	r3, fp, r0
 80a5c36:	1c59      	adds	r1, r3, #1
 80a5c38:	d13a      	bne.n	80a5cb0 <__strftime+0x58c>
 80a5c3a:	2363      	movs	r3, #99	; 0x63
 80a5c3c:	3a01      	subs	r2, #1
 80a5c3e:	2064      	movs	r0, #100	; 0x64
 80a5c40:	fb00 3202 	mla	r2, r0, r2, r3
 80a5c44:	9b05      	ldr	r3, [sp, #20]
 80a5c46:	2b00      	cmp	r3, #0
 80a5c48:	d037      	beq.n	80a5cba <__strftime+0x596>
 80a5c4a:	232d      	movs	r3, #45	; 0x2d
 80a5c4c:	f88d 3020 	strb.w	r3, [sp, #32]
 80a5c50:	f1b8 0f00 	cmp.w	r8, #0
 80a5c54:	d001      	beq.n	80a5c5a <__strftime+0x536>
 80a5c56:	f108 38ff 	add.w	r8, r8, #4294967295
 80a5c5a:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 80a5c5e:	e037      	b.n	80a5cd0 <__strftime+0x5ac>
 80a5c60:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 80a5c64:	9106      	str	r1, [sp, #24]
 80a5c66:	f000 fde5 	bl	80a6834 <abs>
 80a5c6a:	2264      	movs	r2, #100	; 0x64
 80a5c6c:	9906      	ldr	r1, [sp, #24]
 80a5c6e:	fb90 f2f2 	sdiv	r2, r0, r2
 80a5c72:	e7ce      	b.n	80a5c12 <__strftime+0x4ee>
 80a5c74:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80a5c78:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80a5c7c:	f000 fdda 	bl	80a6834 <abs>
 80a5c80:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80a5c84:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80a5c88:	fb90 fefc 	sdiv	lr, r0, ip
 80a5c8c:	fb0e 001c 	mls	r0, lr, ip, r0
 80a5c90:	e7c8      	b.n	80a5c24 <__strftime+0x500>
 80a5c92:	d0ce      	beq.n	80a5c32 <__strftime+0x50e>
 80a5c94:	4b8d      	ldr	r3, [pc, #564]	; (80a5ecc <__strftime+0x7a8>)
 80a5c96:	4299      	cmp	r1, r3
 80a5c98:	bfb6      	itet	lt
 80a5c9a:	2301      	movlt	r3, #1
 80a5c9c:	2300      	movge	r3, #0
 80a5c9e:	f04f 3bff 	movlt.w	fp, #4294967295
 80a5ca2:	9305      	str	r3, [sp, #20]
 80a5ca4:	e7c5      	b.n	80a5c32 <__strftime+0x50e>
 80a5ca6:	f04f 0b01 	mov.w	fp, #1
 80a5caa:	f8cd b014 	str.w	fp, [sp, #20]
 80a5cae:	e7c0      	b.n	80a5c32 <__strftime+0x50e>
 80a5cb0:	2b64      	cmp	r3, #100	; 0x64
 80a5cb2:	bf04      	itt	eq
 80a5cb4:	2300      	moveq	r3, #0
 80a5cb6:	3201      	addeq	r2, #1
 80a5cb8:	e7c1      	b.n	80a5c3e <__strftime+0x51a>
 80a5cba:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
 80a5cbe:	d106      	bne.n	80a5cce <__strftime+0x5aa>
 80a5cc0:	f242 730f 	movw	r3, #9999	; 0x270f
 80a5cc4:	429a      	cmp	r2, r3
 80a5cc6:	d902      	bls.n	80a5cce <__strftime+0x5aa>
 80a5cc8:	f88d 9020 	strb.w	r9, [sp, #32]
 80a5ccc:	e7c0      	b.n	80a5c50 <__strftime+0x52c>
 80a5cce:	ab08      	add	r3, sp, #32
 80a5cd0:	2125      	movs	r1, #37	; 0x25
 80a5cd2:	7019      	strb	r1, [r3, #0]
 80a5cd4:	f1b9 0f00 	cmp.w	r9, #0
 80a5cd8:	d109      	bne.n	80a5cee <__strftime+0x5ca>
 80a5cda:	1c58      	adds	r0, r3, #1
 80a5cdc:	497d      	ldr	r1, [pc, #500]	; (80a5ed4 <__strftime+0x7b0>)
 80a5cde:	9205      	str	r2, [sp, #20]
 80a5ce0:	f7ff fc99 	bl	80a5616 <strcpy>
 80a5ce4:	9a05      	ldr	r2, [sp, #20]
 80a5ce6:	9200      	str	r2, [sp, #0]
 80a5ce8:	4643      	mov	r3, r8
 80a5cea:	aa08      	add	r2, sp, #32
 80a5cec:	e058      	b.n	80a5da0 <__strftime+0x67c>
 80a5cee:	2130      	movs	r1, #48	; 0x30
 80a5cf0:	1c98      	adds	r0, r3, #2
 80a5cf2:	7059      	strb	r1, [r3, #1]
 80a5cf4:	e7f2      	b.n	80a5cdc <__strftime+0x5b8>
 80a5cf6:	4978      	ldr	r1, [pc, #480]	; (80a5ed8 <__strftime+0x7b4>)
 80a5cf8:	4a78      	ldr	r2, [pc, #480]	; (80a5edc <__strftime+0x7b8>)
 80a5cfa:	68b3      	ldr	r3, [r6, #8]
 80a5cfc:	286b      	cmp	r0, #107	; 0x6b
 80a5cfe:	bf08      	it	eq
 80a5d00:	460a      	moveq	r2, r1
 80a5d02:	e6c8      	b.n	80a5a96 <__strftime+0x372>
 80a5d04:	68b3      	ldr	r3, [r6, #8]
 80a5d06:	b163      	cbz	r3, 80a5d22 <__strftime+0x5fe>
 80a5d08:	2b0c      	cmp	r3, #12
 80a5d0a:	d004      	beq.n	80a5d16 <__strftime+0x5f2>
 80a5d0c:	210c      	movs	r1, #12
 80a5d0e:	fb93 f2f1 	sdiv	r2, r3, r1
 80a5d12:	fb01 3312 	mls	r3, r1, r2, r3
 80a5d16:	4971      	ldr	r1, [pc, #452]	; (80a5edc <__strftime+0x7b8>)
 80a5d18:	4a6f      	ldr	r2, [pc, #444]	; (80a5ed8 <__strftime+0x7b4>)
 80a5d1a:	2849      	cmp	r0, #73	; 0x49
 80a5d1c:	bf08      	it	eq
 80a5d1e:	460a      	moveq	r2, r1
 80a5d20:	e6b9      	b.n	80a5a96 <__strftime+0x372>
 80a5d22:	230c      	movs	r3, #12
 80a5d24:	e7f7      	b.n	80a5d16 <__strftime+0x5f2>
 80a5d26:	69f3      	ldr	r3, [r6, #28]
 80a5d28:	4a6d      	ldr	r2, [pc, #436]	; (80a5ee0 <__strftime+0x7bc>)
 80a5d2a:	3301      	adds	r3, #1
 80a5d2c:	e6b3      	b.n	80a5a96 <__strftime+0x372>
 80a5d2e:	6933      	ldr	r3, [r6, #16]
 80a5d30:	3301      	adds	r3, #1
 80a5d32:	e723      	b.n	80a5b7c <__strftime+0x458>
 80a5d34:	6873      	ldr	r3, [r6, #4]
 80a5d36:	e721      	b.n	80a5b7c <__strftime+0x458>
 80a5d38:	1e6b      	subs	r3, r5, #1
 80a5d3a:	42a3      	cmp	r3, r4
 80a5d3c:	f67f ad24 	bls.w	80a5788 <__strftime+0x64>
 80a5d40:	230a      	movs	r3, #10
 80a5d42:	553b      	strb	r3, [r7, r4]
 80a5d44:	3401      	adds	r4, #1
 80a5d46:	e5f1      	b.n	80a592c <__strftime+0x208>
 80a5d48:	68b3      	ldr	r3, [r6, #8]
 80a5d4a:	2b0b      	cmp	r3, #11
 80a5d4c:	bfcc      	ite	gt
 80a5d4e:	22a4      	movgt	r2, #164	; 0xa4
 80a5d50:	22a0      	movle	r2, #160	; 0xa0
 80a5d52:	4b64      	ldr	r3, [pc, #400]	; (80a5ee4 <__strftime+0x7c0>)
 80a5d54:	4413      	add	r3, r2
 80a5d56:	f8d3 8004 	ldr.w	r8, [r3, #4]
 80a5d5a:	4640      	mov	r0, r8
 80a5d5c:	f000 f9e2 	bl	80a6124 <strlen>
 80a5d60:	f108 32ff 	add.w	r2, r8, #4294967295
 80a5d64:	4420      	add	r0, r4
 80a5d66:	f105 3cff 	add.w	ip, r5, #4294967295
 80a5d6a:	42a0      	cmp	r0, r4
 80a5d6c:	f43f adde 	beq.w	80a592c <__strftime+0x208>
 80a5d70:	45a4      	cmp	ip, r4
 80a5d72:	f67f ad09 	bls.w	80a5788 <__strftime+0x64>
 80a5d76:	f89a 1000 	ldrb.w	r1, [sl]
 80a5d7a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80a5d7e:	2950      	cmp	r1, #80	; 0x50
 80a5d80:	d107      	bne.n	80a5d92 <__strftime+0x66e>
 80a5d82:	4959      	ldr	r1, [pc, #356]	; (80a5ee8 <__strftime+0x7c4>)
 80a5d84:	5cc9      	ldrb	r1, [r1, r3]
 80a5d86:	f001 0103 	and.w	r1, r1, #3
 80a5d8a:	2901      	cmp	r1, #1
 80a5d8c:	bf08      	it	eq
 80a5d8e:	3320      	addeq	r3, #32
 80a5d90:	b2db      	uxtb	r3, r3
 80a5d92:	553b      	strb	r3, [r7, r4]
 80a5d94:	3401      	adds	r4, #1
 80a5d96:	e7e8      	b.n	80a5d6a <__strftime+0x646>
 80a5d98:	6873      	ldr	r3, [r6, #4]
 80a5d9a:	4a54      	ldr	r2, [pc, #336]	; (80a5eec <__strftime+0x7c8>)
 80a5d9c:	9300      	str	r3, [sp, #0]
 80a5d9e:	68b3      	ldr	r3, [r6, #8]
 80a5da0:	1b29      	subs	r1, r5, r4
 80a5da2:	1938      	adds	r0, r7, r4
 80a5da4:	f7fc fc44 	bl	80a2630 <sniprintf>
 80a5da8:	e679      	b.n	80a5a9e <__strftime+0x37a>
 80a5daa:	6a33      	ldr	r3, [r6, #32]
 80a5dac:	2b00      	cmp	r3, #0
 80a5dae:	db7b      	blt.n	80a5ea8 <__strftime+0x784>
 80a5db0:	f000 fbae 	bl	80a6510 <__tz_lock>
 80a5db4:	9b04      	ldr	r3, [sp, #16]
 80a5db6:	b90b      	cbnz	r3, 80a5dbc <__strftime+0x698>
 80a5db8:	f000 fbb6 	bl	80a6528 <_tzset_unlocked>
 80a5dbc:	f000 fd94 	bl	80a68e8 <__gettzinfo>
 80a5dc0:	6a33      	ldr	r3, [r6, #32]
 80a5dc2:	2b00      	cmp	r3, #0
 80a5dc4:	bfcc      	ite	gt
 80a5dc6:	2350      	movgt	r3, #80	; 0x50
 80a5dc8:	2328      	movle	r3, #40	; 0x28
 80a5dca:	58c3      	ldr	r3, [r0, r3]
 80a5dcc:	f1c3 0900 	rsb	r9, r3, #0
 80a5dd0:	f000 fba4 	bl	80a651c <__tz_unlock>
 80a5dd4:	2301      	movs	r3, #1
 80a5dd6:	9304      	str	r3, [sp, #16]
 80a5dd8:	f8d6 c014 	ldr.w	ip, [r6, #20]
 80a5ddc:	eba5 0e04 	sub.w	lr, r5, r4
 80a5de0:	4662      	mov	r2, ip
 80a5de2:	f1bc 0145 	subs.w	r1, ip, #69	; 0x45
 80a5de6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80a5dea:	9102      	str	r1, [sp, #8]
 80a5dec:	f143 31ff 	adc.w	r1, r3, #4294967295
 80a5df0:	9103      	str	r1, [sp, #12]
 80a5df2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a5df6:	2800      	cmp	r0, #0
 80a5df8:	f171 0100 	sbcs.w	r1, r1, #0
 80a5dfc:	eb07 0804 	add.w	r8, r7, r4
 80a5e00:	da05      	bge.n	80a5e0e <__strftime+0x6ea>
 80a5e02:	f1bc 0142 	subs.w	r1, ip, #66	; 0x42
 80a5e06:	f143 33ff 	adc.w	r3, r3, #4294967295
 80a5e0a:	9102      	str	r1, [sp, #8]
 80a5e0c:	9303      	str	r3, [sp, #12]
 80a5e0e:	9b02      	ldr	r3, [sp, #8]
 80a5e10:	f10c 32ff 	add.w	r2, ip, #4294967295
 80a5e14:	0898      	lsrs	r0, r3, #2
 80a5e16:	9b03      	ldr	r3, [sp, #12]
 80a5e18:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 80a5e1c:	1099      	asrs	r1, r3, #2
 80a5e1e:	2364      	movs	r3, #100	; 0x64
 80a5e20:	fb92 f3f3 	sdiv	r3, r2, r3
 80a5e24:	1ac0      	subs	r0, r0, r3
 80a5e26:	eb61 71e3 	sbc.w	r1, r1, r3, asr #31
 80a5e2a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80a5e2e:	f20c 122b 	addw	r2, ip, #299	; 0x12b
 80a5e32:	fb92 f3f3 	sdiv	r3, r2, r3
 80a5e36:	18c0      	adds	r0, r0, r3
 80a5e38:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 80a5e3c:	f240 136d 	movw	r3, #365	; 0x16d
 80a5e40:	f1ac 0c46 	sub.w	ip, ip, #70	; 0x46
 80a5e44:	fb03 fc0c 	mul.w	ip, r3, ip
 80a5e48:	eb10 000c 	adds.w	r0, r0, ip
 80a5e4c:	eb41 71ec 	adc.w	r1, r1, ip, asr #31
 80a5e50:	f04f 0c18 	mov.w	ip, #24
 80a5e54:	69f3      	ldr	r3, [r6, #28]
 80a5e56:	18c0      	adds	r0, r0, r3
 80a5e58:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 80a5e5c:	fba0 230c 	umull	r2, r3, r0, ip
 80a5e60:	fb0c 3301 	mla	r3, ip, r1, r3
 80a5e64:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 80a5e68:	68b1      	ldr	r1, [r6, #8]
 80a5e6a:	1852      	adds	r2, r2, r1
 80a5e6c:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 80a5e70:	fba2 010c 	umull	r0, r1, r2, ip
 80a5e74:	fb0c 1103 	mla	r1, ip, r3, r1
 80a5e78:	6873      	ldr	r3, [r6, #4]
 80a5e7a:	18c0      	adds	r0, r0, r3
 80a5e7c:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 80a5e80:	fba0 230c 	umull	r2, r3, r0, ip
 80a5e84:	fb0c 3301 	mla	r3, ip, r1, r3
 80a5e88:	6831      	ldr	r1, [r6, #0]
 80a5e8a:	4640      	mov	r0, r8
 80a5e8c:	1852      	adds	r2, r2, r1
 80a5e8e:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 80a5e92:	ebb2 0209 	subs.w	r2, r2, r9
 80a5e96:	eb63 73e9 	sbc.w	r3, r3, r9, asr #31
 80a5e9a:	e9cd 2300 	strd	r2, r3, [sp]
 80a5e9e:	4671      	mov	r1, lr
 80a5ea0:	4a13      	ldr	r2, [pc, #76]	; (80a5ef0 <__strftime+0x7cc>)
 80a5ea2:	f7fc fbc5 	bl	80a2630 <sniprintf>
 80a5ea6:	e5fa      	b.n	80a5a9e <__strftime+0x37a>
 80a5ea8:	f04f 0900 	mov.w	r9, #0
 80a5eac:	e794      	b.n	80a5dd8 <__strftime+0x6b4>
 80a5eae:	6833      	ldr	r3, [r6, #0]
 80a5eb0:	e664      	b.n	80a5b7c <__strftime+0x458>
 80a5eb2:	1e6b      	subs	r3, r5, #1
 80a5eb4:	42a3      	cmp	r3, r4
 80a5eb6:	f67f ac67 	bls.w	80a5788 <__strftime+0x64>
 80a5eba:	2309      	movs	r3, #9
 80a5ebc:	e741      	b.n	80a5d42 <__strftime+0x61e>
 80a5ebe:	6833      	ldr	r3, [r6, #0]
 80a5ec0:	4a0c      	ldr	r2, [pc, #48]	; (80a5ef4 <__strftime+0x7d0>)
 80a5ec2:	9301      	str	r3, [sp, #4]
 80a5ec4:	6873      	ldr	r3, [r6, #4]
 80a5ec6:	9300      	str	r3, [sp, #0]
 80a5ec8:	68b3      	ldr	r3, [r6, #8]
 80a5eca:	e5d9      	b.n	80a5a80 <__strftime+0x35c>
 80a5ecc:	fffff894 	.word	0xfffff894
 80a5ed0:	fffff895 	.word	0xfffff895
 80a5ed4:	080a775e 	.word	0x080a775e
 80a5ed8:	080a773f 	.word	0x080a773f
 80a5edc:	080a774d 	.word	0x080a774d
 80a5ee0:	080a7762 	.word	0x080a7762
 80a5ee4:	080a78b4 	.word	0x080a78b4
 80a5ee8:	080a79ed 	.word	0x080a79ed
 80a5eec:	080a7771 	.word	0x080a7771
 80a5ef0:	080a7767 	.word	0x080a7767
 80a5ef4:	080a776c 	.word	0x080a776c
 80a5ef8:	1e6b      	subs	r3, r5, #1
 80a5efa:	42a3      	cmp	r3, r4
 80a5efc:	f67f ac44 	bls.w	80a5788 <__strftime+0x64>
 80a5f00:	69b3      	ldr	r3, [r6, #24]
 80a5f02:	193a      	adds	r2, r7, r4
 80a5f04:	3401      	adds	r4, #1
 80a5f06:	b913      	cbnz	r3, 80a5f0e <__strftime+0x7ea>
 80a5f08:	2337      	movs	r3, #55	; 0x37
 80a5f0a:	7013      	strb	r3, [r2, #0]
 80a5f0c:	e50e      	b.n	80a592c <__strftime+0x208>
 80a5f0e:	3330      	adds	r3, #48	; 0x30
 80a5f10:	e7fb      	b.n	80a5f0a <__strftime+0x7e6>
 80a5f12:	69f3      	ldr	r3, [r6, #28]
 80a5f14:	69b2      	ldr	r2, [r6, #24]
 80a5f16:	3307      	adds	r3, #7
 80a5f18:	1a9b      	subs	r3, r3, r2
 80a5f1a:	2207      	movs	r2, #7
 80a5f1c:	fb93 f3f2 	sdiv	r3, r3, r2
 80a5f20:	e62c      	b.n	80a5b7c <__strftime+0x458>
 80a5f22:	4630      	mov	r0, r6
 80a5f24:	f7ff fb9c 	bl	80a5660 <iso_year_adjust>
 80a5f28:	69b2      	ldr	r2, [r6, #24]
 80a5f2a:	b132      	cbz	r2, 80a5f3a <__strftime+0x816>
 80a5f2c:	3a01      	subs	r2, #1
 80a5f2e:	2800      	cmp	r0, #0
 80a5f30:	dc27      	bgt.n	80a5f82 <__strftime+0x85e>
 80a5f32:	69f3      	ldr	r3, [r6, #28]
 80a5f34:	d103      	bne.n	80a5f3e <__strftime+0x81a>
 80a5f36:	330a      	adds	r3, #10
 80a5f38:	e7ee      	b.n	80a5f18 <__strftime+0x7f4>
 80a5f3a:	2206      	movs	r2, #6
 80a5f3c:	e7f7      	b.n	80a5f2e <__strftime+0x80a>
 80a5f3e:	6970      	ldr	r0, [r6, #20]
 80a5f40:	1ad3      	subs	r3, r2, r3
 80a5f42:	2800      	cmp	r0, #0
 80a5f44:	f240 726b 	movw	r2, #1899	; 0x76b
 80a5f48:	bfa8      	it	ge
 80a5f4a:	f06f 0264 	mvnge.w	r2, #100	; 0x64
 80a5f4e:	4410      	add	r0, r2
 80a5f50:	0782      	lsls	r2, r0, #30
 80a5f52:	d105      	bne.n	80a5f60 <__strftime+0x83c>
 80a5f54:	2264      	movs	r2, #100	; 0x64
 80a5f56:	fb90 f1f2 	sdiv	r1, r0, r2
 80a5f5a:	fb02 0111 	mls	r1, r2, r1, r0
 80a5f5e:	b971      	cbnz	r1, 80a5f7e <__strftime+0x85a>
 80a5f60:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80a5f64:	fb90 f2f1 	sdiv	r2, r0, r1
 80a5f68:	fb01 0212 	mls	r2, r1, r2, r0
 80a5f6c:	fab2 f282 	clz	r2, r2
 80a5f70:	0952      	lsrs	r2, r2, #5
 80a5f72:	1a9a      	subs	r2, r3, r2
 80a5f74:	2a05      	cmp	r2, #5
 80a5f76:	bfb4      	ite	lt
 80a5f78:	2335      	movlt	r3, #53	; 0x35
 80a5f7a:	2334      	movge	r3, #52	; 0x34
 80a5f7c:	e5fe      	b.n	80a5b7c <__strftime+0x458>
 80a5f7e:	2201      	movs	r2, #1
 80a5f80:	e7f7      	b.n	80a5f72 <__strftime+0x84e>
 80a5f82:	2301      	movs	r3, #1
 80a5f84:	e5fa      	b.n	80a5b7c <__strftime+0x458>
 80a5f86:	1e6b      	subs	r3, r5, #1
 80a5f88:	42a3      	cmp	r3, r4
 80a5f8a:	f67f abfd 	bls.w	80a5788 <__strftime+0x64>
 80a5f8e:	69b3      	ldr	r3, [r6, #24]
 80a5f90:	3330      	adds	r3, #48	; 0x30
 80a5f92:	e6d6      	b.n	80a5d42 <__strftime+0x61e>
 80a5f94:	69b3      	ldr	r3, [r6, #24]
 80a5f96:	b13b      	cbz	r3, 80a5fa8 <__strftime+0x884>
 80a5f98:	3b01      	subs	r3, #1
 80a5f9a:	69f2      	ldr	r2, [r6, #28]
 80a5f9c:	3207      	adds	r2, #7
 80a5f9e:	1ad2      	subs	r2, r2, r3
 80a5fa0:	2307      	movs	r3, #7
 80a5fa2:	fb92 f3f3 	sdiv	r3, r2, r3
 80a5fa6:	e5e9      	b.n	80a5b7c <__strftime+0x458>
 80a5fa8:	2306      	movs	r3, #6
 80a5faa:	e7f6      	b.n	80a5f9a <__strftime+0x876>
 80a5fac:	6970      	ldr	r0, [r6, #20]
 80a5fae:	2800      	cmp	r0, #0
 80a5fb0:	db05      	blt.n	80a5fbe <__strftime+0x89a>
 80a5fb2:	2264      	movs	r2, #100	; 0x64
 80a5fb4:	fb90 f3f2 	sdiv	r3, r0, r2
 80a5fb8:	fb03 0312 	mls	r3, r3, r2, r0
 80a5fbc:	e5de      	b.n	80a5b7c <__strftime+0x458>
 80a5fbe:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80a5fc2:	f000 fc37 	bl	80a6834 <abs>
 80a5fc6:	e7f4      	b.n	80a5fb2 <__strftime+0x88e>
 80a5fc8:	6973      	ldr	r3, [r6, #20]
 80a5fca:	4a4d      	ldr	r2, [pc, #308]	; (80a6100 <__strftime+0x9dc>)
 80a5fcc:	4293      	cmp	r3, r2
 80a5fce:	da0c      	bge.n	80a5fea <__strftime+0x8c6>
 80a5fd0:	212d      	movs	r1, #45	; 0x2d
 80a5fd2:	eba2 0b03 	sub.w	fp, r2, r3
 80a5fd6:	f88d 1020 	strb.w	r1, [sp, #32]
 80a5fda:	f1b8 0f00 	cmp.w	r8, #0
 80a5fde:	d001      	beq.n	80a5fe4 <__strftime+0x8c0>
 80a5fe0:	f108 38ff 	add.w	r8, r8, #4294967295
 80a5fe4:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 80a5fe8:	e00c      	b.n	80a6004 <__strftime+0x8e0>
 80a5fea:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
 80a5fee:	f203 7b6c 	addw	fp, r3, #1900	; 0x76c
 80a5ff2:	d106      	bne.n	80a6002 <__strftime+0x8de>
 80a5ff4:	f242 730f 	movw	r3, #9999	; 0x270f
 80a5ff8:	459b      	cmp	fp, r3
 80a5ffa:	d902      	bls.n	80a6002 <__strftime+0x8de>
 80a5ffc:	f88d 9020 	strb.w	r9, [sp, #32]
 80a6000:	e7eb      	b.n	80a5fda <__strftime+0x8b6>
 80a6002:	ab08      	add	r3, sp, #32
 80a6004:	2225      	movs	r2, #37	; 0x25
 80a6006:	701a      	strb	r2, [r3, #0]
 80a6008:	f1b9 0f00 	cmp.w	r9, #0
 80a600c:	d106      	bne.n	80a601c <__strftime+0x8f8>
 80a600e:	1c58      	adds	r0, r3, #1
 80a6010:	493c      	ldr	r1, [pc, #240]	; (80a6104 <__strftime+0x9e0>)
 80a6012:	f7ff fb00 	bl	80a5616 <strcpy>
 80a6016:	f8cd b000 	str.w	fp, [sp]
 80a601a:	e665      	b.n	80a5ce8 <__strftime+0x5c4>
 80a601c:	2230      	movs	r2, #48	; 0x30
 80a601e:	1c98      	adds	r0, r3, #2
 80a6020:	705a      	strb	r2, [r3, #1]
 80a6022:	e7f5      	b.n	80a6010 <__strftime+0x8ec>
 80a6024:	6a33      	ldr	r3, [r6, #32]
 80a6026:	2b00      	cmp	r3, #0
 80a6028:	f6ff ac80 	blt.w	80a592c <__strftime+0x208>
 80a602c:	f000 fa70 	bl	80a6510 <__tz_lock>
 80a6030:	9b04      	ldr	r3, [sp, #16]
 80a6032:	b90b      	cbnz	r3, 80a6038 <__strftime+0x914>
 80a6034:	f000 fa78 	bl	80a6528 <_tzset_unlocked>
 80a6038:	f000 fc56 	bl	80a68e8 <__gettzinfo>
 80a603c:	6a33      	ldr	r3, [r6, #32]
 80a603e:	eb07 0904 	add.w	r9, r7, r4
 80a6042:	2b00      	cmp	r3, #0
 80a6044:	bfcc      	ite	gt
 80a6046:	2350      	movgt	r3, #80	; 0x50
 80a6048:	2328      	movle	r3, #40	; 0x28
 80a604a:	58c3      	ldr	r3, [r0, r3]
 80a604c:	eba5 0b04 	sub.w	fp, r5, r4
 80a6050:	f1c3 0800 	rsb	r8, r3, #0
 80a6054:	f000 fa62 	bl	80a651c <__tz_unlock>
 80a6058:	233c      	movs	r3, #60	; 0x3c
 80a605a:	fb98 f0f3 	sdiv	r0, r8, r3
 80a605e:	f000 fcf7 	bl	80a6a50 <labs>
 80a6062:	233c      	movs	r3, #60	; 0x3c
 80a6064:	fb90 f2f3 	sdiv	r2, r0, r3
 80a6068:	fb02 0013 	mls	r0, r2, r3, r0
 80a606c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80a6070:	9000      	str	r0, [sp, #0]
 80a6072:	fb98 f3f3 	sdiv	r3, r8, r3
 80a6076:	4659      	mov	r1, fp
 80a6078:	4648      	mov	r0, r9
 80a607a:	4a23      	ldr	r2, [pc, #140]	; (80a6108 <__strftime+0x9e4>)
 80a607c:	f7fc fad8 	bl	80a2630 <sniprintf>
 80a6080:	2800      	cmp	r0, #0
 80a6082:	f6ff ab81 	blt.w	80a5788 <__strftime+0x64>
 80a6086:	4404      	add	r4, r0
 80a6088:	42a5      	cmp	r5, r4
 80a608a:	f67f ab7d 	bls.w	80a5788 <__strftime+0x64>
 80a608e:	2301      	movs	r3, #1
 80a6090:	9304      	str	r3, [sp, #16]
 80a6092:	e44b      	b.n	80a592c <__strftime+0x208>
 80a6094:	6a33      	ldr	r3, [r6, #32]
 80a6096:	2b00      	cmp	r3, #0
 80a6098:	f6ff ac48 	blt.w	80a592c <__strftime+0x208>
 80a609c:	f000 fa38 	bl	80a6510 <__tz_lock>
 80a60a0:	9b04      	ldr	r3, [sp, #16]
 80a60a2:	b90b      	cbnz	r3, 80a60a8 <__strftime+0x984>
 80a60a4:	f000 fa40 	bl	80a6528 <_tzset_unlocked>
 80a60a8:	6a33      	ldr	r3, [r6, #32]
 80a60aa:	4a18      	ldr	r2, [pc, #96]	; (80a610c <__strftime+0x9e8>)
 80a60ac:	2b00      	cmp	r3, #0
 80a60ae:	bfd4      	ite	le
 80a60b0:	2300      	movle	r3, #0
 80a60b2:	2301      	movgt	r3, #1
 80a60b4:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 80a60b8:	4640      	mov	r0, r8
 80a60ba:	f000 f833 	bl	80a6124 <strlen>
 80a60be:	f108 38ff 	add.w	r8, r8, #4294967295
 80a60c2:	4420      	add	r0, r4
 80a60c4:	1e6b      	subs	r3, r5, #1
 80a60c6:	42a0      	cmp	r0, r4
 80a60c8:	d102      	bne.n	80a60d0 <__strftime+0x9ac>
 80a60ca:	f000 fa27 	bl	80a651c <__tz_unlock>
 80a60ce:	e7de      	b.n	80a608e <__strftime+0x96a>
 80a60d0:	42a3      	cmp	r3, r4
 80a60d2:	d904      	bls.n	80a60de <__strftime+0x9ba>
 80a60d4:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80a60d8:	553a      	strb	r2, [r7, r4]
 80a60da:	3401      	adds	r4, #1
 80a60dc:	e7f3      	b.n	80a60c6 <__strftime+0x9a2>
 80a60de:	f000 fa1d 	bl	80a651c <__tz_unlock>
 80a60e2:	f7ff bb51 	b.w	80a5788 <__strftime+0x64>
 80a60e6:	1e6b      	subs	r3, r5, #1
 80a60e8:	42a3      	cmp	r3, r4
 80a60ea:	f67f ab4d 	bls.w	80a5788 <__strftime+0x64>
 80a60ee:	2325      	movs	r3, #37	; 0x25
 80a60f0:	e627      	b.n	80a5d42 <__strftime+0x61e>
 80a60f2:	b10d      	cbz	r5, 80a60f8 <__strftime+0x9d4>
 80a60f4:	2300      	movs	r3, #0
 80a60f6:	553b      	strb	r3, [r7, r4]
 80a60f8:	4620      	mov	r0, r4
 80a60fa:	b011      	add	sp, #68	; 0x44
 80a60fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a6100:	fffff894 	.word	0xfffff894
 80a6104:	080a775e 	.word	0x080a775e
 80a6108:	080a777b 	.word	0x080a777b
 80a610c:	2000006c 	.word	0x2000006c

080a6110 <strftime>:
 80a6110:	b513      	push	{r0, r1, r4, lr}
 80a6112:	4c03      	ldr	r4, [pc, #12]	; (80a6120 <strftime+0x10>)
 80a6114:	9400      	str	r4, [sp, #0]
 80a6116:	f7ff fb05 	bl	80a5724 <__strftime>
 80a611a:	b002      	add	sp, #8
 80a611c:	bd10      	pop	{r4, pc}
 80a611e:	bf00      	nop
 80a6120:	200000d0 	.word	0x200000d0

080a6124 <strlen>:
 80a6124:	4603      	mov	r3, r0
 80a6126:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a612a:	2a00      	cmp	r2, #0
 80a612c:	d1fb      	bne.n	80a6126 <strlen+0x2>
 80a612e:	1a18      	subs	r0, r3, r0
 80a6130:	3801      	subs	r0, #1
 80a6132:	4770      	bx	lr

080a6134 <strncmp>:
 80a6134:	b510      	push	{r4, lr}
 80a6136:	b16a      	cbz	r2, 80a6154 <strncmp+0x20>
 80a6138:	3901      	subs	r1, #1
 80a613a:	1884      	adds	r4, r0, r2
 80a613c:	f810 3b01 	ldrb.w	r3, [r0], #1
 80a6140:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80a6144:	4293      	cmp	r3, r2
 80a6146:	d103      	bne.n	80a6150 <strncmp+0x1c>
 80a6148:	42a0      	cmp	r0, r4
 80a614a:	d001      	beq.n	80a6150 <strncmp+0x1c>
 80a614c:	2b00      	cmp	r3, #0
 80a614e:	d1f5      	bne.n	80a613c <strncmp+0x8>
 80a6150:	1a98      	subs	r0, r3, r2
 80a6152:	bd10      	pop	{r4, pc}
 80a6154:	4610      	mov	r0, r2
 80a6156:	e7fc      	b.n	80a6152 <strncmp+0x1e>

080a6158 <strncpy>:
 80a6158:	4603      	mov	r3, r0
 80a615a:	b510      	push	{r4, lr}
 80a615c:	3901      	subs	r1, #1
 80a615e:	b132      	cbz	r2, 80a616e <strncpy+0x16>
 80a6160:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80a6164:	3a01      	subs	r2, #1
 80a6166:	f803 4b01 	strb.w	r4, [r3], #1
 80a616a:	2c00      	cmp	r4, #0
 80a616c:	d1f7      	bne.n	80a615e <strncpy+0x6>
 80a616e:	2100      	movs	r1, #0
 80a6170:	441a      	add	r2, r3
 80a6172:	4293      	cmp	r3, r2
 80a6174:	d100      	bne.n	80a6178 <strncpy+0x20>
 80a6176:	bd10      	pop	{r4, pc}
 80a6178:	f803 1b01 	strb.w	r1, [r3], #1
 80a617c:	e7f9      	b.n	80a6172 <strncpy+0x1a>

080a617e <strstr>:
 80a617e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a6180:	780c      	ldrb	r4, [r1, #0]
 80a6182:	b164      	cbz	r4, 80a619e <strstr+0x20>
 80a6184:	4603      	mov	r3, r0
 80a6186:	781a      	ldrb	r2, [r3, #0]
 80a6188:	4618      	mov	r0, r3
 80a618a:	1c5e      	adds	r6, r3, #1
 80a618c:	b90a      	cbnz	r2, 80a6192 <strstr+0x14>
 80a618e:	4610      	mov	r0, r2
 80a6190:	e005      	b.n	80a619e <strstr+0x20>
 80a6192:	4294      	cmp	r4, r2
 80a6194:	d108      	bne.n	80a61a8 <strstr+0x2a>
 80a6196:	460d      	mov	r5, r1
 80a6198:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80a619c:	b902      	cbnz	r2, 80a61a0 <strstr+0x22>
 80a619e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a61a0:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80a61a4:	4297      	cmp	r7, r2
 80a61a6:	d0f7      	beq.n	80a6198 <strstr+0x1a>
 80a61a8:	4633      	mov	r3, r6
 80a61aa:	e7ec      	b.n	80a6186 <strstr+0x8>

080a61ac <_strtol_l.isra.0>:
 80a61ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a61b0:	468c      	mov	ip, r1
 80a61b2:	4686      	mov	lr, r0
 80a61b4:	4e39      	ldr	r6, [pc, #228]	; (80a629c <_strtol_l.isra.0+0xf0>)
 80a61b6:	4660      	mov	r0, ip
 80a61b8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80a61bc:	5da5      	ldrb	r5, [r4, r6]
 80a61be:	f015 0508 	ands.w	r5, r5, #8
 80a61c2:	d1f8      	bne.n	80a61b6 <_strtol_l.isra.0+0xa>
 80a61c4:	2c2d      	cmp	r4, #45	; 0x2d
 80a61c6:	d133      	bne.n	80a6230 <_strtol_l.isra.0+0x84>
 80a61c8:	f04f 0801 	mov.w	r8, #1
 80a61cc:	f89c 4000 	ldrb.w	r4, [ip]
 80a61d0:	f100 0c02 	add.w	ip, r0, #2
 80a61d4:	2b00      	cmp	r3, #0
 80a61d6:	d05c      	beq.n	80a6292 <_strtol_l.isra.0+0xe6>
 80a61d8:	2b10      	cmp	r3, #16
 80a61da:	d10c      	bne.n	80a61f6 <_strtol_l.isra.0+0x4a>
 80a61dc:	2c30      	cmp	r4, #48	; 0x30
 80a61de:	d10a      	bne.n	80a61f6 <_strtol_l.isra.0+0x4a>
 80a61e0:	f89c 0000 	ldrb.w	r0, [ip]
 80a61e4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a61e8:	2858      	cmp	r0, #88	; 0x58
 80a61ea:	d14d      	bne.n	80a6288 <_strtol_l.isra.0+0xdc>
 80a61ec:	2310      	movs	r3, #16
 80a61ee:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80a61f2:	f10c 0c02 	add.w	ip, ip, #2
 80a61f6:	2600      	movs	r6, #0
 80a61f8:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 80a61fc:	3f01      	subs	r7, #1
 80a61fe:	fbb7 f9f3 	udiv	r9, r7, r3
 80a6202:	4630      	mov	r0, r6
 80a6204:	fb03 7a19 	mls	sl, r3, r9, r7
 80a6208:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
 80a620c:	2d09      	cmp	r5, #9
 80a620e:	d818      	bhi.n	80a6242 <_strtol_l.isra.0+0x96>
 80a6210:	462c      	mov	r4, r5
 80a6212:	42a3      	cmp	r3, r4
 80a6214:	dd24      	ble.n	80a6260 <_strtol_l.isra.0+0xb4>
 80a6216:	1c75      	adds	r5, r6, #1
 80a6218:	d007      	beq.n	80a622a <_strtol_l.isra.0+0x7e>
 80a621a:	4581      	cmp	r9, r0
 80a621c:	d31d      	bcc.n	80a625a <_strtol_l.isra.0+0xae>
 80a621e:	d101      	bne.n	80a6224 <_strtol_l.isra.0+0x78>
 80a6220:	45a2      	cmp	sl, r4
 80a6222:	db1a      	blt.n	80a625a <_strtol_l.isra.0+0xae>
 80a6224:	2601      	movs	r6, #1
 80a6226:	fb00 4003 	mla	r0, r0, r3, r4
 80a622a:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80a622e:	e7eb      	b.n	80a6208 <_strtol_l.isra.0+0x5c>
 80a6230:	2c2b      	cmp	r4, #43	; 0x2b
 80a6232:	bf08      	it	eq
 80a6234:	f89c 4000 	ldrbeq.w	r4, [ip]
 80a6238:	46a8      	mov	r8, r5
 80a623a:	bf08      	it	eq
 80a623c:	f100 0c02 	addeq.w	ip, r0, #2
 80a6240:	e7c8      	b.n	80a61d4 <_strtol_l.isra.0+0x28>
 80a6242:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
 80a6246:	2d19      	cmp	r5, #25
 80a6248:	d801      	bhi.n	80a624e <_strtol_l.isra.0+0xa2>
 80a624a:	3c37      	subs	r4, #55	; 0x37
 80a624c:	e7e1      	b.n	80a6212 <_strtol_l.isra.0+0x66>
 80a624e:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
 80a6252:	2d19      	cmp	r5, #25
 80a6254:	d804      	bhi.n	80a6260 <_strtol_l.isra.0+0xb4>
 80a6256:	3c57      	subs	r4, #87	; 0x57
 80a6258:	e7db      	b.n	80a6212 <_strtol_l.isra.0+0x66>
 80a625a:	f04f 36ff 	mov.w	r6, #4294967295
 80a625e:	e7e4      	b.n	80a622a <_strtol_l.isra.0+0x7e>
 80a6260:	1c73      	adds	r3, r6, #1
 80a6262:	d106      	bne.n	80a6272 <_strtol_l.isra.0+0xc6>
 80a6264:	2322      	movs	r3, #34	; 0x22
 80a6266:	4638      	mov	r0, r7
 80a6268:	f8ce 3000 	str.w	r3, [lr]
 80a626c:	b942      	cbnz	r2, 80a6280 <_strtol_l.isra.0+0xd4>
 80a626e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a6272:	f1b8 0f00 	cmp.w	r8, #0
 80a6276:	d000      	beq.n	80a627a <_strtol_l.isra.0+0xce>
 80a6278:	4240      	negs	r0, r0
 80a627a:	2a00      	cmp	r2, #0
 80a627c:	d0f7      	beq.n	80a626e <_strtol_l.isra.0+0xc2>
 80a627e:	b10e      	cbz	r6, 80a6284 <_strtol_l.isra.0+0xd8>
 80a6280:	f10c 31ff 	add.w	r1, ip, #4294967295
 80a6284:	6011      	str	r1, [r2, #0]
 80a6286:	e7f2      	b.n	80a626e <_strtol_l.isra.0+0xc2>
 80a6288:	2430      	movs	r4, #48	; 0x30
 80a628a:	2b00      	cmp	r3, #0
 80a628c:	d1b3      	bne.n	80a61f6 <_strtol_l.isra.0+0x4a>
 80a628e:	2308      	movs	r3, #8
 80a6290:	e7b1      	b.n	80a61f6 <_strtol_l.isra.0+0x4a>
 80a6292:	2c30      	cmp	r4, #48	; 0x30
 80a6294:	d0a4      	beq.n	80a61e0 <_strtol_l.isra.0+0x34>
 80a6296:	230a      	movs	r3, #10
 80a6298:	e7ad      	b.n	80a61f6 <_strtol_l.isra.0+0x4a>
 80a629a:	bf00      	nop
 80a629c:	080a79ed 	.word	0x080a79ed

080a62a0 <strtol>:
 80a62a0:	4613      	mov	r3, r2
 80a62a2:	460a      	mov	r2, r1
 80a62a4:	4601      	mov	r1, r0
 80a62a6:	4802      	ldr	r0, [pc, #8]	; (80a62b0 <strtol+0x10>)
 80a62a8:	6800      	ldr	r0, [r0, #0]
 80a62aa:	f7ff bf7f 	b.w	80a61ac <_strtol_l.isra.0>
 80a62ae:	bf00      	nop
 80a62b0:	20000008 	.word	0x20000008

080a62b4 <_strtoul_l.isra.0>:
 80a62b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a62b8:	468c      	mov	ip, r1
 80a62ba:	4686      	mov	lr, r0
 80a62bc:	4e3a      	ldr	r6, [pc, #232]	; (80a63a8 <_strtoul_l.isra.0+0xf4>)
 80a62be:	4660      	mov	r0, ip
 80a62c0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80a62c4:	5da5      	ldrb	r5, [r4, r6]
 80a62c6:	f015 0508 	ands.w	r5, r5, #8
 80a62ca:	d1f8      	bne.n	80a62be <_strtoul_l.isra.0+0xa>
 80a62cc:	2c2d      	cmp	r4, #45	; 0x2d
 80a62ce:	d134      	bne.n	80a633a <_strtoul_l.isra.0+0x86>
 80a62d0:	f04f 0801 	mov.w	r8, #1
 80a62d4:	f89c 4000 	ldrb.w	r4, [ip]
 80a62d8:	f100 0c02 	add.w	ip, r0, #2
 80a62dc:	2b00      	cmp	r3, #0
 80a62de:	d05e      	beq.n	80a639e <_strtoul_l.isra.0+0xea>
 80a62e0:	2b10      	cmp	r3, #16
 80a62e2:	d10c      	bne.n	80a62fe <_strtoul_l.isra.0+0x4a>
 80a62e4:	2c30      	cmp	r4, #48	; 0x30
 80a62e6:	d10a      	bne.n	80a62fe <_strtoul_l.isra.0+0x4a>
 80a62e8:	f89c 0000 	ldrb.w	r0, [ip]
 80a62ec:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a62f0:	2858      	cmp	r0, #88	; 0x58
 80a62f2:	d14f      	bne.n	80a6394 <_strtoul_l.isra.0+0xe0>
 80a62f4:	2310      	movs	r3, #16
 80a62f6:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80a62fa:	f10c 0c02 	add.w	ip, ip, #2
 80a62fe:	f04f 37ff 	mov.w	r7, #4294967295
 80a6302:	fbb7 f7f3 	udiv	r7, r7, r3
 80a6306:	2500      	movs	r5, #0
 80a6308:	fb03 f907 	mul.w	r9, r3, r7
 80a630c:	4628      	mov	r0, r5
 80a630e:	ea6f 0909 	mvn.w	r9, r9
 80a6312:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80a6316:	2e09      	cmp	r6, #9
 80a6318:	d818      	bhi.n	80a634c <_strtoul_l.isra.0+0x98>
 80a631a:	4634      	mov	r4, r6
 80a631c:	42a3      	cmp	r3, r4
 80a631e:	dd24      	ble.n	80a636a <_strtoul_l.isra.0+0xb6>
 80a6320:	2d00      	cmp	r5, #0
 80a6322:	db1f      	blt.n	80a6364 <_strtoul_l.isra.0+0xb0>
 80a6324:	4287      	cmp	r7, r0
 80a6326:	d31d      	bcc.n	80a6364 <_strtoul_l.isra.0+0xb0>
 80a6328:	d101      	bne.n	80a632e <_strtoul_l.isra.0+0x7a>
 80a632a:	45a1      	cmp	r9, r4
 80a632c:	db1a      	blt.n	80a6364 <_strtoul_l.isra.0+0xb0>
 80a632e:	2501      	movs	r5, #1
 80a6330:	fb00 4003 	mla	r0, r0, r3, r4
 80a6334:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80a6338:	e7eb      	b.n	80a6312 <_strtoul_l.isra.0+0x5e>
 80a633a:	2c2b      	cmp	r4, #43	; 0x2b
 80a633c:	bf08      	it	eq
 80a633e:	f89c 4000 	ldrbeq.w	r4, [ip]
 80a6342:	46a8      	mov	r8, r5
 80a6344:	bf08      	it	eq
 80a6346:	f100 0c02 	addeq.w	ip, r0, #2
 80a634a:	e7c7      	b.n	80a62dc <_strtoul_l.isra.0+0x28>
 80a634c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80a6350:	2e19      	cmp	r6, #25
 80a6352:	d801      	bhi.n	80a6358 <_strtoul_l.isra.0+0xa4>
 80a6354:	3c37      	subs	r4, #55	; 0x37
 80a6356:	e7e1      	b.n	80a631c <_strtoul_l.isra.0+0x68>
 80a6358:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80a635c:	2e19      	cmp	r6, #25
 80a635e:	d804      	bhi.n	80a636a <_strtoul_l.isra.0+0xb6>
 80a6360:	3c57      	subs	r4, #87	; 0x57
 80a6362:	e7db      	b.n	80a631c <_strtoul_l.isra.0+0x68>
 80a6364:	f04f 35ff 	mov.w	r5, #4294967295
 80a6368:	e7e4      	b.n	80a6334 <_strtoul_l.isra.0+0x80>
 80a636a:	2d00      	cmp	r5, #0
 80a636c:	da07      	bge.n	80a637e <_strtoul_l.isra.0+0xca>
 80a636e:	2322      	movs	r3, #34	; 0x22
 80a6370:	f04f 30ff 	mov.w	r0, #4294967295
 80a6374:	f8ce 3000 	str.w	r3, [lr]
 80a6378:	b942      	cbnz	r2, 80a638c <_strtoul_l.isra.0+0xd8>
 80a637a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a637e:	f1b8 0f00 	cmp.w	r8, #0
 80a6382:	d000      	beq.n	80a6386 <_strtoul_l.isra.0+0xd2>
 80a6384:	4240      	negs	r0, r0
 80a6386:	2a00      	cmp	r2, #0
 80a6388:	d0f7      	beq.n	80a637a <_strtoul_l.isra.0+0xc6>
 80a638a:	b10d      	cbz	r5, 80a6390 <_strtoul_l.isra.0+0xdc>
 80a638c:	f10c 31ff 	add.w	r1, ip, #4294967295
 80a6390:	6011      	str	r1, [r2, #0]
 80a6392:	e7f2      	b.n	80a637a <_strtoul_l.isra.0+0xc6>
 80a6394:	2430      	movs	r4, #48	; 0x30
 80a6396:	2b00      	cmp	r3, #0
 80a6398:	d1b1      	bne.n	80a62fe <_strtoul_l.isra.0+0x4a>
 80a639a:	2308      	movs	r3, #8
 80a639c:	e7af      	b.n	80a62fe <_strtoul_l.isra.0+0x4a>
 80a639e:	2c30      	cmp	r4, #48	; 0x30
 80a63a0:	d0a2      	beq.n	80a62e8 <_strtoul_l.isra.0+0x34>
 80a63a2:	230a      	movs	r3, #10
 80a63a4:	e7ab      	b.n	80a62fe <_strtoul_l.isra.0+0x4a>
 80a63a6:	bf00      	nop
 80a63a8:	080a79ed 	.word	0x080a79ed

080a63ac <strtoul>:
 80a63ac:	4613      	mov	r3, r2
 80a63ae:	460a      	mov	r2, r1
 80a63b0:	4601      	mov	r1, r0
 80a63b2:	4802      	ldr	r0, [pc, #8]	; (80a63bc <strtoul+0x10>)
 80a63b4:	6800      	ldr	r0, [r0, #0]
 80a63b6:	f7ff bf7d 	b.w	80a62b4 <_strtoul_l.isra.0>
 80a63ba:	bf00      	nop
 80a63bc:	20000008 	.word	0x20000008

080a63c0 <__tzcalc_limits>:
 80a63c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a63c4:	4680      	mov	r8, r0
 80a63c6:	f000 fa8f 	bl	80a68e8 <__gettzinfo>
 80a63ca:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80a63ce:	4598      	cmp	r8, r3
 80a63d0:	f340 8097 	ble.w	80a6502 <__tzcalc_limits+0x142>
 80a63d4:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 80a63d8:	f240 126d 	movw	r2, #365	; 0x16d
 80a63dc:	4443      	add	r3, r8
 80a63de:	109b      	asrs	r3, r3, #2
 80a63e0:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 80a63e4:	fb02 3505 	mla	r5, r2, r5, r3
 80a63e8:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80a63ec:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 80a63f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80a63f4:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 80a63f8:	441d      	add	r5, r3
 80a63fa:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80a63fe:	4442      	add	r2, r8
 80a6400:	fbb2 f2f3 	udiv	r2, r2, r3
 80a6404:	fb98 f7f3 	sdiv	r7, r8, r3
 80a6408:	4415      	add	r5, r2
 80a640a:	2264      	movs	r2, #100	; 0x64
 80a640c:	fb03 8717 	mls	r7, r3, r7, r8
 80a6410:	fb98 f6f2 	sdiv	r6, r8, r2
 80a6414:	fab7 fc87 	clz	ip, r7
 80a6418:	4604      	mov	r4, r0
 80a641a:	f04f 0e07 	mov.w	lr, #7
 80a641e:	fb02 8616 	mls	r6, r2, r6, r8
 80a6422:	f008 0303 	and.w	r3, r8, #3
 80a6426:	f8c0 8004 	str.w	r8, [r0, #4]
 80a642a:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80a642e:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 80a6432:	9300      	str	r3, [sp, #0]
 80a6434:	7a22      	ldrb	r2, [r4, #8]
 80a6436:	6963      	ldr	r3, [r4, #20]
 80a6438:	2a4a      	cmp	r2, #74	; 0x4a
 80a643a:	d128      	bne.n	80a648e <__tzcalc_limits+0xce>
 80a643c:	9900      	ldr	r1, [sp, #0]
 80a643e:	18ea      	adds	r2, r5, r3
 80a6440:	b901      	cbnz	r1, 80a6444 <__tzcalc_limits+0x84>
 80a6442:	b906      	cbnz	r6, 80a6446 <__tzcalc_limits+0x86>
 80a6444:	bb0f      	cbnz	r7, 80a648a <__tzcalc_limits+0xca>
 80a6446:	2b3b      	cmp	r3, #59	; 0x3b
 80a6448:	bfd4      	ite	le
 80a644a:	2300      	movle	r3, #0
 80a644c:	2301      	movgt	r3, #1
 80a644e:	4413      	add	r3, r2
 80a6450:	1e5a      	subs	r2, r3, #1
 80a6452:	69a3      	ldr	r3, [r4, #24]
 80a6454:	492c      	ldr	r1, [pc, #176]	; (80a6508 <__tzcalc_limits+0x148>)
 80a6456:	3428      	adds	r4, #40	; 0x28
 80a6458:	fb01 3202 	mla	r2, r1, r2, r3
 80a645c:	6823      	ldr	r3, [r4, #0]
 80a645e:	4413      	add	r3, r2
 80a6460:	461a      	mov	r2, r3
 80a6462:	17db      	asrs	r3, r3, #31
 80a6464:	e944 2302 	strd	r2, r3, [r4, #-8]
 80a6468:	45a3      	cmp	fp, r4
 80a646a:	d1e3      	bne.n	80a6434 <__tzcalc_limits+0x74>
 80a646c:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 80a6470:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 80a6474:	4294      	cmp	r4, r2
 80a6476:	eb75 0303 	sbcs.w	r3, r5, r3
 80a647a:	bfb4      	ite	lt
 80a647c:	2301      	movlt	r3, #1
 80a647e:	2300      	movge	r3, #0
 80a6480:	6003      	str	r3, [r0, #0]
 80a6482:	2001      	movs	r0, #1
 80a6484:	b003      	add	sp, #12
 80a6486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a648a:	2300      	movs	r3, #0
 80a648c:	e7df      	b.n	80a644e <__tzcalc_limits+0x8e>
 80a648e:	2a44      	cmp	r2, #68	; 0x44
 80a6490:	d101      	bne.n	80a6496 <__tzcalc_limits+0xd6>
 80a6492:	18ea      	adds	r2, r5, r3
 80a6494:	e7dd      	b.n	80a6452 <__tzcalc_limits+0x92>
 80a6496:	9a00      	ldr	r2, [sp, #0]
 80a6498:	bb6a      	cbnz	r2, 80a64f6 <__tzcalc_limits+0x136>
 80a649a:	2e00      	cmp	r6, #0
 80a649c:	bf0c      	ite	eq
 80a649e:	46e0      	moveq	r8, ip
 80a64a0:	f04f 0801 	movne.w	r8, #1
 80a64a4:	f04f 0a30 	mov.w	sl, #48	; 0x30
 80a64a8:	68e2      	ldr	r2, [r4, #12]
 80a64aa:	f04f 0900 	mov.w	r9, #0
 80a64ae:	9201      	str	r2, [sp, #4]
 80a64b0:	462a      	mov	r2, r5
 80a64b2:	4916      	ldr	r1, [pc, #88]	; (80a650c <__tzcalc_limits+0x14c>)
 80a64b4:	fb0a 1808 	mla	r8, sl, r8, r1
 80a64b8:	f1a8 0804 	sub.w	r8, r8, #4
 80a64bc:	9901      	ldr	r1, [sp, #4]
 80a64be:	f109 0901 	add.w	r9, r9, #1
 80a64c2:	4549      	cmp	r1, r9
 80a64c4:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 80a64c8:	dc17      	bgt.n	80a64fa <__tzcalc_limits+0x13a>
 80a64ca:	f102 0804 	add.w	r8, r2, #4
 80a64ce:	fb98 f9fe 	sdiv	r9, r8, lr
 80a64d2:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 80a64d6:	eba8 0909 	sub.w	r9, r8, r9
 80a64da:	ebb3 0909 	subs.w	r9, r3, r9
 80a64de:	6923      	ldr	r3, [r4, #16]
 80a64e0:	bf48      	it	mi
 80a64e2:	f109 0907 	addmi.w	r9, r9, #7
 80a64e6:	3b01      	subs	r3, #1
 80a64e8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a64ec:	444b      	add	r3, r9
 80a64ee:	4553      	cmp	r3, sl
 80a64f0:	da05      	bge.n	80a64fe <__tzcalc_limits+0x13e>
 80a64f2:	441a      	add	r2, r3
 80a64f4:	e7ad      	b.n	80a6452 <__tzcalc_limits+0x92>
 80a64f6:	46e0      	mov	r8, ip
 80a64f8:	e7d4      	b.n	80a64a4 <__tzcalc_limits+0xe4>
 80a64fa:	4452      	add	r2, sl
 80a64fc:	e7de      	b.n	80a64bc <__tzcalc_limits+0xfc>
 80a64fe:	3b07      	subs	r3, #7
 80a6500:	e7f5      	b.n	80a64ee <__tzcalc_limits+0x12e>
 80a6502:	2000      	movs	r0, #0
 80a6504:	e7be      	b.n	80a6484 <__tzcalc_limits+0xc4>
 80a6506:	bf00      	nop
 80a6508:	00015180 	.word	0x00015180
 80a650c:	080a76cc 	.word	0x080a76cc

080a6510 <__tz_lock>:
 80a6510:	4801      	ldr	r0, [pc, #4]	; (80a6518 <__tz_lock+0x8>)
 80a6512:	f000 baa1 	b.w	80a6a58 <__retarget_lock_acquire>
 80a6516:	bf00      	nop
 80a6518:	20000513 	.word	0x20000513

080a651c <__tz_unlock>:
 80a651c:	4801      	ldr	r0, [pc, #4]	; (80a6524 <__tz_unlock+0x8>)
 80a651e:	f000 ba9d 	b.w	80a6a5c <__retarget_lock_release>
 80a6522:	bf00      	nop
 80a6524:	20000513 	.word	0x20000513

080a6528 <_tzset_unlocked>:
 80a6528:	4b01      	ldr	r3, [pc, #4]	; (80a6530 <_tzset_unlocked+0x8>)
 80a652a:	6818      	ldr	r0, [r3, #0]
 80a652c:	f000 b802 	b.w	80a6534 <_tzset_unlocked_r>
 80a6530:	20000008 	.word	0x20000008

080a6534 <_tzset_unlocked_r>:
 80a6534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a6538:	b08d      	sub	sp, #52	; 0x34
 80a653a:	4607      	mov	r7, r0
 80a653c:	f000 f9d4 	bl	80a68e8 <__gettzinfo>
 80a6540:	49b0      	ldr	r1, [pc, #704]	; (80a6804 <_tzset_unlocked_r+0x2d0>)
 80a6542:	4605      	mov	r5, r0
 80a6544:	4638      	mov	r0, r7
 80a6546:	f000 f9c7 	bl	80a68d8 <_getenv_r>
 80a654a:	4eaf      	ldr	r6, [pc, #700]	; (80a6808 <_tzset_unlocked_r+0x2d4>)
 80a654c:	4604      	mov	r4, r0
 80a654e:	b970      	cbnz	r0, 80a656e <_tzset_unlocked_r+0x3a>
 80a6550:	4bae      	ldr	r3, [pc, #696]	; (80a680c <_tzset_unlocked_r+0x2d8>)
 80a6552:	4aaf      	ldr	r2, [pc, #700]	; (80a6810 <_tzset_unlocked_r+0x2dc>)
 80a6554:	6018      	str	r0, [r3, #0]
 80a6556:	4baf      	ldr	r3, [pc, #700]	; (80a6814 <_tzset_unlocked_r+0x2e0>)
 80a6558:	6018      	str	r0, [r3, #0]
 80a655a:	4baf      	ldr	r3, [pc, #700]	; (80a6818 <_tzset_unlocked_r+0x2e4>)
 80a655c:	6830      	ldr	r0, [r6, #0]
 80a655e:	e9c3 2200 	strd	r2, r2, [r3]
 80a6562:	f7fc f835 	bl	80a25d0 <free>
 80a6566:	6034      	str	r4, [r6, #0]
 80a6568:	b00d      	add	sp, #52	; 0x34
 80a656a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a656e:	6831      	ldr	r1, [r6, #0]
 80a6570:	2900      	cmp	r1, #0
 80a6572:	d15f      	bne.n	80a6634 <_tzset_unlocked_r+0x100>
 80a6574:	6830      	ldr	r0, [r6, #0]
 80a6576:	f7fc f82b 	bl	80a25d0 <free>
 80a657a:	4620      	mov	r0, r4
 80a657c:	f7ff fdd2 	bl	80a6124 <strlen>
 80a6580:	1c41      	adds	r1, r0, #1
 80a6582:	4638      	mov	r0, r7
 80a6584:	f7fc f86c 	bl	80a2660 <_malloc_r>
 80a6588:	6030      	str	r0, [r6, #0]
 80a658a:	2800      	cmp	r0, #0
 80a658c:	d157      	bne.n	80a663e <_tzset_unlocked_r+0x10a>
 80a658e:	7823      	ldrb	r3, [r4, #0]
 80a6590:	ae0a      	add	r6, sp, #40	; 0x28
 80a6592:	2b3a      	cmp	r3, #58	; 0x3a
 80a6594:	bf08      	it	eq
 80a6596:	3401      	addeq	r4, #1
 80a6598:	4633      	mov	r3, r6
 80a659a:	4620      	mov	r0, r4
 80a659c:	4a9f      	ldr	r2, [pc, #636]	; (80a681c <_tzset_unlocked_r+0x2e8>)
 80a659e:	49a0      	ldr	r1, [pc, #640]	; (80a6820 <_tzset_unlocked_r+0x2ec>)
 80a65a0:	f7fc f836 	bl	80a2610 <siscanf>
 80a65a4:	2800      	cmp	r0, #0
 80a65a6:	dddf      	ble.n	80a6568 <_tzset_unlocked_r+0x34>
 80a65a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a65aa:	18e7      	adds	r7, r4, r3
 80a65ac:	5ce3      	ldrb	r3, [r4, r3]
 80a65ae:	2b2d      	cmp	r3, #45	; 0x2d
 80a65b0:	d149      	bne.n	80a6646 <_tzset_unlocked_r+0x112>
 80a65b2:	f04f 34ff 	mov.w	r4, #4294967295
 80a65b6:	3701      	adds	r7, #1
 80a65b8:	f04f 0800 	mov.w	r8, #0
 80a65bc:	f10d 0a20 	add.w	sl, sp, #32
 80a65c0:	f10d 0b1e 	add.w	fp, sp, #30
 80a65c4:	4633      	mov	r3, r6
 80a65c6:	4638      	mov	r0, r7
 80a65c8:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 80a65cc:	4995      	ldr	r1, [pc, #596]	; (80a6824 <_tzset_unlocked_r+0x2f0>)
 80a65ce:	9603      	str	r6, [sp, #12]
 80a65d0:	f8cd b000 	str.w	fp, [sp]
 80a65d4:	aa07      	add	r2, sp, #28
 80a65d6:	f8ad 801e 	strh.w	r8, [sp, #30]
 80a65da:	f8ad 8020 	strh.w	r8, [sp, #32]
 80a65de:	f7fc f817 	bl	80a2610 <siscanf>
 80a65e2:	4540      	cmp	r0, r8
 80a65e4:	ddc0      	ble.n	80a6568 <_tzset_unlocked_r+0x34>
 80a65e6:	213c      	movs	r1, #60	; 0x3c
 80a65e8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80a65ec:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80a65f0:	f8df 923c 	ldr.w	r9, [pc, #572]	; 80a6830 <_tzset_unlocked_r+0x2fc>
 80a65f4:	fb01 2203 	mla	r2, r1, r3, r2
 80a65f8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a65fc:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80a6600:	fb01 2303 	mla	r3, r1, r3, r2
 80a6604:	435c      	muls	r4, r3
 80a6606:	4b85      	ldr	r3, [pc, #532]	; (80a681c <_tzset_unlocked_r+0x2e8>)
 80a6608:	62ac      	str	r4, [r5, #40]	; 0x28
 80a660a:	4c83      	ldr	r4, [pc, #524]	; (80a6818 <_tzset_unlocked_r+0x2e4>)
 80a660c:	464a      	mov	r2, r9
 80a660e:	6023      	str	r3, [r4, #0]
 80a6610:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a6612:	4983      	ldr	r1, [pc, #524]	; (80a6820 <_tzset_unlocked_r+0x2ec>)
 80a6614:	441f      	add	r7, r3
 80a6616:	4638      	mov	r0, r7
 80a6618:	4633      	mov	r3, r6
 80a661a:	f7fb fff9 	bl	80a2610 <siscanf>
 80a661e:	4540      	cmp	r0, r8
 80a6620:	dc17      	bgt.n	80a6652 <_tzset_unlocked_r+0x11e>
 80a6622:	6823      	ldr	r3, [r4, #0]
 80a6624:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80a6626:	6063      	str	r3, [r4, #4]
 80a6628:	4b78      	ldr	r3, [pc, #480]	; (80a680c <_tzset_unlocked_r+0x2d8>)
 80a662a:	601a      	str	r2, [r3, #0]
 80a662c:	4b79      	ldr	r3, [pc, #484]	; (80a6814 <_tzset_unlocked_r+0x2e0>)
 80a662e:	f8c3 8000 	str.w	r8, [r3]
 80a6632:	e799      	b.n	80a6568 <_tzset_unlocked_r+0x34>
 80a6634:	f7fe ffe5 	bl	80a5602 <strcmp>
 80a6638:	2800      	cmp	r0, #0
 80a663a:	d19b      	bne.n	80a6574 <_tzset_unlocked_r+0x40>
 80a663c:	e794      	b.n	80a6568 <_tzset_unlocked_r+0x34>
 80a663e:	4621      	mov	r1, r4
 80a6640:	f7fe ffe9 	bl	80a5616 <strcpy>
 80a6644:	e7a3      	b.n	80a658e <_tzset_unlocked_r+0x5a>
 80a6646:	2b2b      	cmp	r3, #43	; 0x2b
 80a6648:	f04f 0401 	mov.w	r4, #1
 80a664c:	bf08      	it	eq
 80a664e:	3701      	addeq	r7, #1
 80a6650:	e7b2      	b.n	80a65b8 <_tzset_unlocked_r+0x84>
 80a6652:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a6654:	f8c4 9004 	str.w	r9, [r4, #4]
 80a6658:	18fc      	adds	r4, r7, r3
 80a665a:	5cfb      	ldrb	r3, [r7, r3]
 80a665c:	2b2d      	cmp	r3, #45	; 0x2d
 80a665e:	f040 808c 	bne.w	80a677a <_tzset_unlocked_r+0x246>
 80a6662:	f04f 37ff 	mov.w	r7, #4294967295
 80a6666:	3401      	adds	r4, #1
 80a6668:	2300      	movs	r3, #0
 80a666a:	4620      	mov	r0, r4
 80a666c:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a6670:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a6674:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a6678:	930a      	str	r3, [sp, #40]	; 0x28
 80a667a:	e9cd a602 	strd	sl, r6, [sp, #8]
 80a667e:	4633      	mov	r3, r6
 80a6680:	e9cd b600 	strd	fp, r6, [sp]
 80a6684:	4967      	ldr	r1, [pc, #412]	; (80a6824 <_tzset_unlocked_r+0x2f0>)
 80a6686:	aa07      	add	r2, sp, #28
 80a6688:	f7fb ffc2 	bl	80a2610 <siscanf>
 80a668c:	2800      	cmp	r0, #0
 80a668e:	dc7a      	bgt.n	80a6786 <_tzset_unlocked_r+0x252>
 80a6690:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 80a6692:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 80a6696:	652f      	str	r7, [r5, #80]	; 0x50
 80a6698:	f04f 0900 	mov.w	r9, #0
 80a669c:	462f      	mov	r7, r5
 80a669e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a66a0:	441c      	add	r4, r3
 80a66a2:	7823      	ldrb	r3, [r4, #0]
 80a66a4:	2b2c      	cmp	r3, #44	; 0x2c
 80a66a6:	bf08      	it	eq
 80a66a8:	3401      	addeq	r4, #1
 80a66aa:	f894 8000 	ldrb.w	r8, [r4]
 80a66ae:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80a66b2:	d17a      	bne.n	80a67aa <_tzset_unlocked_r+0x276>
 80a66b4:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80a66b8:	e9cd 6301 	strd	r6, r3, [sp, #4]
 80a66bc:	ab09      	add	r3, sp, #36	; 0x24
 80a66be:	9300      	str	r3, [sp, #0]
 80a66c0:	4620      	mov	r0, r4
 80a66c2:	4633      	mov	r3, r6
 80a66c4:	4958      	ldr	r1, [pc, #352]	; (80a6828 <_tzset_unlocked_r+0x2f4>)
 80a66c6:	9603      	str	r6, [sp, #12]
 80a66c8:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80a66cc:	f7fb ffa0 	bl	80a2610 <siscanf>
 80a66d0:	2803      	cmp	r0, #3
 80a66d2:	f47f af49 	bne.w	80a6568 <_tzset_unlocked_r+0x34>
 80a66d6:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80a66da:	1e4b      	subs	r3, r1, #1
 80a66dc:	2b0b      	cmp	r3, #11
 80a66de:	f63f af43 	bhi.w	80a6568 <_tzset_unlocked_r+0x34>
 80a66e2:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80a66e6:	1e53      	subs	r3, r2, #1
 80a66e8:	2b04      	cmp	r3, #4
 80a66ea:	f63f af3d 	bhi.w	80a6568 <_tzset_unlocked_r+0x34>
 80a66ee:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80a66f2:	2b06      	cmp	r3, #6
 80a66f4:	f63f af38 	bhi.w	80a6568 <_tzset_unlocked_r+0x34>
 80a66f8:	e9c7 1203 	strd	r1, r2, [r7, #12]
 80a66fc:	f887 8008 	strb.w	r8, [r7, #8]
 80a6700:	617b      	str	r3, [r7, #20]
 80a6702:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a6704:	eb04 0803 	add.w	r8, r4, r3
 80a6708:	2302      	movs	r3, #2
 80a670a:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a670e:	2300      	movs	r3, #0
 80a6710:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a6714:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a6718:	930a      	str	r3, [sp, #40]	; 0x28
 80a671a:	f898 3000 	ldrb.w	r3, [r8]
 80a671e:	2b2f      	cmp	r3, #47	; 0x2f
 80a6720:	d109      	bne.n	80a6736 <_tzset_unlocked_r+0x202>
 80a6722:	4633      	mov	r3, r6
 80a6724:	4640      	mov	r0, r8
 80a6726:	e9cd a602 	strd	sl, r6, [sp, #8]
 80a672a:	e9cd b600 	strd	fp, r6, [sp]
 80a672e:	493f      	ldr	r1, [pc, #252]	; (80a682c <_tzset_unlocked_r+0x2f8>)
 80a6730:	aa07      	add	r2, sp, #28
 80a6732:	f7fb ff6d 	bl	80a2610 <siscanf>
 80a6736:	213c      	movs	r1, #60	; 0x3c
 80a6738:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80a673c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80a6740:	3728      	adds	r7, #40	; 0x28
 80a6742:	fb01 2203 	mla	r2, r1, r3, r2
 80a6746:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a674a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80a674e:	fb01 2303 	mla	r3, r1, r3, r2
 80a6752:	f847 3c10 	str.w	r3, [r7, #-16]
 80a6756:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80a6758:	4444      	add	r4, r8
 80a675a:	f1b9 0f00 	cmp.w	r9, #0
 80a675e:	d021      	beq.n	80a67a4 <_tzset_unlocked_r+0x270>
 80a6760:	6868      	ldr	r0, [r5, #4]
 80a6762:	f7ff fe2d 	bl	80a63c0 <__tzcalc_limits>
 80a6766:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80a6768:	4b28      	ldr	r3, [pc, #160]	; (80a680c <_tzset_unlocked_r+0x2d8>)
 80a676a:	601a      	str	r2, [r3, #0]
 80a676c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80a676e:	1a9b      	subs	r3, r3, r2
 80a6770:	bf18      	it	ne
 80a6772:	2301      	movne	r3, #1
 80a6774:	4a27      	ldr	r2, [pc, #156]	; (80a6814 <_tzset_unlocked_r+0x2e0>)
 80a6776:	6013      	str	r3, [r2, #0]
 80a6778:	e6f6      	b.n	80a6568 <_tzset_unlocked_r+0x34>
 80a677a:	2b2b      	cmp	r3, #43	; 0x2b
 80a677c:	f04f 0701 	mov.w	r7, #1
 80a6780:	bf08      	it	eq
 80a6782:	3401      	addeq	r4, #1
 80a6784:	e770      	b.n	80a6668 <_tzset_unlocked_r+0x134>
 80a6786:	213c      	movs	r1, #60	; 0x3c
 80a6788:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80a678c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80a6790:	fb01 2203 	mla	r2, r1, r3, r2
 80a6794:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a6798:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80a679c:	fb01 2303 	mla	r3, r1, r3, r2
 80a67a0:	435f      	muls	r7, r3
 80a67a2:	e778      	b.n	80a6696 <_tzset_unlocked_r+0x162>
 80a67a4:	f04f 0901 	mov.w	r9, #1
 80a67a8:	e77b      	b.n	80a66a2 <_tzset_unlocked_r+0x16e>
 80a67aa:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80a67ae:	bf0a      	itet	eq
 80a67b0:	4643      	moveq	r3, r8
 80a67b2:	2344      	movne	r3, #68	; 0x44
 80a67b4:	3401      	addeq	r4, #1
 80a67b6:	220a      	movs	r2, #10
 80a67b8:	4620      	mov	r0, r4
 80a67ba:	a90b      	add	r1, sp, #44	; 0x2c
 80a67bc:	9305      	str	r3, [sp, #20]
 80a67be:	f7ff fdf5 	bl	80a63ac <strtoul>
 80a67c2:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80a67c6:	9b05      	ldr	r3, [sp, #20]
 80a67c8:	45a0      	cmp	r8, r4
 80a67ca:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80a67ce:	d114      	bne.n	80a67fa <_tzset_unlocked_r+0x2c6>
 80a67d0:	234d      	movs	r3, #77	; 0x4d
 80a67d2:	f1b9 0f00 	cmp.w	r9, #0
 80a67d6:	d107      	bne.n	80a67e8 <_tzset_unlocked_r+0x2b4>
 80a67d8:	2103      	movs	r1, #3
 80a67da:	722b      	strb	r3, [r5, #8]
 80a67dc:	2302      	movs	r3, #2
 80a67de:	f8c5 9014 	str.w	r9, [r5, #20]
 80a67e2:	e9c5 1303 	strd	r1, r3, [r5, #12]
 80a67e6:	e78f      	b.n	80a6708 <_tzset_unlocked_r+0x1d4>
 80a67e8:	220b      	movs	r2, #11
 80a67ea:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 80a67ee:	2301      	movs	r3, #1
 80a67f0:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 80a67f4:	2300      	movs	r3, #0
 80a67f6:	63eb      	str	r3, [r5, #60]	; 0x3c
 80a67f8:	e786      	b.n	80a6708 <_tzset_unlocked_r+0x1d4>
 80a67fa:	b280      	uxth	r0, r0
 80a67fc:	723b      	strb	r3, [r7, #8]
 80a67fe:	6178      	str	r0, [r7, #20]
 80a6800:	e782      	b.n	80a6708 <_tzset_unlocked_r+0x1d4>
 80a6802:	bf00      	nop
 80a6804:	080a79b0 	.word	0x080a79b0
 80a6808:	200004fc 	.word	0x200004fc
 80a680c:	20000504 	.word	0x20000504
 80a6810:	080a79b3 	.word	0x080a79b3
 80a6814:	20000500 	.word	0x20000500
 80a6818:	2000006c 	.word	0x2000006c
 80a681c:	200004ef 	.word	0x200004ef
 80a6820:	080a79b7 	.word	0x080a79b7
 80a6824:	080a79da 	.word	0x080a79da
 80a6828:	080a79c6 	.word	0x080a79c6
 80a682c:	080a79d9 	.word	0x080a79d9
 80a6830:	200004e4 	.word	0x200004e4

080a6834 <abs>:
 80a6834:	2800      	cmp	r0, #0
 80a6836:	bfb8      	it	lt
 80a6838:	4240      	neglt	r0, r0
 80a683a:	4770      	bx	lr

080a683c <div>:
 80a683c:	b510      	push	{r4, lr}
 80a683e:	fb91 f4f2 	sdiv	r4, r1, r2
 80a6842:	2900      	cmp	r1, #0
 80a6844:	fb02 1314 	mls	r3, r2, r4, r1
 80a6848:	db06      	blt.n	80a6858 <div+0x1c>
 80a684a:	2b00      	cmp	r3, #0
 80a684c:	da01      	bge.n	80a6852 <div+0x16>
 80a684e:	3401      	adds	r4, #1
 80a6850:	1a9b      	subs	r3, r3, r2
 80a6852:	e9c0 4300 	strd	r4, r3, [r0]
 80a6856:	bd10      	pop	{r4, pc}
 80a6858:	2b00      	cmp	r3, #0
 80a685a:	bfc4      	itt	gt
 80a685c:	f104 34ff 	addgt.w	r4, r4, #4294967295
 80a6860:	189b      	addgt	r3, r3, r2
 80a6862:	e7f6      	b.n	80a6852 <div+0x16>

080a6864 <_findenv_r>:
 80a6864:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a6868:	4607      	mov	r7, r0
 80a686a:	4689      	mov	r9, r1
 80a686c:	4616      	mov	r6, r2
 80a686e:	f000 f917 	bl	80a6aa0 <__env_lock>
 80a6872:	4b18      	ldr	r3, [pc, #96]	; (80a68d4 <_findenv_r+0x70>)
 80a6874:	681c      	ldr	r4, [r3, #0]
 80a6876:	469a      	mov	sl, r3
 80a6878:	b134      	cbz	r4, 80a6888 <_findenv_r+0x24>
 80a687a:	464b      	mov	r3, r9
 80a687c:	4698      	mov	r8, r3
 80a687e:	f813 1b01 	ldrb.w	r1, [r3], #1
 80a6882:	b139      	cbz	r1, 80a6894 <_findenv_r+0x30>
 80a6884:	293d      	cmp	r1, #61	; 0x3d
 80a6886:	d1f9      	bne.n	80a687c <_findenv_r+0x18>
 80a6888:	4638      	mov	r0, r7
 80a688a:	f000 f90f 	bl	80a6aac <__env_unlock>
 80a688e:	2000      	movs	r0, #0
 80a6890:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a6894:	eba8 0809 	sub.w	r8, r8, r9
 80a6898:	46a3      	mov	fp, r4
 80a689a:	f854 0b04 	ldr.w	r0, [r4], #4
 80a689e:	2800      	cmp	r0, #0
 80a68a0:	d0f2      	beq.n	80a6888 <_findenv_r+0x24>
 80a68a2:	4642      	mov	r2, r8
 80a68a4:	4649      	mov	r1, r9
 80a68a6:	f7ff fc45 	bl	80a6134 <strncmp>
 80a68aa:	2800      	cmp	r0, #0
 80a68ac:	d1f4      	bne.n	80a6898 <_findenv_r+0x34>
 80a68ae:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80a68b2:	eb03 0508 	add.w	r5, r3, r8
 80a68b6:	f813 3008 	ldrb.w	r3, [r3, r8]
 80a68ba:	2b3d      	cmp	r3, #61	; 0x3d
 80a68bc:	d1ec      	bne.n	80a6898 <_findenv_r+0x34>
 80a68be:	f8da 3000 	ldr.w	r3, [sl]
 80a68c2:	4638      	mov	r0, r7
 80a68c4:	ebab 0303 	sub.w	r3, fp, r3
 80a68c8:	109b      	asrs	r3, r3, #2
 80a68ca:	6033      	str	r3, [r6, #0]
 80a68cc:	f000 f8ee 	bl	80a6aac <__env_unlock>
 80a68d0:	1c68      	adds	r0, r5, #1
 80a68d2:	e7dd      	b.n	80a6890 <_findenv_r+0x2c>
 80a68d4:	2000023c 	.word	0x2000023c

080a68d8 <_getenv_r>:
 80a68d8:	b507      	push	{r0, r1, r2, lr}
 80a68da:	aa01      	add	r2, sp, #4
 80a68dc:	f7ff ffc2 	bl	80a6864 <_findenv_r>
 80a68e0:	b003      	add	sp, #12
 80a68e2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a68e8 <__gettzinfo>:
 80a68e8:	4800      	ldr	r0, [pc, #0]	; (80a68ec <__gettzinfo+0x4>)
 80a68ea:	4770      	bx	lr
 80a68ec:	20000078 	.word	0x20000078

080a68f0 <gmtime_r>:
 80a68f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a68f4:	e9d0 6700 	ldrd	r6, r7, [r0]
 80a68f8:	460c      	mov	r4, r1
 80a68fa:	2300      	movs	r3, #0
 80a68fc:	4630      	mov	r0, r6
 80a68fe:	4639      	mov	r1, r7
 80a6900:	4a4f      	ldr	r2, [pc, #316]	; (80a6a40 <gmtime_r+0x150>)
 80a6902:	f000 f8d9 	bl	80a6ab8 <__aeabi_ldivmod>
 80a6906:	4639      	mov	r1, r7
 80a6908:	4605      	mov	r5, r0
 80a690a:	2300      	movs	r3, #0
 80a690c:	4630      	mov	r0, r6
 80a690e:	4a4c      	ldr	r2, [pc, #304]	; (80a6a40 <gmtime_r+0x150>)
 80a6910:	f000 f8d2 	bl	80a6ab8 <__aeabi_ldivmod>
 80a6914:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a6918:	2a00      	cmp	r2, #0
 80a691a:	bfbc      	itt	lt
 80a691c:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80a6920:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80a6924:	fbb2 f3f1 	udiv	r3, r2, r1
 80a6928:	fb01 2213 	mls	r2, r1, r3, r2
 80a692c:	f04f 013c 	mov.w	r1, #60	; 0x3c
 80a6930:	60a3      	str	r3, [r4, #8]
 80a6932:	fbb2 f3f1 	udiv	r3, r2, r1
 80a6936:	fb01 2213 	mls	r2, r1, r3, r2
 80a693a:	6022      	str	r2, [r4, #0]
 80a693c:	f04f 0207 	mov.w	r2, #7
 80a6940:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 80a6944:	bfac      	ite	ge
 80a6946:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 80a694a:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 80a694e:	6063      	str	r3, [r4, #4]
 80a6950:	1cc3      	adds	r3, r0, #3
 80a6952:	fb93 f2f2 	sdiv	r2, r3, r2
 80a6956:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a695a:	1a9b      	subs	r3, r3, r2
 80a695c:	bf48      	it	mi
 80a695e:	3307      	addmi	r3, #7
 80a6960:	2800      	cmp	r0, #0
 80a6962:	4938      	ldr	r1, [pc, #224]	; (80a6a44 <gmtime_r+0x154>)
 80a6964:	61a3      	str	r3, [r4, #24]
 80a6966:	bfbd      	ittte	lt
 80a6968:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 80a696c:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 80a6970:	fb93 f1f1 	sdivlt	r1, r3, r1
 80a6974:	fb90 f1f1 	sdivge	r1, r0, r1
 80a6978:	f648 62ac 	movw	r2, #36524	; 0x8eac
 80a697c:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 80a6980:	4b31      	ldr	r3, [pc, #196]	; (80a6a48 <gmtime_r+0x158>)
 80a6982:	f240 176d 	movw	r7, #365	; 0x16d
 80a6986:	fb03 0001 	mla	r0, r3, r1, r0
 80a698a:	fbb0 f2f2 	udiv	r2, r0, r2
 80a698e:	fbb0 f3fc 	udiv	r3, r0, ip
 80a6992:	4402      	add	r2, r0
 80a6994:	1ad2      	subs	r2, r2, r3
 80a6996:	4b2d      	ldr	r3, [pc, #180]	; (80a6a4c <gmtime_r+0x15c>)
 80a6998:	2664      	movs	r6, #100	; 0x64
 80a699a:	fbb0 f3f3 	udiv	r3, r0, r3
 80a699e:	1ad3      	subs	r3, r2, r3
 80a69a0:	fbb3 f5f7 	udiv	r5, r3, r7
 80a69a4:	fbb3 f3fc 	udiv	r3, r3, ip
 80a69a8:	fbb5 f2f6 	udiv	r2, r5, r6
 80a69ac:	1ad3      	subs	r3, r2, r3
 80a69ae:	4403      	add	r3, r0
 80a69b0:	2099      	movs	r0, #153	; 0x99
 80a69b2:	fb07 3315 	mls	r3, r7, r5, r3
 80a69b6:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 80a69ba:	f10c 0c02 	add.w	ip, ip, #2
 80a69be:	fbbc f7f0 	udiv	r7, ip, r0
 80a69c2:	f04f 0805 	mov.w	r8, #5
 80a69c6:	4378      	muls	r0, r7
 80a69c8:	3002      	adds	r0, #2
 80a69ca:	fbb0 f0f8 	udiv	r0, r0, r8
 80a69ce:	f103 0e01 	add.w	lr, r3, #1
 80a69d2:	ebae 0000 	sub.w	r0, lr, r0
 80a69d6:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 80a69da:	45f4      	cmp	ip, lr
 80a69dc:	bf94      	ite	ls
 80a69de:	f04f 0c02 	movls.w	ip, #2
 80a69e2:	f06f 0c09 	mvnhi.w	ip, #9
 80a69e6:	4467      	add	r7, ip
 80a69e8:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 80a69ec:	fb0c 5101 	mla	r1, ip, r1, r5
 80a69f0:	2f01      	cmp	r7, #1
 80a69f2:	bf98      	it	ls
 80a69f4:	3101      	addls	r1, #1
 80a69f6:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80a69fa:	d30c      	bcc.n	80a6a16 <gmtime_r+0x126>
 80a69fc:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80a6a00:	61e3      	str	r3, [r4, #28]
 80a6a02:	2300      	movs	r3, #0
 80a6a04:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 80a6a08:	60e0      	str	r0, [r4, #12]
 80a6a0a:	e9c4 7104 	strd	r7, r1, [r4, #16]
 80a6a0e:	4620      	mov	r0, r4
 80a6a10:	6223      	str	r3, [r4, #32]
 80a6a12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a6a16:	f015 0f03 	tst.w	r5, #3
 80a6a1a:	d102      	bne.n	80a6a22 <gmtime_r+0x132>
 80a6a1c:	fb06 5212 	mls	r2, r6, r2, r5
 80a6a20:	b95a      	cbnz	r2, 80a6a3a <gmtime_r+0x14a>
 80a6a22:	f44f 76c8 	mov.w	r6, #400	; 0x190
 80a6a26:	fbb5 f2f6 	udiv	r2, r5, r6
 80a6a2a:	fb06 5212 	mls	r2, r6, r2, r5
 80a6a2e:	fab2 f282 	clz	r2, r2
 80a6a32:	0952      	lsrs	r2, r2, #5
 80a6a34:	333b      	adds	r3, #59	; 0x3b
 80a6a36:	4413      	add	r3, r2
 80a6a38:	e7e2      	b.n	80a6a00 <gmtime_r+0x110>
 80a6a3a:	2201      	movs	r2, #1
 80a6a3c:	e7fa      	b.n	80a6a34 <gmtime_r+0x144>
 80a6a3e:	bf00      	nop
 80a6a40:	00015180 	.word	0x00015180
 80a6a44:	00023ab1 	.word	0x00023ab1
 80a6a48:	fffdc54f 	.word	0xfffdc54f
 80a6a4c:	00023ab0 	.word	0x00023ab0

080a6a50 <labs>:
 80a6a50:	2800      	cmp	r0, #0
 80a6a52:	bfb8      	it	lt
 80a6a54:	4240      	neglt	r0, r0
 80a6a56:	4770      	bx	lr

080a6a58 <__retarget_lock_acquire>:
 80a6a58:	4770      	bx	lr

080a6a5a <__retarget_lock_acquire_recursive>:
 80a6a5a:	4770      	bx	lr

080a6a5c <__retarget_lock_release>:
 80a6a5c:	4770      	bx	lr

080a6a5e <__retarget_lock_release_recursive>:
 80a6a5e:	4770      	bx	lr

080a6a60 <__ascii_mbtowc>:
 80a6a60:	b082      	sub	sp, #8
 80a6a62:	b901      	cbnz	r1, 80a6a66 <__ascii_mbtowc+0x6>
 80a6a64:	a901      	add	r1, sp, #4
 80a6a66:	b142      	cbz	r2, 80a6a7a <__ascii_mbtowc+0x1a>
 80a6a68:	b14b      	cbz	r3, 80a6a7e <__ascii_mbtowc+0x1e>
 80a6a6a:	7813      	ldrb	r3, [r2, #0]
 80a6a6c:	600b      	str	r3, [r1, #0]
 80a6a6e:	7812      	ldrb	r2, [r2, #0]
 80a6a70:	1e10      	subs	r0, r2, #0
 80a6a72:	bf18      	it	ne
 80a6a74:	2001      	movne	r0, #1
 80a6a76:	b002      	add	sp, #8
 80a6a78:	4770      	bx	lr
 80a6a7a:	4610      	mov	r0, r2
 80a6a7c:	e7fb      	b.n	80a6a76 <__ascii_mbtowc+0x16>
 80a6a7e:	f06f 0001 	mvn.w	r0, #1
 80a6a82:	e7f8      	b.n	80a6a76 <__ascii_mbtowc+0x16>

080a6a84 <__ascii_wctomb>:
 80a6a84:	4603      	mov	r3, r0
 80a6a86:	4608      	mov	r0, r1
 80a6a88:	b141      	cbz	r1, 80a6a9c <__ascii_wctomb+0x18>
 80a6a8a:	2aff      	cmp	r2, #255	; 0xff
 80a6a8c:	d904      	bls.n	80a6a98 <__ascii_wctomb+0x14>
 80a6a8e:	228a      	movs	r2, #138	; 0x8a
 80a6a90:	f04f 30ff 	mov.w	r0, #4294967295
 80a6a94:	601a      	str	r2, [r3, #0]
 80a6a96:	4770      	bx	lr
 80a6a98:	2001      	movs	r0, #1
 80a6a9a:	700a      	strb	r2, [r1, #0]
 80a6a9c:	4770      	bx	lr
	...

080a6aa0 <__env_lock>:
 80a6aa0:	4801      	ldr	r0, [pc, #4]	; (80a6aa8 <__env_lock+0x8>)
 80a6aa2:	f7ff bfda 	b.w	80a6a5a <__retarget_lock_acquire_recursive>
 80a6aa6:	bf00      	nop
 80a6aa8:	20000512 	.word	0x20000512

080a6aac <__env_unlock>:
 80a6aac:	4801      	ldr	r0, [pc, #4]	; (80a6ab4 <__env_unlock+0x8>)
 80a6aae:	f7ff bfd6 	b.w	80a6a5e <__retarget_lock_release_recursive>
 80a6ab2:	bf00      	nop
 80a6ab4:	20000512 	.word	0x20000512

080a6ab8 <__aeabi_ldivmod>:
 80a6ab8:	b97b      	cbnz	r3, 80a6ada <__aeabi_ldivmod+0x22>
 80a6aba:	b972      	cbnz	r2, 80a6ada <__aeabi_ldivmod+0x22>
 80a6abc:	2900      	cmp	r1, #0
 80a6abe:	bfbe      	ittt	lt
 80a6ac0:	2000      	movlt	r0, #0
 80a6ac2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80a6ac6:	e006      	blt.n	80a6ad6 <__aeabi_ldivmod+0x1e>
 80a6ac8:	bf08      	it	eq
 80a6aca:	2800      	cmpeq	r0, #0
 80a6acc:	bf1c      	itt	ne
 80a6ace:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80a6ad2:	f04f 30ff 	movne.w	r0, #4294967295
 80a6ad6:	f7fe b99d 	b.w	80a4e14 <__aeabi_idiv0>
 80a6ada:	f1ad 0c08 	sub.w	ip, sp, #8
 80a6ade:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80a6ae2:	2900      	cmp	r1, #0
 80a6ae4:	db09      	blt.n	80a6afa <__aeabi_ldivmod+0x42>
 80a6ae6:	2b00      	cmp	r3, #0
 80a6ae8:	db1a      	blt.n	80a6b20 <__aeabi_ldivmod+0x68>
 80a6aea:	f7fe f831 	bl	80a4b50 <__udivmoddi4>
 80a6aee:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a6af2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a6af6:	b004      	add	sp, #16
 80a6af8:	4770      	bx	lr
 80a6afa:	4240      	negs	r0, r0
 80a6afc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a6b00:	2b00      	cmp	r3, #0
 80a6b02:	db1b      	blt.n	80a6b3c <__aeabi_ldivmod+0x84>
 80a6b04:	f7fe f824 	bl	80a4b50 <__udivmoddi4>
 80a6b08:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a6b0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a6b10:	b004      	add	sp, #16
 80a6b12:	4240      	negs	r0, r0
 80a6b14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a6b18:	4252      	negs	r2, r2
 80a6b1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a6b1e:	4770      	bx	lr
 80a6b20:	4252      	negs	r2, r2
 80a6b22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a6b26:	f7fe f813 	bl	80a4b50 <__udivmoddi4>
 80a6b2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a6b2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a6b32:	b004      	add	sp, #16
 80a6b34:	4240      	negs	r0, r0
 80a6b36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a6b3a:	4770      	bx	lr
 80a6b3c:	4252      	negs	r2, r2
 80a6b3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a6b42:	f7fe f805 	bl	80a4b50 <__udivmoddi4>
 80a6b46:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a6b4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a6b4e:	b004      	add	sp, #16
 80a6b50:	4252      	negs	r2, r2
 80a6b52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a6b56:	4770      	bx	lr

080a6b58 <dynalib_user>:
 80a6b58:	001d 080a 005d 080a 0085 080a 0089 080a     ....]...........
 80a6b68:	0000 0000 4544 5542 0047 616f 7475 5f68     ....DEBUG.oauth_
 80a6b78:	7375 5f72 6f63 6564 6f00 7561 6874 705f     usr_code.oauth_p
 80a6b88:	6c6f 5f6c 7561 6874 6f00 7561 6874 725f     oll_auth.oauth_r
 80a6b98:	6665 745f 6b6f 6e65 6800 6f6f 2d6b 6572     ef_token.hook-re
 80a6ba8:	7073 6e6f 6573 6800 6f6f 2d6b 7265 6f72     sponse.hook-erro
 80a6bb8:	0072 0a0d 6854 7369 6120 7070 696c 6163     r...This applica
 80a6bc8:	6974 6e6f 7220 7165 6975 6572 2073 6f79     tion requires yo
 80a6bd8:	7275 7020 7265 696d 7373 6f69 206e 6f74     ur permission to
 80a6be8:	6120 6363 7365 2073 6f79 7275 4720 6f6f      access your Goo
 80a6bf8:	6c67 2065 6143 656c 646e 7261 002e 0a0d     gle Calendar....
 80a6c08:	6c50 6165 6573 202c 6f67 7420 3a6f 0020     Please, go to: .
 80a6c18:	202c 6e61 2064 6e65 6574 2072 6874 2065     , and enter the 
 80a6c28:	6f66 6c6c 776f 6e69 2067 6f63 6564 203a     following code: 
 80a6c38:	0d00 000a 6544 6976 6563 6120 7475 6f68     ....Device autho
 80a6c48:	6972 657a 2164 4100 6363 7365 2073 6f74     rized!.Access to
 80a6c58:	656b 206e 6572 7266 7365 6568 2164 5200     ken refreshed!.R
 80a6c68:	7365 3a70 4f20 7541 6874 5f32 7453 7461     esp: OAuth2_Stat
 80a6c78:	2065 6f4e 2074 6553 2174 2121 0d00 480a     e Not Set!!!...H
 80a6c88:	5454 2050 5245 4f52 2052 202d 6425 0d00     TTP ERROR - %d..
 80a6c98:	450a 7272 726f 203a 6e49 6176 696c 2064     .Error: Invalid 
 80a6ca8:	6c63 6569 746e 6920 2e64 4100 7475 6f68     client id..Autho
 80a6cb8:	6972 617a 6974 6e6f 7020 6e65 6964 676e     rization pending
 80a6cc8:	2e2e 002e 0a0d 7245 6f72 3a72 4120 6363     ......Error: Acc
 80a6cd8:	7365 2073 6564 696e 6465 002e 0a0d 7245     ess denied....Er
 80a6ce8:	6f72 3a72 4920 766e 6c61 6469 6320 696c     ror: Invalid cli
 80a6cf8:	6e65 2074 6573 7263 7465 002e 0a0d 7245     ent secret....Er
 80a6d08:	6f72 3a72 4920 766e 6c61 6469 7220 7165     ror: Invalid req
 80a6d18:	6575 7473 002e 5448 5054 4520 5252 524f     uest..HTTP ERROR
 80a6d28:	203a 5400 6b6f 6e65 7420 6d69 6f65 7475     : .Token timeout
 80a6d38:	203a 6552 7266 7365 6968 676e 2e2e 002e     : Refreshing....
 80a6d48:	682f 6f6f 2d6b 6572 7073 6e6f 6573 002f     /hook-response/.
 80a6d58:	682f 6f6f 2d6b 7265 6f72 2f72 7b00 6322     /hook-error/.{"c
 80a6d68:	696c 6e65 5f74 6469 3a22 2522 2273 007d     lient_id":"%s"}.
 80a6d78:	7355 7265 6320 646f 2065 6572 7571 7365     User code reques
 80a6d88:	2074 6573 746e 0021 227b 6c63 6569 746e     t sent!.{"client
 80a6d98:	695f 2264 223a 7325 2c22 6322 696c 6e65     _id":"%s","clien
 80a6da8:	5f74 6573 7263 7465 3a22 2522 2273 222c     t_secret":"%s","
 80a6db8:	6f63 6564 3a22 2522 2273 007d 7245 6f72     code":"%s"}.Erro
 80a6dc8:	3a72 5520 6573 2072 6f63 6564 6820 7361     r: User code has
 80a6dd8:	6520 7078 7269 6465 002e 227b 6572 7266      expired..{"refr
 80a6de8:	7365 5f68 6f74 656b 226e 223a 7325 2c22     esh_token":"%s",
 80a6df8:	6322 696c 6e65 5f74 6469 3a22 2522 2273     "client_id":"%s"
 80a6e08:	222c 6c63 6569 746e 735f 6365 6572 2274     ,"client_secret"
 80a6e18:	223a 7325 7d22 5200 6665 6572 6873 7420     :"%s"}.Refresh t
 80a6e28:	6b6f 6e65 7220 7165 6575 7473 7320 6e65     oken request sen
 80a6e38:	0074 6157 7469 6e69 3a67 4f20 7541 6874     t.Waiting: OAuth
 80a6e48:	2032 6572 7073 6e6f 6573 2e2e 002e 4954     2 response....TI
 80a6e58:	454d 554f 2054 616f 7475 3268 7720 6961     MEOUT oauth2 wai
 80a6e68:	6974 676e 6620 726f 6120 7220 7365 6f70     ting for a respo
 80a6e78:	736e 2e65 2e2e 4400 7665 6369 2065 7541     nse....Device Au
 80a6e88:	6874 726f 7a69 6465 0021 6f4c 706f 203a     thorized!.Loop: 
 80a6e98:	414f 7475 3268 535f 6174 6574 4e20 746f     OAuth2_State Not
 80a6ea8:	5320 7465 2121 0021 6d45 7470 0079 0000      Set!!!.Empty...
	...
 80a70b0:	6163 656c 646e 7261 655f 6576 746e 2d00     calendar_event.-
 80a70c0:	3730 303a 0030 227b 6163 656c 646e 7261     07:00.{"calendar
 80a70d0:	695f 2264 223a 7325 2c22 6122 6363 7365     _id":"%s","acces
 80a70e0:	5f73 6f74 656b 226e 223a 7325 2c22 7422     s_token":"%s","t
 80a70f0:	6d69 5f65 696d 226e 223a 7325 2c22 7422     ime_min":"%s","t
 80a7100:	6d69 5f65 616d 2278 223a 7325 7d22 2500     ime_max":"%s"}.%
 80a7110:	2d64 6425 252d 2064 6425 253a 3230 3a64     d-%d-%d %d:%02d:
 80a7120:	3025 6432 7e00 7e7e 0d00 450a 7272 726f     %02d.~~~...Error
 80a7130:	203a 6854 2065 6572 7571 7365 6574 2064     : The requested 
 80a7140:	726f 6564 6972 676e 6920 2073 6f6e 2074     ordering is not 
 80a7150:	7661 6961 616c 6c62 2065 6f66 2072 6874     available for th
 80a7160:	2065 6170 7472 6369 6c75 7261 7120 6575     e particular que
 80a7170:	7972 002e 0a0d 7245 6f72 3a72 4920 766e     ry....Error: Inv
 80a7180:	6c61 6469 6320 6572 6564 746e 6169 736c     alid credentials
 80a7190:	002e 0a0d 7245 6f72 3a72 4920 766e 6c61     ....Error: Inval
 80a71a0:	6469 6320 6c61 6e65 6164 2072 6469 002e     id calendar id..
 80a71b0:	7453 6761 2065 6863 6e61 6567 2064 6f74     Stage changed to
 80a71c0:	203a 414f 5455 3248 5300 6174 6567 203a     : OAUTH2.Stage: 
 80a71d0:	4143 454c 444e 5241 5300 6174 6567 203a     CALENDAR.Stage: 
 80a71e0:	4157 5449 4e49 0047 7453 6761 3a65 4520     WAITING.Stage: E
 80a71f0:	4556 544e 545f 4f4f 4c5f 4e4f 0047 7453     VENT_TOO_LONG.St
 80a7200:	6761 3a65 5020 4e45 4944 474e 5300 6174     age: PENDING.Sta
 80a7210:	6567 203a 4341 4954 4556 4100 7463 6576     ge: ACTIVE.Actve
 80a7220:	203a 5300 6174 6567 203a 414d 554e 4c41     : .Stage: MANUAL
 80a7230:	4100 7070 5320 6174 6567 4620 6961 756c     .App Stage Failu
 80a7240:	6572 4d00 6e61 6175 3a6c 5220 6c65 7961     re.Manual: Relay
 80a7250:	2520 0064 6954 656d 5220 6d65 6961 696e      %d.Time Remaini
 80a7260:	676e 4300 7275 6572 746e 5320 6174 6574     ng.Current State
 80a7270:	4d00 6d65 726f 0079 6552 6461 4320 6c61     .Memory.Read Cal
 80a7280:	6e65 6164 2072 3128 7220 6165 2964 4500     endar (1 read).E
 80a7290:	6172 6573 5420 6b6f 6e65 2820 2031 7265     rase Token (1 er
 80a72a0:	7361 2965 5200 6c65 7961 4f20 206e 3028     ase).Relay On (0
 80a72b0:	6120 6c6c 0029 6552 616c 2079 664f 2066      all).Relay Off 
 80a72c0:	3028 6120 6c6c 0029 6552 616c 2079 2031     (0 all).Relay 1 
 80a72d0:	694d 006e 6552 616c 2079 2032 694d 006e     Min.Relay 2 Min.
 80a72e0:	6552 616c 2079 2033 694d 006e 7245 7361     Relay 3 Min.Eras
 80a72f0:	2065 6f54 656b 006e 614f 7475 3268 6120     e Token.Oauth2 a
 80a7300:	726c 6165 7964 6120 7475 6568 696e 6163     lready authenica
 80a7310:	6574 0064 414f 7475 3268 5720 4941 4954     ted.OAuth2 WAITI
 80a7320:	474e 4f00 7541 6874 2e32 6166 6c69 6465     NG.OAuth2.failed
 80a7330:	2928 5000 6e65 6964 676e 203a 4e00 206f     ().Pending: .No 
 80a7340:	6570 646e 6e69 2067 7665 6e65 7374 0021     pending events!.
 80a7350:	6157 7469 6e69 0067 6143 656c 646e 7261     Waiting.Calendar
 80a7360:	6520 6576 746e 7020 6275 696c 6873 6465      event published
 80a7370:	0021 614d 2078 7645 6e65 2074 6954 656d     !.Max Event Time
 80a7380:	4520 6378 6565 6564 0064 7250 7365 2073      Exceeded.Press 
 80a7390:	6552 6573 2074 7542 7474 6e6f 3300 3535     Reset Button.355
 80a73a0:	3833 3132 3838 3131 2d39 3031 6832 7674     382188119-102htv
 80a73b0:	6966 6e69 6471 3063 7370 3065 3065 7539     fiinqdc0pse0e09u
 80a73c0:	6b71 3676 6c38 6a33 3736 612e 7070 2e73     qkv68l3j67.apps.
 80a73d0:	6f67 676f 656c 7375 7265 6f63 746e 6e65     googleuserconten
 80a73e0:	2e74 6f63 006d 5156 6d4f 6e34 4a43 7a4a     t.com.VQOm4nCJJz
 80a73f0:	7558 3343 7937 5962 6a33 5769 386c 3100     XuC37ybY3jiWl8.1
 80a7400:	3367 6730 3539 6561 6a67 6631 6f70 7433     g30g95aegj1fpo3t
 80a7410:	7034 6e37 6865 7368 406b 7267 756f 2e70     4p7nehhsk@group.
 80a7420:	6163 656c 646e 7261 672e 6f6f 6c67 2e65     calendar.google.
 80a7430:	6f63 006d                                   com.

080a7434 <_ZL9TIME_ZONE>:
 80a7434:	56f9 6765 5400 6d6f 4600 6f72 5200 6c65     .Veg.Tom.Fro.Rel
 80a7444:	7961 5320 7465 7075 4320 6d6f 6c70 7465     ay Setup Complet
 80a7454:	0065 6572 616c 3179 3d20 4f20 004e 6572     e.relay1 = ON.re
 80a7464:	616c 3179 3d20 4f20 4646 7200 6c65 7961     lay1 = OFF.relay
 80a7474:	2032 203d 4e4f 7200 6c65 7961 2032 203d     2 = ON.relay2 = 
 80a7484:	464f 0046 6572 616c 3379 3d20 4f20 004e     OFF.relay3 = ON.
 80a7494:	6572 616c 3379 3d20 4f20 4646 5400 7275     relay3 = OFF.Tur
 80a74a4:	696e 676e 6f20 6666 7220 6c65 7961 0073     ning off relays.
 80a74b4:	7061 0070 2b25 3330 3a64 3025 7532 2500     app.%+03d:%02u.%
 80a74c4:	2d59 6d25 252d 5464 4825 253a 3a4d 5325     Y-%m-%dT%H:%M:%S
 80a74d4:	7a25 6100 6373 6974 656d 0000               %z.asctime..

080a74e0 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a74e8:	3059 080a 305f 080a 309d 080a 306d 080a     Y0.._0...0..m0..
 80a74f8:	305b 080a                                   [0..

080a74fc <_ZTV9IPAddress>:
	...
 80a7504:	35ff 080a 35fd 080a 3631 080a               .5...5..16..

080a7510 <_ZTV9USBSerial>:
	...
 80a7518:	36c9 080a 372f 080a 3707 080a 2a69 080a     .6../7...7..i*..
 80a7528:	36f9 080a 36cb 080a 36db 080a 3729 080a     .6...6...6..)7..
 80a7538:	36eb 080a 36c5 080a                         .6...6..

080a7540 <_ZTV11USARTSerial>:
	...
 80a7548:	3825 080a 388d 080a 3869 080a 2a69 080a     %8...8..i8..i*..
 80a7558:	3839 080a 3855 080a 3847 080a 3863 080a     98..U8..G8..c8..
 80a7568:	3827 080a 382b 080a                         '8..+8..

080a7570 <_ZTV7TwoWire>:
	...
 80a7578:	3975 080a 39bf 080a 3997 080a 3977 080a     u9...9...9..w9..
 80a7588:	399f 080a 39a7 080a 39af 080a 39b7 080a     .9...9...9...9..

080a7598 <_ZTVN5spark9WiFiClassE>:
	...
 80a75a0:	3a87 080a 3a7d 080a 3a73 080a 39f1 080a     .:..}:..s:...9..
 80a75b0:	2af5 080a 3a67 080a 3ae5 080a 3aed 080a     .*..g:...:...:..
 80a75c0:	3a5b 080a 3a53 080a 3a49 080a 3a3f 080a     [:..S:..I:..?:..
 80a75d0:	39fb 080a                                   .9..

080a75d4 <_ZTVN5spark12NetworkClassE>:
	...
 80a75dc:	3aa5 080a 3aaf 080a 3ab9 080a 3ac3 080a     .:...:...:...:..
 80a75ec:	3acd 080a 3ad9 080a 3ae5 080a 3aed 080a     .:...:...:...:..
 80a75fc:	3af5 080a 3b01 080a 3b09 080a 3b13 080a     .:...;...;...;..
 80a760c:	3b1d 080a                                   .;..

080a7610 <_ZSt7nothrow>:
 80a7610:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
 80a7620:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

080a7631 <day_name.4782>:
 80a7631:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 80a7641:	6972 6153                                    riSat

080a7646 <mon_name.4783>:
 80a7646:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 80a7656:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 80a7666:	4476 6365 0000                              vDec..

080a766c <DAYS_IN_MONTH>:
 80a766c:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 80a767c:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a768c:	001e 0000 001f 0000 001e 0000 001f 0000     ................

080a769c <_DAYS_BEFORE_MONTH>:
 80a769c:	0000 0000 001f 0000 003b 0000 005a 0000     ........;...Z...
 80a76ac:	0078 0000 0097 0000 00b5 0000 00d4 0000     x...............
 80a76bc:	00f3 0000 0111 0000 0130 0000 014e 0000     ........0...N...

080a76cc <__month_lengths>:
 80a76cc:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 80a76dc:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a76ec:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a76fc:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 80a770c:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a771c:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a772c:	7325 2e25 642a 2500 2573 2e30 642a 2b00     %s%.*d.%s%0.*d.+
 80a773c:	2d00 2500 6432 2500 322e 2f64 2e25 6432     .-.%2d.%.2d/%.2d
 80a774c:	252f 322e 0064 6c25 0075 2d59 6d25 252d     /%.2d.%lu.Y-%m-%
 80a775c:	0064 2a2e 0075 2e25 6433 2500 6c6c 0064     d..*u.%.3d.%lld.
 80a776c:	2e25 6432 253a 322e 3a64 2e25 6432 2500     %.2d:%.2d:%.2d.%
 80a777c:	302b 6c33 2564 322e 646c 4a00 6e61 4600     +03ld%.2ld.Jan.F
 80a778c:	6265 4d00 7261 4100 7270 4d00 7961 4a00     eb.Mar.Apr.May.J
 80a779c:	6e75 4a00 6c75 4100 6775 5300 7065 4f00     un.Jul.Aug.Sep.O
 80a77ac:	7463 4e00 766f 4400 6365 4a00 6e61 6175     ct.Nov.Dec.Janua
 80a77bc:	7972 4600 6265 7572 7261 0079 614d 6372     ry.February.Marc
 80a77cc:	0068 7041 6972 006c 754a 656e 4a00 6c75     h.April.June.Jul
 80a77dc:	0079 7541 7567 7473 5300 7065 6574 626d     y.August.Septemb
 80a77ec:	7265 4f00 7463 626f 7265 4e00 766f 6d65     er.October.Novem
 80a77fc:	6562 0072 6544 6563 626d 7265 5300 6e75     ber.December.Sun
 80a780c:	4d00 6e6f 5400 6575 5700 6465 5400 7568     .Mon.Tue.Wed.Thu
 80a781c:	4600 6972 5300 7461 5300 6e75 6164 0079     .Fri.Sat.Sunday.
 80a782c:	6f4d 646e 7961 5400 6575 6473 7961 5700     Monday.Tuesday.W
 80a783c:	6465 656e 6473 7961 5400 7568 7372 6164     ednesday.Thursda
 80a784c:	0079 7246 6469 7961 5300 7461 7275 6164     y.Friday.Saturda
 80a785c:	0079 4825 253a 3a4d 5325 2500 2f6d 6425     y.%H:%M:%S.%m/%d
 80a786c:	252f 0079 6125 2520 2062 6525 2520 3a48     /%y.%a %b %e %H:
 80a787c:	4d25 253a 2053 5925 4100 004d 4d50 2500     %M:%S %Y.AM.PM.%
 80a788c:	2061 6225 2520 2065 4825 253a 3a4d 5325     a %b %e %H:%M:%S
 80a789c:	2520 205a 5925 6d00 0064 4925 253a 3a4d      %Z %Y.md.%I:%M:
 80a78ac:	5325 2520 0070 0000                         %S %p...

080a78b4 <_C_time_locale>:
 80a78b4:	7787 080a 778b 080a 778f 080a 7793 080a     .w...w...w...w..
 80a78c4:	7797 080a 779b 080a 779f 080a 77a3 080a     .w...w...w...w..
 80a78d4:	77a7 080a 77ab 080a 77af 080a 77b3 080a     .w...w...w...w..
 80a78e4:	77b7 080a 77bf 080a 77c8 080a 77ce 080a     .w...w...w...w..
 80a78f4:	7797 080a 77d4 080a 77d9 080a 77de 080a     .w...w...w...w..
 80a7904:	77e5 080a 77ef 080a 77f7 080a 7800 080a     .w...w...w...x..
 80a7914:	7809 080a 780d 080a 7811 080a 7815 080a     .x...x...x...x..
 80a7924:	7819 080a 781d 080a 7821 080a 7825 080a     .x...x..!x..%x..
 80a7934:	782c 080a 7833 080a 783b 080a 7845 080a     ,x..3x..;x..Ex..
 80a7944:	784e 080a 7855 080a 785e 080a 7867 080a     Nx..Ux..^x..gx..
 80a7954:	7870 080a 7885 080a 7888 080a 788b 080a     px...x...x...x..
 80a7964:	77b7 080a 77bf 080a 77c8 080a 77ce 080a     .w...w...w...w..
 80a7974:	7797 080a 77d4 080a 77d9 080a 77de 080a     .w...w...w...w..
 80a7984:	77e5 080a 77ef 080a 77f7 080a 7800 080a     .w...w...w...x..
 80a7994:	78a3 080a 78a6 080a 6c3b 080a 6c3b 080a     .x...x..;l..;l..
 80a79a4:	6c3b 080a 6c3b 080a 6c3b 080a 5a54 4700     ;l..;l..;l..TZ.G
 80a79b4:	544d 2500 3031 5e5b 2d30 2c39 2d2b 255d     MT.%10[^0-9,+-]%
 80a79c4:	006e 254d 7568 6e25 252e 7568 6e25 252e     n.M%hu%n.%hu%n.%
 80a79d4:	7568 6e25 2f00 6825 2575 3a6e 6825 2575     hu%n./%hu%n:%hu%
 80a79e4:	3a6e 6825 2575 006e                         n:%hu%n.

080a79ec <_ctype_>:
 80a79ec:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 80a79fc:	2020 2020 2020 2020 2020 2020 2020 2020                     
 80a7a0c:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 80a7a1c:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 80a7a2c:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 80a7a3c:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 80a7a4c:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 80a7a5c:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 80a7a6c:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
 80a7aec:	4300 5000 534f 5849                          .C.POSIX.

080a7af5 <link_const_variable_data_end>:
 80a7af5:	00          	.byte	0x00
	...

080a7af8 <link_constructors_location>:
 80a7af8:	080a0d19 	.word	0x080a0d19
 80a7afc:	080a1545 	.word	0x080a1545
 80a7b00:	080a1e45 	.word	0x080a1e45
 80a7b04:	080a2169 	.word	0x080a2169
 80a7b08:	080a26e1 	.word	0x080a26e1
 80a7b0c:	080a2b11 	.word	0x080a2b11
 80a7b10:	080a2ea9 	.word	0x080a2ea9
 80a7b14:	080a2ef1 	.word	0x080a2ef1
 80a7b18:	080a3a91 	.word	0x080a3a91
 80a7b1c:	080a3b6d 	.word	0x080a3b6d
 80a7b20:	080a3c9d 	.word	0x080a3c9d

080a7b24 <link_constructors_end>:
	...
